#ifndef PSANA_CONTROL_DDL_H
#define PSANA_CONTROL_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include "pdsdata/xtc/ClockTime.hh"
namespace Psana {
namespace ControlData {

/** Class: PVControl
  
*/

#pragma pack(push,4)

class PVControl {
public:
  enum {NameSize = 32};
  enum {NoArray = 0xFFFFFFFF};
  PVControl()
  {
  }
  PVControl(const char* arg__name, uint32_t arg__index, double arg__value)
    : _index(arg__index), _value(arg__value)
  {
    std::copy(arg__name, arg__name+(32), _name);
  }
  const char* name() const {return &_name[0];}
  uint32_t index() const {return _index;}
  double value() const {return _value;}
  uint8_t array() const;
  static uint32_t _sizeof()  {return ((0+(1*(32)))+4)+8;}
  std::vector<int> name_shape() const;
private:
  char	_name[32];
  uint32_t	_index;
  double	_value;
};
#pragma pack(pop)

/** Class: PVMonitor
  
*/

#pragma pack(push,4)

class PVMonitor {
public:
  enum {NameSize = 32};
  enum {NoArray = 0xFFFFFFFF};
  PVMonitor()
  {
  }
  PVMonitor(const char* arg__name, uint32_t arg__index, double arg__loValue, double arg__hiValue)
    : _index(arg__index), _loValue(arg__loValue), _hiValue(arg__hiValue)
  {
    std::copy(arg__name, arg__name+(32), _name);
  }
  const char* name() const {return &_name[0];}
  uint32_t index() const {return _index;}
  double loValue() const {return _loValue;}
  double hiValue() const {return _hiValue;}
  uint8_t array() const;
  static uint32_t _sizeof()  {return (((0+(1*(32)))+4)+8)+8;}
  std::vector<int> name_shape() const;
private:
  char	_name[32];
  uint32_t	_index;
  double	_loValue;
  double	_hiValue;
};
#pragma pack(pop)

/** Class: ConfigV1
  
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_ControlConfig};
  virtual ~ConfigV1();
  virtual const Pds::ClockTime& duration() const = 0;
  virtual uint32_t npvControls() const = 0;
  virtual uint32_t npvMonitors() const = 0;
  virtual const ControlData::PVControl& pvControls(uint32_t i0) const = 0;
  virtual const ControlData::PVMonitor& pvMonitors(uint32_t i0) const = 0;
  virtual std::vector<int> pvControls_shape() const = 0;
  virtual std::vector<int> pvMonitors_shape() const = 0;
};
} // namespace ControlData
} // namespace Psana
#endif // PSANA_CONTROL_DDL_H
