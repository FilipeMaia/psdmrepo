#ifndef PSANA_CSPAD2X2_DDL_H
#define PSANA_CSPAD2X2_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace CsPad2x2 {
  enum {
    QuadsPerSensor = 1 /**< Defines number of quadrants in a CsPad2x2 device. */
  };
  enum {
    ASICsPerQuad = 4 /**< Total number of ASICs in one quadrant. */
  };
  enum {
    RowsPerBank = 26 /**< Number of rows per readout bank? */
  };
  enum {
    FullBanksPerASIC = 7 /**< Number of full readout banks per one ASIC? */
  };
  enum {
    BanksPerASIC = 8 /**< Number of readout banks per one ASIC? */
  };
  enum {
    ColumnsPerASIC = 185 /**< Number of columns readout by single ASIC. */
  };
  enum {
    MaxRowsPerASIC = 194 /**< Maximum number of rows readout by single ASIC. */
  };
  enum {
    PotsPerQuad = 80 /**< Number of POTs? per single quadrant. */
  };
  enum {
    TwoByTwosPerQuad = 1 /**< Total number of 2x2s in single quadrant. */
  };
  enum {
    SectorsPerQuad = 2 /**< Total number of sectors (2x1) per single quadrant. */
  };

  /** Enum specifying different running modes. */
  enum RunModes {
    NoRunning,
    RunButDrop,
    RunAndSendToRCE,
    RunAndSendTriggeredByTTL,
    ExternalTriggerSendToRCE,
    ExternalTriggerDrop,
    NumberOfRunModes,
  };

  /** Enum specifying different data collection modes. */
  enum DataModes {
    normal = 0,
    shiftTest = 1,
    testData = 2,
    reserved = 3,
  };

/** @class CsPad2x2DigitalPotsCfg

  Class defining configuration for CsPad POTs?
*/


class CsPad2x2DigitalPotsCfg {
public:
  virtual ~CsPad2x2DigitalPotsCfg();
  virtual ndarray<const uint8_t, 1> pots() const = 0;
};

/** @class CsPad2x2ReadOnlyCfg

  Class defining read-only configuration.
*/


class CsPad2x2ReadOnlyCfg {
public:
  CsPad2x2ReadOnlyCfg()
  {
  }
  CsPad2x2ReadOnlyCfg(uint32_t arg__shiftTest, uint32_t arg__version)
    : _shiftTest(arg__shiftTest), _version(arg__version)
  {
  }
  uint32_t shiftTest() const { return _shiftTest; }
  uint32_t version() const { return _version; }
  static uint32_t _sizeof() { return 8; }
private:
  uint32_t	_shiftTest;
  uint32_t	_version;
};

/** @class ProtectionSystemThreshold

  
*/


class ProtectionSystemThreshold {
public:
  ProtectionSystemThreshold()
  {
  }
  ProtectionSystemThreshold(uint32_t arg__adcThreshold, uint32_t arg__pixelCountThreshold)
    : _adcThreshold(arg__adcThreshold), _pixelCountThreshold(arg__pixelCountThreshold)
  {
  }
  uint32_t adcThreshold() const { return _adcThreshold; }
  uint32_t pixelCountThreshold() const { return _pixelCountThreshold; }
  static uint32_t _sizeof() { return 8; }
private:
  uint32_t	_adcThreshold;
  uint32_t	_pixelCountThreshold;
};

/** @class CsPad2x2GainMapCfg

  Class defining ASIC gain map.
*/


class CsPad2x2GainMapCfg {
public:
  virtual ~CsPad2x2GainMapCfg();
  /** Array with the gain map for single ASIC. */
  virtual ndarray<const uint16_t, 2> gainMap() const = 0;
};

/** @class ConfigV1QuadReg

  Configuration data for single "quadrant" which for 2x2 means a single 2x2.
*/


class ConfigV1QuadReg {
public:
  virtual ~ConfigV1QuadReg();
  virtual uint32_t shiftSelect() const = 0;
  virtual uint32_t edgeSelect() const = 0;
  virtual uint32_t readClkSet() const = 0;
  virtual uint32_t readClkHold() const = 0;
  virtual uint32_t dataMode() const = 0;
  virtual uint32_t prstSel() const = 0;
  virtual uint32_t acqDelay() const = 0;
  virtual uint32_t intTime() const = 0;
  virtual uint32_t digDelay() const = 0;
  virtual uint32_t ampIdle() const = 0;
  virtual uint32_t injTotal() const = 0;
  virtual uint32_t rowColShiftPer() const = 0;
  virtual uint32_t ampReset() const = 0;
  virtual uint32_t digCount() const = 0;
  virtual uint32_t digPeriod() const = 0;
  virtual uint32_t PeltierEnable() const = 0;
  virtual uint32_t kpConstant() const = 0;
  virtual uint32_t kiConstant() const = 0;
  virtual uint32_t kdConstant() const = 0;
  virtual uint32_t humidThold() const = 0;
  virtual uint32_t setPoint() const = 0;
  /** read-only configuration */
  virtual const CsPad2x2::CsPad2x2ReadOnlyCfg& ro() const = 0;
  virtual const CsPad2x2::CsPad2x2DigitalPotsCfg& dp() const = 0;
  /** Gain map. */
  virtual const CsPad2x2::CsPad2x2GainMapCfg& gm() const = 0;
};

/** @class ConfigV1

  Configuration data for 2x2 CsPad device.
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Cspad2x2Config /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ConfigV1();
  virtual uint32_t concentratorVersion() const = 0;
  virtual const CsPad2x2::ProtectionSystemThreshold& protectionThreshold() const = 0;
  virtual uint32_t protectionEnable() const = 0;
  virtual uint32_t inactiveRunMode() const = 0;
  virtual uint32_t activeRunMode() const = 0;
  virtual uint32_t tdi() const = 0;
  virtual uint32_t payloadSize() const = 0;
  virtual uint32_t badAsicMask() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t roiMask() const = 0;
  virtual const CsPad2x2::ConfigV1QuadReg& quad() const = 0;
  virtual uint32_t numAsicsRead() const = 0;
  /** Number of ASICs in given quadrant */
  virtual uint32_t numAsicsStored() const = 0;
};

/** @class ConfigV2QuadReg

  Configuration data for single "quadrant" which for 2x2 means a single 2x2.
*/


class ConfigV2QuadReg {
public:
  virtual ~ConfigV2QuadReg();
  virtual uint32_t shiftSelect() const = 0;
  virtual uint32_t edgeSelect() const = 0;
  virtual uint32_t readClkSet() const = 0;
  virtual uint32_t readClkHold() const = 0;
  virtual uint32_t dataMode() const = 0;
  virtual uint32_t prstSel() const = 0;
  virtual uint32_t acqDelay() const = 0;
  virtual uint32_t intTime() const = 0;
  virtual uint32_t digDelay() const = 0;
  virtual uint32_t ampIdle() const = 0;
  virtual uint32_t injTotal() const = 0;
  virtual uint32_t rowColShiftPer() const = 0;
  virtual uint32_t ampReset() const = 0;
  virtual uint32_t digCount() const = 0;
  virtual uint32_t digPeriod() const = 0;
  virtual uint32_t PeltierEnable() const = 0;
  virtual uint32_t kpConstant() const = 0;
  virtual uint32_t kiConstant() const = 0;
  virtual uint32_t kdConstant() const = 0;
  virtual uint32_t humidThold() const = 0;
  virtual uint32_t setPoint() const = 0;
  /** bias tuning is used, but not written;
            2 bits per nibble, C2,C1,I5,I2;
            bit order rc00rc00rc00rc */
  virtual uint32_t biasTuning() const = 0;
  /** pMOS and nMOS Displacement and Main;
            used but not written and not in GUI yet;
            hard-wired to zero in GUI;
            2 bits per nibble, bit order pd00pm00nd00nm */
  virtual uint32_t pdpmndnmBalance() const = 0;
  /** read-only configuration */
  virtual const CsPad2x2::CsPad2x2ReadOnlyCfg& ro() const = 0;
  virtual const CsPad2x2::CsPad2x2DigitalPotsCfg& dp() const = 0;
  /** Gain map. */
  virtual const CsPad2x2::CsPad2x2GainMapCfg& gm() const = 0;
};

/** @class ConfigV2

  Configuration data for 2x2 CsPad device.
*/


class ConfigV2 {
public:
  enum { TypeId = Pds::TypeId::Id_Cspad2x2Config /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  virtual ~ConfigV2();
  virtual uint32_t concentratorVersion() const = 0;
  virtual const CsPad2x2::ProtectionSystemThreshold& protectionThreshold() const = 0;
  virtual uint32_t protectionEnable() const = 0;
  virtual uint32_t inactiveRunMode() const = 0;
  virtual uint32_t activeRunMode() const = 0;
  virtual uint32_t runTriggerDelay() const = 0;
  virtual uint32_t tdi() const = 0;
  virtual uint32_t payloadSize() const = 0;
  virtual uint32_t badAsicMask() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t roiMask() const = 0;
  virtual const CsPad2x2::ConfigV2QuadReg& quad() const = 0;
  virtual uint32_t numAsicsRead() const = 0;
  /** Number of ASICs in given quadrant */
  virtual uint32_t numAsicsStored() const = 0;
};

/** @class ElementV1

  CsPad data from single 2x2 element.
*/


class ElementV1 {
public:
  enum { TypeId = Pds::TypeId::Id_Cspad2x2Element /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { Nsbtemp = 4 /**< Number of the elements in _sbtemp array. */ };
  virtual ~ElementV1();
  /** Virtual channel number. */
  virtual uint32_t virtual_channel() const = 0;
  /** Lane number. */
  virtual uint32_t lane() const = 0;
  virtual uint32_t tid() const = 0;
  virtual uint32_t acq_count() const = 0;
  virtual uint32_t op_code() const = 0;
  /** Quadrant number. */
  virtual uint32_t quad() const = 0;
  virtual uint32_t seq_count() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual ndarray<const uint16_t, 1> sb_temp() const = 0;
  virtual uint32_t frame_type() const = 0;
  virtual ndarray<const int16_t, 3> data() const = 0;
  /** Common mode value for a given section, section number can be 0 or 1.
                Will return 0 for data read from XTC, may be non-zero after calibration. */
  virtual float common_mode(uint32_t section) const = 0;
};
} // namespace CsPad2x2
} // namespace Psana
#endif // PSANA_CSPAD2X2_DDL_H
