#ifndef PSANA_TIMEPIX_DDL_H
#define PSANA_TIMEPIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Timepix {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { ChipCount = 4 };
  enum ReadoutSpeed {
    ReadoutSpeed_Slow = 0,
    ReadoutSpeed_Fast = 1,
  };
  enum TriggerMode {
    TriggerMode_ExtPos = 0,
    TriggerMode_ExtNeg = 1,
    TriggerMode_Soft = 2,
  };
  virtual ~ConfigV1();
  virtual Timepix::ConfigV1::ReadoutSpeed readoutSpeed() const = 0;
  virtual Timepix::ConfigV1::TriggerMode triggerMode() const = 0;
  virtual int32_t shutterTimeout() const = 0;
  virtual int32_t dac0Ikrum() const = 0;
  virtual int32_t dac0Disc() const = 0;
  virtual int32_t dac0Preamp() const = 0;
  virtual int32_t dac0BufAnalogA() const = 0;
  virtual int32_t dac0BufAnalogB() const = 0;
  virtual int32_t dac0Hist() const = 0;
  virtual int32_t dac0ThlFine() const = 0;
  virtual int32_t dac0ThlCourse() const = 0;
  virtual int32_t dac0Vcas() const = 0;
  virtual int32_t dac0Fbk() const = 0;
  virtual int32_t dac0Gnd() const = 0;
  virtual int32_t dac0Ths() const = 0;
  virtual int32_t dac0BiasLvds() const = 0;
  virtual int32_t dac0RefLvds() const = 0;
  virtual int32_t dac1Ikrum() const = 0;
  virtual int32_t dac1Disc() const = 0;
  virtual int32_t dac1Preamp() const = 0;
  virtual int32_t dac1BufAnalogA() const = 0;
  virtual int32_t dac1BufAnalogB() const = 0;
  virtual int32_t dac1Hist() const = 0;
  virtual int32_t dac1ThlFine() const = 0;
  virtual int32_t dac1ThlCourse() const = 0;
  virtual int32_t dac1Vcas() const = 0;
  virtual int32_t dac1Fbk() const = 0;
  virtual int32_t dac1Gnd() const = 0;
  virtual int32_t dac1Ths() const = 0;
  virtual int32_t dac1BiasLvds() const = 0;
  virtual int32_t dac1RefLvds() const = 0;
  virtual int32_t dac2Ikrum() const = 0;
  virtual int32_t dac2Disc() const = 0;
  virtual int32_t dac2Preamp() const = 0;
  virtual int32_t dac2BufAnalogA() const = 0;
  virtual int32_t dac2BufAnalogB() const = 0;
  virtual int32_t dac2Hist() const = 0;
  virtual int32_t dac2ThlFine() const = 0;
  virtual int32_t dac2ThlCourse() const = 0;
  virtual int32_t dac2Vcas() const = 0;
  virtual int32_t dac2Fbk() const = 0;
  virtual int32_t dac2Gnd() const = 0;
  virtual int32_t dac2Ths() const = 0;
  virtual int32_t dac2BiasLvds() const = 0;
  virtual int32_t dac2RefLvds() const = 0;
  virtual int32_t dac3Ikrum() const = 0;
  virtual int32_t dac3Disc() const = 0;
  virtual int32_t dac3Preamp() const = 0;
  virtual int32_t dac3BufAnalogA() const = 0;
  virtual int32_t dac3BufAnalogB() const = 0;
  virtual int32_t dac3Hist() const = 0;
  virtual int32_t dac3ThlFine() const = 0;
  virtual int32_t dac3ThlCourse() const = 0;
  virtual int32_t dac3Vcas() const = 0;
  virtual int32_t dac3Fbk() const = 0;
  virtual int32_t dac3Gnd() const = 0;
  virtual int32_t dac3Ths() const = 0;
  virtual int32_t dac3BiasLvds() const = 0;
  virtual int32_t dac3RefLvds() const = 0;
};

/** @class DataV1

  
*/


class DataV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixData /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { TIMEPIX_HEIGHT = 512 };
  enum { TIMEPIX_WIDTH = 512 };
  enum { TIMEPIX_DEPTH = 14 };
  enum { TIMEPIX_DEPTH_BYTES = 2 };
  virtual ~DataV1();
  virtual uint32_t timestamp() const = 0;
  virtual uint16_t frameCounter() const = 0;
  virtual uint16_t lostRows() const = 0;
  virtual ndarray<uint16_t, 2> data() const = 0;
};
} // namespace Timepix
} // namespace Psana
#endif // PSANA_TIMEPIX_DDL_H
