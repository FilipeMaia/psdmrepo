#ifndef PSANA_SMLDATA_DDL_H
#define PSANA_SMLDATA_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstring>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace SmlData {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_SmlDataConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ConfigV1();
  virtual uint32_t sizeThreshold() const = 0;
};

/** @class OrigDgramOffsetV1

  
*/

class ConfigV1;

class OrigDgramOffsetV1 {
public:
  enum { TypeId = Pds::TypeId::Id_SmlDataOrigDgramOffset /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~OrigDgramOffsetV1();
  virtual int64_t fileOffset() const = 0;
  virtual uint32_t extent() const = 0;
};

/** @class ProxyV1

  
*/

class ConfigV1;

class ProxyV1 {
public:
  enum { TypeId = Pds::TypeId::Id_SmlDataProxy /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~ProxyV1();
  virtual int64_t fileOffset() const = 0;
  virtual const Pds::TypeId& type() const = 0;
  virtual uint32_t extent() const = 0;
};
} // namespace SmlData
} // namespace Psana
#endif // PSANA_SMLDATA_DDL_H
