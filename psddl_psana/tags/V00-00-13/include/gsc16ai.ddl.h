#ifndef PSANA_GSC16AI_DDL_H
#define PSANA_GSC16AI_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

namespace Psana {
namespace Gsc16ai {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum {
    Version = 1 /**< XTC type version number */
  };
  enum {
    TypeId = Pds::TypeId::Id_Gsc16aiConfig /**< XTC type ID value (from Pds::TypeId class) */
  };
  enum {
    LowestChannel = 0 /**<  */
  };
  enum {
    HighestChannel = 15 /**<  */
  };
  enum {
    LowestFps = 1 /**<  */
  };
  enum {
    HighestFps = 120 /**<  */
  };
  enum InputMode {
    InputMode_Differential = 0,
    InputMode_Zero = 1,
    InputMode_Vref = 2,
  };
  enum VoltageRange {
    VoltageRange_10V = 0,
    VoltageRange_5V,
    VoltageRange_2_5V,
  };
  enum TriggerMode {
    TriggerMode_ExtPos = 0,
    TriggerMode_ExtNeg,
    TriggerMode_IntClk,
  };
  enum DataFormat {
    DataFormat_TwosComplement = 0,
    DataFormat_OffsetBinary,
  };
  virtual ~ConfigV1();
  virtual uint16_t voltageRange() const = 0;
  virtual uint16_t firstChan() const = 0;
  virtual uint16_t lastChan() const = 0;
  virtual uint16_t inputMode() const = 0;
  virtual uint16_t triggerMode() const = 0;
  virtual uint16_t dataFormat() const = 0;
  virtual uint16_t fps() const = 0;
  virtual uint8_t autocalibEnable() const = 0;
  virtual uint8_t timeTagEnable() const = 0;
  virtual uint16_t numChannels() const = 0;
};

/** @class DataV1

  
*/

class ConfigV1;

class DataV1 {
public:
  enum {
    Version = 1 /**< XTC type version number */
  };
  enum {
    TypeId = Pds::TypeId::Id_Gsc16aiData /**< XTC type ID value (from Pds::TypeId class) */
  };
  virtual ~DataV1();
  virtual const uint16_t* timestamp() const = 0;
  virtual const uint16_t* channelValue() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by timestamp() method. */
  virtual std::vector<int> timestamp_shape() const = 0;
  /** Method which returns the shape (dimensions) of the data returned by channelValue() method. */
  virtual std::vector<int> channelValue_shape() const = 0;
};
} // namespace Gsc16ai
} // namespace Psana
#endif // PSANA_GSC16AI_DDL_H
