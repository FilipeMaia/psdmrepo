
// *** Do not edit this file, it is auto-generated ***

#include <cstddef>
#include "psddl_psana/acqiris.ddl.h"
#include <iostream>
namespace Psana {
namespace Acqiris {
double
VertV1::slope() const {
  
    return this->fullScale() / ((1 << Acqiris::DataDescV1Elem::NumberOfBits)*(1 << Acqiris::DataDescV1Elem::BitShift)); 

}
std::ostream& operator<<(std::ostream& str, Acqiris::VertV1::Coupling enval) {
  const char* val;
  switch (enval) {
  case Acqiris::VertV1::GND:
    val = "GND";
    break;
  case Acqiris::VertV1::DC:
    val = "DC";
    break;
  case Acqiris::VertV1::AC:
    val = "AC";
    break;
  case Acqiris::VertV1::DC50ohm:
    val = "DC50ohm";
    break;
  case Acqiris::VertV1::AC50ohm:
    val = "AC50ohm";
    break;
  default:
    return str << "Coupling(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::VertV1::Bandwidth enval) {
  const char* val;
  switch (enval) {
  case Acqiris::VertV1::None:
    val = "None";
    break;
  case Acqiris::VertV1::MHz25:
    val = "MHz25";
    break;
  case Acqiris::VertV1::MHz700:
    val = "MHz700";
    break;
  case Acqiris::VertV1::MHz200:
    val = "MHz200";
    break;
  case Acqiris::VertV1::MHz20:
    val = "MHz20";
    break;
  case Acqiris::VertV1::MHz35:
    val = "MHz35";
    break;
  default:
    return str << "Bandwidth(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TrigV1::Source enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TrigV1::Internal:
    val = "Internal";
    break;
  case Acqiris::TrigV1::External:
    val = "External";
    break;
  default:
    return str << "Source(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TrigV1::Coupling enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TrigV1::DC:
    val = "DC";
    break;
  case Acqiris::TrigV1::AC:
    val = "AC";
    break;
  case Acqiris::TrigV1::HFreject:
    val = "HFreject";
    break;
  case Acqiris::TrigV1::DC50ohm:
    val = "DC50ohm";
    break;
  case Acqiris::TrigV1::AC50ohm:
    val = "AC50ohm";
    break;
  default:
    return str << "Coupling(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TrigV1::Slope enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TrigV1::Positive:
    val = "Positive";
    break;
  case Acqiris::TrigV1::Negative:
    val = "Negative";
    break;
  case Acqiris::TrigV1::OutOfWindow:
    val = "OutOfWindow";
    break;
  case Acqiris::TrigV1::IntoWindow:
    val = "IntoWindow";
    break;
  case Acqiris::TrigV1::HFDivide:
    val = "HFDivide";
    break;
  case Acqiris::TrigV1::SpikeStretcher:
    val = "SpikeStretcher";
    break;
  default:
    return str << "Slope(" << int(enval) << ")";
  }
  return str << val;
}

ConfigV1::~ConfigV1() {}

uint64_t
TimestampV1::value() const {
  return (((uint64_t)this->_timeStampHi)<<32) + this->_timeStampLo;
}

DataDescV1Elem::~DataDescV1Elem() {}


DataDescV1::~DataDescV1() {}

std::ostream& operator<<(std::ostream& str, Acqiris::TdcChannel::Channel enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcChannel::Veto:
    val = "Veto";
    break;
  case Acqiris::TdcChannel::Common:
    val = "Common";
    break;
  case Acqiris::TdcChannel::Input1:
    val = "Input1";
    break;
  case Acqiris::TdcChannel::Input2:
    val = "Input2";
    break;
  case Acqiris::TdcChannel::Input3:
    val = "Input3";
    break;
  case Acqiris::TdcChannel::Input4:
    val = "Input4";
    break;
  case Acqiris::TdcChannel::Input5:
    val = "Input5";
    break;
  case Acqiris::TdcChannel::Input6:
    val = "Input6";
    break;
  default:
    return str << "Channel(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcChannel::Mode enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcChannel::Active:
    val = "Active";
    break;
  case Acqiris::TdcChannel::Inactive:
    val = "Inactive";
    break;
  default:
    return str << "Mode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcChannel::Slope enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcChannel::Positive:
    val = "Positive";
    break;
  case Acqiris::TdcChannel::Negative:
    val = "Negative";
    break;
  default:
    return str << "Slope(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcAuxIO::Channel enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcAuxIO::IOAux1:
    val = "IOAux1";
    break;
  case Acqiris::TdcAuxIO::IOAux2:
    val = "IOAux2";
    break;
  default:
    return str << "Channel(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcAuxIO::Mode enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcAuxIO::BankSwitch:
    val = "BankSwitch";
    break;
  case Acqiris::TdcAuxIO::Marker:
    val = "Marker";
    break;
  case Acqiris::TdcAuxIO::OutputLo:
    val = "OutputLo";
    break;
  case Acqiris::TdcAuxIO::OutputHi:
    val = "OutputHi";
    break;
  default:
    return str << "Mode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcAuxIO::Termination enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcAuxIO::ZHigh:
    val = "ZHigh";
    break;
  case Acqiris::TdcAuxIO::Z50:
    val = "Z50";
    break;
  default:
    return str << "Termination(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcVetoIO::Channel enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcVetoIO::ChVeto:
    val = "ChVeto";
    break;
  default:
    return str << "Channel(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcVetoIO::Mode enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcVetoIO::Veto:
    val = "Veto";
    break;
  case Acqiris::TdcVetoIO::SwitchVeto:
    val = "SwitchVeto";
    break;
  case Acqiris::TdcVetoIO::InvertedVeto:
    val = "InvertedVeto";
    break;
  case Acqiris::TdcVetoIO::InvertedSwitchVeto:
    val = "InvertedSwitchVeto";
    break;
  default:
    return str << "Mode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcVetoIO::Termination enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcVetoIO::ZHigh:
    val = "ZHigh";
    break;
  case Acqiris::TdcVetoIO::Z50:
    val = "Z50";
    break;
  default:
    return str << "Termination(" << int(enval) << ")";
  }
  return str << val;
}

TdcConfigV1::~TdcConfigV1() {}

std::ostream& operator<<(std::ostream& str, Acqiris::TdcDataV1_Item::Source enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcDataV1_Item::Comm:
    val = "Comm";
    break;
  case Acqiris::TdcDataV1_Item::Chan1:
    val = "Chan1";
    break;
  case Acqiris::TdcDataV1_Item::Chan2:
    val = "Chan2";
    break;
  case Acqiris::TdcDataV1_Item::Chan3:
    val = "Chan3";
    break;
  case Acqiris::TdcDataV1_Item::Chan4:
    val = "Chan4";
    break;
  case Acqiris::TdcDataV1_Item::Chan5:
    val = "Chan5";
    break;
  case Acqiris::TdcDataV1_Item::Chan6:
    val = "Chan6";
    break;
  case Acqiris::TdcDataV1_Item::AuxIO:
    val = "AuxIO";
    break;
  default:
    return str << "Source(" << int(enval) << ")";
  }
  return str << val;
}
uint32_t
TdcDataV1Common::nhits() const {
  return this->bf_val_();
}
uint8_t
TdcDataV1Common::overflow() const {
  return this->bf_ofv_();
}
uint32_t
TdcDataV1Channel::ticks() const {
  return this->bf_val_();
}
uint8_t
TdcDataV1Channel::overflow() const {
  return this->bf_ofv_();
}
double
TdcDataV1Channel::time() const {
  return this->bf_val_() * 50e-12;
}
Acqiris::TdcDataV1Marker::Type
TdcDataV1Marker::type() const {
  return Type(this->bf_val_());
}
std::ostream& operator<<(std::ostream& str, Acqiris::TdcDataV1Marker::Type enval) {
  const char* val;
  switch (enval) {
  case Acqiris::TdcDataV1Marker::AuxIOSwitch:
    val = "AuxIOSwitch";
    break;
  case Acqiris::TdcDataV1Marker::EventCntSwitch:
    val = "EventCntSwitch";
    break;
  case Acqiris::TdcDataV1Marker::MemFullSwitch:
    val = "MemFullSwitch";
    break;
  case Acqiris::TdcDataV1Marker::AuxIOMarker:
    val = "AuxIOMarker";
    break;
  default:
    return str << "Type(" << int(enval) << ")";
  }
  return str << val;
}

TdcDataV1::~TdcDataV1() {}

} // namespace Acqiris
} // namespace Psana
