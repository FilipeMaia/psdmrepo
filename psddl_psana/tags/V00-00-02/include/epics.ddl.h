#ifndef PSANA_EPICS_DDL_H
#define PSANA_EPICS_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

namespace Psana {
namespace Epics {
  enum {iXtcVersion = 1};
  enum {iMaxPvNameLength = 64};
  enum {MAX_STRING_SIZE = 40};
  enum {MAX_UNITS_SIZE = 8};
  enum {MAX_ENUM_STRING_SIZE = 26};
  enum {MAX_ENUM_STATES = 16};
  enum  {
    DBR_STRING = 0,
    DBR_SHORT = 1,
    DBR_FLOAT = 2,
    DBR_ENUM = 3,
    DBR_CHAR = 4,
    DBR_LONG = 5,
    DBR_DOUBLE = 6,
    DBR_STS_STRING = 7,
    DBR_STS_SHORT = 8,
    DBR_STS_FLOAT = 9,
    DBR_STS_ENUM = 10,
    DBR_STS_CHAR = 11,
    DBR_STS_LONG = 12,
    DBR_STS_DOUBLE = 13,
    DBR_TIME_STRING = 14,
    DBR_TIME_INT = 15,
    DBR_TIME_SHORT = 15,
    DBR_TIME_FLOAT = 16,
    DBR_TIME_ENUM = 17,
    DBR_TIME_CHAR = 18,
    DBR_TIME_LONG = 19,
    DBR_TIME_DOUBLE = 20,
    DBR_GR_STRING = 21,
    DBR_GR_SHORT = 22,
    DBR_GR_FLOAT = 23,
    DBR_GR_ENUM = 24,
    DBR_GR_CHAR = 25,
    DBR_GR_LONG = 26,
    DBR_GR_DOUBLE = 27,
    DBR_CTRL_STRING = 28,
    DBR_CTRL_SHORT = 29,
    DBR_CTRL_FLOAT = 30,
    DBR_CTRL_ENUM = 31,
    DBR_CTRL_CHAR = 32,
    DBR_CTRL_LONG = 33,
    DBR_CTRL_DOUBLE = 34,
  };

/** Class: epicsTimeStamp
  
*/


class epicsTimeStamp {
public:
  epicsTimeStamp()
  {
  }
  epicsTimeStamp(uint32_t arg__secPastEpoch, uint32_t arg__nsec)
    : _secPastEpoch(arg__secPastEpoch), _nsec(arg__nsec)
  {
  }
  uint32_t sec() const {return _secPastEpoch;}
  uint32_t nsec() const {return _nsec;}
  static uint32_t _sizeof()  {return 8;}
private:
  uint32_t	_secPastEpoch;	/* seconds since 00:00 Jan 1, 1990 UTC */
  uint32_t	_nsec;	/* nanoseconds within second */
};

/** Class: dbr_time_string
  
*/


class dbr_time_string {
public:
  enum {DBR_TYPE_ID = DBR_TIME_STRING};
  dbr_time_string(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return 4+(Epics::epicsTimeStamp::_sizeof());}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
};

/** Class: dbr_time_short
  
*/


class dbr_time_short {
public:
  enum {DBR_TYPE_ID = DBR_TIME_SHORT};
  dbr_time_short(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp), RISC_pad(0)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return (4+(Epics::epicsTimeStamp::_sizeof()))+2;}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
  int16_t	RISC_pad;
};

/** Class: dbr_time_float
  
*/


class dbr_time_float {
public:
  enum {DBR_TYPE_ID = DBR_TIME_FLOAT};
  dbr_time_float(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return 4+(Epics::epicsTimeStamp::_sizeof());}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
};

/** Class: dbr_time_enum
  
*/


class dbr_time_enum {
public:
  enum {DBR_TYPE_ID = DBR_TIME_ENUM};
  dbr_time_enum(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp), RISC_pad(0)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return (4+(Epics::epicsTimeStamp::_sizeof()))+2;}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
  int16_t	RISC_pad;
};

/** Class: dbr_time_char
  
*/


class dbr_time_char {
public:
  enum {DBR_TYPE_ID = DBR_TIME_CHAR};
  dbr_time_char(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp), RISC_pad1(0)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return ((4+(Epics::epicsTimeStamp::_sizeof()))+2)+1;}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
  int16_t	RISC_pad0;
  uint8_t	RISC_pad1;
};

/** Class: dbr_time_long
  
*/


class dbr_time_long {
public:
  enum {DBR_TYPE_ID = DBR_TIME_LONG};
  dbr_time_long(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return 4+(Epics::epicsTimeStamp::_sizeof());}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
};

/** Class: dbr_time_double
  
*/


class dbr_time_double {
public:
  enum {DBR_TYPE_ID = DBR_TIME_DOUBLE};
  dbr_time_double(int16_t status, int16_t severity, const Epics::epicsTimeStamp& stamp)
    : _status(status), _severity(severity), _stamp(stamp), RISC_pad(0)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const Epics::epicsTimeStamp& stamp() const {return _stamp;}
  static uint32_t _sizeof()  {return (4+(Epics::epicsTimeStamp::_sizeof()))+4;}
private:
  int16_t	_status;
  int16_t	_severity;
  Epics::epicsTimeStamp	_stamp;
  int32_t	RISC_pad;
};

/** Class: dbr_sts_string
  
*/


class dbr_sts_string {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_STRING};
  dbr_sts_string(int16_t status, int16_t severity)
    : _status(status), _severity(severity)
  {
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  static uint32_t _sizeof()  {return 4;}
private:
  int16_t	_status;
  int16_t	_severity;
};

/** Class: dbr_ctrl_short
  
*/


class dbr_ctrl_short {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_SHORT};
  dbr_ctrl_short(int16_t status, int16_t severity, const char* units, int16_t upper_disp_limit, int16_t lower_disp_limit, int16_t upper_alarm_limit, int16_t upper_warning_limit, int16_t lower_warning_limit, int16_t lower_alarm_limit, int16_t upper_ctrl_limit, int16_t lower_ctrl_limit)
    : _status(status), _severity(severity), _upper_disp_limit(upper_disp_limit), _lower_disp_limit(lower_disp_limit), _upper_alarm_limit(upper_alarm_limit), _upper_warning_limit(upper_warning_limit), _lower_warning_limit(lower_warning_limit), _lower_alarm_limit(lower_alarm_limit), _upper_ctrl_limit(upper_ctrl_limit), _lower_ctrl_limit(lower_ctrl_limit)
  {
    std::copy(units, units+(8), _units);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const char* units() const {return &_units[0];}
  int16_t upper_disp_limit() const {return _upper_disp_limit;}
  int16_t lower_disp_limit() const {return _lower_disp_limit;}
  int16_t upper_alarm_limit() const {return _upper_alarm_limit;}
  int16_t upper_warning_limit() const {return _upper_warning_limit;}
  int16_t lower_warning_limit() const {return _lower_warning_limit;}
  int16_t lower_alarm_limit() const {return _lower_alarm_limit;}
  int16_t upper_ctrl_limit() const {return _upper_ctrl_limit;}
  int16_t lower_ctrl_limit() const {return _lower_ctrl_limit;}
  static uint32_t _sizeof()  {return ((((((((4+(1*(MAX_UNITS_SIZE)))+2)+2)+2)+2)+2)+2)+2)+2;}
  std::vector<int> _units_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  char	_units[MAX_UNITS_SIZE];
  int16_t	_upper_disp_limit;
  int16_t	_lower_disp_limit;
  int16_t	_upper_alarm_limit;
  int16_t	_upper_warning_limit;
  int16_t	_lower_warning_limit;
  int16_t	_lower_alarm_limit;
  int16_t	_upper_ctrl_limit;
  int16_t	_lower_ctrl_limit;
};

/** Class: dbr_ctrl_float
  
*/


class dbr_ctrl_float {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_FLOAT};
  dbr_ctrl_float(int16_t status, int16_t severity, int16_t precision, const char* units, float upper_disp_limit, float lower_disp_limit, float upper_alarm_limit, float upper_warning_limit, float lower_warning_limit, float lower_alarm_limit, float upper_ctrl_limit, float lower_ctrl_limit)
    : _status(status), _severity(severity), _precision(precision), RISC_pad(0), _upper_disp_limit(upper_disp_limit), _lower_disp_limit(lower_disp_limit), _upper_alarm_limit(upper_alarm_limit), _upper_warning_limit(upper_warning_limit), _lower_warning_limit(lower_warning_limit), _lower_alarm_limit(lower_alarm_limit), _upper_ctrl_limit(upper_ctrl_limit), _lower_ctrl_limit(lower_ctrl_limit)
  {
    std::copy(units, units+(8), _units);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  int16_t precision() const {return _precision;}
  const char* units() const {return &_units[0];}
  float upper_disp_limit() const {return _upper_disp_limit;}
  float lower_disp_limit() const {return _lower_disp_limit;}
  float upper_alarm_limit() const {return _upper_alarm_limit;}
  float upper_warning_limit() const {return _upper_warning_limit;}
  float lower_warning_limit() const {return _lower_warning_limit;}
  float lower_alarm_limit() const {return _lower_alarm_limit;}
  float upper_ctrl_limit() const {return _upper_ctrl_limit;}
  float lower_ctrl_limit() const {return _lower_ctrl_limit;}
  static uint32_t _sizeof()  {return ((((((((8+(1*(MAX_UNITS_SIZE)))+4)+4)+4)+4)+4)+4)+4)+4;}
  std::vector<int> _units_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  int16_t	_precision;
  int16_t	RISC_pad;
  char	_units[MAX_UNITS_SIZE];
  float	_upper_disp_limit;
  float	_lower_disp_limit;
  float	_upper_alarm_limit;
  float	_upper_warning_limit;
  float	_lower_warning_limit;
  float	_lower_alarm_limit;
  float	_upper_ctrl_limit;
  float	_lower_ctrl_limit;
};

/** Class: dbr_ctrl_enum
  
*/


class dbr_ctrl_enum {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_ENUM};
  dbr_ctrl_enum(int16_t status, int16_t severity, int16_t no_str, const char* strings)
    : _status(status), _severity(severity), _no_str(no_str)
  {
    std::copy(strings, strings+(416), _strs[0]);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  int16_t no_str() const {return _no_str;}
  const char* strings() const {return &_strs[0][0];}
  static uint32_t _sizeof()  {return 6+(1*(MAX_ENUM_STATES)*(MAX_ENUM_STRING_SIZE));}
  std::vector<int> _strs_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  int16_t	_no_str;
  char	_strs[MAX_ENUM_STATES][MAX_ENUM_STRING_SIZE];
};

/** Class: dbr_ctrl_char
  
*/


class dbr_ctrl_char {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_CHAR};
  dbr_ctrl_char(int16_t status, int16_t severity, const char* units, uint8_t upper_disp_limit, uint8_t lower_disp_limit, uint8_t upper_alarm_limit, uint8_t upper_warning_limit, uint8_t lower_warning_limit, uint8_t lower_alarm_limit, uint8_t upper_ctrl_limit, uint8_t lower_ctrl_limit)
    : _status(status), _severity(severity), _upper_disp_limit(upper_disp_limit), _lower_disp_limit(lower_disp_limit), _upper_alarm_limit(upper_alarm_limit), _upper_warning_limit(upper_warning_limit), _lower_warning_limit(lower_warning_limit), _lower_alarm_limit(lower_alarm_limit), _upper_ctrl_limit(upper_ctrl_limit), _lower_ctrl_limit(lower_ctrl_limit), RISC_pad(0)
  {
    std::copy(units, units+(8), _units);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const char* units() const {return &_units[0];}
  uint8_t upper_disp_limit() const {return _upper_disp_limit;}
  uint8_t lower_disp_limit() const {return _lower_disp_limit;}
  uint8_t upper_alarm_limit() const {return _upper_alarm_limit;}
  uint8_t upper_warning_limit() const {return _upper_warning_limit;}
  uint8_t lower_warning_limit() const {return _lower_warning_limit;}
  uint8_t lower_alarm_limit() const {return _lower_alarm_limit;}
  uint8_t upper_ctrl_limit() const {return _upper_ctrl_limit;}
  uint8_t lower_ctrl_limit() const {return _lower_ctrl_limit;}
  static uint32_t _sizeof()  {return (((((((((4+(1*(MAX_UNITS_SIZE)))+1)+1)+1)+1)+1)+1)+1)+1)+1;}
  std::vector<int> _units_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  char	_units[MAX_UNITS_SIZE];
  uint8_t	_upper_disp_limit;
  uint8_t	_lower_disp_limit;
  uint8_t	_upper_alarm_limit;
  uint8_t	_upper_warning_limit;
  uint8_t	_lower_warning_limit;
  uint8_t	_lower_alarm_limit;
  uint8_t	_upper_ctrl_limit;
  uint8_t	_lower_ctrl_limit;
  uint8_t	RISC_pad;
};

/** Class: dbr_ctrl_long
  
*/


class dbr_ctrl_long {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_LONG};
  dbr_ctrl_long(int16_t status, int16_t severity, const char* units, int32_t upper_disp_limit, int32_t lower_disp_limit, int32_t upper_alarm_limit, int32_t upper_warning_limit, int32_t lower_warning_limit, int32_t lower_alarm_limit, int32_t upper_ctrl_limit, int32_t lower_ctrl_limit)
    : _status(status), _severity(severity), _upper_disp_limit(upper_disp_limit), _lower_disp_limit(lower_disp_limit), _upper_alarm_limit(upper_alarm_limit), _upper_warning_limit(upper_warning_limit), _lower_warning_limit(lower_warning_limit), _lower_alarm_limit(lower_alarm_limit), _upper_ctrl_limit(upper_ctrl_limit), _lower_ctrl_limit(lower_ctrl_limit)
  {
    std::copy(units, units+(8), _units);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  const char* units() const {return &_units[0];}
  int32_t upper_disp_limit() const {return _upper_disp_limit;}
  int32_t lower_disp_limit() const {return _lower_disp_limit;}
  int32_t upper_alarm_limit() const {return _upper_alarm_limit;}
  int32_t upper_warning_limit() const {return _upper_warning_limit;}
  int32_t lower_warning_limit() const {return _lower_warning_limit;}
  int32_t lower_alarm_limit() const {return _lower_alarm_limit;}
  int32_t upper_ctrl_limit() const {return _upper_ctrl_limit;}
  int32_t lower_ctrl_limit() const {return _lower_ctrl_limit;}
  static uint32_t _sizeof()  {return ((((((((4+(1*(MAX_UNITS_SIZE)))+4)+4)+4)+4)+4)+4)+4)+4;}
  std::vector<int> _units_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  char	_units[MAX_UNITS_SIZE];
  int32_t	_upper_disp_limit;
  int32_t	_lower_disp_limit;
  int32_t	_upper_alarm_limit;
  int32_t	_upper_warning_limit;
  int32_t	_lower_warning_limit;
  int32_t	_lower_alarm_limit;
  int32_t	_upper_ctrl_limit;
  int32_t	_lower_ctrl_limit;
};

/** Class: dbr_ctrl_double
  
*/


class dbr_ctrl_double {
public:
  enum {DBR_TYPE_ID = DBR_CTRL_DOUBLE};
  dbr_ctrl_double(int16_t status, int16_t severity, int16_t precision, const char* units, double upper_disp_limit, double lower_disp_limit, double upper_alarm_limit, double upper_warning_limit, double lower_warning_limit, double lower_alarm_limit, double upper_ctrl_limit, double lower_ctrl_limit)
    : _status(status), _severity(severity), _precision(precision), RISC_pad0(0), _upper_disp_limit(upper_disp_limit), _lower_disp_limit(lower_disp_limit), _upper_alarm_limit(upper_alarm_limit), _upper_warning_limit(upper_warning_limit), _lower_warning_limit(lower_warning_limit), _lower_alarm_limit(lower_alarm_limit), _upper_ctrl_limit(upper_ctrl_limit), _lower_ctrl_limit(lower_ctrl_limit)
  {
    std::copy(units, units+(8), _units);
  }
  int16_t status() const {return _status;}
  int16_t severity() const {return _severity;}
  int16_t precision() const {return _precision;}
  const char* units() const {return &_units[0];}
  double upper_disp_limit() const {return _upper_disp_limit;}
  double lower_disp_limit() const {return _lower_disp_limit;}
  double upper_alarm_limit() const {return _upper_alarm_limit;}
  double upper_warning_limit() const {return _upper_warning_limit;}
  double lower_warning_limit() const {return _lower_warning_limit;}
  double lower_alarm_limit() const {return _lower_alarm_limit;}
  double upper_ctrl_limit() const {return _upper_ctrl_limit;}
  double lower_ctrl_limit() const {return _lower_ctrl_limit;}
  static uint32_t _sizeof()  {return ((((((((8+(1*(MAX_UNITS_SIZE)))+8)+8)+8)+8)+8)+8)+8)+8;}
  std::vector<int> _units_shape() const;
private:
  int16_t	_status;
  int16_t	_severity;
  int16_t	_precision;
  int16_t	RISC_pad0;
  char	_units[MAX_UNITS_SIZE];
  double	_upper_disp_limit;
  double	_lower_disp_limit;
  double	_upper_alarm_limit;
  double	_upper_warning_limit;
  double	_lower_warning_limit;
  double	_lower_alarm_limit;
  double	_upper_ctrl_limit;
  double	_lower_ctrl_limit;
};

/** Class: EpicsPvHeader
  
*/


class EpicsPvHeader {
public:
  virtual ~EpicsPvHeader();
  virtual int16_t pvId() const = 0;
  virtual int16_t dbrType() const = 0;
  virtual int16_t numElements() const = 0;
  virtual void print() const = 0;
  virtual uint8_t isCtrl() const = 0;
  virtual uint8_t isTime() const = 0;
  virtual uint16_t status() const = 0;
  virtual uint16_t severity() const = 0;
};

/** Class: EpicsPvCtrlHeader
  
*/


class EpicsPvCtrlHeader: public EpicsPvHeader {
public:
  virtual ~EpicsPvCtrlHeader();
  virtual const char* pvName() const = 0;
  virtual std::vector<int> _sPvName_shape() const = 0;
};

/** Class: EpicsPvTimeHeader
  
*/


class EpicsPvTimeHeader: public EpicsPvHeader {
public:
  virtual ~EpicsPvTimeHeader();
  virtual Epics::epicsTimeStamp stamp() const = 0;
};

/** Class: EpicsPvCtrlString
  
*/


class EpicsPvCtrlString: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlString();
  virtual const Epics::dbr_sts_string& dbr() const = 0;
  virtual const char* data() const = 0;
  virtual const char* value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlShort
  
*/


class EpicsPvCtrlShort: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlShort();
  virtual const Epics::dbr_ctrl_short& dbr() const = 0;
  virtual const int16_t* data() const = 0;
  virtual int16_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlFloat
  
*/


class EpicsPvCtrlFloat: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlFloat();
  virtual const Epics::dbr_ctrl_float& dbr() const = 0;
  virtual const float* data() const = 0;
  virtual float value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlEnum
  
*/


class EpicsPvCtrlEnum: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlEnum();
  virtual const Epics::dbr_ctrl_enum& dbr() const = 0;
  virtual const uint16_t* data() const = 0;
  virtual uint16_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlChar
  
*/


class EpicsPvCtrlChar: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlChar();
  virtual const Epics::dbr_ctrl_char& dbr() const = 0;
  virtual const uint8_t* data() const = 0;
  virtual uint8_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlLong
  
*/


class EpicsPvCtrlLong: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlLong();
  virtual const Epics::dbr_ctrl_long& dbr() const = 0;
  virtual const int32_t* data() const = 0;
  virtual int32_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvCtrlDouble
  
*/


class EpicsPvCtrlDouble: public EpicsPvCtrlHeader {
public:
  virtual ~EpicsPvCtrlDouble();
  virtual const Epics::dbr_ctrl_double& dbr() const = 0;
  virtual const double* data() const = 0;
  virtual double value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeString
  
*/


class EpicsPvTimeString: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeString();
  virtual const Epics::dbr_time_string& dbr() const = 0;
  virtual const char* data() const = 0;
  virtual const char* value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeShort
  
*/


class EpicsPvTimeShort: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeShort();
  virtual const Epics::dbr_time_short& dbr() const = 0;
  virtual const int16_t* data() const = 0;
  virtual int16_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeFloat
  
*/


class EpicsPvTimeFloat: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeFloat();
  virtual const Epics::dbr_time_float& dbr() const = 0;
  virtual const float* data() const = 0;
  virtual float value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeEnum
  
*/


class EpicsPvTimeEnum: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeEnum();
  virtual const Epics::dbr_time_enum& dbr() const = 0;
  virtual const uint16_t* data() const = 0;
  virtual uint16_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeChar
  
*/


class EpicsPvTimeChar: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeChar();
  virtual const Epics::dbr_time_char& dbr() const = 0;
  virtual const uint8_t* data() const = 0;
  virtual uint8_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeLong
  
*/


class EpicsPvTimeLong: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeLong();
  virtual const Epics::dbr_time_long& dbr() const = 0;
  virtual const int32_t* data() const = 0;
  virtual int32_t value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};

/** Class: EpicsPvTimeDouble
  
*/


class EpicsPvTimeDouble: public EpicsPvTimeHeader {
public:
  virtual ~EpicsPvTimeDouble();
  virtual const Epics::dbr_time_double& dbr() const = 0;
  virtual const double* data() const = 0;
  virtual double value(uint32_t i) const = 0;
  virtual std::vector<int> _data_shape() const = 0;
};
} // namespace Epics
} // namespace Psana
#endif // PSANA_EPICS_DDL_H
