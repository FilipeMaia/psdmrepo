#ifndef PSANA_CSPAD_DDL_H
#define PSANA_CSPAD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

namespace Psana {
namespace CsPad {
  enum {MaxQuadsPerSensor = 4};
  enum {ASICsPerQuad = 16};
  enum {RowsPerBank = 26};
  enum {FullBanksPerASIC = 7};
  enum {BanksPerASIC = 8};
  enum {ColumnsPerASIC = 185};
  enum {MaxRowsPerASIC = 194};
  enum {PotsPerQuad = 80};
  enum {TwoByTwosPerQuad = 4};
  enum {SectorsPerQuad = 8};
  enum RunModes {
    NoRunning,
    RunButDrop,
    RunAndSendToRCE,
    RunAndSendTriggeredByTTL,
    ExternalTriggerSendToRCE,
    ExternalTriggerDrop,
    NumberOfRunModes,
  };
  enum DataModes {
    normal = 0,
    shiftTest = 1,
    testData = 2,
    reserved = 3,
  };

/** Class: CsPadDigitalPotsCfg
  
*/


class CsPadDigitalPotsCfg {
public:
  virtual ~CsPadDigitalPotsCfg();
  virtual const uint8_t* pots() const = 0;
  virtual std::vector<int> _pots_shape() const = 0;
};

/** Class: CsPadReadOnlyCfg
  
*/


class CsPadReadOnlyCfg {
public:
  virtual ~CsPadReadOnlyCfg();
  virtual uint32_t shiftTest() const = 0;
  virtual uint32_t version() const = 0;
};

/** Class: CsPadGainMapCfg
  
*/


class CsPadGainMapCfg {
public:
  virtual ~CsPadGainMapCfg();
  virtual const uint16_t* gainMap() const = 0;
  virtual std::vector<int> _gainMap_shape() const = 0;
};

/** Class: ConfigV1QuadReg
  
*/


class ConfigV1QuadReg {
public:
  virtual ~ConfigV1QuadReg();
  virtual const uint32_t* shiftSelect() const = 0;
  virtual const uint32_t* edgeSelect() const = 0;
  virtual uint32_t readClkSet() const = 0;
  virtual uint32_t readClkHold() const = 0;
  virtual uint32_t dataMode() const = 0;
  virtual uint32_t prstSel() const = 0;
  virtual uint32_t acqDelay() const = 0;
  virtual uint32_t intTime() const = 0;
  virtual uint32_t digDelay() const = 0;
  virtual uint32_t ampIdle() const = 0;
  virtual uint32_t injTotal() const = 0;
  virtual uint32_t rowColShiftPer() const = 0;
  virtual const CsPad::CsPadReadOnlyCfg& ro() const = 0;
  virtual const CsPad::CsPadDigitalPotsCfg& dp() const = 0;
  virtual const CsPad::CsPadGainMapCfg& gm() const = 0;
  virtual std::vector<int> _shiftSelect_shape() const = 0;
  virtual std::vector<int> _edgeSelect_shape() const = 0;
};

/** Class: ConfigV1
  
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_CspadConfig};
  virtual ~ConfigV1();
  virtual uint32_t concentratorVersion() const = 0;
  virtual uint32_t runDelay() const = 0;
  virtual uint32_t eventCode() const = 0;
  virtual uint32_t inactiveRunMode() const = 0;
  virtual uint32_t activeRunMode() const = 0;
  virtual uint32_t tdi() const = 0;
  virtual uint32_t payloadSize() const = 0;
  virtual uint32_t badAsicMask0() const = 0;
  virtual uint32_t badAsicMask1() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t quadMask() const = 0;
  virtual const CsPad::ConfigV1QuadReg& quads(uint32_t i0) const = 0;
  virtual uint32_t numAsicsRead() const = 0;
  virtual uint32_t numQuads() const = 0;
  virtual uint32_t numSect() const = 0;
  virtual std::vector<int> _quads_shape() const = 0;
};

/** Class: ConfigV2
  
*/


class ConfigV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_CspadConfig};
  virtual ~ConfigV2();
  virtual uint32_t concentratorVersion() const = 0;
  virtual uint32_t runDelay() const = 0;
  virtual uint32_t eventCode() const = 0;
  virtual uint32_t inactiveRunMode() const = 0;
  virtual uint32_t activeRunMode() const = 0;
  virtual uint32_t tdi() const = 0;
  virtual uint32_t payloadSize() const = 0;
  virtual uint32_t badAsicMask0() const = 0;
  virtual uint32_t badAsicMask1() const = 0;
  virtual uint32_t asicMask() const = 0;
  virtual uint32_t quadMask() const = 0;
  virtual const CsPad::ConfigV1QuadReg& quads(uint32_t i0) const = 0;
  virtual uint32_t numAsicsRead() const = 0;
  virtual uint32_t roiMask(uint32_t iq) const = 0;
  virtual uint32_t numAsicsStored(uint32_t iq) const = 0;
  virtual uint32_t numQuads() const = 0;
  virtual uint32_t numSect() const = 0;
  virtual std::vector<int> _quads_shape() const = 0;
};

/** Class: ElementV1
  
*/

class ConfigV1;
class ConfigV2;

class ElementV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_CspadElement};
  enum {Nsbtemp = 4};
  virtual ~ElementV1();
  virtual uint32_t seq_count() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual const uint16_t* sb_temp() const = 0;
  virtual uint32_t frame_type() const = 0;
  virtual const uint16_t* data() const = 0;
  virtual std::vector<int> _sbtemp_shape() const = 0;
  virtual std::vector<int> _data_shape() const = 0;
  virtual std::vector<int> _extra_shape() const = 0;
};

/** Class: ElementV2
  
*/

class ConfigV2;

class ElementV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_CspadElement};
  enum {Nsbtemp = 4};
  virtual ~ElementV2();
  virtual uint32_t seq_count() const = 0;
  virtual uint32_t ticks() const = 0;
  virtual uint32_t fiducials() const = 0;
  virtual const uint16_t* sb_temp() const = 0;
  virtual uint32_t frame_type() const = 0;
  virtual const uint16_t* data() const = 0;
  virtual std::vector<int> _sbtemp_shape() const = 0;
  virtual std::vector<int> _data_shape() const = 0;
  virtual std::vector<int> _extra_shape() const = 0;
};
} // namespace CsPad
} // namespace Psana
#endif // PSANA_CSPAD_DDL_H
