#ifndef PSANA_PNCCD_DDL_H
#define PSANA_PNCCD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

namespace Psana {
namespace PNCCD {

/** Class: ConfigV1
  pnCCD configuration class ConfigV1
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_pnCCDconfig};
  virtual ~ConfigV1();
  virtual uint32_t numLinks() const = 0;
  virtual uint32_t payloadSizePerLink() const = 0;
};

/** Class: ConfigV2
  pnCCD configuration class ConfigV2
*/


class ConfigV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_pnCCDconfig};
  virtual ~ConfigV2();
  virtual uint32_t numLinks() const = 0;
  virtual uint32_t payloadSizePerLink() const = 0;
  virtual uint32_t numChannels() const = 0;
  virtual uint32_t numRows() const = 0;
  virtual uint32_t numSubmoduleChannels() const = 0;
  virtual uint32_t numSubmoduleRows() const = 0;
  virtual uint32_t numSubmodules() const = 0;
  virtual uint32_t camexMagic() const = 0;
  virtual const char* info() const = 0;
  virtual const char* timingFName() const = 0;
  virtual std::vector<int> info_shape() const = 0;
  virtual std::vector<int> timingFName_shape() const = 0;
};

/** Class: FrameV1
  pnCCD configuration class FrameV1
*/

class ConfigV1;
class ConfigV2;

class FrameV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_pnCCDframe};
  virtual ~FrameV1();
  virtual uint32_t specialWord() const = 0;
  virtual uint32_t frameNumber() const = 0;
  virtual uint32_t timeStampHi() const = 0;
  virtual uint32_t timeStampLo() const = 0;
  virtual const uint16_t* data() const = 0;
  virtual std::vector<int> data_shape() const = 0;
};
} // namespace PNCCD
} // namespace Psana
#endif // PSANA_PNCCD_DDL_H
