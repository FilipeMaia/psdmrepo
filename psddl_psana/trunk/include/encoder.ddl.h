#ifndef PSANA_ENCODER_DDL_H
#define PSANA_ENCODER_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

namespace Psana {
namespace Encoder {

/** Class: ConfigV1
  
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_EncoderConfig};
  enum count_mode_type {
    WRAP_FULL,
    LIMIT,
    HALT,
    WRAP_PRESET,
    COUNT_END,
  };
  enum quad_mode {
    CLOCK_DIR,
    X1,
    X2,
    X4,
    QUAD_END,
  };
  virtual ~ConfigV1();
  virtual uint32_t chan_num() const = 0;
  virtual uint32_t count_mode() const = 0;
  virtual uint32_t quadrature_mode() const = 0;
  virtual uint32_t input_num() const = 0;
  virtual uint32_t input_rising() const = 0;
  virtual uint32_t ticks_per_sec() const = 0;
};

/** Class: DataV1
  
*/


class DataV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_EncoderData};
  virtual ~DataV1();
  virtual uint32_t timestamp() const = 0;
  virtual uint32_t encoder_count() const = 0;
};

/** Class: DataV2
  
*/


class DataV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_EncoderData};
  enum {NEncoders = 3};
  virtual ~DataV2();
  virtual uint32_t timestamp() const = 0;
  virtual const uint32_t* encoder_count() const = 0;
  virtual std::vector<int> encoder_count_shape() const = 0;
};
} // namespace Encoder
} // namespace Psana
#endif // PSANA_ENCODER_DDL_H
