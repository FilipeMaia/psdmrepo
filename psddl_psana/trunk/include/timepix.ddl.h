#ifndef PSANA_TIMEPIX_DDL_H
#define PSANA_TIMEPIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Timepix {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { ChipCount = 4 };
  enum ReadoutSpeed {
    ReadoutSpeed_Slow = 0,
    ReadoutSpeed_Fast = 1,
  };
  enum TriggerMode {
    TriggerMode_ExtPos = 0,
    TriggerMode_ExtNeg = 1,
    TriggerMode_Soft = 2,
  };
  virtual ~ConfigV1();
  virtual Timepix::ConfigV1::ReadoutSpeed readoutSpeed() const = 0;
  virtual Timepix::ConfigV1::TriggerMode triggerMode() const = 0;
  virtual int32_t shutterTimeout() const = 0;
  virtual int32_t dac0Ikrum() const = 0;
  virtual int32_t dac0Disc() const = 0;
  virtual int32_t dac0Preamp() const = 0;
  virtual int32_t dac0BufAnalogA() const = 0;
  virtual int32_t dac0BufAnalogB() const = 0;
  virtual int32_t dac0Hist() const = 0;
  virtual int32_t dac0ThlFine() const = 0;
  virtual int32_t dac0ThlCourse() const = 0;
  virtual int32_t dac0Vcas() const = 0;
  virtual int32_t dac0Fbk() const = 0;
  virtual int32_t dac0Gnd() const = 0;
  virtual int32_t dac0Ths() const = 0;
  virtual int32_t dac0BiasLvds() const = 0;
  virtual int32_t dac0RefLvds() const = 0;
  virtual int32_t dac1Ikrum() const = 0;
  virtual int32_t dac1Disc() const = 0;
  virtual int32_t dac1Preamp() const = 0;
  virtual int32_t dac1BufAnalogA() const = 0;
  virtual int32_t dac1BufAnalogB() const = 0;
  virtual int32_t dac1Hist() const = 0;
  virtual int32_t dac1ThlFine() const = 0;
  virtual int32_t dac1ThlCourse() const = 0;
  virtual int32_t dac1Vcas() const = 0;
  virtual int32_t dac1Fbk() const = 0;
  virtual int32_t dac1Gnd() const = 0;
  virtual int32_t dac1Ths() const = 0;
  virtual int32_t dac1BiasLvds() const = 0;
  virtual int32_t dac1RefLvds() const = 0;
  virtual int32_t dac2Ikrum() const = 0;
  virtual int32_t dac2Disc() const = 0;
  virtual int32_t dac2Preamp() const = 0;
  virtual int32_t dac2BufAnalogA() const = 0;
  virtual int32_t dac2BufAnalogB() const = 0;
  virtual int32_t dac2Hist() const = 0;
  virtual int32_t dac2ThlFine() const = 0;
  virtual int32_t dac2ThlCourse() const = 0;
  virtual int32_t dac2Vcas() const = 0;
  virtual int32_t dac2Fbk() const = 0;
  virtual int32_t dac2Gnd() const = 0;
  virtual int32_t dac2Ths() const = 0;
  virtual int32_t dac2BiasLvds() const = 0;
  virtual int32_t dac2RefLvds() const = 0;
  virtual int32_t dac3Ikrum() const = 0;
  virtual int32_t dac3Disc() const = 0;
  virtual int32_t dac3Preamp() const = 0;
  virtual int32_t dac3BufAnalogA() const = 0;
  virtual int32_t dac3BufAnalogB() const = 0;
  virtual int32_t dac3Hist() const = 0;
  virtual int32_t dac3ThlFine() const = 0;
  virtual int32_t dac3ThlCourse() const = 0;
  virtual int32_t dac3Vcas() const = 0;
  virtual int32_t dac3Fbk() const = 0;
  virtual int32_t dac3Gnd() const = 0;
  virtual int32_t dac3Ths() const = 0;
  virtual int32_t dac3BiasLvds() const = 0;
  virtual int32_t dac3RefLvds() const = 0;
};
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV1::ReadoutSpeed enval);
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV1::TriggerMode enval);

/** @class ConfigV2

  
*/


class ConfigV2 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { ChipCount = 4 };
  enum { ChipNameMax = 16 };
  enum { PixelThreshMax = 4*256*256 };
  enum ReadoutSpeed {
    ReadoutSpeed_Slow = 0,
    ReadoutSpeed_Fast = 1,
  };
  enum TriggerMode {
    TriggerMode_ExtPos = 0,
    TriggerMode_ExtNeg = 1,
    TriggerMode_Soft = 2,
  };
  virtual ~ConfigV2();
  virtual Timepix::ConfigV2::ReadoutSpeed readoutSpeed() const = 0;
  virtual Timepix::ConfigV2::TriggerMode triggerMode() const = 0;
  virtual int32_t timepixSpeed() const = 0;
  virtual int32_t dac0Ikrum() const = 0;
  virtual int32_t dac0Disc() const = 0;
  virtual int32_t dac0Preamp() const = 0;
  virtual int32_t dac0BufAnalogA() const = 0;
  virtual int32_t dac0BufAnalogB() const = 0;
  virtual int32_t dac0Hist() const = 0;
  virtual int32_t dac0ThlFine() const = 0;
  virtual int32_t dac0ThlCourse() const = 0;
  virtual int32_t dac0Vcas() const = 0;
  virtual int32_t dac0Fbk() const = 0;
  virtual int32_t dac0Gnd() const = 0;
  virtual int32_t dac0Ths() const = 0;
  virtual int32_t dac0BiasLvds() const = 0;
  virtual int32_t dac0RefLvds() const = 0;
  virtual int32_t dac1Ikrum() const = 0;
  virtual int32_t dac1Disc() const = 0;
  virtual int32_t dac1Preamp() const = 0;
  virtual int32_t dac1BufAnalogA() const = 0;
  virtual int32_t dac1BufAnalogB() const = 0;
  virtual int32_t dac1Hist() const = 0;
  virtual int32_t dac1ThlFine() const = 0;
  virtual int32_t dac1ThlCourse() const = 0;
  virtual int32_t dac1Vcas() const = 0;
  virtual int32_t dac1Fbk() const = 0;
  virtual int32_t dac1Gnd() const = 0;
  virtual int32_t dac1Ths() const = 0;
  virtual int32_t dac1BiasLvds() const = 0;
  virtual int32_t dac1RefLvds() const = 0;
  virtual int32_t dac2Ikrum() const = 0;
  virtual int32_t dac2Disc() const = 0;
  virtual int32_t dac2Preamp() const = 0;
  virtual int32_t dac2BufAnalogA() const = 0;
  virtual int32_t dac2BufAnalogB() const = 0;
  virtual int32_t dac2Hist() const = 0;
  virtual int32_t dac2ThlFine() const = 0;
  virtual int32_t dac2ThlCourse() const = 0;
  virtual int32_t dac2Vcas() const = 0;
  virtual int32_t dac2Fbk() const = 0;
  virtual int32_t dac2Gnd() const = 0;
  virtual int32_t dac2Ths() const = 0;
  virtual int32_t dac2BiasLvds() const = 0;
  virtual int32_t dac2RefLvds() const = 0;
  virtual int32_t dac3Ikrum() const = 0;
  virtual int32_t dac3Disc() const = 0;
  virtual int32_t dac3Preamp() const = 0;
  virtual int32_t dac3BufAnalogA() const = 0;
  virtual int32_t dac3BufAnalogB() const = 0;
  virtual int32_t dac3Hist() const = 0;
  virtual int32_t dac3ThlFine() const = 0;
  virtual int32_t dac3ThlCourse() const = 0;
  virtual int32_t dac3Vcas() const = 0;
  virtual int32_t dac3Fbk() const = 0;
  virtual int32_t dac3Gnd() const = 0;
  virtual int32_t dac3Ths() const = 0;
  virtual int32_t dac3BiasLvds() const = 0;
  virtual int32_t dac3RefLvds() const = 0;
  virtual int32_t driverVersion() const = 0;
  virtual uint32_t firmwareVersion() const = 0;
  virtual uint32_t pixelThreshSize() const = 0;
  virtual ndarray<const uint8_t, 1> pixelThresh() const = 0;
  virtual const char* chip0Name() const = 0;
  virtual const char* chip1Name() const = 0;
  virtual const char* chip2Name() const = 0;
  virtual const char* chip3Name() const = 0;
  virtual int32_t chip0ID() const = 0;
  virtual int32_t chip1ID() const = 0;
  virtual int32_t chip2ID() const = 0;
  virtual int32_t chip3ID() const = 0;
  virtual int32_t chipCount() const = 0;
};
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV2::ReadoutSpeed enval);
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV2::TriggerMode enval);

/** @class ConfigV3

  
*/


class ConfigV3 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 3 /**< XTC type version number */ };
  enum { ChipCount = 4 };
  enum { ChipNameMax = 16 };
  enum { PixelThreshMax = 4*256*256 };
  enum ReadoutSpeed {
    ReadoutSpeed_Slow = 0,
    ReadoutSpeed_Fast = 1,
  };
  enum TimepixMode {
    TimepixMode_Counting = 0,
    TimepixMode_TOT = 1,
  };
  virtual ~ConfigV3();
  virtual Timepix::ConfigV3::ReadoutSpeed readoutSpeed() const = 0;
  virtual Timepix::ConfigV3::TimepixMode timepixMode() const = 0;
  virtual int32_t timepixSpeed() const = 0;
  virtual int32_t dac0Ikrum() const = 0;
  virtual int32_t dac0Disc() const = 0;
  virtual int32_t dac0Preamp() const = 0;
  virtual int32_t dac0BufAnalogA() const = 0;
  virtual int32_t dac0BufAnalogB() const = 0;
  virtual int32_t dac0Hist() const = 0;
  virtual int32_t dac0ThlFine() const = 0;
  virtual int32_t dac0ThlCourse() const = 0;
  virtual int32_t dac0Vcas() const = 0;
  virtual int32_t dac0Fbk() const = 0;
  virtual int32_t dac0Gnd() const = 0;
  virtual int32_t dac0Ths() const = 0;
  virtual int32_t dac0BiasLvds() const = 0;
  virtual int32_t dac0RefLvds() const = 0;
  virtual int32_t dac1Ikrum() const = 0;
  virtual int32_t dac1Disc() const = 0;
  virtual int32_t dac1Preamp() const = 0;
  virtual int32_t dac1BufAnalogA() const = 0;
  virtual int32_t dac1BufAnalogB() const = 0;
  virtual int32_t dac1Hist() const = 0;
  virtual int32_t dac1ThlFine() const = 0;
  virtual int32_t dac1ThlCourse() const = 0;
  virtual int32_t dac1Vcas() const = 0;
  virtual int32_t dac1Fbk() const = 0;
  virtual int32_t dac1Gnd() const = 0;
  virtual int32_t dac1Ths() const = 0;
  virtual int32_t dac1BiasLvds() const = 0;
  virtual int32_t dac1RefLvds() const = 0;
  virtual int32_t dac2Ikrum() const = 0;
  virtual int32_t dac2Disc() const = 0;
  virtual int32_t dac2Preamp() const = 0;
  virtual int32_t dac2BufAnalogA() const = 0;
  virtual int32_t dac2BufAnalogB() const = 0;
  virtual int32_t dac2Hist() const = 0;
  virtual int32_t dac2ThlFine() const = 0;
  virtual int32_t dac2ThlCourse() const = 0;
  virtual int32_t dac2Vcas() const = 0;
  virtual int32_t dac2Fbk() const = 0;
  virtual int32_t dac2Gnd() const = 0;
  virtual int32_t dac2Ths() const = 0;
  virtual int32_t dac2BiasLvds() const = 0;
  virtual int32_t dac2RefLvds() const = 0;
  virtual int32_t dac3Ikrum() const = 0;
  virtual int32_t dac3Disc() const = 0;
  virtual int32_t dac3Preamp() const = 0;
  virtual int32_t dac3BufAnalogA() const = 0;
  virtual int32_t dac3BufAnalogB() const = 0;
  virtual int32_t dac3Hist() const = 0;
  virtual int32_t dac3ThlFine() const = 0;
  virtual int32_t dac3ThlCourse() const = 0;
  virtual int32_t dac3Vcas() const = 0;
  virtual int32_t dac3Fbk() const = 0;
  virtual int32_t dac3Gnd() const = 0;
  virtual int32_t dac3Ths() const = 0;
  virtual int32_t dac3BiasLvds() const = 0;
  virtual int32_t dac3RefLvds() const = 0;
  virtual int8_t dacBias() const = 0;
  virtual int8_t flags() const = 0;
  virtual int32_t driverVersion() const = 0;
  virtual uint32_t firmwareVersion() const = 0;
  virtual uint32_t pixelThreshSize() const = 0;
  virtual ndarray<const uint8_t, 1> pixelThresh() const = 0;
  virtual const char* chip0Name() const = 0;
  virtual const char* chip1Name() const = 0;
  virtual const char* chip2Name() const = 0;
  virtual const char* chip3Name() const = 0;
  virtual int32_t chip0ID() const = 0;
  virtual int32_t chip1ID() const = 0;
  virtual int32_t chip2ID() const = 0;
  virtual int32_t chip3ID() const = 0;
  virtual int32_t chipCount() const = 0;
};
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV3::ReadoutSpeed enval);
std::ostream& operator<<(std::ostream& str, Timepix::ConfigV3::TimepixMode enval);

/** @class DataV1

  
*/


class DataV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixData /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { Height = 512 };
  enum { Width = 512 };
  enum { Depth = 14 };
  enum { DepthBytes = 2 };
  enum { MaxPixelValue = 11810 };
  virtual ~DataV1();
  virtual uint32_t timestamp() const = 0;
  virtual uint16_t frameCounter() const = 0;
  virtual uint16_t lostRows() const = 0;
  virtual ndarray<const uint16_t, 2> data() const = 0;
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t depth() const = 0;
  virtual uint32_t depth_bytes() const = 0;
};

/** @class DataV2

  
*/


class DataV2 {
public:
  enum { TypeId = Pds::TypeId::Id_TimepixData /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { Depth = 14 };
  enum { MaxPixelValue = 11810 };
  virtual ~DataV2();
  /** Pixels per row */
  virtual uint16_t width() const = 0;
  /** Pixels per column */
  virtual uint16_t height() const = 0;
  /** hardware timestamp */
  virtual uint32_t timestamp() const = 0;
  /** hardware frame counter */
  virtual uint16_t frameCounter() const = 0;
  /** lost row count */
  virtual uint16_t lostRows() const = 0;
  virtual ndarray<const uint16_t, 2> data() const = 0;
  virtual uint32_t depth() const = 0;
  virtual uint32_t depth_bytes() const = 0;
};
} // namespace Timepix
} // namespace Psana
#endif // PSANA_TIMEPIX_DDL_H
