#ifndef PSANA_FCCD_DDL_H
#define PSANA_FCCD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace FCCD {

/** @class FccdConfigV1

  
*/


class FccdConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { Row_Pixels = 500 };
  enum { Column_Pixels = 576 };
  enum { Trimmed_Row_Pixels = 480 };
  enum { Trimmed_Column_Pixels = 480 };
  enum Depth {
    Sixteen_bit = 16,
  };
  enum Output_Source {
    Output_FIFO = 0,
    Output_Pattern4 = 4,
  };
  virtual ~FccdConfigV1();
  bool operator==(const FccdConfigV1 &t) const { return this == &t; }
  virtual uint16_t outputMode() const = 0;
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t trimmedWidth() const = 0;
  virtual uint32_t trimmedHeight() const = 0;
};

/** @class FccdConfigV2

  
*/


class FccdConfigV2 {
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { Row_Pixels = 500 };
  enum { Column_Pixels = 576 * 2 };
  enum { Trimmed_Row_Pixels = 480 };
  enum { Trimmed_Column_Pixels = 480 };
  enum { NVoltages = 17 };
  enum { NWaveforms = 15 };
  enum Depth {
    Eight_bit = 8,
    Sixteen_bit = 16,
  };
  enum Output_Source {
    Output_FIFO = 0,
    Test_Pattern1 = 1,
    Test_Pattern2 = 2,
    Test_Pattern3 = 3,
    Test_Pattern4 = 4,
  };
  virtual ~FccdConfigV2();
  bool operator==(const FccdConfigV2 &t) const { return this == &t; }
  virtual uint16_t outputMode() const = 0;
  virtual uint8_t ccdEnable() const = 0;
  virtual uint8_t focusMode() const = 0;
  virtual uint32_t exposureTime() const = 0;
  virtual ndarray<float, 1> dacVoltages() const = 0;
  virtual ndarray<uint16_t, 1> waveforms() const = 0;
  virtual uint32_t width() const = 0;
  virtual uint32_t height() const = 0;
  virtual uint32_t trimmedWidth() const = 0;
  virtual uint32_t trimmedHeight() const = 0;
};
} // namespace FCCD
} // namespace Psana
#endif // PSANA_FCCD_DDL_H
