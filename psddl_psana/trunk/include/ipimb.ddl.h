#ifndef PSANA_IPIMB_DDL_H
#define PSANA_IPIMB_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
namespace Psana {
namespace Ipimb {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_IpimbConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum CapacitorValue {
    c_1pF,
    c_100pF,
    c_10nF,
  };
  virtual ~ConfigV1();
  virtual uint64_t triggerCounter() const = 0;
  virtual uint64_t serialID() const = 0;
  virtual uint16_t chargeAmpRange() const = 0;
  virtual uint16_t calibrationRange() const = 0;
  virtual uint32_t resetLength() const = 0;
  virtual uint32_t resetDelay() const = 0;
  virtual float chargeAmpRefVoltage() const = 0;
  virtual float calibrationVoltage() const = 0;
  virtual float diodeBias() const = 0;
  virtual uint16_t status() const = 0;
  virtual uint16_t errors() const = 0;
  virtual uint16_t calStrobeLength() const = 0;
  virtual uint32_t trigDelay() const = 0;
  /** Returns CapacitorValue enum for given channel number (0..3). */
  virtual Ipimb::ConfigV1::CapacitorValue capacitorValue(uint32_t ch) const = 0;
};

/** @class ConfigV2

  
*/


class ConfigV2 {
public:
  enum { TypeId = Pds::TypeId::Id_IpimbConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum CapacitorValue {
    c_1pF,
    c_4p7pF,
    c_24pF,
    c_120pF,
    c_620pF,
    c_3p3nF,
    c_10nF,
    expert,
  };
  virtual ~ConfigV2();
  virtual uint64_t triggerCounter() const = 0;
  virtual uint64_t serialID() const = 0;
  virtual uint16_t chargeAmpRange() const = 0;
  virtual uint16_t calibrationRange() const = 0;
  virtual uint32_t resetLength() const = 0;
  virtual uint32_t resetDelay() const = 0;
  virtual float chargeAmpRefVoltage() const = 0;
  virtual float calibrationVoltage() const = 0;
  virtual float diodeBias() const = 0;
  virtual uint16_t status() const = 0;
  virtual uint16_t errors() const = 0;
  virtual uint16_t calStrobeLength() const = 0;
  virtual uint32_t trigDelay() const = 0;
  virtual uint32_t trigPsDelay() const = 0;
  virtual uint32_t adcDelay() const = 0;
  /** Returns CapacitorValue enum for given channel number (0..3). */
  virtual Ipimb::ConfigV2::CapacitorValue capacitorValue(uint32_t ch) const = 0;
};

/** @class DataV1

  
*/


class DataV1 {
public:
  enum { TypeId = Pds::TypeId::Id_IpimbData /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  virtual ~DataV1();
  virtual uint64_t triggerCounter() const = 0;
  virtual uint16_t config0() const = 0;
  virtual uint16_t config1() const = 0;
  virtual uint16_t config2() const = 0;
  /** Raw counts value returned from channel 0. */
  virtual uint16_t channel0() const = 0;
  /** Raw counts value returned from channel 1. */
  virtual uint16_t channel1() const = 0;
  /** Raw counts value returned from channel 2. */
  virtual uint16_t channel2() const = 0;
  /** Raw counts value returned from channel 3. */
  virtual uint16_t channel3() const = 0;
  virtual uint16_t checksum() const = 0;
  /** Value of of channel0() converted to Volts. */
  virtual float channel0Volts() const = 0;
  /** Value of of channel1() converted to Volts. */
  virtual float channel1Volts() const = 0;
  /** Value of of channel2() converted to Volts. */
  virtual float channel2Volts() const = 0;
  /** Value of of channel3() converted to Volts. */
  virtual float channel3Volts() const = 0;
};

/** @class DataV2

  
*/


class DataV2 {
public:
  enum { TypeId = Pds::TypeId::Id_IpimbData /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 2 /**< XTC type version number */ };
  enum { ipimbAdcRange = 5 };
  enum { ipimbAdcSteps = 65536 };
  virtual ~DataV2();
  virtual uint16_t config0() const = 0;
  virtual uint16_t config1() const = 0;
  virtual uint16_t config2() const = 0;
  /** Raw counts value returned from channel 0. */
  virtual uint16_t channel0() const = 0;
  /** Raw counts value returned from channel 1. */
  virtual uint16_t channel1() const = 0;
  /** Raw counts value returned from channel 2. */
  virtual uint16_t channel2() const = 0;
  /** Raw counts value returned from channel 3. */
  virtual uint16_t channel3() const = 0;
  /** Raw counts value returned from channel 0. */
  virtual uint16_t channel0ps() const = 0;
  /** Raw counts value returned from channel 1. */
  virtual uint16_t channel1ps() const = 0;
  /** Raw counts value returned from channel 2. */
  virtual uint16_t channel2ps() const = 0;
  /** Raw counts value returned from channel 3. */
  virtual uint16_t channel3ps() const = 0;
  virtual uint16_t checksum() const = 0;
  /** Value of of channel0() converted to Volts. */
  virtual float channel0Volts() const = 0;
  /** Value of of channel1() converted to Volts. */
  virtual float channel1Volts() const = 0;
  /** Value of of channel2() converted to Volts. */
  virtual float channel2Volts() const = 0;
  /** Value of of channel3() converted to Volts. */
  virtual float channel3Volts() const = 0;
  /** Value of of channel0ps() converted to Volts. */
  virtual float channel0psVolts() const = 0;
  /** Value of of channel1ps() converted to Volts. */
  virtual float channel1psVolts() const = 0;
  /** Value of of channel2ps() converted to Volts. */
  virtual float channel2psVolts() const = 0;
  /** Value of of channel3ps() converted to Volts. */
  virtual float channel3psVolts() const = 0;
  /** Trigger counter value. */
  virtual uint64_t triggerCounter() const = 0;
};
} // namespace Ipimb
} // namespace Psana
#endif // PSANA_IPIMB_DDL_H
