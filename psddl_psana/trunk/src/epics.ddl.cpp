
// *** Do not edit this file, it is auto-generated ***

#include <cstddef>
#include "psddl_psana/epics.ddl.h"
#include <iostream>
namespace Psana {
namespace Epics {
std::ostream& operator<<(std::ostream& str, Epics::DbrTypes enval) {
  const char* val;
  switch (enval) {
  case Epics::DBR_STRING:
    val = "DBR_STRING";
    break;
  case Epics::DBR_SHORT:
    val = "DBR_SHORT";
    break;
  case Epics::DBR_FLOAT:
    val = "DBR_FLOAT";
    break;
  case Epics::DBR_ENUM:
    val = "DBR_ENUM";
    break;
  case Epics::DBR_CHAR:
    val = "DBR_CHAR";
    break;
  case Epics::DBR_LONG:
    val = "DBR_LONG";
    break;
  case Epics::DBR_DOUBLE:
    val = "DBR_DOUBLE";
    break;
  case Epics::DBR_STS_STRING:
    val = "DBR_STS_STRING";
    break;
  case Epics::DBR_STS_SHORT:
    val = "DBR_STS_SHORT";
    break;
  case Epics::DBR_STS_FLOAT:
    val = "DBR_STS_FLOAT";
    break;
  case Epics::DBR_STS_ENUM:
    val = "DBR_STS_ENUM";
    break;
  case Epics::DBR_STS_CHAR:
    val = "DBR_STS_CHAR";
    break;
  case Epics::DBR_STS_LONG:
    val = "DBR_STS_LONG";
    break;
  case Epics::DBR_STS_DOUBLE:
    val = "DBR_STS_DOUBLE";
    break;
  case Epics::DBR_TIME_STRING:
    val = "DBR_TIME_STRING";
    break;
  case Epics::DBR_TIME_INT:
    val = "DBR_TIME_INT";
    break;
  case Epics::DBR_TIME_FLOAT:
    val = "DBR_TIME_FLOAT";
    break;
  case Epics::DBR_TIME_ENUM:
    val = "DBR_TIME_ENUM";
    break;
  case Epics::DBR_TIME_CHAR:
    val = "DBR_TIME_CHAR";
    break;
  case Epics::DBR_TIME_LONG:
    val = "DBR_TIME_LONG";
    break;
  case Epics::DBR_TIME_DOUBLE:
    val = "DBR_TIME_DOUBLE";
    break;
  case Epics::DBR_GR_STRING:
    val = "DBR_GR_STRING";
    break;
  case Epics::DBR_GR_SHORT:
    val = "DBR_GR_SHORT";
    break;
  case Epics::DBR_GR_FLOAT:
    val = "DBR_GR_FLOAT";
    break;
  case Epics::DBR_GR_ENUM:
    val = "DBR_GR_ENUM";
    break;
  case Epics::DBR_GR_CHAR:
    val = "DBR_GR_CHAR";
    break;
  case Epics::DBR_GR_LONG:
    val = "DBR_GR_LONG";
    break;
  case Epics::DBR_GR_DOUBLE:
    val = "DBR_GR_DOUBLE";
    break;
  case Epics::DBR_CTRL_STRING:
    val = "DBR_CTRL_STRING";
    break;
  case Epics::DBR_CTRL_SHORT:
    val = "DBR_CTRL_SHORT";
    break;
  case Epics::DBR_CTRL_FLOAT:
    val = "DBR_CTRL_FLOAT";
    break;
  case Epics::DBR_CTRL_ENUM:
    val = "DBR_CTRL_ENUM";
    break;
  case Epics::DBR_CTRL_CHAR:
    val = "DBR_CTRL_CHAR";
    break;
  case Epics::DBR_CTRL_LONG:
    val = "DBR_CTRL_LONG";
    break;
  case Epics::DBR_CTRL_DOUBLE:
    val = "DBR_CTRL_DOUBLE";
    break;
  default:
    return str << "DbrTypes(" << int(enval) << ")";
  }
  return str << val;
}
std::vector<int>
dbr_ctrl_short::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_float::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_enum::strings_shape() const {
  std::vector<int> shape;
  shape.reserve(2);
  shape.push_back(MAX_ENUM_STATES);
  shape.push_back(MAX_ENUM_STRING_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_char::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_long::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}
std::vector<int>
dbr_ctrl_double::units_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MAX_UNITS_SIZE);
  return shape;
}

EpicsPvHeader::~EpicsPvHeader() {}


EpicsPvCtrlHeader::~EpicsPvCtrlHeader() {}


EpicsPvTimeHeader::~EpicsPvTimeHeader() {}


EpicsPvCtrlString::~EpicsPvCtrlString() {}


EpicsPvCtrlShort::~EpicsPvCtrlShort() {}


EpicsPvCtrlFloat::~EpicsPvCtrlFloat() {}


EpicsPvCtrlEnum::~EpicsPvCtrlEnum() {}


EpicsPvCtrlChar::~EpicsPvCtrlChar() {}


EpicsPvCtrlLong::~EpicsPvCtrlLong() {}


EpicsPvCtrlDouble::~EpicsPvCtrlDouble() {}


EpicsPvTimeString::~EpicsPvTimeString() {}


EpicsPvTimeShort::~EpicsPvTimeShort() {}


EpicsPvTimeFloat::~EpicsPvTimeFloat() {}


EpicsPvTimeEnum::~EpicsPvTimeEnum() {}


EpicsPvTimeChar::~EpicsPvTimeChar() {}


EpicsPvTimeLong::~EpicsPvTimeLong() {}


EpicsPvTimeDouble::~EpicsPvTimeDouble() {}


ConfigV1::~ConfigV1() {}

} // namespace Epics
} // namespace Psana
