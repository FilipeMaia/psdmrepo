# -*- python -*-
# ex: set syntax=python:

import sys
#sys.path.insert ( 0, "/reg/g/psdm/sw/releases/buildbot/run/masters/main-master" )


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### GLOBAL PROPERTIES

c['properties'] = {
    'build-dir' : '/reg/g/psdm/sw/releases',
}


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [ BuildSlave("rhel5-slave", "botbuild", max_builds=4),
                BuildSlave("rhel6-slave", "botbuild", max_builds=3) ]

os2slave = dict(rhel5="rhel5-slave", rhel6="rhel6-slave")

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989





####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()




####### SCHEDULERS

## configure the Schedulers

from buildbot.config import BuilderConfig
from buildbot.scheduler import AnyBranchScheduler, Dependent, Triggerable
from LusiScheduler import LusiNightly


#
# nightly schedulers
#
nightly_checkout = LusiNightly(name='nightly-build', 
                               builderNames=['nightly-build'], 
                               hour=20, minute=50, branch=None )
nightly_build_rhel5 = Triggerable(name='nightly-build-rhel5', builderNames=['nightly-build-rhel5'])
nightly_build_rhel6 = Triggerable(name='nightly-build-rhel6', builderNames=['nightly-build-rhel6'])

#
# regular schedulers
#
regular_build = AnyBranchScheduler ( name='release-build',
                        branches=None,
                        categories=["regular"],
                        treeStableTimer=3,
                        builderNames=['build-rhel5'] )

#
# regular rpm-building schedulers
#
regular_srpm = AnyBranchScheduler(name='release-build-rpm',
                        branches=None,
                        categories=["regular-rpm"],
                        treeStableTimer=3,
                        builderNames=['release-build-rpm'] )
regular_rpm_rhel5 = Triggerable(name='release-rpm-rhel5', builderNames=['release-rpm-rhel5'])
regular_rpm_rhel6 = Triggerable(name='release-rpm-rhel6', builderNames=['release-rpm-rhel6'])

c['schedulers'] = [ nightly_checkout, nightly_build_rhel5, nightly_build_rhel6,
                   regular_build,
                   regular_srpm, regular_rpm_rhel5, regular_rpm_rhel6]



####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

from buildbot.process import factory
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.python_twisted import Trial
from buildbot.process.properties import WithProperties
from buildbot.steps import trigger

sdir="/reg/g/psdm/sw/releases/buildbot/buildbot-scripts"

c['builders'] = []

def os2arch(os, opt):
    if os == 'rhel5': return "x86_64-rhel5-gcc41-"+opt 
    if os == 'rhel6': return "x86_64-rhel6-gcc44-"+opt
     
def build_cmd(arch, target, release):
    return [ sdir+'/build-release', 
              WithProperties("%(build-dir)s"),
              release, 
              target, 
              "-a",
              arch ]

# nightly builders
os = 'rhel5'
f = factory.BuildFactory()
f.addStep( ShellCommand( name="release-checkout", 
                         command=[ sdir+'/nightly-checkout', WithProperties("nightly-%(bdate)s") ],
                         description = [ "release-checkout", "nightly" ] ) )
f.addStep(trigger.Trigger(schedulerNames=['nightly-build-rhel5', 'nightly-build-rhel6'],
                          waitForFinish=True,
                          copy_properties=['bdate']))
f.addStep( Compile( name = "build-doc", 
                    command = build_cmd(os2arch(os, "opt"), "doc", WithProperties("nightly-%(bdate)s")),
                    description = [ "build-release", "nightly-doc" ],
                    descriptionDone = [ "build-release", "nightly-doc" ] ) )
c['builders'].append(BuilderConfig(name="nightly-build", slavename="rhel5-slave", factory=f))

# delay is needed to avoid race condition
delay = 0
for os in ['rhel5', 'rhel6']:
    f = factory.BuildFactory()
    if delay: f.addStep(ShellCommand(name="delay", command=["sleep", str(delay)]))
    delay += 15
    for opt in [ "opt", "dbg" ] :
        arch = os2arch(os, opt)
        for t in [ "all", "test" ] :
            f.addStep( Compile( name = "build-"+opt+"-"+t, 
                                command = build_cmd(arch, t, WithProperties("nightly-%(bdate)s")),
                                description = [ "build-release", '-'.join(["nightly", os, opt, t]) ],
                                descriptionDone = [ "build-release", '-'.join(["nightly", os, opt, t]) ] ) )
    c['builders'].append(BuilderConfig(name="nightly-build-"+os, slavename=os2slave[os], factory=f))


# regular builders
os = 'rhel5'
f = factory.BuildFactory()
for opt in [ "opt", "dbg" ] :
    arch = os2arch(os, opt)
    for t in [ "all", "test" ] :
        f.addStep( Compile( name = "build-"+opt+"-"+t, 
                            command = build_cmd(arch, t,  WithProperties("%(branch)s")),
                            description = [ "build-release", opt+"-"+t ],
                            descriptionDone = [ "build-release", opt+"-"+t ] ) )
f.addStep( Compile( name = "build-doc", 
                    command = build_cmd(os2arch(os, "opt"), "doc",  WithProperties("%(branch)s")),
                    description = [ "build-release", "doc" ],
                    descriptionDone = [ "build-release", "doc" ] ) )

c['builders'].append(BuilderConfig(name="build-"+os, slavename=os2slave[os], factory=f))


# ====== regular RPM builders

# Whole RPM builder
os = 'rhel5'
f = factory.BuildFactory()
# first step builds SRM
f.addStep( ShellCommand( name="build-release-srpm", 
                         command=[ sdir+'/build-release-srpm', WithProperties("%(branch)s") ],
                         description=[ "build-release-srpm" ] ) )
# second step fires per-OS buids and waits for them to complete
f.addStep(trigger.Trigger(schedulerNames=['release-rpm-rhel5', 'release-rpm-rhel6'], waitForFinish=True))
# this step installs resulting RPMs
f.addStep( ShellCommand( name="release-rpm-install", 
                         command=[ sdir+'/release-rpm-install', WithProperties("%(branch)s"), 
                                  os2arch('rhel5', 'opt'), os2arch('rhel5', 'dbg'),
                                  os2arch('rhel6', 'opt'), os2arch('rhel6', 'dbg') ],
                         description=[ "release-rpm-install" ],
                         descriptionDone=[ "release-rpm-install" ] ) )
# updates Trac with info for this release
f.addStep( ShellCommand( name="release-trac-update", 
                         command=[ sdir+'/release-trac-update', WithProperties("%(branch)s") ],
                         description=[ "release-trac-update" ],
                         descriptionDone=[ "release-trac-update" ] ) )

c['builders'].append(BuilderConfig(name='release-build-rpm', slavename=os2slave[os], factory=f))

# RPM builders for each OS
for os in ['rhel5', 'rhel6']:
    f = factory.BuildFactory()
    arch = os2arch(os, 'opt')
    f.addStep( Compile( name="build-release-rpm-"+os, 
                        command=[ sdir+'/build-release-rpm', WithProperties("%(branch)s"), arch ],
                        description=[ "build-release-rpm", os ],
                        descriptionDone=[ "build-release-rpm", os ]) )
    c['builders'].append(BuilderConfig(name="release-rpm-"+os, slavename=os2slave[os], factory=f))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010, allowForce=False))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="psdatmgr@slac.stanford.edu",
                                     extraRecipients=["pcds-ana-l@slac.stanford.edu"],
                                     relayhost="smtpserv.slac.stanford.edu",
                                     sendToInterestedUsers=False,
                                     builders=['release-build-rpm', 'nightly-build', 'build-rhel5']))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
from buildbot.status import client
c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "PSDM-Buildbot"
c['projectURL'] = "https://pswww.slac.stanford.edu/trac/psdm"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://pswww.slac.stanford.edu/buildbot/"

####### DB URL

#c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
#    'db_url' : "mysql://buildbot:M0BOT@psdb/buildbot?max_idle=600",
#    'db_poll_interval' : 30,
#}

