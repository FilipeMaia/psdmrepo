# -*- python -*-
# ex: set syntax=python:

import sys
#sys.path.insert ( 0, "/reg/g/psdm/sw/releases/buildbot/run/masters/main-master" )


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### GLOBAL PROPERTIES

c['properties'] = {
    'build-dir' : '/reg/g/psdm/sw/releases',
}


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [ BuildSlave("psdev", "botbuild", max_builds=2) ]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989





####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()




####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import AnyBranchScheduler
from LusiScheduler import LusiNightly, LusiDependent


#
# nightly schedulers
#
nightly_build = LusiNightly ( name='nightly-build', 
                        builderNames=['nightly-build-rhel5'], 
                        hour=17, 
                        minute=5 )

#
# regular schedulers
#
regular_build = AnyBranchScheduler ( name='release-build',
                        branches=None,
                        treeStableTimer=3,
                        builderNames=['build-rhel5'] )

c['schedulers'] = [ nightly_build, regular_build ]



####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

from buildbot.process import factory
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.python_twisted import Trial
from buildbot.process.properties import WithProperties


sdir="/reg/g/psdm/sw/releases/buildbot/buildbot-scripts"

c['builders'] = []


# nightly builders
f = factory.BuildFactory()
f.addStep( ShellCommand( name="release-checkout-wait", 
                         command=[ sdir+'/release-checkout-wait', 
                                   WithProperties("%(build-dir)s"),
                                   WithProperties("nightly-%(bdate)s") ],
                         description = [ "release-checkout-wait", "nightly" ] ) )

for opt in [ "opt", "dbg" ] :
    for t in [ "all", "test" ] :
        f.addStep( Compile( name="build-"+opt+"-"+t, 
                            command=[ sdir+'/build-release', 
                                      WithProperties("%(build-dir)s"),
                                      WithProperties("nightly-%(bdate)s"), 
                                      t, 
                                      "-c", 
                                      "gcc41", 
                                      "-b", 
                                      opt ],
                            description = [ "build-release", "nightly-"+opt+"-"+t ],
                            descriptionDone = [ "build-release", "nightly-"+opt+"-"+t ] ) )

builder ={'name': "nightly-build-rhel5",
          'slavename': "psdev",
          'builddir': "nightly-build-rhel5",
          'factory': f }
c['builders'].append(builder)

# regular builders
f = factory.BuildFactory()
for opt in [ "opt", "dbg" ] :
    for t in [ "all", "test" ] :
        f.addStep( Compile( name="build-"+opt+"-"+t, 
                            command=[ sdir+'/build-release', 
                                      WithProperties("%(build-dir)s"),
                                      WithProperties("%(branch)s"), 
                                      t, 
                                      "-c", 
                                      "gcc41", 
                                      "-b", 
                                      opt ],
                            description = [ "build-release", opt+"-"+t ],
                            descriptionDone = [ "build-release", opt+"-"+t ] ) )

builder ={'name': "build-rhel5",
          'slavename': "psdev",
          'builddir': "build-rhel5",
          'factory': f }
c['builders'].append(builder)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010,allowForce=False))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="psdatmgr@slac.stanford.edu",
                                     extraRecipients=["salnikov@slac.stanford.edu"],
                                     relayhost="smtpserv.slac.stanford.edu",
                                     sendToInterestedUsers=False))

# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "PSDM-Buildbot"
c['projectURL'] = "http://psdev:8010/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://psdev:8010/"
