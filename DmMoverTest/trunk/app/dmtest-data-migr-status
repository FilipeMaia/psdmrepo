#!/usr/bin/env python 

"""
Add a file to the test regdb database. Query or set the status of files.
"""

import os
import time
import argparse

from DbTools.DbConnection import DbConnection
import RegDB.experiment_info as regdb

col_start = "\033[0;36m"
col_stop = "\033[0m"

_conn_str = "file:/reg/g/psdm/psdatmgr/datamigr/.mvrtestdb-conn"

def construct_file_path(options):
    """ Construct the path of a xtc file """

    # if path already contains file name return 
    if options.with_fn:
        return options.src_path
        
    fn = "e%d-r%04d-s%02d-c%02d.xtc" % (options.expid, options.runnr,
                                        options.stream, options.chunk)
    return os.path.join(options.src_path, fn)


def status_query(args, conn):

    cursor = conn.cursor()
    if args.status in ('wait', 'done'):
        stat = args.status.upper()
        statsel = "AND status = '%s'" % stat
    elif args.status == 'all':
        statsel = ""
    else:
        return 

    if args.dm or ( not args.dmana):
        query = "SELECT * FROM data_migration WHERE exper_id = %s %s" % (args.expid,statsel)
        cursor.execute(query)
        for row in cursor.fetchall():
            print " | ".join(map(str,row)), "dm"
            
    if args.dmana or ( not args.dm):
        query = "SELECT * FROM data_migration_ana WHERE exper_id = %s %s" % (args.expid,statsel)
        cursor.execute(query)
        for row in cursor.fetchall():
            print "%s%s %s%s" % (col_start, " | ".join(map(str,row)), 'dmana', col_stop)


def do_list_cmd(args, conn):
    """ list file migration status """

    # file status in data_migration table
    if args.status:
        status_query(args, conn)
        return

    cursor = conn.cursor()
    if args.max:
        # latest run (max runnr) for an experiemt in *file* table
        cursor.execute("""SELECT 'Highest run# ' || max(run) FROM file WHERE exper_id = %s""", (args.expid,))
    else:
        # all runs for an experiemt in *file* table
        cursor.execute("""SELECT * FROM file WHERE exper_id = %s""", (args.expid,))

    rows = cursor.fetchall()
    for row in rows:
        print " | ".join(map(str,row))


def do_set_cmd(args, conn):
    """ set files migration status """

    dmtable = 'data_migration_ana' if args.dmana else 'data_migration'
    print "set", args.file,  args.expid, dmtable

    sql_cmd="UPDATE %s SET status='WAIT' where file='%s' and exper_id = %d" % (
        dmtable, args.file, args.expid)

    cursor = conn.cursor()
    cursor.execute(sql_cmd)
    conn.commit()


def do_addfile_cmd(args, conn):
    """ Add an entry to the file table """

    fn = construct_file_path(args)
    now_ns = long(time.time()) * 1E9
    sql_cmd="INSERT into FILE VALUES(%d,%d,%d,%d,%d,'%s','%s')" % (
        args.expid, args.runnr, args.stream, args.chunk, now_ns,
        args.src_host, fn)
    print sql_cmd
    cursor = conn.cursor()
    cursor.execute(sql_cmd)
    conn.commit()


# =======================================================================================================


usage = """ Add a file to the test regdb database. Query or set the status of files. """

epilog = """

Examples: 

list files that are waiting for transfer:
  dmtest_data_migr_status list --status wait 

"""



def main():

    parser = argparse.ArgumentParser(description=usage, epilog=epilog)
    parser.add_argument("--expid", type=int, default=18, help="experiment id (default: 18 amodaq09")
    parser.add_argument("--color", default=False, action="store_true", help="do not use colors")
    
    subparsers = parser.add_subparsers(help='commands', dest="parser_name")

    # list command

    list_parser = subparsers.add_parser('list', help='List files status')
    list_parser.add_argument('--max', action='store_true', default=False, 
                             help='largest run# for an experiment (in file table). Default is all')
    list_parser.add_argument('--status', choices=('wait','done','all'), action='store', default=False, 
                             help='status of files in data_migration table')
    list_parser.add_argument("--dmana", default=False, action="store_true",
                            help="Check only the data-migration-ana table") 
    list_parser.add_argument("--dm", default=False, action="store_true",
                            help="Check only the data-migration table") 
    list_parser.set_defaults(func=do_list_cmd)


    # add file command
    add_parser = subparsers.add_parser('add', help='add run to file table')
    add_parser.add_argument("--with-fn", default=False, action="store_true",
                            help="src_path contains file name") 
    add_parser.add_argument("runnr", type=int, help="run number")
    add_parser.add_argument("stream", type=int, help="stream")
    add_parser.add_argument("chunk", type=int, help="chunck")
    add_parser.add_argument("src_host", help="src host")
    add_parser.add_argument("src_path", help="src path of file (file name not included, it will be constructed)")
    add_parser.set_defaults(func=do_addfile_cmd)

    # A add run command
    set_parser = subparsers.add_parser('set', 
                                       help='set wait state for file in data-migration or data-migration-ana')
    set_parser.add_argument("file", help="filename to set the file status")
    set_parser.add_argument("--dmana", default=False, action="store_true",
                            help="Update file status in data-migration-ana (default data-migration)") 
    set_parser.set_defaults(func=do_set_cmd)
    

    args = parser.parse_args()

    db = DbConnection(conn_string=_conn_str)
    conn = db.connection()


    if not args.color:
        global col_start
        global col_stop
        col_stop = col_start = ""


    print "exper-id", args.expid, "(%s)" % regdb.id2name(args.expid)

    args.func(args, conn)
    


if __name__ == "__main__":
    main()

