#ifndef PSDDL_HDF2PSANA_RAYONIX_DDL_H
#define PSDDL_HDF2PSANA_RAYONIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/rayonix.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
#include "psddl_hdf2psana/ChunkPolicy.h"
namespace psddl_hdf2psana {
namespace Rayonix {

namespace ns_ConfigV1_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::Rayonix::ConfigV1& psanaobj);
  ~dataset_config();

  uint8_t binning_f;
  uint8_t binning_s;
  uint32_t exposure;
  uint32_t trigger;
  uint16_t rawMode;
  uint16_t darkFlag;
  uint32_t readoutMode;
  char deviceID[40];


};
}


class ConfigV1_v0 : public Psana::Rayonix::ConfigV1 {
public:
  typedef Psana::Rayonix::ConfigV1 PsanaType;
  ConfigV1_v0() {}
  ConfigV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  ConfigV1_v0(const boost::shared_ptr<Rayonix::ns_ConfigV1_v0::dataset_config>& ds) : m_ds_config(ds) {}
  virtual ~ConfigV1_v0() {}
  virtual uint8_t binning_f() const;
  virtual uint8_t binning_s() const;
  virtual uint32_t exposure() const;
  virtual uint32_t trigger() const;
  virtual uint16_t rawMode() const;
  virtual uint16_t darkFlag() const;
  virtual Psana::Rayonix::ConfigV1::ReadoutMode readoutMode() const;
  virtual const char* deviceID() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<Rayonix::ns_ConfigV1_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::Rayonix::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::Rayonix::ConfigV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::Rayonix::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::Rayonix::ConfigV1* obj, hdf5pp::Group group, long index = -1, int version = -1);


namespace ns_ConfigV2_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::Rayonix::ConfigV2& psanaobj);
  ~dataset_config();

  uint8_t binning_f;
  uint8_t binning_s;
  int16_t testPattern;
  uint32_t exposure;
  uint32_t trigger;
  uint16_t rawMode;
  uint16_t darkFlag;
  uint32_t readoutMode;
  char* deviceID;


};
}


class ConfigV2_v0 : public Psana::Rayonix::ConfigV2 {
public:
  typedef Psana::Rayonix::ConfigV2 PsanaType;
  ConfigV2_v0() {}
  ConfigV2_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  ConfigV2_v0(const boost::shared_ptr<Rayonix::ns_ConfigV2_v0::dataset_config>& ds) : m_ds_config(ds) {}
  virtual ~ConfigV2_v0() {}
  virtual uint8_t binning_f() const;
  virtual uint8_t binning_s() const;
  virtual int16_t testPattern() const;
  virtual uint32_t exposure() const;
  virtual uint32_t trigger() const;
  virtual uint16_t rawMode() const;
  virtual uint16_t darkFlag() const;
  virtual Psana::Rayonix::ConfigV2::ReadoutMode readoutMode() const;
  virtual const char* deviceID() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<Rayonix::ns_ConfigV2_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::Rayonix::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::Rayonix::ConfigV2& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::Rayonix::ConfigV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::Rayonix::ConfigV2* obj, hdf5pp::Group group, long index = -1, int version = -1);

} // namespace Rayonix
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_RAYONIX_DDL_H
