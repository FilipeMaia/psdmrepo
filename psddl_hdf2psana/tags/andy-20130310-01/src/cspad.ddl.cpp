
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/cspad.ddl.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/cspad.ddlm.h"
#include "psddl_hdf2psana/cspad.ddlm.h"
namespace psddl_hdf2psana {
namespace CsPad {

hdf5pp::Type ns_CsPadDigitalPotsCfg_v0_dataset_pots_stored_type()
{
  typedef ns_CsPadDigitalPotsCfg_v0::dataset_pots DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pots", offsetof(DsType, pots), hdf5pp::TypeTraits<uint8_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPadDigitalPotsCfg_v0::dataset_pots::stored_type()
{
  static hdf5pp::Type type = ns_CsPadDigitalPotsCfg_v0_dataset_pots_stored_type();
  return type;
}

hdf5pp::Type ns_CsPadDigitalPotsCfg_v0_dataset_pots_native_type()
{
  typedef ns_CsPadDigitalPotsCfg_v0::dataset_pots DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pots", offsetof(DsType, pots), hdf5pp::TypeTraits<uint8_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPadDigitalPotsCfg_v0::dataset_pots::native_type()
{
  static hdf5pp::Type type = ns_CsPadDigitalPotsCfg_v0_dataset_pots_native_type();
  return type;
}
ns_CsPadDigitalPotsCfg_v0::dataset_pots::dataset_pots()
{
}
ns_CsPadDigitalPotsCfg_v0::dataset_pots::~dataset_pots()
{
}
ndarray<const uint8_t, 1> CsPadDigitalPotsCfg_v0::pots() const {
  if (not m_ds_pots.get()) read_ds_pots();
  boost::shared_ptr<uint8_t> ptr(m_ds_pots, m_ds_pots->pots);
  return make_ndarray(ptr, PotsPerQuad);
}
void CsPadDigitalPotsCfg_v0::read_ds_pots() const {
  m_ds_pots = hdf5pp::Utils::readGroup<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots>(m_group, "pots", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::CsPadDigitalPotsCfg> > make_CsPadDigitalPotsCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::CsPadDigitalPotsCfg> >(boost::make_shared<CsPadDigitalPotsCfg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::CsPadDigitalPotsCfg> >(boost::shared_ptr<Psana::CsPad::CsPadDigitalPotsCfg>());
  }
}

hdf5pp::Type ns_CsPadReadOnlyCfg_v0_dataset_data_stored_type()
{
  typedef ns_CsPadReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPadReadOnlyCfg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_CsPadReadOnlyCfg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_CsPadReadOnlyCfg_v0_dataset_data_native_type()
{
  typedef ns_CsPadReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPadReadOnlyCfg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_CsPadReadOnlyCfg_v0_dataset_data_native_type();
  return type;
}
ns_CsPadReadOnlyCfg_v0::dataset_data::dataset_data()
{
}
ns_CsPadReadOnlyCfg_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::CsPad::CsPadReadOnlyCfg>
Proxy_CsPadReadOnlyCfg_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->shiftTest, ds_data->version));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::CsPadReadOnlyCfg> > make_CsPadReadOnlyCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_CsPadReadOnlyCfg_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::CsPadReadOnlyCfg> >(boost::shared_ptr<Psana::CsPad::CsPadReadOnlyCfg>());
  }
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_stored_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_native_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_native_type();
  return type;
}
ns_ProtectionSystemThreshold_v0::dataset_data::dataset_data()
{
}
ns_ProtectionSystemThreshold_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::CsPad::ProtectionSystemThreshold>
Proxy_ProtectionSystemThreshold_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->adcThreshold, ds_data->pixelCountThreshold));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ProtectionSystemThreshold> > make_ProtectionSystemThreshold(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_ProtectionSystemThreshold_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ProtectionSystemThreshold> >(boost::shared_ptr<Psana::CsPad::ProtectionSystemThreshold>());
  }
}

hdf5pp::Type ns_CsPadGainMapCfg_v0_dataset_gainMap_stored_type()
{
  typedef ns_CsPadGainMapCfg_v0::dataset_gainMap DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPadGainMapCfg_v0::dataset_gainMap::stored_type()
{
  static hdf5pp::Type type = ns_CsPadGainMapCfg_v0_dataset_gainMap_stored_type();
  return type;
}

hdf5pp::Type ns_CsPadGainMapCfg_v0_dataset_gainMap_native_type()
{
  typedef ns_CsPadGainMapCfg_v0::dataset_gainMap DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPadGainMapCfg_v0::dataset_gainMap::native_type()
{
  static hdf5pp::Type type = ns_CsPadGainMapCfg_v0_dataset_gainMap_native_type();
  return type;
}
ns_CsPadGainMapCfg_v0::dataset_gainMap::dataset_gainMap()
{
}
ns_CsPadGainMapCfg_v0::dataset_gainMap::~dataset_gainMap()
{
}
ndarray<const uint16_t, 2> CsPadGainMapCfg_v0::gainMap() const {
  if (not m_ds_gainMap.get()) read_ds_gainMap();
  boost::shared_ptr<uint16_t> ptr(m_ds_gainMap, m_ds_gainMap->gainMap);
  return make_ndarray(ptr, ColumnsPerASIC,MaxRowsPerASIC);
}
void CsPadGainMapCfg_v0::read_ds_gainMap() const {
  m_ds_gainMap = hdf5pp::Utils::readGroup<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap>(m_group, "gainMap", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::CsPadGainMapCfg> > make_CsPadGainMapCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::CsPadGainMapCfg> >(boost::make_shared<CsPadGainMapCfg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::CsPadGainMapCfg> >(boost::shared_ptr<Psana::CsPad::CsPadGainMapCfg>());
  }
}

hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap>::stored_type());
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap>::native_type());
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_native_type();
  return type;
}
ns_ConfigV1QuadReg_v0::dataset_data::dataset_data()
{
}
ns_ConfigV1QuadReg_v0::dataset_data::~dataset_data()
{
}
ndarray<const uint32_t, 1> ConfigV1QuadReg_v0::shiftSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->shiftSelect);
  return make_ndarray(ptr, TwoByTwosPerQuad);
}
ndarray<const uint32_t, 1> ConfigV1QuadReg_v0::edgeSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->edgeSelect);
  return make_ndarray(ptr, TwoByTwosPerQuad);
}
uint32_t ConfigV1QuadReg_v0::readClkSet() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV1QuadReg_v0::readClkHold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV1QuadReg_v0::dataMode() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV1QuadReg_v0::prstSel() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV1QuadReg_v0::acqDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV1QuadReg_v0::intTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV1QuadReg_v0::digDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV1QuadReg_v0::ampIdle() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV1QuadReg_v0::injTotal() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV1QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
const Psana::CsPad::CsPadReadOnlyCfg& ConfigV1QuadReg_v0::ro() const {
  if (not m_ds_data.get()) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad::CsPadReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad::CsPadDigitalPotsCfg& ConfigV1QuadReg_v0::dp() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPadDigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad::CsPadGainMapCfg& ConfigV1QuadReg_v0::gm() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPadGainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV1QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV1QuadReg> > make_ConfigV1QuadReg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV1QuadReg> >(boost::make_shared<ConfigV1QuadReg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV1QuadReg> >(boost::shared_ptr<Psana::CsPad::ConfigV1QuadReg>());
  }
}

hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap>::stored_type());
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad::ns_CsPadReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap>::native_type());
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_native_type();
  return type;
}
ns_ConfigV2QuadReg_v0::dataset_data::dataset_data()
{
}
ns_ConfigV2QuadReg_v0::dataset_data::~dataset_data()
{
}
ndarray<const uint32_t, 1> ConfigV2QuadReg_v0::shiftSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->shiftSelect);
  return make_ndarray(ptr, TwoByTwosPerQuad);
}
ndarray<const uint32_t, 1> ConfigV2QuadReg_v0::edgeSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->edgeSelect);
  return make_ndarray(ptr, TwoByTwosPerQuad);
}
uint32_t ConfigV2QuadReg_v0::readClkSet() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV2QuadReg_v0::readClkHold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV2QuadReg_v0::dataMode() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV2QuadReg_v0::prstSel() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV2QuadReg_v0::acqDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV2QuadReg_v0::intTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV2QuadReg_v0::digDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV2QuadReg_v0::ampIdle() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV2QuadReg_v0::injTotal() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV2QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
uint32_t ConfigV2QuadReg_v0::ampReset() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampReset);
}
uint32_t ConfigV2QuadReg_v0::digCount() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digCount);
}
uint32_t ConfigV2QuadReg_v0::digPeriod() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digPeriod);
}
const Psana::CsPad::CsPadReadOnlyCfg& ConfigV2QuadReg_v0::ro() const {
  if (not m_ds_data.get()) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad::CsPadReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad::CsPadDigitalPotsCfg& ConfigV2QuadReg_v0::dp() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad::ns_CsPadDigitalPotsCfg_v0::dataset_pots> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPadDigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad::CsPadGainMapCfg& ConfigV2QuadReg_v0::gm() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad::ns_CsPadGainMapCfg_v0::dataset_gainMap> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPadGainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV2QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV2QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV2QuadReg> > make_ConfigV2QuadReg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV2QuadReg> >(boost::make_shared<ConfigV2QuadReg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV2QuadReg> >(boost::shared_ptr<Psana::CsPad::ConfigV2QuadReg>());
  }
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
uint32_t ConfigV1_v0::runDelay() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->runDelay);
}
uint32_t ConfigV1_v0::eventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->eventCode);
}
uint32_t ConfigV1_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV1_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV1_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV1_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV1_v0::badAsicMask0() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask0);
}
uint32_t ConfigV1_v0::badAsicMask1() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask1);
}
uint32_t ConfigV1_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV1_v0::quadMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->quadMask);
}
const Psana::CsPad::ConfigV1QuadReg& ConfigV1_v0::quads(uint32_t i0) const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_quads.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<ConfigV1QuadReg_v0, 1> tmparr(shape);
    for (int i = 0; i != 4; ++ i) {
      boost::shared_ptr<CsPad::ns_ConfigV1QuadReg_v0::dataset_data> ptr(m_ds_config, &m_ds_config->quads[i]);
      tmparr.begin()[i] = ConfigV1QuadReg_v0(ptr);
    }
    m_ds_storage_config_quads = tmparr;
  }
  return m_ds_storage_config_quads[i0];
}
uint32_t ConfigV1_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t ConfigV1_v0::numQuads() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numQuads);
}
uint32_t ConfigV1_v0::numSect() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numSect);
}
std::vector<int>
ConfigV1_v0::quads_shape() const{ 
  int shape[] = { MaxQuadsPerSensor };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV1> >(boost::shared_ptr<Psana::CsPad::ConfigV1>());
  }
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV2_v0::dataset_config::dataset_config()
{
}
ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
uint32_t ConfigV2_v0::runDelay() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->runDelay);
}
uint32_t ConfigV2_v0::eventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->eventCode);
}
uint32_t ConfigV2_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV2_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV2_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV2_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV2_v0::badAsicMask0() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask0);
}
uint32_t ConfigV2_v0::badAsicMask1() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask1);
}
uint32_t ConfigV2_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV2_v0::quadMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->quadMask);
}
uint32_t ConfigV2_v0::roiMasks() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->roiMasks);
}
const Psana::CsPad::ConfigV1QuadReg& ConfigV2_v0::quads(uint32_t i0) const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_quads.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<ConfigV1QuadReg_v0, 1> tmparr(shape);
    for (int i = 0; i != 4; ++ i) {
      boost::shared_ptr<CsPad::ns_ConfigV1QuadReg_v0::dataset_data> ptr(m_ds_config, &m_ds_config->quads[i]);
      tmparr.begin()[i] = ConfigV1QuadReg_v0(ptr);
    }
    m_ds_storage_config_quads = tmparr;
  }
  return m_ds_storage_config_quads[i0];
}
uint32_t ConfigV2_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t
ConfigV2_v0::roiMask(uint32_t iq) const{ 
return (this->roiMasks() >> (8*iq)) & 0xff; 
}
uint32_t
ConfigV2_v0::numAsicsStored(uint32_t iq) const{ 
return __builtin_popcount(this->roiMask(iq))*2; 
}
uint32_t ConfigV2_v0::numQuads() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numQuads);
}
uint32_t ConfigV2_v0::numSect() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numSect);
}
std::vector<int>
ConfigV2_v0::quads_shape() const{ 
  int shape[] = { MaxQuadsPerSensor };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV2> >(boost::shared_ptr<Psana::CsPad::ConfigV2>());
  }
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThresholds", offsetof(DsType, protectionThresholds), hdf5pp::TypeTraits<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_native_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThresholds", offsetof(DsType, protectionThresholds), hdf5pp::TypeTraits<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV1QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV3_v0::dataset_config::dataset_config()
{
}
ns_ConfigV3_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV3_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
uint32_t ConfigV3_v0::runDelay() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->runDelay);
}
uint32_t ConfigV3_v0::eventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->eventCode);
}
ndarray<const Psana::CsPad::ProtectionSystemThreshold, 1> ConfigV3_v0::protectionThresholds() const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_protectionThresholds.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<Psana::CsPad::ProtectionSystemThreshold, 1> tmparr(shape);
    std::copy(m_ds_config->protectionThresholds, m_ds_config->protectionThresholds+4, tmparr.begin());
    m_ds_storage_config_protectionThresholds = tmparr;
  }
  return m_ds_storage_config_protectionThresholds;
}
uint32_t ConfigV3_v0::protectionEnable() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV3_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV3_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV3_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV3_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV3_v0::badAsicMask0() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask0);
}
uint32_t ConfigV3_v0::badAsicMask1() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask1);
}
uint32_t ConfigV3_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV3_v0::quadMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->quadMask);
}
uint32_t ConfigV3_v0::roiMasks() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->roiMasks);
}
const Psana::CsPad::ConfigV1QuadReg& ConfigV3_v0::quads(uint32_t i0) const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_quads.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<ConfigV1QuadReg_v0, 1> tmparr(shape);
    for (int i = 0; i != 4; ++ i) {
      boost::shared_ptr<CsPad::ns_ConfigV1QuadReg_v0::dataset_data> ptr(m_ds_config, &m_ds_config->quads[i]);
      tmparr.begin()[i] = ConfigV1QuadReg_v0(ptr);
    }
    m_ds_storage_config_quads = tmparr;
  }
  return m_ds_storage_config_quads[i0];
}
uint32_t ConfigV3_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t
ConfigV3_v0::roiMask(uint32_t iq) const{ 
return (this->roiMasks() >> (8*iq)) & 0xff; 
}
uint32_t
ConfigV3_v0::numAsicsStored(uint32_t iq) const{ 
return __builtin_popcount(this->roiMask(iq))*2; 
}
uint32_t ConfigV3_v0::numQuads() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numQuads);
}
uint32_t ConfigV3_v0::numSect() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numSect);
}
std::vector<int>
ConfigV3_v0::quads_shape() const{ 
  int shape[] = { MaxQuadsPerSensor };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV3_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV3_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV3> > make_ConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV3> >(boost::make_shared<ConfigV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV3> >(boost::shared_ptr<Psana::CsPad::ConfigV3>());
  }
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThresholds", offsetof(DsType, protectionThresholds), hdf5pp::TypeTraits<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV2QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_native_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runDelay", offsetof(DsType, runDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask0", offsetof(DsType, badAsicMask0), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask1", offsetof(DsType, badAsicMask1), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quadMask", offsetof(DsType, quadMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMasks", offsetof(DsType, roiMasks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numQuads", offsetof(DsType, numQuads), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numSect", offsetof(DsType, numSect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThresholds", offsetof(DsType, protectionThresholds), hdf5pp::TypeTraits<CsPad::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("quads", offsetof(DsType, quads), hdf5pp::TypeTraits<CsPad::ns_ConfigV2QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV4_v0::dataset_config::dataset_config()
{
}
ns_ConfigV4_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV4_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
uint32_t ConfigV4_v0::runDelay() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->runDelay);
}
uint32_t ConfigV4_v0::eventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->eventCode);
}
ndarray<const Psana::CsPad::ProtectionSystemThreshold, 1> ConfigV4_v0::protectionThresholds() const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_protectionThresholds.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<Psana::CsPad::ProtectionSystemThreshold, 1> tmparr(shape);
    std::copy(m_ds_config->protectionThresholds, m_ds_config->protectionThresholds+4, tmparr.begin());
    m_ds_storage_config_protectionThresholds = tmparr;
  }
  return m_ds_storage_config_protectionThresholds;
}
uint32_t ConfigV4_v0::protectionEnable() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV4_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV4_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV4_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV4_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV4_v0::badAsicMask0() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask0);
}
uint32_t ConfigV4_v0::badAsicMask1() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask1);
}
uint32_t ConfigV4_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV4_v0::quadMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->quadMask);
}
uint32_t ConfigV4_v0::roiMasks() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->roiMasks);
}
const Psana::CsPad::ConfigV2QuadReg& ConfigV4_v0::quads(uint32_t i0) const {
  if (not m_ds_config.get()) read_ds_config();
  if (m_ds_storage_config_quads.empty()) {
    unsigned shape[] = {MaxQuadsPerSensor};
    ndarray<ConfigV2QuadReg_v0, 1> tmparr(shape);
    for (int i = 0; i != 4; ++ i) {
      boost::shared_ptr<CsPad::ns_ConfigV2QuadReg_v0::dataset_data> ptr(m_ds_config, &m_ds_config->quads[i]);
      tmparr.begin()[i] = ConfigV2QuadReg_v0(ptr);
    }
    m_ds_storage_config_quads = tmparr;
  }
  return m_ds_storage_config_quads[i0];
}
uint32_t ConfigV4_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t
ConfigV4_v0::roiMask(uint32_t iq) const{ 
return (this->roiMasks() >> (8*iq)) & 0xff; 
}
uint32_t
ConfigV4_v0::numAsicsStored(uint32_t iq) const{ 
return __builtin_popcount(this->roiMask(iq))*2; 
}
uint32_t ConfigV4_v0::numQuads() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numQuads);
}
uint32_t ConfigV4_v0::numSect() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numSect);
}
std::vector<int>
ConfigV4_v0::quads_shape() const{ 
  int shape[] = { MaxQuadsPerSensor };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV4_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad::ns_ConfigV4_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ConfigV4> > make_ConfigV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV4> >(boost::make_shared<ConfigV4_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ConfigV4> >(boost::shared_ptr<Psana::CsPad::ConfigV4>());
  }
}

hdf5pp::Type ns_ElementV1_v0_dataset_element_stored_type()
{
  typedef ns_ElementV1_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sectionMask", offsetof(DsType, sectionMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_element::stored_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_element_stored_type();
  return type;
}

hdf5pp::Type ns_ElementV1_v0_dataset_element_native_type()
{
  typedef ns_ElementV1_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sectionMask", offsetof(DsType, sectionMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_element::native_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_element_native_type();
  return type;
}
ns_ElementV1_v0::dataset_element::dataset_element()
{
}
ns_ElementV1_v0::dataset_element::~dataset_element()
{
}
template <typename Config>
uint32_t ElementV1_v0<Config>::virtual_channel() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->virtual_channel);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::lane() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->lane);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::tid() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->tid);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::acq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->acq_count);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::op_code() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->op_code);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::quad() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->quad);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::seq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->seq_count);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::ticks() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->ticks);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::fiducials() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->fiducials);
}
template <typename Config>
ndarray<const uint16_t, 1> ElementV1_v0<Config>::sb_temp() const {
  if (not m_ds_element.get()) read_ds_element();
  boost::shared_ptr<uint16_t> ptr(m_ds_element, m_ds_element->sb_temp);
  return make_ndarray(ptr, Nsbtemp);
}
template <typename Config>
uint32_t ElementV1_v0<Config>::frame_type() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->frame_type);
}
template <typename Config>
ndarray<const int16_t, 3> ElementV1_v0<Config>::data() const {
  if (m_ds_data.empty()) read_ds_data();
  return m_ds_data;
}
template <typename Config>
uint32_t ElementV1_v0<Config>::sectionMask() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->sectionMask);
}
template <typename Config>
float
ElementV1_v0<Config>::common_mode(uint32_t section) const{ 
return 0; 
}
template <typename Config>
void ElementV1_v0<Config>::read_ds_element() const {
  m_ds_element = hdf5pp::Utils::readGroup<CsPad::ns_ElementV1_v0::dataset_element>(m_group, "element", m_idx);
}
template <typename Config>
void ElementV1_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readNdarray<int16_t, 3>(m_group, "data", m_idx);
}
template class ElementV1_v0<Psana::CsPad::ConfigV1>;
template class ElementV1_v0<Psana::CsPad::ConfigV2>;
template class ElementV1_v0<Psana::CsPad::ConfigV3>;
template class ElementV1_v0<Psana::CsPad::ConfigV4>;
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::make_shared<ElementV1_v0<Psana::CsPad::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::shared_ptr<Psana::CsPad::ElementV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::make_shared<ElementV1_v0<Psana::CsPad::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::shared_ptr<Psana::CsPad::ElementV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::make_shared<ElementV1_v0<Psana::CsPad::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::shared_ptr<Psana::CsPad::ElementV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::make_shared<ElementV1_v0<Psana::CsPad::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV1> >(boost::shared_ptr<Psana::CsPad::ElementV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::make_shared<DataV1_v0<Psana::CsPad::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::shared_ptr<Psana::CsPad::DataV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::make_shared<DataV1_v0<Psana::CsPad::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::shared_ptr<Psana::CsPad::DataV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::make_shared<DataV1_v0<Psana::CsPad::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::shared_ptr<Psana::CsPad::DataV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::make_shared<DataV1_v0<Psana::CsPad::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV1> >(boost::shared_ptr<Psana::CsPad::DataV1>());
  }
}

hdf5pp::Type ns_ElementV2_v0_dataset_element_stored_type()
{
  typedef ns_ElementV2_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sectionMask", offsetof(DsType, sectionMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ElementV2_v0::dataset_element::stored_type()
{
  static hdf5pp::Type type = ns_ElementV2_v0_dataset_element_stored_type();
  return type;
}

hdf5pp::Type ns_ElementV2_v0_dataset_element_native_type()
{
  typedef ns_ElementV2_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sectionMask", offsetof(DsType, sectionMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ElementV2_v0::dataset_element::native_type()
{
  static hdf5pp::Type type = ns_ElementV2_v0_dataset_element_native_type();
  return type;
}
ns_ElementV2_v0::dataset_element::dataset_element()
{
}
ns_ElementV2_v0::dataset_element::~dataset_element()
{
}
template <typename Config>
uint32_t ElementV2_v0<Config>::virtual_channel() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->virtual_channel);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::lane() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->lane);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::tid() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->tid);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::acq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->acq_count);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::op_code() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->op_code);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::quad() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->quad);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::seq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->seq_count);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::ticks() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->ticks);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::fiducials() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->fiducials);
}
template <typename Config>
ndarray<const uint16_t, 1> ElementV2_v0<Config>::sb_temp() const {
  if (not m_ds_element.get()) read_ds_element();
  boost::shared_ptr<uint16_t> ptr(m_ds_element, m_ds_element->sb_temp);
  return make_ndarray(ptr, Nsbtemp);
}
template <typename Config>
uint32_t ElementV2_v0<Config>::frame_type() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->frame_type);
}
template <typename Config>
ndarray<const int16_t, 3> ElementV2_v0<Config>::data() const {
  if (m_ds_data.empty()) read_ds_data();
  return m_ds_data;
}
template <typename Config>
uint32_t ElementV2_v0<Config>::sectionMask() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->sectionMask);
}
template <typename Config>
float
ElementV2_v0<Config>::common_mode(uint32_t section) const{ 
return 0; 
}
template <typename Config>
void ElementV2_v0<Config>::read_ds_element() const {
  m_ds_element = hdf5pp::Utils::readGroup<CsPad::ns_ElementV2_v0::dataset_element>(m_group, "element", m_idx);
}
template <typename Config>
void ElementV2_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readNdarray<int16_t, 3>(m_group, "data", m_idx);
}
template class ElementV2_v0<Psana::CsPad::ConfigV2>;
template class ElementV2_v0<Psana::CsPad::ConfigV3>;
template class ElementV2_v0<Psana::CsPad::ConfigV4>;
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV2> > make_ElementV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::make_shared<ElementV2_v0<Psana::CsPad::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::shared_ptr<Psana::CsPad::ElementV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV2> > make_ElementV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::make_shared<ElementV2_v0<Psana::CsPad::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::shared_ptr<Psana::CsPad::ElementV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::ElementV2> > make_ElementV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::make_shared<ElementV2_v0<Psana::CsPad::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::ElementV2> >(boost::shared_ptr<Psana::CsPad::ElementV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::make_shared<DataV2_v0<Psana::CsPad::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::shared_ptr<Psana::CsPad::DataV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::make_shared<DataV2_v0<Psana::CsPad::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::shared_ptr<Psana::CsPad::DataV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::CsPad::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::make_shared<DataV2_v0<Psana::CsPad::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad::DataV2> >(boost::shared_ptr<Psana::CsPad::DataV2>());
  }
}
} // namespace CsPad
} // namespace psddl_hdf2psana
