
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/princeton.ddl.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
namespace psddl_hdf2psana {
namespace Princeton {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV1_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV1_v0::orgX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV1_v0::orgY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV1_v0::binX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV1_v0::binY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV1_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV1_v0::coolingTemp() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint32_t ConfigV1_v0::readoutSpeedIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV1_v0::readoutEventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->readoutEventCode);
}
uint16_t ConfigV1_v0::delayMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->delayMode);
}
uint32_t ConfigV1_v0::frameSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->frameSize);
}
uint32_t ConfigV1_v0::numPixelsX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsX);
}
uint32_t ConfigV1_v0::numPixelsY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsY);
}
uint32_t ConfigV1_v0::numPixels() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixels);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV1> >(boost::shared_ptr<Psana::Princeton::ConfigV1>());
  }
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV2_v0::dataset_config::dataset_config()
{
}
ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV2_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV2_v0::orgX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV2_v0::orgY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV2_v0::binX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV2_v0::binY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV2_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV2_v0::coolingTemp() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint16_t ConfigV2_v0::gainIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->gainIndex);
}
uint16_t ConfigV2_v0::readoutSpeedIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV2_v0::readoutEventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->readoutEventCode);
}
uint16_t ConfigV2_v0::delayMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->delayMode);
}
uint32_t ConfigV2_v0::frameSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->frameSize);
}
uint32_t ConfigV2_v0::numPixelsX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsX);
}
uint32_t ConfigV2_v0::numPixelsY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsY);
}
uint32_t ConfigV2_v0::numPixels() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixels);
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV2> >(boost::shared_ptr<Psana::Princeton::ConfigV2>());
  }
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_native_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV3_v0::dataset_config::dataset_config()
{
}
ns_ConfigV3_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV3_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV3_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV3_v0::orgX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV3_v0::orgY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV3_v0::binX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV3_v0::binY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV3_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV3_v0::coolingTemp() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint8_t ConfigV3_v0::gainIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->gainIndex);
}
uint8_t ConfigV3_v0::readoutSpeedIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV3_v0::exposureEventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV3_v0::numDelayShots() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t ConfigV3_v0::frameSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->frameSize);
}
uint32_t ConfigV3_v0::numPixelsX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsX);
}
uint32_t ConfigV3_v0::numPixelsY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsY);
}
uint32_t ConfigV3_v0::numPixels() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixels);
}
void ConfigV3_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV3_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV3> > make_ConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV3> >(boost::make_shared<ConfigV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV3> >(boost::shared_ptr<Psana::Princeton::ConfigV3>());
  }
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_native_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV4_v0::dataset_config::dataset_config()
{
}
ns_ConfigV4_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV4_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV4_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV4_v0::orgX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV4_v0::orgY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV4_v0::binX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV4_v0::binY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
uint32_t ConfigV4_v0::maskedHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->maskedHeight);
}
uint32_t ConfigV4_v0::kineticHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->kineticHeight);
}
float ConfigV4_v0::vsSpeed() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->vsSpeed);
}
float ConfigV4_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV4_v0::coolingTemp() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint8_t ConfigV4_v0::gainIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->gainIndex);
}
uint8_t ConfigV4_v0::readoutSpeedIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV4_v0::exposureEventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV4_v0::numDelayShots() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t ConfigV4_v0::frameSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->frameSize);
}
uint32_t ConfigV4_v0::numPixelsX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsX);
}
uint32_t ConfigV4_v0::numPixelsY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsY);
}
uint32_t ConfigV4_v0::numPixels() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixels);
}
void ConfigV4_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV4_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV4> > make_ConfigV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV4> >(boost::make_shared<ConfigV4_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV4> >(boost::shared_ptr<Psana::Princeton::ConfigV4>());
  }
}

hdf5pp::Type ns_ConfigV5_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("infoReportInterval", offsetof(DsType, infoReportInterval), hdf5pp::TypeTraits<int16_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV5_v0_dataset_config_native_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::native_type());
  type.insert("infoReportInterval", offsetof(DsType, infoReportInterval), hdf5pp::TypeTraits<int16_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frameSize", offsetof(DsType, frameSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsX", offsetof(DsType, numPixelsX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixelsY", offsetof(DsType, numPixelsY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numPixels", offsetof(DsType, numPixels), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV5_v0::dataset_config::dataset_config()
{
}
ns_ConfigV5_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV5_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV5_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV5_v0::orgX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV5_v0::orgY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV5_v0::binX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV5_v0::binY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV5_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV5_v0::coolingTemp() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint16_t ConfigV5_v0::gainIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->gainIndex);
}
uint16_t ConfigV5_v0::readoutSpeedIndex() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->readoutSpeedIndex);
}
uint32_t ConfigV5_v0::maskedHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->maskedHeight);
}
uint32_t ConfigV5_v0::kineticHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->kineticHeight);
}
float ConfigV5_v0::vsSpeed() const {
  if (not m_ds_config.get()) read_ds_config();
  return float(m_ds_config->vsSpeed);
}
int16_t ConfigV5_v0::infoReportInterval() const {
  if (not m_ds_config.get()) read_ds_config();
  return int16_t(m_ds_config->infoReportInterval);
}
uint16_t ConfigV5_v0::exposureEventCode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV5_v0::numDelayShots() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t ConfigV5_v0::frameSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->frameSize);
}
uint32_t ConfigV5_v0::numPixelsX() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsX);
}
uint32_t ConfigV5_v0::numPixelsY() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixelsY);
}
uint32_t ConfigV5_v0::numPixels() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numPixels);
}
void ConfigV5_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV5_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV5> > make_ConfigV5(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV5> >(boost::make_shared<ConfigV5_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV5> >(boost::shared_ptr<Psana::Princeton::ConfigV5>());
  }
}

hdf5pp::Type ns_FrameV1_v0_dataset_data_stored_type()
{
  typedef ns_FrameV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_FrameV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_FrameV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_FrameV1_v0_dataset_data_native_type()
{
  typedef ns_FrameV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_FrameV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_FrameV1_v0_dataset_data_native_type();
  return type;
}
ns_FrameV1_v0::dataset_data::dataset_data()
{
}
ns_FrameV1_v0::dataset_data::~dataset_data()
{
}
template <typename Config>
uint32_t FrameV1_v0<Config>::shotIdStart() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->shotIdStart);
}
template <typename Config>
float FrameV1_v0<Config>::readoutTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return float(m_ds_data->readoutTime);
}
template <typename Config>
ndarray<const uint16_t, 2> FrameV1_v0<Config>::data() const {
  if (m_ds_image.empty()) read_ds_image();
  return m_ds_image;
}
template <typename Config>
void FrameV1_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Princeton::ns_FrameV1_v0::dataset_data>(m_group, "data", m_idx);
}
template <typename Config>
void FrameV1_v0<Config>::read_ds_image() const {
  m_ds_image = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "image", m_idx);
}
template class FrameV1_v0<Psana::Princeton::ConfigV1>;
template class FrameV1_v0<Psana::Princeton::ConfigV2>;
template class FrameV1_v0<Psana::Princeton::ConfigV3>;
template class FrameV1_v0<Psana::Princeton::ConfigV4>;
template class FrameV1_v0<Psana::Princeton::ConfigV5>;
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV5>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV5> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}

hdf5pp::Type ns_FrameV2_v0_dataset_data_stored_type()
{
  typedef ns_FrameV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_FrameV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_FrameV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_FrameV2_v0_dataset_data_native_type()
{
  typedef ns_FrameV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_FrameV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_FrameV2_v0_dataset_data_native_type();
  return type;
}
ns_FrameV2_v0::dataset_data::dataset_data()
{
}
ns_FrameV2_v0::dataset_data::~dataset_data()
{
}
template <typename Config>
uint32_t FrameV2_v0<Config>::shotIdStart() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->shotIdStart);
}
template <typename Config>
float FrameV2_v0<Config>::readoutTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return float(m_ds_data->readoutTime);
}
template <typename Config>
float FrameV2_v0<Config>::temperature() const {
  if (not m_ds_data.get()) read_ds_data();
  return float(m_ds_data->temperature);
}
template <typename Config>
ndarray<const uint16_t, 2> FrameV2_v0<Config>::data() const {
  if (m_ds_image.empty()) read_ds_image();
  return m_ds_image;
}
template <typename Config>
void FrameV2_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Princeton::ns_FrameV2_v0::dataset_data>(m_group, "data", m_idx);
}
template <typename Config>
void FrameV2_v0<Config>::read_ds_image() const {
  m_ds_image = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "image", m_idx);
}
template class FrameV2_v0<Psana::Princeton::ConfigV1>;
template class FrameV2_v0<Psana::Princeton::ConfigV2>;
template class FrameV2_v0<Psana::Princeton::ConfigV3>;
template class FrameV2_v0<Psana::Princeton::ConfigV4>;
template class FrameV2_v0<Psana::Princeton::ConfigV5>;
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV5>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV5> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}

hdf5pp::Type ns_InfoV1_v0_dataset_data_stored_type()
{
  typedef ns_InfoV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_InfoV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_InfoV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_InfoV1_v0_dataset_data_native_type()
{
  typedef ns_InfoV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_InfoV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_InfoV1_v0_dataset_data_native_type();
  return type;
}
ns_InfoV1_v0::dataset_data::dataset_data()
{
}
ns_InfoV1_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Princeton::InfoV1>
Proxy_InfoV1_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Princeton::ns_InfoV1_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Princeton::ns_InfoV1_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->temperature));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::InfoV1> > make_InfoV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_InfoV1_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::InfoV1> >(boost::shared_ptr<Psana::Princeton::InfoV1>());
  }
}
} // namespace Princeton
} // namespace psddl_hdf2psana
