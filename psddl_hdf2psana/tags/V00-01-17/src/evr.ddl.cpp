
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/evr.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/evr.ddlm.h"
#include "psddl_hdf2psana/evr.ddlm.h"
namespace psddl_hdf2psana {
namespace EvrData {

hdf5pp::Type ns_PulseConfig_v0_dataset_data_stored_type()
{
  typedef ns_PulseConfig_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pulse", offsetof(DsType, pulse), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("_input_control_value", offsetof(DsType, _input_control_value), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("_output_control_value", offsetof(DsType, _output_control_value), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("polarity", offsetof(DsType, polarity), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("map_set_enable", offsetof(DsType, map_set_enable), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("map_reset_enable", offsetof(DsType, map_reset_enable), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("map_trigger_enable", offsetof(DsType, map_trigger_enable), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("prescale", offsetof(DsType, prescale), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("trigger", offsetof(DsType, trigger), hdf5pp::TypeTraits<int16_t>::stored_type());
  type.insert("set", offsetof(DsType, set), hdf5pp::TypeTraits<int16_t>::stored_type());
  type.insert("clear", offsetof(DsType, clear), hdf5pp::TypeTraits<int16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_PulseConfig_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_PulseConfig_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_PulseConfig_v0_dataset_data_native_type()
{
  typedef ns_PulseConfig_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pulse", offsetof(DsType, pulse), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("_input_control_value", offsetof(DsType, _input_control_value), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("_output_control_value", offsetof(DsType, _output_control_value), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("polarity", offsetof(DsType, polarity), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("map_set_enable", offsetof(DsType, map_set_enable), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("map_reset_enable", offsetof(DsType, map_reset_enable), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("map_trigger_enable", offsetof(DsType, map_trigger_enable), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("prescale", offsetof(DsType, prescale), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("trigger", offsetof(DsType, trigger), hdf5pp::TypeTraits<int16_t>::native_type());
  type.insert("set", offsetof(DsType, set), hdf5pp::TypeTraits<int16_t>::native_type());
  type.insert("clear", offsetof(DsType, clear), hdf5pp::TypeTraits<int16_t>::native_type());
  return type;
}

hdf5pp::Type ns_PulseConfig_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_PulseConfig_v0_dataset_data_native_type();
  return type;
}
ns_PulseConfig_v0::dataset_data::dataset_data()
{
}
ns_PulseConfig_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::PulseConfig>
Proxy_PulseConfig_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_PulseConfig_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_PulseConfig_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->pulse, ds_data->trigger, ds_data->set, ds_data->clear, ds_data->polarity, ds_data->map_set_enable, ds_data->map_reset_enable, ds_data->map_trigger_enable, ds_data->prescale, ds_data->delay, ds_data->width));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::PulseConfig> > make_PulseConfig(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_PulseConfig_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::PulseConfig> >(boost::shared_ptr<Psana::EvrData::PulseConfig>());
  }
}

hdf5pp::Type ns_PulseConfigV3_v0_dataset_data_stored_type()
{
  typedef ns_PulseConfigV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pulseId", offsetof(DsType, pulseId), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("polarity", offsetof(DsType, polarity), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("prescale", offsetof(DsType, prescale), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_PulseConfigV3_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_PulseConfigV3_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_PulseConfigV3_v0_dataset_data_native_type()
{
  typedef ns_PulseConfigV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pulseId", offsetof(DsType, pulseId), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("polarity", offsetof(DsType, polarity), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("prescale", offsetof(DsType, prescale), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_PulseConfigV3_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_PulseConfigV3_v0_dataset_data_native_type();
  return type;
}
ns_PulseConfigV3_v0::dataset_data::dataset_data()
{
}
ns_PulseConfigV3_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::PulseConfigV3>
Proxy_PulseConfigV3_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_PulseConfigV3_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_PulseConfigV3_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->pulseId, ds_data->polarity, ds_data->prescale, ds_data->delay, ds_data->width));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::PulseConfigV3> > make_PulseConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_PulseConfigV3_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::PulseConfigV3> >(boost::shared_ptr<Psana::EvrData::PulseConfigV3>());
  }
}

hdf5pp::Type ns_EventCodeV3_v0_dataset_data_stored_type()
{
  typedef ns_EventCodeV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("_u16MaskEventAttr_value", offsetof(DsType, _u16MaskEventAttr_value), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isTerminator", offsetof(DsType, isTerminator), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_EventCodeV3_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_EventCodeV3_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_EventCodeV3_v0_dataset_data_native_type()
{
  typedef ns_EventCodeV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("_u16MaskEventAttr_value", offsetof(DsType, _u16MaskEventAttr_value), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isTerminator", offsetof(DsType, isTerminator), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_EventCodeV3_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_EventCodeV3_v0_dataset_data_native_type();
  return type;
}
ns_EventCodeV3_v0::dataset_data::dataset_data()
{
}
ns_EventCodeV3_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::EventCodeV3>
Proxy_EventCodeV3_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_EventCodeV3_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_EventCodeV3_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->code, ds_data->isReadout, ds_data->isTerminator, ds_data->maskTrigger, ds_data->maskSet, ds_data->maskClear));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::EventCodeV3> > make_EventCodeV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_EventCodeV3_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::EventCodeV3> >(boost::shared_ptr<Psana::EvrData::EventCodeV3>());
  }
}

hdf5pp::Type ns_EventCodeV4_v0_dataset_data_stored_type()
{
  typedef ns_EventCodeV4_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("_u16MaskEventAttr_value", offsetof(DsType, _u16MaskEventAttr_value), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isTerminator", offsetof(DsType, isTerminator), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_EventCodeV4_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_EventCodeV4_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_EventCodeV4_v0_dataset_data_native_type()
{
  typedef ns_EventCodeV4_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("_u16MaskEventAttr_value", offsetof(DsType, _u16MaskEventAttr_value), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isTerminator", offsetof(DsType, isTerminator), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_EventCodeV4_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_EventCodeV4_v0_dataset_data_native_type();
  return type;
}
ns_EventCodeV4_v0::dataset_data::dataset_data()
{
}
ns_EventCodeV4_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::EventCodeV4>
Proxy_EventCodeV4_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_EventCodeV4_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_EventCodeV4_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->code, ds_data->isReadout, ds_data->isTerminator, ds_data->reportDelay, ds_data->reportWidth, ds_data->maskTrigger, ds_data->maskSet, ds_data->maskClear));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::EventCodeV4> > make_EventCodeV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_EventCodeV4_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::EventCodeV4> >(boost::shared_ptr<Psana::EvrData::EventCodeV4>());
  }
}

hdf5pp::Type ns_EventCodeV5_v0_dataset_data_stored_type()
{
  typedef ns_EventCodeV5_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isCommand", offsetof(DsType, isCommand), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isLatch", offsetof(DsType, isLatch), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::stored_type());
  return type;
}

hdf5pp::Type ns_EventCodeV5_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_EventCodeV5_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_EventCodeV5_v0_dataset_data_native_type()
{
  typedef ns_EventCodeV5_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isCommand", offsetof(DsType, isCommand), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isLatch", offsetof(DsType, isLatch), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::native_type());
  return type;
}

hdf5pp::Type ns_EventCodeV5_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_EventCodeV5_v0_dataset_data_native_type();
  return type;
}
ns_EventCodeV5_v0::dataset_data::dataset_data()
{
}
ns_EventCodeV5_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::EventCodeV5>
Proxy_EventCodeV5_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_EventCodeV5_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_EventCodeV5_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->code, ds_data->isReadout, ds_data->isCommand, ds_data->isLatch, ds_data->reportDelay, ds_data->reportWidth, ds_data->maskTrigger, ds_data->maskSet, ds_data->maskClear, ds_data->desc));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::EventCodeV5> > make_EventCodeV5(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_EventCodeV5_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::EventCodeV5> >(boost::shared_ptr<Psana::EvrData::EventCodeV5>());
  }
}

hdf5pp::Type ns_EventCodeV6_v0_dataset_data_stored_type()
{
  typedef ns_EventCodeV6_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isCommand", offsetof(DsType, isCommand), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("isLatch", offsetof(DsType, isLatch), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("readoutGroup", offsetof(DsType, readoutGroup), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_EventCodeV6_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_EventCodeV6_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_EventCodeV6_v0_dataset_data_native_type()
{
  typedef ns_EventCodeV6_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("code", offsetof(DsType, code), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("isReadout", offsetof(DsType, isReadout), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isCommand", offsetof(DsType, isCommand), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("isLatch", offsetof(DsType, isLatch), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("reportDelay", offsetof(DsType, reportDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("reportWidth", offsetof(DsType, reportWidth), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskTrigger", offsetof(DsType, maskTrigger), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskSet", offsetof(DsType, maskSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskClear", offsetof(DsType, maskClear), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("readoutGroup", offsetof(DsType, readoutGroup), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_EventCodeV6_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_EventCodeV6_v0_dataset_data_native_type();
  return type;
}
ns_EventCodeV6_v0::dataset_data::dataset_data()
{
}
ns_EventCodeV6_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::EventCodeV6>
Proxy_EventCodeV6_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_EventCodeV6_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_EventCodeV6_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->code, ds_data->isReadout, ds_data->isCommand, ds_data->isLatch, ds_data->reportDelay, ds_data->reportWidth, ds_data->maskTrigger, ds_data->maskSet, ds_data->maskClear, ds_data->desc, ds_data->readoutGroup));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::EventCodeV6> > make_EventCodeV6(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_EventCodeV6_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::EventCodeV6> >(boost::shared_ptr<Psana::EvrData::EventCodeV6>());
  }
}

hdf5pp::Type ns_OutputMap_v0_dataset_data_stored_type()
{
  typedef ns_OutputMap_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("value", offsetof(DsType, value), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hdf5pp::EnumType<int32_t> _enum_type_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_source.insert("Pulse", Psana::EvrData::OutputMap::Pulse);
  _enum_type_source.insert("DBus", Psana::EvrData::OutputMap::DBus);
  _enum_type_source.insert("Prescaler", Psana::EvrData::OutputMap::Prescaler);
  _enum_type_source.insert("Force_High", Psana::EvrData::OutputMap::Force_High);
  _enum_type_source.insert("Force_Low", Psana::EvrData::OutputMap::Force_Low);
  type.insert("source", offsetof(DsType, source), _enum_type_source);
  type.insert("source_id", offsetof(DsType, source_id), hdf5pp::TypeTraits<uint8_t>::stored_type());
  hdf5pp::EnumType<int32_t> _enum_type_conn = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_conn.insert("FrontPanel", Psana::EvrData::OutputMap::FrontPanel);
  _enum_type_conn.insert("UnivIO", Psana::EvrData::OutputMap::UnivIO);
  type.insert("conn", offsetof(DsType, conn), _enum_type_conn);
  type.insert("conn_id", offsetof(DsType, conn_id), hdf5pp::TypeTraits<uint8_t>::stored_type());
  return type;
}

hdf5pp::Type ns_OutputMap_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_OutputMap_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_OutputMap_v0_dataset_data_native_type()
{
  typedef ns_OutputMap_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("value", offsetof(DsType, value), hdf5pp::TypeTraits<uint32_t>::native_type());
  hdf5pp::EnumType<int32_t> _enum_type_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_source.insert("Pulse", Psana::EvrData::OutputMap::Pulse);
  _enum_type_source.insert("DBus", Psana::EvrData::OutputMap::DBus);
  _enum_type_source.insert("Prescaler", Psana::EvrData::OutputMap::Prescaler);
  _enum_type_source.insert("Force_High", Psana::EvrData::OutputMap::Force_High);
  _enum_type_source.insert("Force_Low", Psana::EvrData::OutputMap::Force_Low);
  type.insert("source", offsetof(DsType, source), _enum_type_source);
  type.insert("source_id", offsetof(DsType, source_id), hdf5pp::TypeTraits<uint8_t>::native_type());
  hdf5pp::EnumType<int32_t> _enum_type_conn = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_conn.insert("FrontPanel", Psana::EvrData::OutputMap::FrontPanel);
  _enum_type_conn.insert("UnivIO", Psana::EvrData::OutputMap::UnivIO);
  type.insert("conn", offsetof(DsType, conn), _enum_type_conn);
  type.insert("conn_id", offsetof(DsType, conn_id), hdf5pp::TypeTraits<uint8_t>::native_type());
  return type;
}

hdf5pp::Type ns_OutputMap_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_OutputMap_v0_dataset_data_native_type();
  return type;
}
ns_OutputMap_v0::dataset_data::dataset_data()
{
}
ns_OutputMap_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::OutputMap>
Proxy_OutputMap_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_OutputMap_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_OutputMap_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(Psana::EvrData::OutputMap::Source(ds_data->source), ds_data->source_id, Psana::EvrData::OutputMap::Conn(ds_data->conn), ds_data->conn_id));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::OutputMap> > make_OutputMap(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_OutputMap_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::OutputMap> >(boost::shared_ptr<Psana::EvrData::OutputMap>());
  }
}

hdf5pp::Type ns_OutputMapV2_v0_dataset_data_stored_type()
{
  typedef ns_OutputMapV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("value", offsetof(DsType, value), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hdf5pp::EnumType<int32_t> _enum_type_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_source.insert("Pulse", Psana::EvrData::OutputMapV2::Pulse);
  _enum_type_source.insert("DBus", Psana::EvrData::OutputMapV2::DBus);
  _enum_type_source.insert("Prescaler", Psana::EvrData::OutputMapV2::Prescaler);
  _enum_type_source.insert("Force_High", Psana::EvrData::OutputMapV2::Force_High);
  _enum_type_source.insert("Force_Low", Psana::EvrData::OutputMapV2::Force_Low);
  type.insert("source", offsetof(DsType, source), _enum_type_source);
  type.insert("source_id", offsetof(DsType, source_id), hdf5pp::TypeTraits<uint8_t>::stored_type());
  hdf5pp::EnumType<int32_t> _enum_type_conn = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_conn.insert("FrontPanel", Psana::EvrData::OutputMapV2::FrontPanel);
  _enum_type_conn.insert("UnivIO", Psana::EvrData::OutputMapV2::UnivIO);
  type.insert("conn", offsetof(DsType, conn), _enum_type_conn);
  type.insert("conn_id", offsetof(DsType, conn_id), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("module", offsetof(DsType, module), hdf5pp::TypeTraits<uint8_t>::stored_type());
  return type;
}

hdf5pp::Type ns_OutputMapV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_OutputMapV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_OutputMapV2_v0_dataset_data_native_type()
{
  typedef ns_OutputMapV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("value", offsetof(DsType, value), hdf5pp::TypeTraits<uint32_t>::native_type());
  hdf5pp::EnumType<int32_t> _enum_type_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_source.insert("Pulse", Psana::EvrData::OutputMapV2::Pulse);
  _enum_type_source.insert("DBus", Psana::EvrData::OutputMapV2::DBus);
  _enum_type_source.insert("Prescaler", Psana::EvrData::OutputMapV2::Prescaler);
  _enum_type_source.insert("Force_High", Psana::EvrData::OutputMapV2::Force_High);
  _enum_type_source.insert("Force_Low", Psana::EvrData::OutputMapV2::Force_Low);
  type.insert("source", offsetof(DsType, source), _enum_type_source);
  type.insert("source_id", offsetof(DsType, source_id), hdf5pp::TypeTraits<uint8_t>::native_type());
  hdf5pp::EnumType<int32_t> _enum_type_conn = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_conn.insert("FrontPanel", Psana::EvrData::OutputMapV2::FrontPanel);
  _enum_type_conn.insert("UnivIO", Psana::EvrData::OutputMapV2::UnivIO);
  type.insert("conn", offsetof(DsType, conn), _enum_type_conn);
  type.insert("conn_id", offsetof(DsType, conn_id), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("module", offsetof(DsType, module), hdf5pp::TypeTraits<uint8_t>::native_type());
  return type;
}

hdf5pp::Type ns_OutputMapV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_OutputMapV2_v0_dataset_data_native_type();
  return type;
}
ns_OutputMapV2_v0::dataset_data::dataset_data()
{
}
ns_OutputMapV2_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::OutputMapV2>
Proxy_OutputMapV2_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_OutputMapV2_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_OutputMapV2_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(Psana::EvrData::OutputMapV2::Source(ds_data->source), ds_data->source_id, Psana::EvrData::OutputMapV2::Conn(ds_data->conn), ds_data->conn_id, ds_data->module));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::OutputMapV2> > make_OutputMapV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_OutputMapV2_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::OutputMapV2> >(boost::shared_ptr<Psana::EvrData::OutputMapV2>());
  }
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV1_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::PulseConfig, 1> ConfigV1_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMap, 1> ConfigV1_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV1_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfig_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfig_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfig, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV1_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMap_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMap_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMap, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV1> >(boost::shared_ptr<Psana::EvrData::ConfigV1>());
  }
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("opcode", offsetof(DsType, opcode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hdf5pp::EnumType<int32_t> _enum_type_beam = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_beam.insert("Off", Psana::EvrData::ConfigV2::Off);
  _enum_type_beam.insert("On", Psana::EvrData::ConfigV2::On);
  type.insert("beam", offsetof(DsType, beam), _enum_type_beam);
  hdf5pp::EnumType<int32_t> _enum_type_rate = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_rate.insert("r120Hz", Psana::EvrData::ConfigV2::r120Hz);
  _enum_type_rate.insert("r60Hz", Psana::EvrData::ConfigV2::r60Hz);
  _enum_type_rate.insert("r30Hz", Psana::EvrData::ConfigV2::r30Hz);
  _enum_type_rate.insert("r10Hz", Psana::EvrData::ConfigV2::r10Hz);
  _enum_type_rate.insert("r5Hz", Psana::EvrData::ConfigV2::r5Hz);
  _enum_type_rate.insert("r1Hz", Psana::EvrData::ConfigV2::r1Hz);
  _enum_type_rate.insert("r0_5Hz", Psana::EvrData::ConfigV2::r0_5Hz);
  _enum_type_rate.insert("Single", Psana::EvrData::ConfigV2::Single);
  _enum_type_rate.insert("NumberOfRates", Psana::EvrData::ConfigV2::NumberOfRates);
  type.insert("rate", offsetof(DsType, rate), _enum_type_rate);
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("opcode", offsetof(DsType, opcode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  hdf5pp::EnumType<int32_t> _enum_type_beam = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_beam.insert("Off", Psana::EvrData::ConfigV2::Off);
  _enum_type_beam.insert("On", Psana::EvrData::ConfigV2::On);
  type.insert("beam", offsetof(DsType, beam), _enum_type_beam);
  hdf5pp::EnumType<int32_t> _enum_type_rate = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_rate.insert("r120Hz", Psana::EvrData::ConfigV2::r120Hz);
  _enum_type_rate.insert("r60Hz", Psana::EvrData::ConfigV2::r60Hz);
  _enum_type_rate.insert("r30Hz", Psana::EvrData::ConfigV2::r30Hz);
  _enum_type_rate.insert("r10Hz", Psana::EvrData::ConfigV2::r10Hz);
  _enum_type_rate.insert("r5Hz", Psana::EvrData::ConfigV2::r5Hz);
  _enum_type_rate.insert("r1Hz", Psana::EvrData::ConfigV2::r1Hz);
  _enum_type_rate.insert("r0_5Hz", Psana::EvrData::ConfigV2::r0_5Hz);
  _enum_type_rate.insert("Single", Psana::EvrData::ConfigV2::Single);
  _enum_type_rate.insert("NumberOfRates", Psana::EvrData::ConfigV2::NumberOfRates);
  type.insert("rate", offsetof(DsType, rate), _enum_type_rate);
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV2_v0::dataset_config::dataset_config()
{
}
ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::opcode() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->opcode);
}
uint32_t ConfigV2_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV2_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::PulseConfig, 1> ConfigV2_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMap, 1> ConfigV2_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
Psana::EvrData::ConfigV2::BeamCode ConfigV2_v0::beam() const {
  if (not m_ds_config) read_ds_config();
  return Psana::EvrData::ConfigV2::BeamCode(m_ds_config->beam);
}
Psana::EvrData::ConfigV2::RateCode ConfigV2_v0::rate() const {
  if (not m_ds_config) read_ds_config();
  return Psana::EvrData::ConfigV2::RateCode(m_ds_config->rate);
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV2_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfig_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfig_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfig, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV2_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMap_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMap_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMap, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV2> >(boost::shared_ptr<Psana::EvrData::ConfigV2>());
  }
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_native_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV3_v0::dataset_config::dataset_config()
{
}
ns_ConfigV3_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV3_v0::neventcodes() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->neventcodes);
}
uint32_t ConfigV3_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV3_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::EventCodeV3, 1> ConfigV3_v0::eventcodes() const {
  if (m_ds_eventcodes.empty()) read_ds_eventcodes();
  return m_ds_eventcodes;
}
ndarray<const Psana::EvrData::PulseConfigV3, 1> ConfigV3_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMap, 1> ConfigV3_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
void ConfigV3_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV3_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV3_v0::read_ds_eventcodes() const {
  ndarray<EvrData::ns_EventCodeV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_EventCodeV3_v0::dataset_data, 1>(m_group, "eventcodes", m_idx);
  ndarray<Psana::EvrData::EventCodeV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_eventcodes = tmp;
}
void ConfigV3_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfigV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV3_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMap_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMap_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMap, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV3> > make_ConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV3> >(boost::make_shared<ConfigV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV3> >(boost::shared_ptr<Psana::EvrData::ConfigV3>());
  }
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_native_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV4_v0::dataset_config::dataset_config()
{
}
ns_ConfigV4_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV4_v0::neventcodes() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->neventcodes);
}
uint32_t ConfigV4_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV4_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::EventCodeV4, 1> ConfigV4_v0::eventcodes() const {
  if (m_ds_eventcodes.empty()) read_ds_eventcodes();
  return m_ds_eventcodes;
}
ndarray<const Psana::EvrData::PulseConfigV3, 1> ConfigV4_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMap, 1> ConfigV4_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
void ConfigV4_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV4_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV4_v0::read_ds_eventcodes() const {
  ndarray<EvrData::ns_EventCodeV4_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_EventCodeV4_v0::dataset_data, 1>(m_group, "eventcodes", m_idx);
  ndarray<Psana::EvrData::EventCodeV4, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_eventcodes = tmp;
}
void ConfigV4_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfigV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV4_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMap_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMap_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMap, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV4> > make_ConfigV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV4> >(boost::make_shared<ConfigV4_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV4> >(boost::shared_ptr<Psana::EvrData::ConfigV4>());
  }
}

hdf5pp::Type ns_SequencerEntry_v0_dataset_data_stored_type()
{
  typedef ns_SequencerEntry_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventcode", offsetof(DsType, eventcode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_SequencerEntry_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_SequencerEntry_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_SequencerEntry_v0_dataset_data_native_type()
{
  typedef ns_SequencerEntry_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("delay", offsetof(DsType, delay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventcode", offsetof(DsType, eventcode), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_SequencerEntry_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_SequencerEntry_v0_dataset_data_native_type();
  return type;
}
ns_SequencerEntry_v0::dataset_data::dataset_data()
{
}
ns_SequencerEntry_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::SequencerEntry>
Proxy_SequencerEntry_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_SequencerEntry_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_SequencerEntry_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->eventcode, ds_data->delay));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::SequencerEntry> > make_SequencerEntry(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_SequencerEntry_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::SequencerEntry> >(boost::shared_ptr<Psana::EvrData::SequencerEntry>());
  }
}

hdf5pp::Type ns_SequencerConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_SequencerConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<int32_t> _enum_type_sync_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_sync_source.insert("r120Hz", Psana::EvrData::SequencerConfigV1::r120Hz);
  _enum_type_sync_source.insert("r60Hz", Psana::EvrData::SequencerConfigV1::r60Hz);
  _enum_type_sync_source.insert("r30Hz", Psana::EvrData::SequencerConfigV1::r30Hz);
  _enum_type_sync_source.insert("r10Hz", Psana::EvrData::SequencerConfigV1::r10Hz);
  _enum_type_sync_source.insert("r5Hz", Psana::EvrData::SequencerConfigV1::r5Hz);
  _enum_type_sync_source.insert("r1Hz", Psana::EvrData::SequencerConfigV1::r1Hz);
  _enum_type_sync_source.insert("r0_5Hz", Psana::EvrData::SequencerConfigV1::r0_5Hz);
  _enum_type_sync_source.insert("Disable", Psana::EvrData::SequencerConfigV1::Disable);
  type.insert("sync_source", offsetof(DsType, sync_source), _enum_type_sync_source);
  hdf5pp::EnumType<int32_t> _enum_type_beam_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_beam_source.insert("r120Hz", Psana::EvrData::SequencerConfigV1::r120Hz);
  _enum_type_beam_source.insert("r60Hz", Psana::EvrData::SequencerConfigV1::r60Hz);
  _enum_type_beam_source.insert("r30Hz", Psana::EvrData::SequencerConfigV1::r30Hz);
  _enum_type_beam_source.insert("r10Hz", Psana::EvrData::SequencerConfigV1::r10Hz);
  _enum_type_beam_source.insert("r5Hz", Psana::EvrData::SequencerConfigV1::r5Hz);
  _enum_type_beam_source.insert("r1Hz", Psana::EvrData::SequencerConfigV1::r1Hz);
  _enum_type_beam_source.insert("r0_5Hz", Psana::EvrData::SequencerConfigV1::r0_5Hz);
  _enum_type_beam_source.insert("Disable", Psana::EvrData::SequencerConfigV1::Disable);
  type.insert("beam_source", offsetof(DsType, beam_source), _enum_type_beam_source);
  type.insert("length", offsetof(DsType, length), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("cycles", offsetof(DsType, cycles), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hdf5pp::VlenType _array_type_entries = hdf5pp::VlenType::vlenType(hdf5pp::TypeTraits<EvrData::ns_SequencerEntry_v0::dataset_data>::stored_type());
  type.insert("entries", offsetof(DsType, vlen_entries), _array_type_entries);
  return type;
}

hdf5pp::Type ns_SequencerConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_SequencerConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_SequencerConfigV1_v0_dataset_config_native_type()
{
  typedef ns_SequencerConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<int32_t> _enum_type_sync_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_sync_source.insert("r120Hz", Psana::EvrData::SequencerConfigV1::r120Hz);
  _enum_type_sync_source.insert("r60Hz", Psana::EvrData::SequencerConfigV1::r60Hz);
  _enum_type_sync_source.insert("r30Hz", Psana::EvrData::SequencerConfigV1::r30Hz);
  _enum_type_sync_source.insert("r10Hz", Psana::EvrData::SequencerConfigV1::r10Hz);
  _enum_type_sync_source.insert("r5Hz", Psana::EvrData::SequencerConfigV1::r5Hz);
  _enum_type_sync_source.insert("r1Hz", Psana::EvrData::SequencerConfigV1::r1Hz);
  _enum_type_sync_source.insert("r0_5Hz", Psana::EvrData::SequencerConfigV1::r0_5Hz);
  _enum_type_sync_source.insert("Disable", Psana::EvrData::SequencerConfigV1::Disable);
  type.insert("sync_source", offsetof(DsType, sync_source), _enum_type_sync_source);
  hdf5pp::EnumType<int32_t> _enum_type_beam_source = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_beam_source.insert("r120Hz", Psana::EvrData::SequencerConfigV1::r120Hz);
  _enum_type_beam_source.insert("r60Hz", Psana::EvrData::SequencerConfigV1::r60Hz);
  _enum_type_beam_source.insert("r30Hz", Psana::EvrData::SequencerConfigV1::r30Hz);
  _enum_type_beam_source.insert("r10Hz", Psana::EvrData::SequencerConfigV1::r10Hz);
  _enum_type_beam_source.insert("r5Hz", Psana::EvrData::SequencerConfigV1::r5Hz);
  _enum_type_beam_source.insert("r1Hz", Psana::EvrData::SequencerConfigV1::r1Hz);
  _enum_type_beam_source.insert("r0_5Hz", Psana::EvrData::SequencerConfigV1::r0_5Hz);
  _enum_type_beam_source.insert("Disable", Psana::EvrData::SequencerConfigV1::Disable);
  type.insert("beam_source", offsetof(DsType, beam_source), _enum_type_beam_source);
  type.insert("length", offsetof(DsType, length), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("cycles", offsetof(DsType, cycles), hdf5pp::TypeTraits<uint32_t>::native_type());
  hdf5pp::VlenType _array_type_entries = hdf5pp::VlenType::vlenType(hdf5pp::TypeTraits<EvrData::ns_SequencerEntry_v0::dataset_data>::native_type());
  type.insert("entries", offsetof(DsType, vlen_entries), _array_type_entries);
  return type;
}

hdf5pp::Type ns_SequencerConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_SequencerConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_SequencerConfigV1_v0::dataset_config::dataset_config()
{
  this->vlen_entries = 0;
  this->entries = 0;
}
ns_SequencerConfigV1_v0::dataset_config::~dataset_config()
{
  free(this->entries);
}
Psana::EvrData::SequencerConfigV1::Source SequencerConfigV1_v0::sync_source() const {
  if (not m_ds_config) read_ds_config();
  return Psana::EvrData::SequencerConfigV1::Source(m_ds_config->sync_source);
}
Psana::EvrData::SequencerConfigV1::Source SequencerConfigV1_v0::beam_source() const {
  if (not m_ds_config) read_ds_config();
  return Psana::EvrData::SequencerConfigV1::Source(m_ds_config->beam_source);
}
uint32_t SequencerConfigV1_v0::length() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->length);
}
uint32_t SequencerConfigV1_v0::cycles() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->cycles);
}
ndarray<const Psana::EvrData::SequencerEntry, 1> SequencerConfigV1_v0::entries() const {
  if (not m_ds_config) read_ds_config();
  if (m_ds_storage_config_entries.empty()) {
    unsigned shape[] = {m_ds_config->vlen_entries};
    ndarray<Psana::EvrData::SequencerEntry, 1> tmparr(shape);
    std::copy(m_ds_config->entries, m_ds_config->entries+m_ds_config->vlen_entries, tmparr.begin());
    m_ds_storage_config_entries = tmparr;
  }
  return m_ds_storage_config_entries;
}
void SequencerConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_SequencerConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

hdf5pp::Type ns_ConfigV5_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV5_v0_dataset_config_native_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV5_v0::dataset_config::dataset_config()
{
}
ns_ConfigV5_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV5_v0::neventcodes() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->neventcodes);
}
uint32_t ConfigV5_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV5_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::EventCodeV5, 1> ConfigV5_v0::eventcodes() const {
  if (m_ds_eventcodes.empty()) read_ds_eventcodes();
  return m_ds_eventcodes;
}
ndarray<const Psana::EvrData::PulseConfigV3, 1> ConfigV5_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMap, 1> ConfigV5_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
const Psana::EvrData::SequencerConfigV1& ConfigV5_v0::seq_config() const {
  if (not m_ds_storage_seq_config) {
    if (not m_ds_seq_config) read_ds_seq_config();
    m_ds_storage_seq_config = boost::make_shared<EvrData::SequencerConfigV1_v0>(m_ds_seq_config);
  }
  return *m_ds_storage_seq_config;
}
void ConfigV5_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV5_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV5_v0::read_ds_eventcodes() const {
  ndarray<EvrData::ns_EventCodeV5_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_EventCodeV5_v0::dataset_data, 1>(m_group, "eventcodes", m_idx);
  ndarray<Psana::EvrData::EventCodeV5, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_eventcodes = tmp;
}
void ConfigV5_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfigV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV5_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMap_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMap_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMap, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
void ConfigV5_v0::read_ds_seq_config() const {
  m_ds_seq_config = hdf5pp::Utils::readGroup<EvrData::ns_SequencerConfigV1_v0::dataset_config>(m_group, "seq_config", m_idx);
  m_ds_storage_seq_config = boost::make_shared<SequencerConfigV1_v0>(m_ds_seq_config);
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV5> > make_ConfigV5(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV5> >(boost::make_shared<ConfigV5_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV5> >(boost::shared_ptr<Psana::EvrData::ConfigV5>());
  }
}

hdf5pp::Type ns_ConfigV6_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV6_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV6_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV6_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV6_v0_dataset_config_native_type()
{
  typedef ns_ConfigV6_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV6_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV6_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV6_v0::dataset_config::dataset_config()
{
}
ns_ConfigV6_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV6_v0::neventcodes() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->neventcodes);
}
uint32_t ConfigV6_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV6_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::EventCodeV5, 1> ConfigV6_v0::eventcodes() const {
  if (m_ds_eventcodes.empty()) read_ds_eventcodes();
  return m_ds_eventcodes;
}
ndarray<const Psana::EvrData::PulseConfigV3, 1> ConfigV6_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMapV2, 1> ConfigV6_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
const Psana::EvrData::SequencerConfigV1& ConfigV6_v0::seq_config() const {
  if (not m_ds_storage_seq_config) {
    if (not m_ds_seq_config) read_ds_seq_config();
    m_ds_storage_seq_config = boost::make_shared<EvrData::SequencerConfigV1_v0>(m_ds_seq_config);
  }
  return *m_ds_storage_seq_config;
}
void ConfigV6_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV6_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV6_v0::read_ds_eventcodes() const {
  ndarray<EvrData::ns_EventCodeV5_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_EventCodeV5_v0::dataset_data, 1>(m_group, "eventcodes", m_idx);
  ndarray<Psana::EvrData::EventCodeV5, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_eventcodes = tmp;
}
void ConfigV6_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfigV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV6_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMapV2_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMapV2_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMapV2, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
void ConfigV6_v0::read_ds_seq_config() const {
  m_ds_seq_config = hdf5pp::Utils::readGroup<EvrData::ns_SequencerConfigV1_v0::dataset_config>(m_group, "seq_config", m_idx);
  m_ds_storage_seq_config = boost::make_shared<SequencerConfigV1_v0>(m_ds_seq_config);
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV6> > make_ConfigV6(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV6> >(boost::make_shared<ConfigV6_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV6> >(boost::shared_ptr<Psana::EvrData::ConfigV6>());
  }
}

hdf5pp::Type ns_ConfigV7_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV7_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV7_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV7_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV7_v0_dataset_config_native_type()
{
  typedef ns_ConfigV7_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("neventcodes", offsetof(DsType, neventcodes), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("npulses", offsetof(DsType, npulses), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("noutputs", offsetof(DsType, noutputs), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV7_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV7_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV7_v0::dataset_config::dataset_config()
{
}
ns_ConfigV7_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV7_v0::neventcodes() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->neventcodes);
}
uint32_t ConfigV7_v0::npulses() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->npulses);
}
uint32_t ConfigV7_v0::noutputs() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->noutputs);
}
ndarray<const Psana::EvrData::EventCodeV6, 1> ConfigV7_v0::eventcodes() const {
  if (m_ds_eventcodes.empty()) read_ds_eventcodes();
  return m_ds_eventcodes;
}
ndarray<const Psana::EvrData::PulseConfigV3, 1> ConfigV7_v0::pulses() const {
  if (m_ds_pulses.empty()) read_ds_pulses();
  return m_ds_pulses;
}
ndarray<const Psana::EvrData::OutputMapV2, 1> ConfigV7_v0::output_maps() const {
  if (m_ds_output_maps.empty()) read_ds_output_maps();
  return m_ds_output_maps;
}
const Psana::EvrData::SequencerConfigV1& ConfigV7_v0::seq_config() const {
  if (not m_ds_storage_seq_config) {
    if (not m_ds_seq_config) read_ds_seq_config();
    m_ds_storage_seq_config = boost::make_shared<EvrData::SequencerConfigV1_v0>(m_ds_seq_config);
  }
  return *m_ds_storage_seq_config;
}
void ConfigV7_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<EvrData::ns_ConfigV7_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV7_v0::read_ds_eventcodes() const {
  ndarray<EvrData::ns_EventCodeV6_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_EventCodeV6_v0::dataset_data, 1>(m_group, "eventcodes", m_idx);
  ndarray<Psana::EvrData::EventCodeV6, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_eventcodes = tmp;
}
void ConfigV7_v0::read_ds_pulses() const {
  ndarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_PulseConfigV3_v0::dataset_data, 1>(m_group, "pulses", m_idx);
  ndarray<Psana::EvrData::PulseConfigV3, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_pulses = tmp;
}
void ConfigV7_v0::read_ds_output_maps() const {
  ndarray<EvrData::ns_OutputMapV2_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<EvrData::ns_OutputMapV2_v0::dataset_data, 1>(m_group, "output_maps", m_idx);
  ndarray<Psana::EvrData::OutputMapV2, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_output_maps = tmp;
}
void ConfigV7_v0::read_ds_seq_config() const {
  m_ds_seq_config = hdf5pp::Utils::readGroup<EvrData::ns_SequencerConfigV1_v0::dataset_config>(m_group, "seq_config", m_idx);
  m_ds_storage_seq_config = boost::make_shared<SequencerConfigV1_v0>(m_ds_seq_config);
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::ConfigV7> > make_ConfigV7(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV7> >(boost::make_shared<ConfigV7_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::ConfigV7> >(boost::shared_ptr<Psana::EvrData::ConfigV7>());
  }
}

hdf5pp::Type ns_FIFOEvent_v0_dataset_data_stored_type()
{
  typedef ns_FIFOEvent_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("timestampHigh", offsetof(DsType, timestampHigh), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("timestampLow", offsetof(DsType, timestampLow), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_FIFOEvent_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_FIFOEvent_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_FIFOEvent_v0_dataset_data_native_type()
{
  typedef ns_FIFOEvent_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("timestampHigh", offsetof(DsType, timestampHigh), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("timestampLow", offsetof(DsType, timestampLow), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("eventCode", offsetof(DsType, eventCode), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_FIFOEvent_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_FIFOEvent_v0_dataset_data_native_type();
  return type;
}
ns_FIFOEvent_v0::dataset_data::dataset_data()
{
}
ns_FIFOEvent_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::EvrData::FIFOEvent>
Proxy_FIFOEvent_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<EvrData::ns_FIFOEvent_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<EvrData::ns_FIFOEvent_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->timestampHigh, ds_data->timestampLow, ds_data->eventCode));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::FIFOEvent> > make_FIFOEvent(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_FIFOEvent_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::FIFOEvent> >(boost::shared_ptr<Psana::EvrData::FIFOEvent>());
  }
}

hdf5pp::Type ns_DataV3_v0_dataset_data_stored_type()
{
  typedef ns_DataV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::VlenType _array_type_fifoEvents = hdf5pp::VlenType::vlenType(hdf5pp::TypeTraits<EvrData::ns_FIFOEvent_v0::dataset_data>::stored_type());
  type.insert("fifoEvents", offsetof(DsType, vlen_fifoEvents), _array_type_fifoEvents);
  return type;
}

hdf5pp::Type ns_DataV3_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV3_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV3_v0_dataset_data_native_type()
{
  typedef ns_DataV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::VlenType _array_type_fifoEvents = hdf5pp::VlenType::vlenType(hdf5pp::TypeTraits<EvrData::ns_FIFOEvent_v0::dataset_data>::native_type());
  type.insert("fifoEvents", offsetof(DsType, vlen_fifoEvents), _array_type_fifoEvents);
  return type;
}

hdf5pp::Type ns_DataV3_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV3_v0_dataset_data_native_type();
  return type;
}
ns_DataV3_v0::dataset_data::dataset_data()
{
  this->vlen_fifoEvents = 0;
  this->fifoEvents = 0;
}
ns_DataV3_v0::dataset_data::~dataset_data()
{
  free(this->fifoEvents);
}

ndarray<const Psana::EvrData::FIFOEvent, 1> DataV3_v0::fifoEvents() const {
  if (not m_ds_data) read_ds_data();
  if (m_ds_storage_data_fifoEvents.empty()) {
    unsigned shape[] = {m_ds_data->vlen_fifoEvents};
    ndarray<Psana::EvrData::FIFOEvent, 1> tmparr(shape);
    std::copy(m_ds_data->fifoEvents, m_ds_data->fifoEvents+m_ds_data->vlen_fifoEvents, tmparr.begin());
    m_ds_storage_data_fifoEvents = tmparr;
  }
  return m_ds_storage_data_fifoEvents;
}
void DataV3_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<EvrData::ns_DataV3_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::DataV3> > make_DataV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::DataV3> >(boost::make_shared<DataV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::DataV3> >(boost::shared_ptr<Psana::EvrData::DataV3>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::EvrData::IOConfigV1> > make_IOConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::IOConfigV1> >(boost::make_shared<IOConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::EvrData::IOConfigV1> >(boost::shared_ptr<Psana::EvrData::IOConfigV1>());
  }
}
} // namespace EvrData
} // namespace psddl_hdf2psana
