#ifndef PSDDL_HDF2PSANA_GENERICPGP_DDL_H
#define PSDDL_HDF2PSANA_GENERICPGP_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/genericpgp.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
#include "psddl_hdf2psana/ChunkPolicy.h"
namespace psddl_hdf2psana {
namespace GenericPgp {

namespace ns_CDimension_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::GenericPgp::CDimension& psanaobj);
  ~dataset_data();

  uint32_t rows;
  uint32_t columns;


};
}


class CDimension_v0 : public Psana::GenericPgp::CDimension {
public:
  typedef Psana::GenericPgp::CDimension PsanaType;
  CDimension_v0() {}
  CDimension_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  CDimension_v0(const boost::shared_ptr<GenericPgp::ns_CDimension_v0::dataset_data>& ds) : m_ds_data(ds) {}
  virtual ~CDimension_v0() {}
  virtual uint32_t rows() const;
  virtual uint32_t columns() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<GenericPgp::ns_CDimension_v0::dataset_data> m_ds_data;
  void read_ds_data() const;
};


namespace ns_CRegister_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::GenericPgp::CRegister& psanaobj);
  ~dataset_data();

  uint8_t action;
  uint32_t datasize;
  uint32_t address;
  uint32_t offset;
  uint32_t mask;

  operator Psana::GenericPgp::CRegister() const { return Psana::GenericPgp::CRegister(Psana::GenericPgp::CRegister::Action(action), datasize, address, offset, mask); }

};
}

namespace ns_CStream_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::GenericPgp::CStream& psanaobj);
  ~dataset_data();

  uint32_t pgp_channel;
  uint32_t data_type;
  uint32_t config_type;
  uint32_t config_offset;

  operator Psana::GenericPgp::CStream() const { return Psana::GenericPgp::CStream(pgp_channel, data_type, config_type, config_offset); }

};
}

namespace ns_ConfigV1_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::GenericPgp::ConfigV1& psanaobj);
  ~dataset_config();

  uint32_t id;
  uint32_t number_of_registers;
  uint32_t number_of_sequences;
  uint32_t number_of_streams;
  uint32_t payload_size;
  uint32_t numberOfRows;
  uint32_t numberOfColumns;
  uint32_t lastRowExclusions;
  uint32_t numberOfAsics;


};
}


class ConfigV1_v0 : public Psana::GenericPgp::ConfigV1 {
public:
  typedef Psana::GenericPgp::ConfigV1 PsanaType;
  ConfigV1_v0() {}
  ConfigV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  virtual ~ConfigV1_v0() {}
  virtual uint32_t id() const;
  virtual const Psana::GenericPgp::CDimension& frame_dim() const;
  virtual const Psana::GenericPgp::CDimension& aux_dim() const;
  virtual const Psana::GenericPgp::CDimension& env_dim() const;
  virtual uint32_t number_of_registers() const;
  virtual uint32_t number_of_sequences() const;
  virtual uint32_t number_of_streams() const;
  virtual uint32_t payload_size() const;
  virtual ndarray<const uint32_t, 2> pixel_settings() const;
  virtual ndarray<const uint32_t, 1> sequence_length() const;
  virtual ndarray<const Psana::GenericPgp::CRegister, 1> sequence() const;
  virtual ndarray<const Psana::GenericPgp::CStream, 1> stream() const;
  virtual ndarray<const uint32_t, 1> payload() const;
  virtual uint32_t numberOfRows() const;
  virtual uint32_t numberOfColumns() const;
  virtual uint32_t lastRowExclusions() const;
  virtual uint32_t numberOfAsics() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<GenericPgp::ns_ConfigV1_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
  mutable boost::shared_ptr<GenericPgp::ns_CDimension_v0::dataset_data> m_ds_frame_dim;
  void read_ds_frame_dim() const;
  mutable boost::shared_ptr<CDimension_v0> m_ds_storage_frame_dim;
  mutable boost::shared_ptr<GenericPgp::ns_CDimension_v0::dataset_data> m_ds_aux_dim;
  void read_ds_aux_dim() const;
  mutable boost::shared_ptr<CDimension_v0> m_ds_storage_aux_dim;
  mutable boost::shared_ptr<GenericPgp::ns_CDimension_v0::dataset_data> m_ds_env_dim;
  void read_ds_env_dim() const;
  mutable boost::shared_ptr<CDimension_v0> m_ds_storage_env_dim;
  mutable ndarray<const uint32_t, 2> m_ds_pixel_settings;
  void read_ds_pixel_settings() const;
  mutable ndarray<const uint32_t, 1> m_ds_sequence_length;
  void read_ds_sequence_length() const;
  mutable ndarray<const Psana::GenericPgp::CRegister, 1> m_ds_sequence;
  void read_ds_sequence() const;
  mutable ndarray<const Psana::GenericPgp::CStream, 1> m_ds_stream;
  void read_ds_stream() const;
  mutable ndarray<const uint32_t, 1> m_ds_payload;
  void read_ds_payload() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::GenericPgp::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::GenericPgp::ConfigV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::GenericPgp::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::GenericPgp::ConfigV1* obj, hdf5pp::Group group, long index = -1, int version = -1);

} // namespace GenericPgp
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_GENERICPGP_DDL_H
