
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/bld.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
#include "psddl_hdf2psana/bld.h"
namespace psddl_hdf2psana {
namespace Bld {

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0_dataset_data_stored_type()
{
  typedef ns_BldDataFEEGasDetEnergy_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergy_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0_dataset_data_native_type()
{
  typedef ns_BldDataFEEGasDetEnergy_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergy_v0_dataset_data_native_type();
  return type;
}

ns_BldDataFEEGasDetEnergy_v0::dataset_data::dataset_data()
{
}

ns_BldDataFEEGasDetEnergy_v0::dataset_data::dataset_data(const Psana::Bld::BldDataFEEGasDetEnergy& psanaobj)
  : f_11_ENRC(psanaobj.f_11_ENRC())
  , f_12_ENRC(psanaobj.f_12_ENRC())
  , f_21_ENRC(psanaobj.f_21_ENRC())
  , f_22_ENRC(psanaobj.f_22_ENRC())
{
}

ns_BldDataFEEGasDetEnergy_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy>
Proxy_BldDataFEEGasDetEnergy_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->f_11_ENRC, ds_data->f_12_ENRC, ds_data->f_21_ENRC, ds_data->f_22_ENRC));
  }
  return m_data;
}


void make_datasets_BldDataFEEGasDetEnergy_v0(const Psana::Bld::BldDataFEEGasDetEnergy& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataFEEGasDetEnergy_v0(const Psana::Bld::BldDataFEEGasDetEnergy* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataFEEGasDetEnergy> > make_BldDataFEEGasDetEnergy(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataFEEGasDetEnergy_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataFEEGasDetEnergy> >(boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy>());
  }
}

void make_datasets(const Psana::Bld::BldDataFEEGasDetEnergy& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataFEEGasDetEnergy_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataFEEGasDetEnergy", version);
  }
}

void store_BldDataFEEGasDetEnergy(const Psana::Bld::BldDataFEEGasDetEnergy* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataFEEGasDetEnergy_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataFEEGasDetEnergy", version);
  }
}

void store(const Psana::Bld::BldDataFEEGasDetEnergy& obj, hdf5pp::Group group, int version) 
{
  store_BldDataFEEGasDetEnergy(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataFEEGasDetEnergy* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataFEEGasDetEnergy(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataFEEGasDetEnergyV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataFEEGasDetEnergyV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_63_ENRC", offsetof(DsType, f_63_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_64_ENRC", offsetof(DsType, f_64_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergyV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergyV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataFEEGasDetEnergyV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_63_ENRC", offsetof(DsType, f_63_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_64_ENRC", offsetof(DsType, f_64_ENRC), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergyV1_v0_dataset_data_native_type();
  return type;
}

ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::dataset_data()
{
}

ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::dataset_data(const Psana::Bld::BldDataFEEGasDetEnergyV1& psanaobj)
  : f_11_ENRC(psanaobj.f_11_ENRC())
  , f_12_ENRC(psanaobj.f_12_ENRC())
  , f_21_ENRC(psanaobj.f_21_ENRC())
  , f_22_ENRC(psanaobj.f_22_ENRC())
  , f_63_ENRC(psanaobj.f_63_ENRC())
  , f_64_ENRC(psanaobj.f_64_ENRC())
{
}

ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergyV1>
Proxy_BldDataFEEGasDetEnergyV1_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataFEEGasDetEnergyV1_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataFEEGasDetEnergyV1_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->f_11_ENRC, ds_data->f_12_ENRC, ds_data->f_21_ENRC, ds_data->f_22_ENRC, ds_data->f_63_ENRC, ds_data->f_64_ENRC));
  }
  return m_data;
}


void make_datasets_BldDataFEEGasDetEnergyV1_v0(const Psana::Bld::BldDataFEEGasDetEnergyV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataFEEGasDetEnergyV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataFEEGasDetEnergyV1_v0(const Psana::Bld::BldDataFEEGasDetEnergyV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataFEEGasDetEnergyV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataFEEGasDetEnergyV1> > make_BldDataFEEGasDetEnergyV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataFEEGasDetEnergyV1_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataFEEGasDetEnergyV1> >(boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergyV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataFEEGasDetEnergyV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataFEEGasDetEnergyV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataFEEGasDetEnergyV1", version);
  }
}

void store_BldDataFEEGasDetEnergyV1(const Psana::Bld::BldDataFEEGasDetEnergyV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataFEEGasDetEnergyV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataFEEGasDetEnergyV1", version);
  }
}

void store(const Psana::Bld::BldDataFEEGasDetEnergyV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataFEEGasDetEnergyV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataFEEGasDetEnergyV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataFEEGasDetEnergyV1(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV0_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV0_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV0_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV0& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
{
}

ns_BldDataEBeamV0_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV0>
Proxy_BldDataEBeamV0_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV0_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV0_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV0_v0(const Psana::Bld::BldDataEBeamV0& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV0_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV0_v0(const Psana::Bld::BldDataEBeamV0* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV0_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV0> > make_BldDataEBeamV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV0_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV0> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV0>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV0_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV0", version);
  }
}

void store_BldDataEBeamV0(const Psana::Bld::BldDataEBeamV0* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV0_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV0", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV0& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV0(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV0* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV0(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV1_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV1_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV1_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV1& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
{
}

ns_BldDataEBeamV1_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV1>
Proxy_BldDataEBeamV1_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV1_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV1_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV1_v0(const Psana::Bld::BldDataEBeamV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV1_v0(const Psana::Bld::BldDataEBeamV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV1> > make_BldDataEBeamV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV1_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV1> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV1", version);
  }
}

void store_BldDataEBeamV1(const Psana::Bld::BldDataEBeamV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV1", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV1(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV2_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV2_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV2_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV2_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV2& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
  , fEbeamEnergyBC2(psanaobj.ebeamEnergyBC2())
{
}

ns_BldDataEBeamV2_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV2>
Proxy_BldDataEBeamV2_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV2_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV2_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV2_v0(const Psana::Bld::BldDataEBeamV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV2_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV2_v0(const Psana::Bld::BldDataEBeamV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV2_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV2> > make_BldDataEBeamV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV2_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV2> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV2>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV2", version);
  }
}

void store_BldDataEBeamV2(const Psana::Bld::BldDataEBeamV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV2", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV2& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV2* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV2(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV3_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV3_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV3_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV3_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV3_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV3& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
  , fEbeamEnergyBC2(psanaobj.ebeamEnergyBC2())
  , fEbeamPkCurrBC1(psanaobj.ebeamPkCurrBC1())
  , fEbeamEnergyBC1(psanaobj.ebeamEnergyBC1())
{
}

ns_BldDataEBeamV3_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV3>
Proxy_BldDataEBeamV3_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV3_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV3_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2, ds_data->fEbeamPkCurrBC1, ds_data->fEbeamEnergyBC1));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV3_v0(const Psana::Bld::BldDataEBeamV3& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV3_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV3_v0(const Psana::Bld::BldDataEBeamV3* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV3_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV3> > make_BldDataEBeamV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV3_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV3> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV3>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV3& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV3_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV3", version);
  }
}

void store_BldDataEBeamV3(const Psana::Bld::BldDataEBeamV3* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV3_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV3", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV3& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV3(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV3* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV3(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV4_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV4_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV4_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV4_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV4_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV4_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV4_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV4_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV4_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV4_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV4& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
  , fEbeamEnergyBC2(psanaobj.ebeamEnergyBC2())
  , fEbeamPkCurrBC1(psanaobj.ebeamPkCurrBC1())
  , fEbeamEnergyBC1(psanaobj.ebeamEnergyBC1())
  , fEbeamUndPosX(psanaobj.ebeamUndPosX())
  , fEbeamUndPosY(psanaobj.ebeamUndPosY())
  , fEbeamUndAngX(psanaobj.ebeamUndAngX())
  , fEbeamUndAngY(psanaobj.ebeamUndAngY())
{
}

ns_BldDataEBeamV4_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV4>
Proxy_BldDataEBeamV4_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV4_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV4_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2, ds_data->fEbeamPkCurrBC1, ds_data->fEbeamEnergyBC1, ds_data->fEbeamUndPosX, ds_data->fEbeamUndPosY, ds_data->fEbeamUndAngX, ds_data->fEbeamUndAngY));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV4_v0(const Psana::Bld::BldDataEBeamV4& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV4_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV4_v0(const Psana::Bld::BldDataEBeamV4* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV4_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV4> > make_BldDataEBeamV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV4_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV4> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV4>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV4& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV4_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV4", version);
  }
}

void store_BldDataEBeamV4(const Psana::Bld::BldDataEBeamV4* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV4_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV4", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV4& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV4(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV4* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV4(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV5_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV5_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamXTCAVAmpl", offsetof(DsType, fEbeamXTCAVAmpl), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamXTCAVPhase", offsetof(DsType, fEbeamXTCAVPhase), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamDumpCharge", offsetof(DsType, fEbeamDumpCharge), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV5_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV5_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV5_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV5_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamXTCAVAmpl", offsetof(DsType, fEbeamXTCAVAmpl), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamXTCAVPhase", offsetof(DsType, fEbeamXTCAVPhase), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamDumpCharge", offsetof(DsType, fEbeamDumpCharge), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV5_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV5_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV5_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV5_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV5& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
  , fEbeamEnergyBC2(psanaobj.ebeamEnergyBC2())
  , fEbeamPkCurrBC1(psanaobj.ebeamPkCurrBC1())
  , fEbeamEnergyBC1(psanaobj.ebeamEnergyBC1())
  , fEbeamUndPosX(psanaobj.ebeamUndPosX())
  , fEbeamUndPosY(psanaobj.ebeamUndPosY())
  , fEbeamUndAngX(psanaobj.ebeamUndAngX())
  , fEbeamUndAngY(psanaobj.ebeamUndAngY())
  , fEbeamXTCAVAmpl(psanaobj.ebeamXTCAVAmpl())
  , fEbeamXTCAVPhase(psanaobj.ebeamXTCAVPhase())
  , fEbeamDumpCharge(psanaobj.ebeamDumpCharge())
{
}

ns_BldDataEBeamV5_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV5>
Proxy_BldDataEBeamV5_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV5_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV5_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2, ds_data->fEbeamPkCurrBC1, ds_data->fEbeamEnergyBC1, ds_data->fEbeamUndPosX, ds_data->fEbeamUndPosY, ds_data->fEbeamUndAngX, ds_data->fEbeamUndAngY, ds_data->fEbeamXTCAVAmpl, ds_data->fEbeamXTCAVPhase, ds_data->fEbeamDumpCharge));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV5_v0(const Psana::Bld::BldDataEBeamV5& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV5_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV5_v0(const Psana::Bld::BldDataEBeamV5* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV5_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV5> > make_BldDataEBeamV5(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV5_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV5> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV5>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV5& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV5_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV5", version);
  }
}

void store_BldDataEBeamV5(const Psana::Bld::BldDataEBeamV5* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV5_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV5", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV5& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV5(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV5* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV5(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataEBeamV6_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV6_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamXTCAVAmpl", offsetof(DsType, fEbeamXTCAVAmpl), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamXTCAVPhase", offsetof(DsType, fEbeamXTCAVPhase), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamDumpCharge", offsetof(DsType, fEbeamDumpCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPhotonEnergy", offsetof(DsType, fEbeamPhotonEnergy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTU250", offsetof(DsType, fEbeamLTU250), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTU450", offsetof(DsType, fEbeamLTU450), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV6_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV6_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV6_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV6_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosX", offsetof(DsType, fEbeamUndPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndPosY", offsetof(DsType, fEbeamUndPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngX", offsetof(DsType, fEbeamUndAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamUndAngY", offsetof(DsType, fEbeamUndAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamXTCAVAmpl", offsetof(DsType, fEbeamXTCAVAmpl), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamXTCAVPhase", offsetof(DsType, fEbeamXTCAVPhase), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamDumpCharge", offsetof(DsType, fEbeamDumpCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPhotonEnergy", offsetof(DsType, fEbeamPhotonEnergy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTU250", offsetof(DsType, fEbeamLTU250), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTU450", offsetof(DsType, fEbeamLTU450), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV6_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV6_v0_dataset_data_native_type();
  return type;
}

ns_BldDataEBeamV6_v0::dataset_data::dataset_data()
{
}

ns_BldDataEBeamV6_v0::dataset_data::dataset_data(const Psana::Bld::BldDataEBeamV6& psanaobj)
  : uDamageMask(psanaobj.damageMask())
  , fEbeamCharge(psanaobj.ebeamCharge())
  , fEbeamL3Energy(psanaobj.ebeamL3Energy())
  , fEbeamLTUPosX(psanaobj.ebeamLTUPosX())
  , fEbeamLTUPosY(psanaobj.ebeamLTUPosY())
  , fEbeamLTUAngX(psanaobj.ebeamLTUAngX())
  , fEbeamLTUAngY(psanaobj.ebeamLTUAngY())
  , fEbeamPkCurrBC2(psanaobj.ebeamPkCurrBC2())
  , fEbeamEnergyBC2(psanaobj.ebeamEnergyBC2())
  , fEbeamPkCurrBC1(psanaobj.ebeamPkCurrBC1())
  , fEbeamEnergyBC1(psanaobj.ebeamEnergyBC1())
  , fEbeamUndPosX(psanaobj.ebeamUndPosX())
  , fEbeamUndPosY(psanaobj.ebeamUndPosY())
  , fEbeamUndAngX(psanaobj.ebeamUndAngX())
  , fEbeamUndAngY(psanaobj.ebeamUndAngY())
  , fEbeamXTCAVAmpl(psanaobj.ebeamXTCAVAmpl())
  , fEbeamXTCAVPhase(psanaobj.ebeamXTCAVPhase())
  , fEbeamDumpCharge(psanaobj.ebeamDumpCharge())
  , fEbeamPhotonEnergy(psanaobj.ebeamPhotonEnergy())
  , fEbeamLTU250(psanaobj.ebeamLTU250())
  , fEbeamLTU450(psanaobj.ebeamLTU450())
{
}

ns_BldDataEBeamV6_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV6>
Proxy_BldDataEBeamV6_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV6_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV6_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2, ds_data->fEbeamPkCurrBC1, ds_data->fEbeamEnergyBC1, ds_data->fEbeamUndPosX, ds_data->fEbeamUndPosY, ds_data->fEbeamUndAngX, ds_data->fEbeamUndAngY, ds_data->fEbeamXTCAVAmpl, ds_data->fEbeamXTCAVPhase, ds_data->fEbeamDumpCharge, ds_data->fEbeamPhotonEnergy, ds_data->fEbeamLTU250, ds_data->fEbeamLTU450));
  }
  return m_data;
}


void make_datasets_BldDataEBeamV6_v0(const Psana::Bld::BldDataEBeamV6& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataEBeamV6_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataEBeamV6_v0(const Psana::Bld::BldDataEBeamV6* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataEBeamV6_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV6> > make_BldDataEBeamV6(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV6_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV6> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV6>());
  }
}

void make_datasets(const Psana::Bld::BldDataEBeamV6& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataEBeamV6_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV6", version);
  }
}

void store_BldDataEBeamV6(const Psana::Bld::BldDataEBeamV6* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataEBeamV6_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataEBeamV6", version);
  }
}

void store(const Psana::Bld::BldDataEBeamV6& obj, hdf5pp::Group group, int version) 
{
  store_BldDataEBeamV6(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataEBeamV6* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataEBeamV6(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataPhaseCavity_v0_dataset_data_stored_type()
{
  typedef ns_BldDataPhaseCavity_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fFitTime1", offsetof(DsType, fFitTime1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fFitTime2", offsetof(DsType, fFitTime2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCharge1", offsetof(DsType, fCharge1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCharge2", offsetof(DsType, fCharge2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataPhaseCavity_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0_dataset_data_native_type()
{
  typedef ns_BldDataPhaseCavity_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fFitTime1", offsetof(DsType, fFitTime1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fFitTime2", offsetof(DsType, fFitTime2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCharge1", offsetof(DsType, fCharge1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCharge2", offsetof(DsType, fCharge2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataPhaseCavity_v0_dataset_data_native_type();
  return type;
}

ns_BldDataPhaseCavity_v0::dataset_data::dataset_data()
{
}

ns_BldDataPhaseCavity_v0::dataset_data::dataset_data(const Psana::Bld::BldDataPhaseCavity& psanaobj)
  : fFitTime1(psanaobj.fitTime1())
  , fFitTime2(psanaobj.fitTime2())
  , fCharge1(psanaobj.charge1())
  , fCharge2(psanaobj.charge2())
{
}

ns_BldDataPhaseCavity_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataPhaseCavity>
Proxy_BldDataPhaseCavity_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataPhaseCavity_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataPhaseCavity_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->fFitTime1, ds_data->fFitTime2, ds_data->fCharge1, ds_data->fCharge2));
  }
  return m_data;
}


void make_datasets_BldDataPhaseCavity_v0(const Psana::Bld::BldDataPhaseCavity& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataPhaseCavity_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataPhaseCavity_v0(const Psana::Bld::BldDataPhaseCavity* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataPhaseCavity_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataPhaseCavity> > make_BldDataPhaseCavity(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataPhaseCavity_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPhaseCavity> >(boost::shared_ptr<Psana::Bld::BldDataPhaseCavity>());
  }
}

void make_datasets(const Psana::Bld::BldDataPhaseCavity& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataPhaseCavity_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataPhaseCavity", version);
  }
}

void store_BldDataPhaseCavity(const Psana::Bld::BldDataPhaseCavity* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataPhaseCavity_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataPhaseCavity", version);
  }
}

void store(const Psana::Bld::BldDataPhaseCavity& obj, hdf5pp::Group group, int version) 
{
  store_BldDataPhaseCavity(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataPhaseCavity* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataPhaseCavity(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataIpimbV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataIpimbV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV1_v0::dataset_data>::stored_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV1_v0::dataset_config>::stored_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataIpimbV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV1_v0::dataset_data>::native_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV1_v0::dataset_config>::native_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV0_v0_dataset_data_native_type();
  return type;
}

ns_BldDataIpimbV0_v0::dataset_data::dataset_data()
{
}

ns_BldDataIpimbV0_v0::dataset_data::dataset_data(const Psana::Bld::BldDataIpimbV0& psanaobj)
  : ipimbData(psanaobj.ipimbData())
  , ipimbConfig(psanaobj.ipimbConfig())
  , ipmFexData(psanaobj.ipmFexData())
{
}

ns_BldDataIpimbV0_v0::dataset_data::~dataset_data()
{
}
const Psana::Ipimb::DataV1& BldDataIpimbV0_v0::ipimbData() const {
  if (not m_ds_storage_data_ipimbData) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_DataV1_v0::dataset_data> tmp(m_ds_data, &m_ds_data->ipimbData);
    m_ds_storage_data_ipimbData = boost::make_shared<Ipimb::DataV1_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbData;
}
const Psana::Ipimb::ConfigV1& BldDataIpimbV0_v0::ipimbConfig() const {
  if (not m_ds_storage_data_ipimbConfig) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_ConfigV1_v0::dataset_config> tmp(m_ds_data, &m_ds_data->ipimbConfig);
    m_ds_storage_data_ipimbConfig = boost::make_shared<Ipimb::ConfigV1_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbConfig;
}
const Psana::Lusi::IpmFexV1& BldDataIpimbV0_v0::ipmFexData() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_ipmFexData = Psana::Lusi::IpmFexV1(m_ds_data->ipmFexData);
  return m_ds_storage_data_ipmFexData;
}
void BldDataIpimbV0_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataIpimbV0_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataIpimbV0_v0(const Psana::Bld::BldDataIpimbV0& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataIpimbV0_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataIpimbV0_v0(const Psana::Bld::BldDataIpimbV0* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataIpimbV0_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataIpimbV0> > make_BldDataIpimbV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV0> >(boost::make_shared<BldDataIpimbV0_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV0> >(boost::shared_ptr<Psana::Bld::BldDataIpimbV0>());
  }
}

void make_datasets(const Psana::Bld::BldDataIpimbV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataIpimbV0_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataIpimbV0", version);
  }
}

void store_BldDataIpimbV0(const Psana::Bld::BldDataIpimbV0* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataIpimbV0_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataIpimbV0", version);
  }
}

void store(const Psana::Bld::BldDataIpimbV0& obj, hdf5pp::Group group, int version) 
{
  store_BldDataIpimbV0(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataIpimbV0* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataIpimbV0(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataIpimbV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataIpimbV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV2_v0::dataset_data>::stored_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV2_v0::dataset_config>::stored_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataIpimbV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV2_v0::dataset_data>::native_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV2_v0::dataset_config>::native_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV1_v0_dataset_data_native_type();
  return type;
}

ns_BldDataIpimbV1_v0::dataset_data::dataset_data()
{
}

ns_BldDataIpimbV1_v0::dataset_data::dataset_data(const Psana::Bld::BldDataIpimbV1& psanaobj)
  : ipimbData(psanaobj.ipimbData())
  , ipimbConfig(psanaobj.ipimbConfig())
  , ipmFexData(psanaobj.ipmFexData())
{
}

ns_BldDataIpimbV1_v0::dataset_data::~dataset_data()
{
}
const Psana::Ipimb::DataV2& BldDataIpimbV1_v0::ipimbData() const {
  if (not m_ds_storage_data_ipimbData) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_DataV2_v0::dataset_data> tmp(m_ds_data, &m_ds_data->ipimbData);
    m_ds_storage_data_ipimbData = boost::make_shared<Ipimb::DataV2_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbData;
}
const Psana::Ipimb::ConfigV2& BldDataIpimbV1_v0::ipimbConfig() const {
  if (not m_ds_storage_data_ipimbConfig) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_ConfigV2_v0::dataset_config> tmp(m_ds_data, &m_ds_data->ipimbConfig);
    m_ds_storage_data_ipimbConfig = boost::make_shared<Ipimb::ConfigV2_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbConfig;
}
const Psana::Lusi::IpmFexV1& BldDataIpimbV1_v0::ipmFexData() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_ipmFexData = Psana::Lusi::IpmFexV1(m_ds_data->ipmFexData);
  return m_ds_storage_data_ipmFexData;
}
void BldDataIpimbV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataIpimbV1_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataIpimbV1_v0(const Psana::Bld::BldDataIpimbV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataIpimbV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataIpimbV1_v0(const Psana::Bld::BldDataIpimbV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataIpimbV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataIpimbV1> > make_BldDataIpimbV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV1> >(boost::make_shared<BldDataIpimbV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV1> >(boost::shared_ptr<Psana::Bld::BldDataIpimbV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataIpimbV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataIpimbV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataIpimbV1", version);
  }
}

void store_BldDataIpimbV1(const Psana::Bld::BldDataIpimbV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataIpimbV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataIpimbV1", version);
  }
}

void store(const Psana::Bld::BldDataIpimbV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataIpimbV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataIpimbV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataIpimbV1(obj, group, index, version, true);
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataPimV1> > make_BldDataPimV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPimV1> >(boost::make_shared<BldDataPimV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPimV1> >(boost::shared_ptr<Psana::Bld::BldDataPimV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataPimV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataPimV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataPimV1", version);
  }
}

void store_BldDataPimV1(const Psana::Bld::BldDataPimV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataPimV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataPimV1", version);
  }
}

void store(const Psana::Bld::BldDataPimV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataPimV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataPimV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataPimV1(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataGMDV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataGMDV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("strGasType", offsetof(DsType, strGasType), hdf5pp::TypeTraits<const char*>::stored_type(32));
  type.insert("fPressure", offsetof(DsType, fPressure), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTemperature", offsetof(DsType, fTemperature), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCurrent", offsetof(DsType, fCurrent), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMeshElectron", offsetof(DsType, fHvMeshElectron), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMeshIon", offsetof(DsType, fHvMeshIon), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMultIon", offsetof(DsType, fHvMultIon), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fChargeQ", offsetof(DsType, fChargeQ), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPhotonEnergy", offsetof(DsType, fPhotonEnergy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fMultPulseIntensity", offsetof(DsType, fMultPulseIntensity), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fKeithleyPulseIntensity", offsetof(DsType, fKeithleyPulseIntensity), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPulseEnergy", offsetof(DsType, fPulseEnergy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPulseEnergyFEE", offsetof(DsType, fPulseEnergyFEE), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTransmission", offsetof(DsType, fTransmission), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTransmissionFEE", offsetof(DsType, fTransmissionFEE), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataGMDV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("strGasType", offsetof(DsType, strGasType), hdf5pp::TypeTraits<const char*>::native_type(32));
  type.insert("fPressure", offsetof(DsType, fPressure), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTemperature", offsetof(DsType, fTemperature), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCurrent", offsetof(DsType, fCurrent), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMeshElectron", offsetof(DsType, fHvMeshElectron), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMeshIon", offsetof(DsType, fHvMeshIon), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMultIon", offsetof(DsType, fHvMultIon), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fChargeQ", offsetof(DsType, fChargeQ), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPhotonEnergy", offsetof(DsType, fPhotonEnergy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fMultPulseIntensity", offsetof(DsType, fMultPulseIntensity), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fKeithleyPulseIntensity", offsetof(DsType, fKeithleyPulseIntensity), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPulseEnergy", offsetof(DsType, fPulseEnergy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPulseEnergyFEE", offsetof(DsType, fPulseEnergyFEE), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTransmission", offsetof(DsType, fTransmission), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTransmissionFEE", offsetof(DsType, fTransmissionFEE), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV0_v0_dataset_data_native_type();
  return type;
}

ns_BldDataGMDV0_v0::dataset_data::dataset_data()
{
}

ns_BldDataGMDV0_v0::dataset_data::dataset_data(const Psana::Bld::BldDataGMDV0& psanaobj)
  : fPressure(psanaobj.pressure())
  , fTemperature(psanaobj.temperature())
  , fCurrent(psanaobj.current())
  , fHvMeshElectron(psanaobj.hvMeshElectron())
  , fHvMeshIon(psanaobj.hvMeshIon())
  , fHvMultIon(psanaobj.hvMultIon())
  , fChargeQ(psanaobj.chargeQ())
  , fPhotonEnergy(psanaobj.photonEnergy())
  , fMultPulseIntensity(psanaobj.multPulseIntensity())
  , fKeithleyPulseIntensity(psanaobj.keithleyPulseIntensity())
  , fPulseEnergy(psanaobj.pulseEnergy())
  , fPulseEnergyFEE(psanaobj.pulseEnergyFEE())
  , fTransmission(psanaobj.transmission())
  , fTransmissionFEE(psanaobj.transmissionFEE())
{
  strncpy(strGasType, psanaobj.gasType(), 32);
}

ns_BldDataGMDV0_v0::dataset_data::~dataset_data()
{
}
const char* BldDataGMDV0_v0::gasType() const {
  if (not m_ds_data) read_ds_data();
  return (const char*)(m_ds_data->strGasType);
}
double BldDataGMDV0_v0::pressure() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPressure);
}
double BldDataGMDV0_v0::temperature() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTemperature);
}
double BldDataGMDV0_v0::current() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fCurrent);
}
double BldDataGMDV0_v0::hvMeshElectron() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMeshElectron);
}
double BldDataGMDV0_v0::hvMeshIon() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMeshIon);
}
double BldDataGMDV0_v0::hvMultIon() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMultIon);
}
double BldDataGMDV0_v0::chargeQ() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fChargeQ);
}
double BldDataGMDV0_v0::photonEnergy() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPhotonEnergy);
}
double BldDataGMDV0_v0::multPulseIntensity() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMultPulseIntensity);
}
double BldDataGMDV0_v0::keithleyPulseIntensity() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fKeithleyPulseIntensity);
}
double BldDataGMDV0_v0::pulseEnergy() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPulseEnergy);
}
double BldDataGMDV0_v0::pulseEnergyFEE() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPulseEnergyFEE);
}
double BldDataGMDV0_v0::transmission() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTransmission);
}
double BldDataGMDV0_v0::transmissionFEE() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTransmissionFEE);
}
void BldDataGMDV0_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataGMDV0_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataGMDV0_v0(const Psana::Bld::BldDataGMDV0& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataGMDV0_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataGMDV0_v0(const Psana::Bld::BldDataGMDV0* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataGMDV0_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataGMDV0> > make_BldDataGMDV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV0> >(boost::make_shared<BldDataGMDV0_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV0> >(boost::shared_ptr<Psana::Bld::BldDataGMDV0>());
  }
}

void make_datasets(const Psana::Bld::BldDataGMDV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataGMDV0_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV0", version);
  }
}

void store_BldDataGMDV0(const Psana::Bld::BldDataGMDV0* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataGMDV0_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV0", version);
  }
}

void store(const Psana::Bld::BldDataGMDV0& obj, hdf5pp::Group group, int version) 
{
  store_BldDataGMDV0(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataGMDV0* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataGMDV0(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataGMDV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataGMDV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCorrectedSumPerPulse", offsetof(DsType, fCorrectedSumPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fBgValuePerSample", offsetof(DsType, fBgValuePerSample), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataGMDV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCorrectedSumPerPulse", offsetof(DsType, fCorrectedSumPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fBgValuePerSample", offsetof(DsType, fBgValuePerSample), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV1_v0_dataset_data_native_type();
  return type;
}

ns_BldDataGMDV1_v0::dataset_data::dataset_data()
{
}

ns_BldDataGMDV1_v0::dataset_data::dataset_data(const Psana::Bld::BldDataGMDV1& psanaobj)
  : fMilliJoulesPerPulse(psanaobj.milliJoulesPerPulse())
  , fMilliJoulesAverage(psanaobj.milliJoulesAverage())
  , fCorrectedSumPerPulse(psanaobj.correctedSumPerPulse())
  , fBgValuePerSample(psanaobj.bgValuePerSample())
  , fRelativeEnergyPerPulse(psanaobj.relativeEnergyPerPulse())
{
}

ns_BldDataGMDV1_v0::dataset_data::~dataset_data()
{
}
double BldDataGMDV1_v0::milliJoulesPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesPerPulse);
}
double BldDataGMDV1_v0::milliJoulesAverage() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesAverage);
}
double BldDataGMDV1_v0::correctedSumPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fCorrectedSumPerPulse);
}
double BldDataGMDV1_v0::bgValuePerSample() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fBgValuePerSample);
}
double BldDataGMDV1_v0::relativeEnergyPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fRelativeEnergyPerPulse);
}
void BldDataGMDV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataGMDV1_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataGMDV1_v0(const Psana::Bld::BldDataGMDV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataGMDV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataGMDV1_v0(const Psana::Bld::BldDataGMDV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataGMDV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataGMDV1> > make_BldDataGMDV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV1> >(boost::make_shared<BldDataGMDV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV1> >(boost::shared_ptr<Psana::Bld::BldDataGMDV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataGMDV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataGMDV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV1", version);
  }
}

void store_BldDataGMDV1(const Psana::Bld::BldDataGMDV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataGMDV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV1", version);
  }
}

void store(const Psana::Bld::BldDataGMDV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataGMDV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataGMDV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataGMDV1(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataGMDV2_v0_dataset_data_stored_type()
{
  typedef ns_BldDataGMDV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fSumAllPeaksFiltBkgd", offsetof(DsType, fSumAllPeaksFiltBkgd), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fRawAvgBkgd", offsetof(DsType, fRawAvgBkgd), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fSumAllPeaksRawBkgd", offsetof(DsType, fSumAllPeaksRawBkgd), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataGMDV2_v0_dataset_data_native_type()
{
  typedef ns_BldDataGMDV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fSumAllPeaksFiltBkgd", offsetof(DsType, fSumAllPeaksFiltBkgd), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fRawAvgBkgd", offsetof(DsType, fRawAvgBkgd), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fSumAllPeaksRawBkgd", offsetof(DsType, fSumAllPeaksRawBkgd), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV2_v0_dataset_data_native_type();
  return type;
}

ns_BldDataGMDV2_v0::dataset_data::dataset_data()
{
}

ns_BldDataGMDV2_v0::dataset_data::dataset_data(const Psana::Bld::BldDataGMDV2& psanaobj)
  : fMilliJoulesPerPulse(psanaobj.milliJoulesPerPulse())
  , fMilliJoulesAverage(psanaobj.milliJoulesAverage())
  , fSumAllPeaksFiltBkgd(psanaobj.sumAllPeaksFiltBkgd())
  , fRawAvgBkgd(psanaobj.rawAvgBkgd())
  , fRelativeEnergyPerPulse(psanaobj.relativeEnergyPerPulse())
  , fSumAllPeaksRawBkgd(psanaobj.sumAllPeaksRawBkgd())
{
}

ns_BldDataGMDV2_v0::dataset_data::~dataset_data()
{
}
double BldDataGMDV2_v0::milliJoulesPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesPerPulse);
}
double BldDataGMDV2_v0::milliJoulesAverage() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesAverage);
}
double BldDataGMDV2_v0::sumAllPeaksFiltBkgd() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fSumAllPeaksFiltBkgd);
}
double BldDataGMDV2_v0::rawAvgBkgd() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fRawAvgBkgd);
}
double BldDataGMDV2_v0::relativeEnergyPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fRelativeEnergyPerPulse);
}
double BldDataGMDV2_v0::sumAllPeaksRawBkgd() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fSumAllPeaksRawBkgd);
}
void BldDataGMDV2_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataGMDV2_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataGMDV2_v0(const Psana::Bld::BldDataGMDV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataGMDV2_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataGMDV2_v0(const Psana::Bld::BldDataGMDV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataGMDV2_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataGMDV2> > make_BldDataGMDV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV2> >(boost::make_shared<BldDataGMDV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV2> >(boost::shared_ptr<Psana::Bld::BldDataGMDV2>());
  }
}

void make_datasets(const Psana::Bld::BldDataGMDV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataGMDV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV2", version);
  }
}

void store_BldDataGMDV2(const Psana::Bld::BldDataGMDV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataGMDV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataGMDV2", version);
  }
}

void store(const Psana::Bld::BldDataGMDV2& obj, hdf5pp::Group group, int version) 
{
  store_BldDataGMDV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataGMDV2* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataGMDV2(obj, group, index, version, true);
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataAcqADCV1> > make_BldDataAcqADCV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Acqiris::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataAcqADCV1> >(boost::make_shared<BldDataAcqADCV1_v0<Psana::Acqiris::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataAcqADCV1> >(boost::shared_ptr<Psana::Bld::BldDataAcqADCV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataAcqADCV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataAcqADCV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataAcqADCV1", version);
  }
}

void store_BldDataAcqADCV1(const Psana::Bld::BldDataAcqADCV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataAcqADCV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataAcqADCV1", version);
  }
}

void store(const Psana::Bld::BldDataAcqADCV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataAcqADCV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataAcqADCV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataAcqADCV1(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataSpectrometerV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataSpectrometerV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_hproj_shape[] = { 1024 };
  hdf5pp::ArrayType _array_type_hproj = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::stored_type(), 1, _array_type_hproj_shape);
  type.insert("hproj", offsetof(DsType, hproj), _array_type_hproj);
  hsize_t _array_type_vproj_shape[] = { 256 };
  hdf5pp::ArrayType _array_type_vproj = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::stored_type(), 1, _array_type_vproj_shape);
  type.insert("vproj", offsetof(DsType, vproj), _array_type_vproj);
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataSpectrometerV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataSpectrometerV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_hproj_shape[] = { 1024 };
  hdf5pp::ArrayType _array_type_hproj = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::native_type(), 1, _array_type_hproj_shape);
  type.insert("hproj", offsetof(DsType, hproj), _array_type_hproj);
  hsize_t _array_type_vproj_shape[] = { 256 };
  hdf5pp::ArrayType _array_type_vproj = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::native_type(), 1, _array_type_vproj_shape);
  type.insert("vproj", offsetof(DsType, vproj), _array_type_vproj);
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataSpectrometerV0_v0_dataset_data_native_type();
  return type;
}

ns_BldDataSpectrometerV0_v0::dataset_data::dataset_data()
{
}

ns_BldDataSpectrometerV0_v0::dataset_data::dataset_data(const Psana::Bld::BldDataSpectrometerV0& psanaobj)
{
  {
    const __typeof__(psanaobj.hproj())& arr = psanaobj.hproj();
    std::copy(arr.begin(), arr.begin()+1024, hproj);
  }
  {
    const __typeof__(psanaobj.vproj())& arr = psanaobj.vproj();
    std::copy(arr.begin(), arr.begin()+256, vproj);
  }
}

ns_BldDataSpectrometerV0_v0::dataset_data::~dataset_data()
{
}
ndarray<const uint32_t, 1> BldDataSpectrometerV0_v0::hproj() const {
  if (not m_ds_data) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->hproj);
  return make_ndarray(ptr, 1024);
}
ndarray<const uint32_t, 1> BldDataSpectrometerV0_v0::vproj() const {
  if (not m_ds_data) read_ds_data();
  boost::shared_ptr<uint32_t> ptr(m_ds_data, m_ds_data->vproj);
  return make_ndarray(ptr, 256);
}
void BldDataSpectrometerV0_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataSpectrometerV0_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_BldDataSpectrometerV0_v0(const Psana::Bld::BldDataSpectrometerV0& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataSpectrometerV0_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_BldDataSpectrometerV0_v0(const Psana::Bld::BldDataSpectrometerV0* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataSpectrometerV0_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataSpectrometerV0> > make_BldDataSpectrometerV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataSpectrometerV0> >(boost::make_shared<BldDataSpectrometerV0_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataSpectrometerV0> >(boost::shared_ptr<Psana::Bld::BldDataSpectrometerV0>());
  }
}

void make_datasets(const Psana::Bld::BldDataSpectrometerV0& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataSpectrometerV0_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataSpectrometerV0", version);
  }
}

void store_BldDataSpectrometerV0(const Psana::Bld::BldDataSpectrometerV0* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataSpectrometerV0_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataSpectrometerV0", version);
  }
}

void store(const Psana::Bld::BldDataSpectrometerV0& obj, hdf5pp::Group group, int version) 
{
  store_BldDataSpectrometerV0(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataSpectrometerV0* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataSpectrometerV0(obj, group, index, version, true);
}


hdf5pp::Type ns_BldDataSpectrometerV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataSpectrometerV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("hproj_y1", offsetof(DsType, hproj_y1), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("hproj_y2", offsetof(DsType, hproj_y2), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("comRaw", offsetof(DsType, comRaw), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("baseline", offsetof(DsType, baseline), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("com", offsetof(DsType, com), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("integral", offsetof(DsType, integral), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("nPeaks", offsetof(DsType, nPeaks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataSpectrometerV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataSpectrometerV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("hproj_y1", offsetof(DsType, hproj_y1), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("hproj_y2", offsetof(DsType, hproj_y2), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("comRaw", offsetof(DsType, comRaw), hdf5pp::TypeTraits<double>::native_type());
  type.insert("baseline", offsetof(DsType, baseline), hdf5pp::TypeTraits<double>::native_type());
  type.insert("com", offsetof(DsType, com), hdf5pp::TypeTraits<double>::native_type());
  type.insert("integral", offsetof(DsType, integral), hdf5pp::TypeTraits<double>::native_type());
  type.insert("nPeaks", offsetof(DsType, nPeaks), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataSpectrometerV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataSpectrometerV1_v0_dataset_data_native_type();
  return type;
}

ns_BldDataSpectrometerV1_v0::dataset_data::dataset_data()
{
}

ns_BldDataSpectrometerV1_v0::dataset_data::dataset_data(const Psana::Bld::BldDataSpectrometerV1& psanaobj)
  : width(psanaobj.width())
  , hproj_y1(psanaobj.hproj_y1())
  , hproj_y2(psanaobj.hproj_y2())
  , comRaw(psanaobj.comRaw())
  , baseline(psanaobj.baseline())
  , com(psanaobj.com())
  , integral(psanaobj.integral())
  , nPeaks(psanaobj.nPeaks())
{
}

ns_BldDataSpectrometerV1_v0::dataset_data::~dataset_data()
{
}
uint32_t BldDataSpectrometerV1_v0::width() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->width);
}
uint32_t BldDataSpectrometerV1_v0::hproj_y1() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->hproj_y1);
}
uint32_t BldDataSpectrometerV1_v0::hproj_y2() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->hproj_y2);
}
double BldDataSpectrometerV1_v0::comRaw() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->comRaw);
}
double BldDataSpectrometerV1_v0::baseline() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->baseline);
}
double BldDataSpectrometerV1_v0::com() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->com);
}
double BldDataSpectrometerV1_v0::integral() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->integral);
}
uint32_t BldDataSpectrometerV1_v0::nPeaks() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->nPeaks);
}
ndarray<const uint32_t, 1> BldDataSpectrometerV1_v0::hproj() const {
  if (m_ds_hproj.empty()) read_ds_hproj();
  return m_ds_hproj;
}
ndarray<const double, 1> BldDataSpectrometerV1_v0::peakPos() const {
  if (m_ds_peakPos.empty()) read_ds_peakPos();
  return m_ds_peakPos;
}
ndarray<const double, 1> BldDataSpectrometerV1_v0::peakHeight() const {
  if (m_ds_peakHeight.empty()) read_ds_peakHeight();
  return m_ds_peakHeight;
}
ndarray<const double, 1> BldDataSpectrometerV1_v0::FWHM() const {
  if (m_ds_FWHM.empty()) read_ds_FWHM();
  return m_ds_FWHM;
}
void BldDataSpectrometerV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataSpectrometerV1_v0::dataset_data>(m_group, "data", m_idx);
}
void BldDataSpectrometerV1_v0::read_ds_hproj() const {
  m_ds_hproj = hdf5pp::Utils::readNdarray<uint32_t, 1>(m_group, "hproj", m_idx);
}
void BldDataSpectrometerV1_v0::read_ds_peakPos() const {
  if (not m_group.hasChild("peakPos")) {
    m_ds_peakPos = ndarray<double, 1>();
    return;
  }
  m_ds_peakPos = hdf5pp::Utils::readNdarray<double, 1>(m_group, "peakPos", m_idx);
}
void BldDataSpectrometerV1_v0::read_ds_peakHeight() const {
  if (not m_group.hasChild("peakHeight")) {
    m_ds_peakHeight = ndarray<double, 1>();
    return;
  }
  m_ds_peakHeight = hdf5pp::Utils::readNdarray<double, 1>(m_group, "peakHeight", m_idx);
}
void BldDataSpectrometerV1_v0::read_ds_FWHM() const {
  if (not m_group.hasChild("FWHM")) {
    m_ds_FWHM = ndarray<double, 1>();
    return;
  }
  m_ds_FWHM = hdf5pp::Utils::readNdarray<double, 1>(m_group, "FWHM", m_idx);
}

void make_datasets_BldDataSpectrometerV1_v0(const Psana::Bld::BldDataSpectrometerV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Bld::ns_BldDataSpectrometerV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.hproj()) PsanaArray;
    const PsanaArray& psana_array = obj.hproj();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "hproj", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.peakPos()) PsanaArray;
    const PsanaArray& psana_array = obj.peakPos();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "peakPos", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
  {
    typedef __typeof__(obj.peakHeight()) PsanaArray;
    const PsanaArray& psana_array = obj.peakHeight();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "peakHeight", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
  {
    typedef __typeof__(obj.FWHM()) PsanaArray;
    const PsanaArray& psana_array = obj.FWHM();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "FWHM", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
}

void store_BldDataSpectrometerV1_v0(const Psana::Bld::BldDataSpectrometerV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Bld::ns_BldDataSpectrometerV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "hproj", obj->hproj(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "hproj", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "hproj", obj->hproj());
  }

  if (group.hasChild("peakPos")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "peakPos", obj->peakPos(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "peakPos", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "peakPos", obj->peakPos());
  }
  }
  if (group.hasChild("peakHeight")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "peakHeight", obj->peakHeight(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "peakHeight", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "peakHeight", obj->peakHeight());
  }
  }
  if (group.hasChild("FWHM")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "FWHM", obj->FWHM(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "FWHM", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "FWHM", obj->FWHM());
  }
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataSpectrometerV1> > make_BldDataSpectrometerV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataSpectrometerV1> >(boost::make_shared<BldDataSpectrometerV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataSpectrometerV1> >(boost::shared_ptr<Psana::Bld::BldDataSpectrometerV1>());
  }
}

void make_datasets(const Psana::Bld::BldDataSpectrometerV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_BldDataSpectrometerV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataSpectrometerV1", version);
  }
}

void store_BldDataSpectrometerV1(const Psana::Bld::BldDataSpectrometerV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_BldDataSpectrometerV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Bld.BldDataSpectrometerV1", version);
  }
}

void store(const Psana::Bld::BldDataSpectrometerV1& obj, hdf5pp::Group group, int version) 
{
  store_BldDataSpectrometerV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Bld::BldDataSpectrometerV1* obj, hdf5pp::Group group, long index, int version)
{
  store_BldDataSpectrometerV1(obj, group, index, version, true);
}

} // namespace Bld
} // namespace psddl_hdf2psana
