#ifndef PSDDL_HDF2PSANA_L3T_DDL_H
#define PSDDL_HDF2PSANA_L3T_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/l3t.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
#include "psddl_hdf2psana/ChunkPolicy.h"
namespace psddl_hdf2psana {
namespace L3T {

namespace ns_ConfigV1_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::L3T::ConfigV1& psanaobj);
  ~dataset_config();

  uint32_t module_id_len;
  uint32_t desc_len;
  char* module_id;
  char* desc;


private:
  dataset_config(const dataset_config&);
  dataset_config& operator=(const dataset_config&);
};
}


class ConfigV1_v0 : public Psana::L3T::ConfigV1 {
public:
  typedef Psana::L3T::ConfigV1 PsanaType;
  ConfigV1_v0() {}
  ConfigV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  ConfigV1_v0(const boost::shared_ptr<L3T::ns_ConfigV1_v0::dataset_config>& ds) : m_ds_config(ds) {}
  virtual ~ConfigV1_v0() {}
  virtual uint32_t module_id_len() const;
  virtual uint32_t desc_len() const;
  virtual const char* module_id() const;
  virtual const char* desc() const;
  /** Method which returns the shape (dimensions) of the data returned by module_id() method. */
  std::vector<int> module_id_shape() const;

  /** Method which returns the shape (dimensions) of the data returned by desc() method. */
  std::vector<int> desc_shape() const;

private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<L3T::ns_ConfigV1_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::L3T::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::L3T::ConfigV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::L3T::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::L3T::ConfigV1* obj, hdf5pp::Group group, long index = -1, int version = -1);


namespace ns_DataV1_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::L3T::DataV1& psanaobj);
  ~dataset_data();

  uint32_t accept;


};
}


class DataV1_v0 : public Psana::L3T::DataV1 {
public:
  typedef Psana::L3T::DataV1 PsanaType;
  DataV1_v0() {}
  DataV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  DataV1_v0(const boost::shared_ptr<L3T::ns_DataV1_v0::dataset_data>& ds) : m_ds_data(ds) {}
  virtual ~DataV1_v0() {}
  virtual uint32_t accept() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<L3T::ns_DataV1_v0::dataset_data> m_ds_data;
  void read_ds_data() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::L3T::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::L3T::DataV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::L3T::DataV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::L3T::DataV1* obj, hdf5pp::Group group, long index = -1, int version = -1);


namespace ns_DataV2_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::L3T::DataV2& psanaobj);
  ~dataset_data();

  uint32_t accept;
  uint8_t result;
  uint8_t bias;


};
}


class DataV2_v0 : public Psana::L3T::DataV2 {
public:
  typedef Psana::L3T::DataV2 PsanaType;
  DataV2_v0() {}
  DataV2_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  DataV2_v0(const boost::shared_ptr<L3T::ns_DataV2_v0::dataset_data>& ds) : m_ds_data(ds) {}
  virtual ~DataV2_v0() {}
  virtual uint32_t accept() const;
  virtual Psana::L3T::DataV2::Result result() const;
  virtual Psana::L3T::DataV2::Bias bias() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<L3T::ns_DataV2_v0::dataset_data> m_ds_data;
  void read_ds_data() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::L3T::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::L3T::DataV2& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::L3T::DataV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::L3T::DataV2* obj, hdf5pp::Group group, long index = -1, int version = -1);

} // namespace L3T
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_L3T_DDL_H
