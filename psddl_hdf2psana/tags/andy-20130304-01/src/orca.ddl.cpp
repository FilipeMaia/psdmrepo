
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/orca.ddl.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
namespace psddl_hdf2psana {
namespace Orca {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
    hdf5pp::EnumType<int32_t> _enum_type_mode = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_mode.insert("x1", Psana::Orca::ConfigV1::x1);
  _enum_type_mode.insert("x2", Psana::Orca::ConfigV1::x2);
  _enum_type_mode.insert("x4", Psana::Orca::ConfigV1::x4);
  _enum_type_mode.insert("Subarray", Psana::Orca::ConfigV1::Subarray);
  type.insert("mode", offsetof(DsType, mode), _enum_type_mode);
    hdf5pp::EnumType<int32_t> _enum_type_cooling = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_cooling.insert("Off", Psana::Orca::ConfigV1::Off);
  _enum_type_cooling.insert("On", Psana::Orca::ConfigV1::On);
  _enum_type_cooling.insert("Max", Psana::Orca::ConfigV1::Max);
  type.insert("cooling", offsetof(DsType, cooling), _enum_type_cooling);
  type.insert("defect_pixel_correction_enabled", offsetof(DsType, defect_pixel_correction_enabled), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("rows", offsetof(DsType, rows), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
    hdf5pp::EnumType<int32_t> _enum_type_mode = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_mode.insert("x1", Psana::Orca::ConfigV1::x1);
  _enum_type_mode.insert("x2", Psana::Orca::ConfigV1::x2);
  _enum_type_mode.insert("x4", Psana::Orca::ConfigV1::x4);
  _enum_type_mode.insert("Subarray", Psana::Orca::ConfigV1::Subarray);
  type.insert("mode", offsetof(DsType, mode), _enum_type_mode);
    hdf5pp::EnumType<int32_t> _enum_type_cooling = hdf5pp::EnumType<int32_t>::enumType();
  _enum_type_cooling.insert("Off", Psana::Orca::ConfigV1::Off);
  _enum_type_cooling.insert("On", Psana::Orca::ConfigV1::On);
  _enum_type_cooling.insert("Max", Psana::Orca::ConfigV1::Max);
  type.insert("cooling", offsetof(DsType, cooling), _enum_type_cooling);
  type.insert("defect_pixel_correction_enabled", offsetof(DsType, defect_pixel_correction_enabled), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("rows", offsetof(DsType, rows), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
Psana::Orca::ConfigV1::ReadoutMode ConfigV1_v0::mode() const {
  if (not m_ds_config.get()) read_ds_config();
  return Psana::Orca::ConfigV1::ReadoutMode(m_ds_config->mode);
}
Psana::Orca::ConfigV1::Cooling ConfigV1_v0::cooling() const {
  if (not m_ds_config.get()) read_ds_config();
  return Psana::Orca::ConfigV1::Cooling(m_ds_config->cooling);
}
int8_t ConfigV1_v0::defect_pixel_correction_enabled() const {
  if (not m_ds_config.get()) read_ds_config();
  return int8_t(m_ds_config->defect_pixel_correction_enabled);
}
uint32_t ConfigV1_v0::rows() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->rows);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Orca::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Orca::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Orca::ConfigV1> >(boost::shared_ptr<Psana::Orca::ConfigV1>());
  }
}
} // namespace Orca
} // namespace psddl_hdf2psana
