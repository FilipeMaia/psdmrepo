
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/fccd.ddl.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
namespace psddl_hdf2psana {
namespace FCCD {

hdf5pp::Type ns_FccdConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_FccdConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("outputMode", offsetof(DsType, outputMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("trimmedWidth", offsetof(DsType, trimmedWidth), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("trimmedHeight", offsetof(DsType, trimmedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_FccdConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_FccdConfigV1_v0_dataset_config_native_type()
{
  typedef ns_FccdConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("outputMode", offsetof(DsType, outputMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("trimmedWidth", offsetof(DsType, trimmedWidth), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("trimmedHeight", offsetof(DsType, trimmedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_FccdConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_FccdConfigV1_v0::dataset_config::dataset_config()
{
}
ns_FccdConfigV1_v0::dataset_config::~dataset_config()
{
}
uint16_t FccdConfigV1_v0::outputMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->outputMode);
}
uint32_t FccdConfigV1_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t FccdConfigV1_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t FccdConfigV1_v0::trimmedWidth() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->trimmedWidth);
}
uint32_t FccdConfigV1_v0::trimmedHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->trimmedHeight);
}
void FccdConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<ns_FccdConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::FCCD::FccdConfigV1> > make_FccdConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::FCCD::FccdConfigV1> >(boost::make_shared<FccdConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::FCCD::FccdConfigV1> >(boost::shared_ptr<Psana::FCCD::FccdConfigV1>());
  }
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_FccdConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("outputMode", offsetof(DsType, outputMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("ccdEnable", offsetof(DsType, ccdEnable), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("focusMode", offsetof(DsType, focusMode), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("trimmedWidth", offsetof(DsType, trimmedWidth), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("trimmedHeight", offsetof(DsType, trimmedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_config_native_type()
{
  typedef ns_FccdConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("outputMode", offsetof(DsType, outputMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("ccdEnable", offsetof(DsType, ccdEnable), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("focusMode", offsetof(DsType, focusMode), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("trimmedWidth", offsetof(DsType, trimmedWidth), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("trimmedHeight", offsetof(DsType, trimmedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_config_native_type();
  return type;
}
ns_FccdConfigV2_v0::dataset_config::dataset_config()
{
}
ns_FccdConfigV2_v0::dataset_config::~dataset_config()
{
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_dacVoltages_stored_type()
{
  typedef ns_FccdConfigV2_v0::dataset_dacVoltages DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("dacVoltages", offsetof(DsType, dacVoltages), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_dacVoltages::stored_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_dacVoltages_stored_type();
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_dacVoltages_native_type()
{
  typedef ns_FccdConfigV2_v0::dataset_dacVoltages DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("dacVoltages", offsetof(DsType, dacVoltages), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_dacVoltages::native_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_dacVoltages_native_type();
  return type;
}
ns_FccdConfigV2_v0::dataset_dacVoltages::dataset_dacVoltages()
{
}
ns_FccdConfigV2_v0::dataset_dacVoltages::~dataset_dacVoltages()
{
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_waveforms_stored_type()
{
  typedef ns_FccdConfigV2_v0::dataset_waveforms DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("waveforms", offsetof(DsType, waveforms), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_waveforms::stored_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_waveforms_stored_type();
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0_dataset_waveforms_native_type()
{
  typedef ns_FccdConfigV2_v0::dataset_waveforms DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("waveforms", offsetof(DsType, waveforms), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_FccdConfigV2_v0::dataset_waveforms::native_type()
{
  static hdf5pp::Type type = ns_FccdConfigV2_v0_dataset_waveforms_native_type();
  return type;
}
ns_FccdConfigV2_v0::dataset_waveforms::dataset_waveforms()
{
}
ns_FccdConfigV2_v0::dataset_waveforms::~dataset_waveforms()
{
}
uint16_t FccdConfigV2_v0::outputMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint16_t(m_ds_config->outputMode);
}
uint8_t FccdConfigV2_v0::ccdEnable() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->ccdEnable);
}
uint8_t FccdConfigV2_v0::focusMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint8_t(m_ds_config->focusMode);
}
uint32_t FccdConfigV2_v0::exposureTime() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->exposureTime);
}
ndarray<const float, 1> FccdConfigV2_v0::dacVoltages() const {
  if (not m_ds_dacVoltages.get()) read_ds_dacVoltages();
  boost::shared_ptr<float> ptr(m_ds_dacVoltages, m_ds_dacVoltages->dacVoltages);
  return make_ndarray(ptr, NVoltages);
}
ndarray<const uint16_t, 1> FccdConfigV2_v0::waveforms() const {
  if (not m_ds_waveforms.get()) read_ds_waveforms();
  boost::shared_ptr<uint16_t> ptr(m_ds_waveforms, m_ds_waveforms->waveforms);
  return make_ndarray(ptr, NWaveforms);
}
uint32_t FccdConfigV2_v0::width() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t FccdConfigV2_v0::height() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t FccdConfigV2_v0::trimmedWidth() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->trimmedWidth);
}
uint32_t FccdConfigV2_v0::trimmedHeight() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->trimmedHeight);
}
void FccdConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<ns_FccdConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
void FccdConfigV2_v0::read_ds_dacVoltages() const {
  m_ds_dacVoltages = hdf5pp::Utils::readGroup<ns_FccdConfigV2_v0::dataset_dacVoltages>(m_group, "dacVoltages", m_idx);
}
void FccdConfigV2_v0::read_ds_waveforms() const {
  m_ds_waveforms = hdf5pp::Utils::readGroup<ns_FccdConfigV2_v0::dataset_waveforms>(m_group, "waveforms", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::FCCD::FccdConfigV2> > make_FccdConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::FCCD::FccdConfigV2> >(boost::make_shared<FccdConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::FCCD::FccdConfigV2> >(boost::shared_ptr<Psana::FCCD::FccdConfigV2>());
  }
}
} // namespace FCCD
} // namespace psddl_hdf2psana
