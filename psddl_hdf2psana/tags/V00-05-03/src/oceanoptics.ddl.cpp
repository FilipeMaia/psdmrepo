
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/oceanoptics.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
#include "psddl_hdf2psana/HdfParameters.h"
namespace psddl_hdf2psana {
namespace OceanOptics {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  hsize_t _array_type_waveLenCalib_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_waveLenCalib = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), 1, _array_type_waveLenCalib_shape);
  type.insert("waveLenCalib", offsetof(DsType, waveLenCalib), _array_type_waveLenCalib);
  hsize_t _array_type_nonlinCorrect_shape[] = { 8 };
  hdf5pp::ArrayType _array_type_nonlinCorrect = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), 1, _array_type_nonlinCorrect_shape);
  type.insert("nonlinCorrect", offsetof(DsType, nonlinCorrect), _array_type_nonlinCorrect);
  type.insert("strayLightConstant", offsetof(DsType, strayLightConstant), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  hsize_t _array_type_waveLenCalib_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_waveLenCalib = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::native_type(), 1, _array_type_waveLenCalib_shape);
  type.insert("waveLenCalib", offsetof(DsType, waveLenCalib), _array_type_waveLenCalib);
  hsize_t _array_type_nonlinCorrect_shape[] = { 8 };
  hdf5pp::ArrayType _array_type_nonlinCorrect = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::native_type(), 1, _array_type_nonlinCorrect_shape);
  type.insert("nonlinCorrect", offsetof(DsType, nonlinCorrect), _array_type_nonlinCorrect);
  type.insert("strayLightConstant", offsetof(DsType, strayLightConstant), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::OceanOptics::ConfigV1& psanaobj)
  : exposureTime(psanaobj.exposureTime())
  , strayLightConstant(psanaobj.strayLightConstant())
{
  {
    const __typeof__(psanaobj.waveLenCalib())& arr = psanaobj.waveLenCalib();
    std::copy(arr.begin(), arr.begin()+4, waveLenCalib);
  }
  {
    const __typeof__(psanaobj.nonlinCorrect())& arr = psanaobj.nonlinCorrect();
    std::copy(arr.begin(), arr.begin()+8, nonlinCorrect);
  }
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
float ConfigV1_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
ndarray<const double, 1> ConfigV1_v0::waveLenCalib() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<double> ptr(m_ds_config, m_ds_config->waveLenCalib);
  return make_ndarray(ptr, 4);
}
ndarray<const double, 1> ConfigV1_v0::nonlinCorrect() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<double> ptr(m_ds_config, m_ds_config->nonlinCorrect);
  return make_ndarray(ptr, 8);
}
double ConfigV1_v0::strayLightConstant() const {
  if (not m_ds_config) read_ds_config();
  return double(m_ds_config->strayLightConstant);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<OceanOptics::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::OceanOptics::ConfigV1& obj, 
      hdf5pp::Group group, hsize_t chunk_size, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = OceanOptics::ns_ConfigV1_v0::dataset_config::stored_type();
    unsigned chunk_cache_size = HdfParameters::chunkCacheSize(dstype, chunk_size);
    hdf5pp::Utils::createDataset(group, "config", dstype, chunk_size, chunk_cache_size, deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::OceanOptics::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    OceanOptics::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::OceanOptics::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::OceanOptics::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::OceanOptics::ConfigV1> >(boost::shared_ptr<Psana::OceanOptics::ConfigV1>());
  }
}

void make_datasets(const Psana::OceanOptics::ConfigV1& obj, hdf5pp::Group group, hsize_t chunk_size,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunk_size, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "OceanOptics.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::OceanOptics::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "OceanOptics.ConfigV1", version);
  }
}

void store(const Psana::OceanOptics::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::OceanOptics::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_timespec64_v0_dataset_data_stored_type()
{
  typedef ns_timespec64_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("seconds", offsetof(DsType, seconds), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("nanoseconds", offsetof(DsType, nanoseconds), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_timespec64_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_timespec64_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_timespec64_v0_dataset_data_native_type()
{
  typedef ns_timespec64_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("seconds", offsetof(DsType, seconds), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("nanoseconds", offsetof(DsType, nanoseconds), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_timespec64_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_timespec64_v0_dataset_data_native_type();
  return type;
}

ns_timespec64_v0::dataset_data::dataset_data()
{
}

ns_timespec64_v0::dataset_data::dataset_data(const Psana::OceanOptics::timespec64& psanaobj)
  : seconds(psanaobj.tv_sec())
  , nanoseconds(psanaobj.tv_nsec())
{
}

ns_timespec64_v0::dataset_data::~dataset_data()
{
}

hdf5pp::Type ns_DataV1_v0_dataset_data_stored_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint64_t>::stored_type());
  type.insert("numDelayedFrames", offsetof(DsType, numDelayedFrames), hdf5pp::TypeTraits<uint64_t>::stored_type());
  type.insert("numDiscardFrames", offsetof(DsType, numDiscardFrames), hdf5pp::TypeTraits<uint64_t>::stored_type());
  type.insert("timeFrameStart", offsetof(DsType, timeFrameStart), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::stored_type());
  type.insert("timeFrameFirstData", offsetof(DsType, timeFrameFirstData), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::stored_type());
  type.insert("timeFrameEnd", offsetof(DsType, timeFrameEnd), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::stored_type());
  type.insert("numSpectraInData", offsetof(DsType, numSpectraInData), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("numSpectraInQueue", offsetof(DsType, numSpectraInQueue), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("numSpectraUnused", offsetof(DsType, numSpectraUnused), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("durationOfFrame", offsetof(DsType, durationOfFrame), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV1_v0_dataset_data_native_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint64_t>::native_type());
  type.insert("numDelayedFrames", offsetof(DsType, numDelayedFrames), hdf5pp::TypeTraits<uint64_t>::native_type());
  type.insert("numDiscardFrames", offsetof(DsType, numDiscardFrames), hdf5pp::TypeTraits<uint64_t>::native_type());
  type.insert("timeFrameStart", offsetof(DsType, timeFrameStart), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::native_type());
  type.insert("timeFrameFirstData", offsetof(DsType, timeFrameFirstData), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::native_type());
  type.insert("timeFrameEnd", offsetof(DsType, timeFrameEnd), hdf5pp::TypeTraits<OceanOptics::ns_timespec64_v0::dataset_data>::native_type());
  type.insert("numSpectraInData", offsetof(DsType, numSpectraInData), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("numSpectraInQueue", offsetof(DsType, numSpectraInQueue), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("numSpectraUnused", offsetof(DsType, numSpectraUnused), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("durationOfFrame", offsetof(DsType, durationOfFrame), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_native_type();
  return type;
}

ns_DataV1_v0::dataset_data::dataset_data()
{
}

ns_DataV1_v0::dataset_data::dataset_data(const Psana::OceanOptics::DataV1& psanaobj)
  : frameCounter(psanaobj.frameCounter())
  , numDelayedFrames(psanaobj.numDelayedFrames())
  , numDiscardFrames(psanaobj.numDiscardFrames())
  , timeFrameStart(psanaobj.timeFrameStart())
  , timeFrameFirstData(psanaobj.timeFrameFirstData())
  , timeFrameEnd(psanaobj.timeFrameEnd())
  , numSpectraInData(psanaobj.numSpectraInData())
  , numSpectraInQueue(psanaobj.numSpectraInQueue())
  , numSpectraUnused(psanaobj.numSpectraUnused())
  , durationOfFrame(psanaobj.durationOfFrame())
{
}

ns_DataV1_v0::dataset_data::~dataset_data()
{
}
template <typename Config>
ndarray<const uint16_t, 1> DataV1_v0<Config>::data() const {
  if (m_ds_spectra.empty()) read_ds_spectra();
  return m_ds_spectra;
}
template <typename Config>
uint64_t DataV1_v0<Config>::frameCounter() const {
  if (not m_ds_data) read_ds_data();
  return uint64_t(m_ds_data->frameCounter);
}
template <typename Config>
uint64_t DataV1_v0<Config>::numDelayedFrames() const {
  if (not m_ds_data) read_ds_data();
  return uint64_t(m_ds_data->numDelayedFrames);
}
template <typename Config>
uint64_t DataV1_v0<Config>::numDiscardFrames() const {
  if (not m_ds_data) read_ds_data();
  return uint64_t(m_ds_data->numDiscardFrames);
}
template <typename Config>
const Psana::OceanOptics::timespec64& DataV1_v0<Config>::timeFrameStart() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_timeFrameStart = Psana::OceanOptics::timespec64(m_ds_data->timeFrameStart);
  return m_ds_storage_data_timeFrameStart;
}
template <typename Config>
const Psana::OceanOptics::timespec64& DataV1_v0<Config>::timeFrameFirstData() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_timeFrameFirstData = Psana::OceanOptics::timespec64(m_ds_data->timeFrameFirstData);
  return m_ds_storage_data_timeFrameFirstData;
}
template <typename Config>
const Psana::OceanOptics::timespec64& DataV1_v0<Config>::timeFrameEnd() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_timeFrameEnd = Psana::OceanOptics::timespec64(m_ds_data->timeFrameEnd);
  return m_ds_storage_data_timeFrameEnd;
}
template <typename Config>
int8_t DataV1_v0<Config>::numSpectraInData() const {
  if (not m_ds_data) read_ds_data();
  return int8_t(m_ds_data->numSpectraInData);
}
template <typename Config>
int8_t DataV1_v0<Config>::numSpectraInQueue() const {
  if (not m_ds_data) read_ds_data();
  return int8_t(m_ds_data->numSpectraInQueue);
}
template <typename Config>
int8_t DataV1_v0<Config>::numSpectraUnused() const {
  if (not m_ds_data) read_ds_data();
  return int8_t(m_ds_data->numSpectraUnused);
}
template <typename Config>
double DataV1_v0<Config>::durationOfFrame() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->durationOfFrame);
}
template <typename Config>
double
DataV1_v0<Config>::nonlinerCorrected(uint32_t iPixel) const{ 
double fRawValue = (double) (this->data()[iPixel] ^ 0x2000);                     const ndarray<const double, 1>& corr = m_cfg->nonlinCorrect();                     return fRawValue / (                      corr[0] + fRawValue *                      (corr[1] + fRawValue *                      (corr[2] + fRawValue *                      (corr[3] + fRawValue *                      (corr[4] + fRawValue *                      (corr[5] + fRawValue *                      (corr[6] + fRawValue *                       corr[7]))))))); 
}
template <typename Config>
void DataV1_v0<Config>::read_ds_spectra() const {
  m_ds_spectra = hdf5pp::Utils::readNdarray<uint16_t, 1>(m_group, "spectra", m_idx);
}
template <typename Config>
void DataV1_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<OceanOptics::ns_DataV1_v0::dataset_data>(m_group, "data", m_idx);
}
template class DataV1_v0<Psana::OceanOptics::ConfigV1>;

void make_datasets_DataV1_v0(const Psana::OceanOptics::DataV1& obj, 
      hdf5pp::Group group, hsize_t chunk_size, int deflate, bool shuffle)
{
  {
    typedef __typeof__(obj.data()) PsanaArray;
    const PsanaArray& psana_array = obj.data();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), psana_array.shape()[0]);
    unsigned chunk_cache_size = HdfParameters::chunkCacheSize(dstype, chunk_size);
    hdf5pp::Utils::createDataset(group, "spectra", dstype, chunk_size, chunk_cache_size, deflate, shuffle);    
  }
  {
    hdf5pp::Type dstype = OceanOptics::ns_DataV1_v0::dataset_data::stored_type();
    unsigned chunk_cache_size = HdfParameters::chunkCacheSize(dstype, chunk_size);
    hdf5pp::Utils::createDataset(group, "data", dstype, chunk_size, chunk_cache_size, deflate, shuffle);    
  }
}

void store_DataV1_v0(const Psana::OceanOptics::DataV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "spectra", obj->data(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "spectra", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "spectra", obj->data());
  }
  if (obj) {
    OceanOptics::ns_DataV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::OceanOptics::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::OceanOptics::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::OceanOptics::DataV1> >(boost::make_shared<DataV1_v0<Psana::OceanOptics::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::OceanOptics::DataV1> >(boost::shared_ptr<Psana::OceanOptics::DataV1>());
  }
}

void make_datasets(const Psana::OceanOptics::DataV1& obj, hdf5pp::Group group, hsize_t chunk_size,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_DataV1_v0(obj, group, chunk_size, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "OceanOptics.DataV1", version);
  }
}

void store_DataV1(const Psana::OceanOptics::DataV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_DataV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "OceanOptics.DataV1", version);
  }
}

void store(const Psana::OceanOptics::DataV1& obj, hdf5pp::Group group, int version) 
{
  store_DataV1(&obj, group, 0, version, false);
}

void store_at(const Psana::OceanOptics::DataV1* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV1(obj, group, index, version, true);
}

} // namespace OceanOptics
} // namespace psddl_hdf2psana
