
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/princeton.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
namespace psddl_hdf2psana {
namespace Princeton {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::Princeton::ConfigV1& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , orgX(psanaobj.orgX())
  , orgY(psanaobj.orgY())
  , binX(psanaobj.binX())
  , binY(psanaobj.binY())
  , exposureTime(psanaobj.exposureTime())
  , coolingTemp(psanaobj.coolingTemp())
  , readoutSpeedIndex(psanaobj.readoutSpeedIndex())
  , readoutEventCode(psanaobj.readoutEventCode())
  , delayMode(psanaobj.delayMode())
{
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::width() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV1_v0::height() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV1_v0::orgX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV1_v0::orgY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV1_v0::binX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV1_v0::binY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV1_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV1_v0::coolingTemp() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint32_t ConfigV1_v0::readoutSpeedIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV1_v0::readoutEventCode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->readoutEventCode);
}
uint16_t ConfigV1_v0::delayMode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->delayMode);
}
uint32_t
ConfigV1_v0::frameSize() const{ 
return 8 + this->numPixels()*2; 
}



void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::Princeton::ConfigV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_ConfigV1_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::Princeton::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV1> >(boost::shared_ptr<Psana::Princeton::ConfigV1>());
  }
}

void make_datasets(const Psana::Princeton::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::Princeton::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV1", version);
  }
}

void store(const Psana::Princeton::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutEventCode", offsetof(DsType, readoutEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("delayMode", offsetof(DsType, delayMode), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV2_v0::dataset_config::dataset_config()
{
}

ns_ConfigV2_v0::dataset_config::dataset_config(const Psana::Princeton::ConfigV2& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , orgX(psanaobj.orgX())
  , orgY(psanaobj.orgY())
  , binX(psanaobj.binX())
  , binY(psanaobj.binY())
  , exposureTime(psanaobj.exposureTime())
  , coolingTemp(psanaobj.coolingTemp())
  , gainIndex(psanaobj.gainIndex())
  , readoutSpeedIndex(psanaobj.readoutSpeedIndex())
  , readoutEventCode(psanaobj.readoutEventCode())
  , delayMode(psanaobj.delayMode())
{
}

ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::width() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV2_v0::height() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV2_v0::orgX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV2_v0::orgY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV2_v0::binX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV2_v0::binY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV2_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV2_v0::coolingTemp() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint16_t ConfigV2_v0::gainIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->gainIndex);
}
uint16_t ConfigV2_v0::readoutSpeedIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV2_v0::readoutEventCode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->readoutEventCode);
}
uint16_t ConfigV2_v0::delayMode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->delayMode);
}
uint32_t
ConfigV2_v0::frameSize() const{ 
return 8 + this->numPixels()*2; 
}



void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV2_v0(const Psana::Princeton::ConfigV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_ConfigV2_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV2_v0(const Psana::Princeton::ConfigV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_ConfigV2_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV2> >(boost::shared_ptr<Psana::Princeton::ConfigV2>());
  }
}

void make_datasets(const Psana::Princeton::ConfigV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV2", version);
  }
}

void store_ConfigV2(const Psana::Princeton::ConfigV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV2", version);
  }
}

void store(const Psana::Princeton::ConfigV2& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::ConfigV2* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV2(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV3_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_native_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV3_v0::dataset_config::dataset_config()
{
}

ns_ConfigV3_v0::dataset_config::dataset_config(const Psana::Princeton::ConfigV3& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , orgX(psanaobj.orgX())
  , orgY(psanaobj.orgY())
  , binX(psanaobj.binX())
  , binY(psanaobj.binY())
  , exposureTime(psanaobj.exposureTime())
  , coolingTemp(psanaobj.coolingTemp())
  , gainIndex(psanaobj.gainIndex())
  , readoutSpeedIndex(psanaobj.readoutSpeedIndex())
  , exposureEventCode(psanaobj.exposureEventCode())
  , numDelayShots(psanaobj.numDelayShots())
{
}

ns_ConfigV3_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV3_v0::width() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV3_v0::height() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV3_v0::orgX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV3_v0::orgY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV3_v0::binX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV3_v0::binY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV3_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV3_v0::coolingTemp() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint8_t ConfigV3_v0::gainIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->gainIndex);
}
uint8_t ConfigV3_v0::readoutSpeedIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV3_v0::exposureEventCode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV3_v0::numDelayShots() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t
ConfigV3_v0::frameSize() const{ 
return 8 + this->numPixels()*2; 
}



void ConfigV3_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV3_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV3_v0(const Psana::Princeton::ConfigV3& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_ConfigV3_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV3_v0(const Psana::Princeton::ConfigV3* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_ConfigV3_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV3> > make_ConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV3> >(boost::make_shared<ConfigV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV3> >(boost::shared_ptr<Psana::Princeton::ConfigV3>());
  }
}

void make_datasets(const Psana::Princeton::ConfigV3& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV3_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV3", version);
  }
}

void store_ConfigV3(const Psana::Princeton::ConfigV3* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV3_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV3", version);
  }
}

void store(const Psana::Princeton::ConfigV3& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV3(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::ConfigV3* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV3(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV4_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV4_v0_dataset_config_native_type()
{
  typedef ns_ConfigV4_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV4_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV4_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV4_v0::dataset_config::dataset_config()
{
}

ns_ConfigV4_v0::dataset_config::dataset_config(const Psana::Princeton::ConfigV4& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , orgX(psanaobj.orgX())
  , orgY(psanaobj.orgY())
  , binX(psanaobj.binX())
  , binY(psanaobj.binY())
  , maskedHeight(psanaobj.maskedHeight())
  , kineticHeight(psanaobj.kineticHeight())
  , vsSpeed(psanaobj.vsSpeed())
  , exposureTime(psanaobj.exposureTime())
  , coolingTemp(psanaobj.coolingTemp())
  , gainIndex(psanaobj.gainIndex())
  , readoutSpeedIndex(psanaobj.readoutSpeedIndex())
  , exposureEventCode(psanaobj.exposureEventCode())
  , numDelayShots(psanaobj.numDelayShots())
{
}

ns_ConfigV4_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV4_v0::width() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV4_v0::height() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV4_v0::orgX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV4_v0::orgY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV4_v0::binX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV4_v0::binY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
uint32_t ConfigV4_v0::maskedHeight() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->maskedHeight);
}
uint32_t ConfigV4_v0::kineticHeight() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->kineticHeight);
}
float ConfigV4_v0::vsSpeed() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->vsSpeed);
}
float ConfigV4_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV4_v0::coolingTemp() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint8_t ConfigV4_v0::gainIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->gainIndex);
}
uint8_t ConfigV4_v0::readoutSpeedIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->readoutSpeedIndex);
}
uint16_t ConfigV4_v0::exposureEventCode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV4_v0::numDelayShots() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t
ConfigV4_v0::frameSize() const{ 
return 8 + this->numPixels()*2; 
}



void ConfigV4_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV4_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV4_v0(const Psana::Princeton::ConfigV4& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_ConfigV4_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV4_v0(const Psana::Princeton::ConfigV4* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_ConfigV4_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV4> > make_ConfigV4(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV4> >(boost::make_shared<ConfigV4_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV4> >(boost::shared_ptr<Psana::Princeton::ConfigV4>());
  }
}

void make_datasets(const Psana::Princeton::ConfigV4& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV4_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV4", version);
  }
}

void store_ConfigV4(const Psana::Princeton::ConfigV4* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV4_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV4", version);
  }
}

void store(const Psana::Princeton::ConfigV4& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV4(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::ConfigV4* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV4(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV5_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("infoReportInterval", offsetof(DsType, infoReportInterval), hdf5pp::TypeTraits<int16_t>::stored_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV5_v0_dataset_config_native_type()
{
  typedef ns_ConfigV5_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgX", offsetof(DsType, orgX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("orgY", offsetof(DsType, orgY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binX", offsetof(DsType, binX), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("binY", offsetof(DsType, binY), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("exposureTime", offsetof(DsType, exposureTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("coolingTemp", offsetof(DsType, coolingTemp), hdf5pp::TypeTraits<float>::native_type());
  type.insert("gainIndex", offsetof(DsType, gainIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("readoutSpeedIndex", offsetof(DsType, readoutSpeedIndex), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("maskedHeight", offsetof(DsType, maskedHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kineticHeight", offsetof(DsType, kineticHeight), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("vsSpeed", offsetof(DsType, vsSpeed), hdf5pp::TypeTraits<float>::native_type());
  type.insert("infoReportInterval", offsetof(DsType, infoReportInterval), hdf5pp::TypeTraits<int16_t>::native_type());
  type.insert("exposureEventCode", offsetof(DsType, exposureEventCode), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("numDelayShots", offsetof(DsType, numDelayShots), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV5_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV5_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV5_v0::dataset_config::dataset_config()
{
}

ns_ConfigV5_v0::dataset_config::dataset_config(const Psana::Princeton::ConfigV5& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , orgX(psanaobj.orgX())
  , orgY(psanaobj.orgY())
  , binX(psanaobj.binX())
  , binY(psanaobj.binY())
  , exposureTime(psanaobj.exposureTime())
  , coolingTemp(psanaobj.coolingTemp())
  , gainIndex(psanaobj.gainIndex())
  , readoutSpeedIndex(psanaobj.readoutSpeedIndex())
  , maskedHeight(psanaobj.maskedHeight())
  , kineticHeight(psanaobj.kineticHeight())
  , vsSpeed(psanaobj.vsSpeed())
  , infoReportInterval(psanaobj.infoReportInterval())
  , exposureEventCode(psanaobj.exposureEventCode())
  , numDelayShots(psanaobj.numDelayShots())
{
}

ns_ConfigV5_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV5_v0::width() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->width);
}
uint32_t ConfigV5_v0::height() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->height);
}
uint32_t ConfigV5_v0::orgX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgX);
}
uint32_t ConfigV5_v0::orgY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->orgY);
}
uint32_t ConfigV5_v0::binX() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binX);
}
uint32_t ConfigV5_v0::binY() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->binY);
}
float ConfigV5_v0::exposureTime() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->exposureTime);
}
float ConfigV5_v0::coolingTemp() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->coolingTemp);
}
uint16_t ConfigV5_v0::gainIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->gainIndex);
}
uint16_t ConfigV5_v0::readoutSpeedIndex() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->readoutSpeedIndex);
}
uint32_t ConfigV5_v0::maskedHeight() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->maskedHeight);
}
uint32_t ConfigV5_v0::kineticHeight() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->kineticHeight);
}
float ConfigV5_v0::vsSpeed() const {
  if (not m_ds_config) read_ds_config();
  return float(m_ds_config->vsSpeed);
}
int16_t ConfigV5_v0::infoReportInterval() const {
  if (not m_ds_config) read_ds_config();
  return int16_t(m_ds_config->infoReportInterval);
}
uint16_t ConfigV5_v0::exposureEventCode() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->exposureEventCode);
}
uint32_t ConfigV5_v0::numDelayShots() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numDelayShots);
}
uint32_t
ConfigV5_v0::frameSize() const{ 
return 12 + this->numPixels()*2; 
}



void ConfigV5_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Princeton::ns_ConfigV5_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV5_v0(const Psana::Princeton::ConfigV5& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_ConfigV5_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV5_v0(const Psana::Princeton::ConfigV5* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_ConfigV5_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::ConfigV5> > make_ConfigV5(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV5> >(boost::make_shared<ConfigV5_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::ConfigV5> >(boost::shared_ptr<Psana::Princeton::ConfigV5>());
  }
}

void make_datasets(const Psana::Princeton::ConfigV5& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV5_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV5", version);
  }
}

void store_ConfigV5(const Psana::Princeton::ConfigV5* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV5_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.ConfigV5", version);
  }
}

void store(const Psana::Princeton::ConfigV5& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV5(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::ConfigV5* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV5(obj, group, index, version, true);
}


hdf5pp::Type ns_FrameV1_v0_dataset_frame_stored_type()
{
  typedef ns_FrameV1_v0::dataset_frame DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_FrameV1_v0::dataset_frame::stored_type()
{
  static hdf5pp::Type type = ns_FrameV1_v0_dataset_frame_stored_type();
  return type;
}

hdf5pp::Type ns_FrameV1_v0_dataset_frame_native_type()
{
  typedef ns_FrameV1_v0::dataset_frame DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_FrameV1_v0::dataset_frame::native_type()
{
  static hdf5pp::Type type = ns_FrameV1_v0_dataset_frame_native_type();
  return type;
}

ns_FrameV1_v0::dataset_frame::dataset_frame()
{
}

ns_FrameV1_v0::dataset_frame::dataset_frame(const Psana::Princeton::FrameV1& psanaobj)
  : shotIdStart(psanaobj.shotIdStart())
  , readoutTime(psanaobj.readoutTime())
{
}

ns_FrameV1_v0::dataset_frame::~dataset_frame()
{
}
template <typename Config>
uint32_t FrameV1_v0<Config>::shotIdStart() const {
  if (not m_ds_frame) read_ds_frame();
  return uint32_t(m_ds_frame->shotIdStart);
}
template <typename Config>
float FrameV1_v0<Config>::readoutTime() const {
  if (not m_ds_frame) read_ds_frame();
  return float(m_ds_frame->readoutTime);
}
template <typename Config>
ndarray<const uint16_t, 2> FrameV1_v0<Config>::data() const {
  if (m_ds_data.empty()) read_ds_data();
  return m_ds_data;
}
template <typename Config>
void FrameV1_v0<Config>::read_ds_frame() const {
  m_ds_frame = hdf5pp::Utils::readGroup<Princeton::ns_FrameV1_v0::dataset_frame>(m_group, "frame", m_idx);
}
template <typename Config>
void FrameV1_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "data", m_idx);
}
template class FrameV1_v0<Psana::Princeton::ConfigV1>;
template class FrameV1_v0<Psana::Princeton::ConfigV2>;
template class FrameV1_v0<Psana::Princeton::ConfigV3>;
template class FrameV1_v0<Psana::Princeton::ConfigV4>;
template class FrameV1_v0<Psana::Princeton::ConfigV5>;

void make_datasets_FrameV1_v0(const Psana::Princeton::FrameV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_FrameV1_v0::dataset_frame::stored_type();
    hdf5pp::Utils::createDataset(group, "frame", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.data()) PsanaArray;
    const PsanaArray& psana_array = obj.data();
    hsize_t dims[2];
    std::copy(psana_array.shape(), psana_array.shape()+2, dims);
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), 2, dims);
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_FrameV1_v0(const Psana::Princeton::FrameV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_FrameV1_v0::dataset_frame ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "frame", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "frame", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "frame", index < 0 ? index : index + 1);
  }
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "data", obj->data(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "data", obj->data());
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV1> > make_FrameV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV5>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::make_shared<FrameV1_v0<Psana::Princeton::ConfigV5> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV1> >(boost::shared_ptr<Psana::Princeton::FrameV1>());
  }
}

void make_datasets(const Psana::Princeton::FrameV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_FrameV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.FrameV1", version);
  }
}

void store_FrameV1(const Psana::Princeton::FrameV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_FrameV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.FrameV1", version);
  }
}

void store(const Psana::Princeton::FrameV1& obj, hdf5pp::Group group, int version) 
{
  store_FrameV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::FrameV1* obj, hdf5pp::Group group, long index, int version)
{
  store_FrameV1(obj, group, index, version, true);
}


hdf5pp::Type ns_FrameV2_v0_dataset_frame_stored_type()
{
  typedef ns_FrameV2_v0::dataset_frame DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::stored_type());
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_FrameV2_v0::dataset_frame::stored_type()
{
  static hdf5pp::Type type = ns_FrameV2_v0_dataset_frame_stored_type();
  return type;
}

hdf5pp::Type ns_FrameV2_v0_dataset_frame_native_type()
{
  typedef ns_FrameV2_v0::dataset_frame DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shotIdStart", offsetof(DsType, shotIdStart), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readoutTime", offsetof(DsType, readoutTime), hdf5pp::TypeTraits<float>::native_type());
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_FrameV2_v0::dataset_frame::native_type()
{
  static hdf5pp::Type type = ns_FrameV2_v0_dataset_frame_native_type();
  return type;
}

ns_FrameV2_v0::dataset_frame::dataset_frame()
{
}

ns_FrameV2_v0::dataset_frame::dataset_frame(const Psana::Princeton::FrameV2& psanaobj)
  : shotIdStart(psanaobj.shotIdStart())
  , readoutTime(psanaobj.readoutTime())
  , temperature(psanaobj.temperature())
{
}

ns_FrameV2_v0::dataset_frame::~dataset_frame()
{
}
template <typename Config>
uint32_t FrameV2_v0<Config>::shotIdStart() const {
  if (not m_ds_frame) read_ds_frame();
  return uint32_t(m_ds_frame->shotIdStart);
}
template <typename Config>
float FrameV2_v0<Config>::readoutTime() const {
  if (not m_ds_frame) read_ds_frame();
  return float(m_ds_frame->readoutTime);
}
template <typename Config>
float FrameV2_v0<Config>::temperature() const {
  if (not m_ds_frame) read_ds_frame();
  return float(m_ds_frame->temperature);
}
template <typename Config>
ndarray<const uint16_t, 2> FrameV2_v0<Config>::data() const {
  if (m_ds_data.empty()) read_ds_data();
  return m_ds_data;
}
template <typename Config>
void FrameV2_v0<Config>::read_ds_frame() const {
  m_ds_frame = hdf5pp::Utils::readGroup<Princeton::ns_FrameV2_v0::dataset_frame>(m_group, "frame", m_idx);
}
template <typename Config>
void FrameV2_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "data", m_idx);
}
template class FrameV2_v0<Psana::Princeton::ConfigV1>;
template class FrameV2_v0<Psana::Princeton::ConfigV2>;
template class FrameV2_v0<Psana::Princeton::ConfigV3>;
template class FrameV2_v0<Psana::Princeton::ConfigV4>;
template class FrameV2_v0<Psana::Princeton::ConfigV5>;

void make_datasets_FrameV2_v0(const Psana::Princeton::FrameV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_FrameV2_v0::dataset_frame::stored_type();
    hdf5pp::Utils::createDataset(group, "frame", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.data()) PsanaArray;
    const PsanaArray& psana_array = obj.data();
    hsize_t dims[2];
    std::copy(psana_array.shape(), psana_array.shape()+2, dims);
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), 2, dims);
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_FrameV2_v0(const Psana::Princeton::FrameV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_FrameV2_v0::dataset_frame ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "frame", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "frame", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "frame", index < 0 ? index : index + 1);
  }
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "data", obj->data(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "data", obj->data());
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV3>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV3> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV4>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV4> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::FrameV2> > make_FrameV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Princeton::ConfigV5>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::make_shared<FrameV2_v0<Psana::Princeton::ConfigV5> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::FrameV2> >(boost::shared_ptr<Psana::Princeton::FrameV2>());
  }
}

void make_datasets(const Psana::Princeton::FrameV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_FrameV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.FrameV2", version);
  }
}

void store_FrameV2(const Psana::Princeton::FrameV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_FrameV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.FrameV2", version);
  }
}

void store(const Psana::Princeton::FrameV2& obj, hdf5pp::Group group, int version) 
{
  store_FrameV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::FrameV2* obj, hdf5pp::Group group, long index, int version)
{
  store_FrameV2(obj, group, index, version, true);
}


hdf5pp::Type ns_InfoV1_v0_dataset_data_stored_type()
{
  typedef ns_InfoV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::stored_type());
  return type;
}

hdf5pp::Type ns_InfoV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_InfoV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_InfoV1_v0_dataset_data_native_type()
{
  typedef ns_InfoV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("temperature", offsetof(DsType, temperature), hdf5pp::TypeTraits<float>::native_type());
  return type;
}

hdf5pp::Type ns_InfoV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_InfoV1_v0_dataset_data_native_type();
  return type;
}

ns_InfoV1_v0::dataset_data::dataset_data()
{
}

ns_InfoV1_v0::dataset_data::dataset_data(const Psana::Princeton::InfoV1& psanaobj)
  : temperature(psanaobj.temperature())
{
}

ns_InfoV1_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Princeton::InfoV1>
Proxy_InfoV1_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Princeton::ns_InfoV1_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Princeton::ns_InfoV1_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->temperature));
  }
  return m_data;
}


void make_datasets_InfoV1_v0(const Psana::Princeton::InfoV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Princeton::ns_InfoV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_InfoV1_v0(const Psana::Princeton::InfoV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Princeton::ns_InfoV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Princeton::InfoV1> > make_InfoV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_InfoV1_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Princeton::InfoV1> >(boost::shared_ptr<Psana::Princeton::InfoV1>());
  }
}

void make_datasets(const Psana::Princeton::InfoV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_InfoV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.InfoV1", version);
  }
}

void store_InfoV1(const Psana::Princeton::InfoV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_InfoV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Princeton.InfoV1", version);
  }
}

void store(const Psana::Princeton::InfoV1& obj, hdf5pp::Group group, int version) 
{
  store_InfoV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Princeton::InfoV1* obj, hdf5pp::Group group, long index, int version)
{
  store_InfoV1(obj, group, index, version, true);
}

} // namespace Princeton
} // namespace psddl_hdf2psana
