
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/l3t.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
#include "psddl_hdf2psana/HdfParameters.h"
namespace psddl_hdf2psana {
namespace L3T {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("module_id_len", offsetof(DsType, module_id_len), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("desc_len", offsetof(DsType, desc_len), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("module_id", offsetof(DsType, module_id), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("module_id_len", offsetof(DsType, module_id_len), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("desc_len", offsetof(DsType, desc_len), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("module_id", offsetof(DsType, module_id), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("desc", offsetof(DsType, desc), hdf5pp::TypeTraits<const char*>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
  this->module_id = 0;
  this->desc = 0;
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::L3T::ConfigV1& psanaobj)
  : module_id_len(psanaobj.module_id_len())
  , desc_len(psanaobj.desc_len())
  , module_id(0)
  , desc(0)
{
  module_id = strdup(psanaobj.module_id());
  desc = strdup(psanaobj.desc());
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
  free(this->module_id);
  free(this->desc);
}
uint32_t ConfigV1_v0::module_id_len() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->module_id_len);
}
uint32_t ConfigV1_v0::desc_len() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->desc_len);
}
const char* ConfigV1_v0::module_id() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->module_id);
}
const char* ConfigV1_v0::desc() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->desc);
}
std::vector<int>
ConfigV1_v0::module_id_shape() const{ 
  int shape[] = { this->module_id_len() };
  return std::vector<int>(shape, shape+1); 
}
std::vector<int>
ConfigV1_v0::desc_shape() const{ 
  int shape[] = { this->desc_len() };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<L3T::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::L3T::ConfigV1& obj, 
      hdf5pp::Group group, hsize_t chunk_size, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = L3T::ns_ConfigV1_v0::dataset_config::stored_type();
    unsigned chunk_cache_size = HdfParameters::chunkCacheSize(dstype, chunk_size);
    hdf5pp::Utils::createDataset(group, "config", dstype, chunk_size, chunk_cache_size, deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::L3T::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    L3T::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::L3T::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::L3T::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::L3T::ConfigV1> >(boost::shared_ptr<Psana::L3T::ConfigV1>());
  }
}

void make_datasets(const Psana::L3T::ConfigV1& obj, hdf5pp::Group group, hsize_t chunk_size,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunk_size, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "L3T.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::L3T::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "L3T.ConfigV1", version);
  }
}

void store(const Psana::L3T::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::L3T::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_DataV1_v0_dataset_data_stored_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("accept", offsetof(DsType, accept), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV1_v0_dataset_data_native_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("accept", offsetof(DsType, accept), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_native_type();
  return type;
}

ns_DataV1_v0::dataset_data::dataset_data()
{
}

ns_DataV1_v0::dataset_data::dataset_data(const Psana::L3T::DataV1& psanaobj)
  : accept(psanaobj.accept())
{
}

ns_DataV1_v0::dataset_data::~dataset_data()
{
}
uint32_t DataV1_v0::accept() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->accept);
}
void DataV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<L3T::ns_DataV1_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_DataV1_v0(const Psana::L3T::DataV1& obj, 
      hdf5pp::Group group, hsize_t chunk_size, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = L3T::ns_DataV1_v0::dataset_data::stored_type();
    unsigned chunk_cache_size = HdfParameters::chunkCacheSize(dstype, chunk_size);
    hdf5pp::Utils::createDataset(group, "data", dstype, chunk_size, chunk_cache_size, deflate, shuffle);    
  }
}

void store_DataV1_v0(const Psana::L3T::DataV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    L3T::ns_DataV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::L3T::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::L3T::DataV1> >(boost::make_shared<DataV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::L3T::DataV1> >(boost::shared_ptr<Psana::L3T::DataV1>());
  }
}

void make_datasets(const Psana::L3T::DataV1& obj, hdf5pp::Group group, hsize_t chunk_size,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  switch (version) {
  case 0:
    make_datasets_DataV1_v0(obj, group, chunk_size, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "L3T.DataV1", version);
  }
}

void store_DataV1(const Psana::L3T::DataV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  switch (version) {
  case 0:
    store_DataV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "L3T.DataV1", version);
  }
}

void store(const Psana::L3T::DataV1& obj, hdf5pp::Group group, int version) 
{
  store_DataV1(&obj, group, 0, version, false);
}

void store_at(const Psana::L3T::DataV1* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV1(obj, group, index, version, true);
}

} // namespace L3T
} // namespace psddl_hdf2psana
