
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/cspad2x2.ddl.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
namespace psddl_hdf2psana {
namespace CsPad2x2 {

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0_dataset_pots_stored_type()
{
  typedef ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pots", offsetof(DsType, pots), hdf5pp::TypeTraits<uint8_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2DigitalPotsCfg_v0_dataset_pots_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0_dataset_pots_native_type()
{
  typedef ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("pots", offsetof(DsType, pots), hdf5pp::TypeTraits<uint8_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2DigitalPotsCfg_v0_dataset_pots_native_type();
  return type;
}
ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots::dataset_pots()
{
}
ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots::~dataset_pots()
{
}
ndarray<const uint8_t, 1> CsPad2x2DigitalPotsCfg_v0::pots() const {
  if (not m_ds_pots.get()) read_ds_pots();
  boost::shared_ptr<uint8_t> ptr(m_ds_pots, m_ds_pots->pots);
  return make_ndarray(ptr, PotsPerQuad);
}
void CsPad2x2DigitalPotsCfg_v0::read_ds_pots() const {
  m_ds_pots = hdf5pp::Utils::readGroup<ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots>(m_group, "pots", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg> > make_CsPad2x2DigitalPotsCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg> >(boost::make_shared<CsPad2x2DigitalPotsCfg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg> >(boost::shared_ptr<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg>());
  }
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_stored_type()
{
  typedef ns_CsPad2x2ReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_native_type()
{
  typedef ns_CsPad2x2ReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_native_type();
  return type;
}
ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::dataset_data()
{
}
ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg>
Proxy_CsPad2x2ReadOnlyCfg_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  boost::shared_ptr<ns_CsPad2x2ReadOnlyCfg_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>(m_group, "data", m_idx);
  return boost::make_shared<PsanaType>(ds_data->shiftTest, ds_data->version);
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg> > make_CsPad2x2ReadOnlyCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_CsPad2x2ReadOnlyCfg_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg> >(boost::shared_ptr<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg>());
  }
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_stored_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_native_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_native_type();
  return type;
}
ns_ProtectionSystemThreshold_v0::dataset_data::dataset_data()
{
}
ns_ProtectionSystemThreshold_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::CsPad2x2::ProtectionSystemThreshold>
Proxy_ProtectionSystemThreshold_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  boost::shared_ptr<ns_ProtectionSystemThreshold_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<ns_ProtectionSystemThreshold_v0::dataset_data>(m_group, "data", m_idx);
  return boost::make_shared<PsanaType>(ds_data->adcThreshold, ds_data->pixelCountThreshold);
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ProtectionSystemThreshold> > make_ProtectionSystemThreshold(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_ProtectionSystemThreshold_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ProtectionSystemThreshold> >(boost::shared_ptr<Psana::CsPad2x2::ProtectionSystemThreshold>());
  }
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0_dataset_gainMap_stored_type()
{
  typedef ns_CsPad2x2GainMapCfg_v0::dataset_gainMap DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0::dataset_gainMap::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2GainMapCfg_v0_dataset_gainMap_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0_dataset_gainMap_native_type()
{
  typedef ns_CsPad2x2GainMapCfg_v0::dataset_gainMap DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0::dataset_gainMap::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2GainMapCfg_v0_dataset_gainMap_native_type();
  return type;
}
ns_CsPad2x2GainMapCfg_v0::dataset_gainMap::dataset_gainMap()
{
}
ns_CsPad2x2GainMapCfg_v0::dataset_gainMap::~dataset_gainMap()
{
}
ndarray<const uint16_t, 2> CsPad2x2GainMapCfg_v0::gainMap() const {
  if (not m_ds_gainMap.get()) read_ds_gainMap();
  boost::shared_ptr<uint16_t> ptr(m_ds_gainMap, m_ds_gainMap->gainMap);
  return make_ndarray(ptr, ColumnsPerASIC,MaxRowsPerASIC);
}
void CsPad2x2GainMapCfg_v0::read_ds_gainMap() const {
  m_ds_gainMap = hdf5pp::Utils::readGroup<ns_CsPad2x2GainMapCfg_v0::dataset_gainMap>(m_group, "gainMap", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::CsPad2x2GainMapCfg> > make_CsPad2x2GainMapCfg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::CsPad2x2GainMapCfg> >(boost::make_shared<CsPad2x2GainMapCfg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::CsPad2x2GainMapCfg> >(boost::shared_ptr<Psana::CsPad2x2::CsPad2x2GainMapCfg>());
  }
}

hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_native_type();
  return type;
}
ns_ConfigV1QuadReg_v0::dataset_data::dataset_data()
{
}
ns_ConfigV1QuadReg_v0::dataset_data::~dataset_data()
{
}
uint32_t ConfigV1QuadReg_v0::shiftSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->shiftSelect);
}
uint32_t ConfigV1QuadReg_v0::edgeSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->edgeSelect);
}
uint32_t ConfigV1QuadReg_v0::readClkSet() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV1QuadReg_v0::readClkHold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV1QuadReg_v0::dataMode() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV1QuadReg_v0::prstSel() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV1QuadReg_v0::acqDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV1QuadReg_v0::intTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV1QuadReg_v0::digDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV1QuadReg_v0::ampIdle() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV1QuadReg_v0::injTotal() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV1QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
uint32_t ConfigV1QuadReg_v0::ampReset() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampReset);
}
uint32_t ConfigV1QuadReg_v0::digCount() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digCount);
}
uint32_t ConfigV1QuadReg_v0::digPeriod() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digPeriod);
}
uint32_t ConfigV1QuadReg_v0::PeltierEnable() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->PeltierEnable);
}
uint32_t ConfigV1QuadReg_v0::kpConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kpConstant);
}
uint32_t ConfigV1QuadReg_v0::kiConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kiConstant);
}
uint32_t ConfigV1QuadReg_v0::kdConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kdConstant);
}
uint32_t ConfigV1QuadReg_v0::humidThold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->humidThold);
}
uint32_t ConfigV1QuadReg_v0::setPoint() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->setPoint);
}
const Psana::CsPad2x2::CsPad2x2ReadOnlyCfg& ConfigV1QuadReg_v0::ro() const {
  if (not m_ds_data.get()) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad2x2::CsPad2x2ReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& ConfigV1QuadReg_v0::dp() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPad2x2DigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad2x2::CsPad2x2GainMapCfg& ConfigV1QuadReg_v0::gm() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPad2x2GainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV1QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<ns_ConfigV1QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV1QuadReg> > make_ConfigV1QuadReg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1QuadReg> >(boost::make_shared<ConfigV1QuadReg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1QuadReg> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV1QuadReg>());
  }
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
const Psana::CsPad2x2::ProtectionSystemThreshold& ConfigV1_v0::protectionThreshold() const {
  if (not m_ds_config.get()) read_ds_config();
  m_ds_storage_config_protectionThreshold = Psana::CsPad2x2::ProtectionSystemThreshold(m_ds_config->protectionThreshold);
  return m_ds_storage_config_protectionThreshold;
}
uint32_t ConfigV1_v0::protectionEnable() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV1_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV1_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV1_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV1_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV1_v0::badAsicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask);
}
uint32_t ConfigV1_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV1_v0::roiMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->roiMask);
}
const Psana::CsPad2x2::ConfigV1QuadReg& ConfigV1_v0::quad() const {
  if (not m_ds_config.get()) {
    read_ds_config();
    boost::shared_ptr<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data> tmp(m_ds_config, &m_ds_config->quad);
    m_ds_storage_config_quad = boost::make_shared<ConfigV1QuadReg_v0>(tmp);
  }
  return *m_ds_storage_config_quad;
}
uint32_t ConfigV1_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t ConfigV1_v0::numAsicsStored() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsStored);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV1>());
  }
}

hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("biasTuning", offsetof(DsType, biasTuning), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pdpmndnmBalance", offsetof(DsType, pdpmndnmBalance), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("biasTuning", offsetof(DsType, biasTuning), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pdpmndnmBalance", offsetof(DsType, pdpmndnmBalance), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_native_type();
  return type;
}
ns_ConfigV2QuadReg_v0::dataset_data::dataset_data()
{
}
ns_ConfigV2QuadReg_v0::dataset_data::~dataset_data()
{
}
uint32_t ConfigV2QuadReg_v0::shiftSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->shiftSelect);
}
uint32_t ConfigV2QuadReg_v0::edgeSelect() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->edgeSelect);
}
uint32_t ConfigV2QuadReg_v0::readClkSet() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV2QuadReg_v0::readClkHold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV2QuadReg_v0::dataMode() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV2QuadReg_v0::prstSel() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV2QuadReg_v0::acqDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV2QuadReg_v0::intTime() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV2QuadReg_v0::digDelay() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV2QuadReg_v0::ampIdle() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV2QuadReg_v0::injTotal() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV2QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
uint32_t ConfigV2QuadReg_v0::ampReset() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->ampReset);
}
uint32_t ConfigV2QuadReg_v0::digCount() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digCount);
}
uint32_t ConfigV2QuadReg_v0::digPeriod() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->digPeriod);
}
uint32_t ConfigV2QuadReg_v0::PeltierEnable() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->PeltierEnable);
}
uint32_t ConfigV2QuadReg_v0::kpConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kpConstant);
}
uint32_t ConfigV2QuadReg_v0::kiConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kiConstant);
}
uint32_t ConfigV2QuadReg_v0::kdConstant() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->kdConstant);
}
uint32_t ConfigV2QuadReg_v0::humidThold() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->humidThold);
}
uint32_t ConfigV2QuadReg_v0::setPoint() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->setPoint);
}
uint32_t ConfigV2QuadReg_v0::biasTuning() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->biasTuning);
}
uint32_t ConfigV2QuadReg_v0::pdpmndnmBalance() const {
  if (not m_ds_data.get()) read_ds_data();
  return uint32_t(m_ds_data->pdpmndnmBalance);
}
const Psana::CsPad2x2::CsPad2x2ReadOnlyCfg& ConfigV2QuadReg_v0::ro() const {
  if (not m_ds_data.get()) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad2x2::CsPad2x2ReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& ConfigV2QuadReg_v0::dp() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_pots> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPad2x2DigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad2x2::CsPad2x2GainMapCfg& ConfigV2QuadReg_v0::gm() const {
  if (not m_ds_data.get()) {
    read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_gainMap> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPad2x2GainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV2QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<ns_ConfigV2QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV2QuadReg> > make_ConfigV2QuadReg(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2QuadReg> >(boost::make_shared<ConfigV2QuadReg_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2QuadReg> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV2QuadReg>());
  }
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runTriggerDelay", offsetof(DsType, runTriggerDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runTriggerDelay", offsetof(DsType, runTriggerDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tdi", offsetof(DsType, tdi), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV2_v0::dataset_config::dataset_config()
{
}
ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::concentratorVersion() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
const Psana::CsPad2x2::ProtectionSystemThreshold& ConfigV2_v0::protectionThreshold() const {
  if (not m_ds_config.get()) read_ds_config();
  m_ds_storage_config_protectionThreshold = Psana::CsPad2x2::ProtectionSystemThreshold(m_ds_config->protectionThreshold);
  return m_ds_storage_config_protectionThreshold;
}
uint32_t ConfigV2_v0::protectionEnable() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV2_v0::inactiveRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV2_v0::activeRunMode() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV2_v0::runTriggerDelay() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->runTriggerDelay);
}
uint32_t ConfigV2_v0::tdi() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->tdi);
}
uint32_t ConfigV2_v0::payloadSize() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV2_v0::badAsicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask);
}
uint32_t ConfigV2_v0::asicMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV2_v0::roiMask() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->roiMask);
}
const Psana::CsPad2x2::ConfigV2QuadReg& ConfigV2_v0::quad() const {
  if (not m_ds_config.get()) {
    read_ds_config();
    boost::shared_ptr<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data> tmp(m_ds_config, &m_ds_config->quad);
    m_ds_storage_config_quad = boost::make_shared<ConfigV2QuadReg_v0>(tmp);
  }
  return *m_ds_storage_config_quad;
}
uint32_t ConfigV2_v0::numAsicsRead() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t ConfigV2_v0::numAsicsStored() const {
  if (not m_ds_config.get()) read_ds_config();
  return uint32_t(m_ds_config->numAsicsStored);
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV2>());
  }
}

hdf5pp::Type ns_ElementV1_v0_dataset_element_stored_type()
{
  typedef ns_ElementV1_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_element::stored_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_element_stored_type();
  return type;
}

hdf5pp::Type ns_ElementV1_v0_dataset_element_native_type()
{
  typedef ns_ElementV1_v0::dataset_element DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("virtual_channel", offsetof(DsType, virtual_channel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("lane", offsetof(DsType, lane), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("tid", offsetof(DsType, tid), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acq_count", offsetof(DsType, acq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("op_code", offsetof(DsType, op_code), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("seq_count", offsetof(DsType, seq_count), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ticks", offsetof(DsType, ticks), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fiducials", offsetof(DsType, fiducials), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frame_type", offsetof(DsType, frame_type), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sb_temp", offsetof(DsType, sb_temp), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_element::native_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_element_native_type();
  return type;
}
ns_ElementV1_v0::dataset_element::dataset_element()
{
}
ns_ElementV1_v0::dataset_element::~dataset_element()
{
}

hdf5pp::Type ns_ElementV1_v0_dataset_data_stored_type()
{
  typedef ns_ElementV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("data", offsetof(DsType, data), hdf5pp::TypeTraits<int16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ElementV1_v0_dataset_data_native_type()
{
  typedef ns_ElementV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("data", offsetof(DsType, data), hdf5pp::TypeTraits<int16_t>::native_type());
  return type;
}

hdf5pp::Type ns_ElementV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ElementV1_v0_dataset_data_native_type();
  return type;
}
ns_ElementV1_v0::dataset_data::dataset_data()
{
  this->data = 0;
}
ns_ElementV1_v0::dataset_data::~dataset_data()
{
  delete [] this->data;
}
uint32_t ElementV1_v0::virtual_channel() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->virtual_channel);
}
uint32_t ElementV1_v0::lane() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->lane);
}
uint32_t ElementV1_v0::tid() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->tid);
}
uint32_t ElementV1_v0::acq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->acq_count);
}
uint32_t ElementV1_v0::op_code() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->op_code);
}
uint32_t ElementV1_v0::quad() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->quad);
}
uint32_t ElementV1_v0::seq_count() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->seq_count);
}
uint32_t ElementV1_v0::ticks() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->ticks);
}
uint32_t ElementV1_v0::fiducials() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->fiducials);
}
ndarray<const uint16_t, 1> ElementV1_v0::sb_temp() const {
  if (not m_ds_element.get()) read_ds_element();
  boost::shared_ptr<uint16_t> ptr(m_ds_element, m_ds_element->sb_temp);
  return make_ndarray(ptr, Nsbtemp);
}
uint32_t ElementV1_v0::frame_type() const {
  if (not m_ds_element.get()) read_ds_element();
  return uint32_t(m_ds_element->frame_type);
}
ndarray<const int16_t, 3> ElementV1_v0::data() const {
  if (not m_ds_data.get()) read_ds_data();
  boost::shared_ptr<int16_t> ptr(m_ds_data, m_ds_data->data);
  return make_ndarray(ptr, ColumnsPerASIC, MaxRowsPerASIC*2, 2);
}
float
ElementV1_v0::common_mode(uint32_t section) const{ 
return 0; 
}
void ElementV1_v0::read_ds_element() const {
  m_ds_element = hdf5pp::Utils::readGroup<ns_ElementV1_v0::dataset_element>(m_group, "element", m_idx);
}
void ElementV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<ns_ElementV1_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ElementV1> >(boost::make_shared<ElementV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ElementV1> >(boost::shared_ptr<Psana::CsPad2x2::ElementV1>());
  }
}
} // namespace CsPad2x2
} // namespace psddl_hdf2psana
