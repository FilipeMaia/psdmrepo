
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/cspad2x2.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
#include "psddl_hdf2psana/cspad2x2.h"
namespace psddl_hdf2psana {
namespace CsPad2x2 {

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0_dataset_data_stored_type()
{
  typedef ns_CsPad2x2DigitalPotsCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_pots_shape[] = { 80 };
  hdf5pp::ArrayType _array_type_pots = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::stored_type(), 1, _array_type_pots_shape);
  type.insert("pots", offsetof(DsType, pots), _array_type_pots);
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2DigitalPotsCfg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0_dataset_data_native_type()
{
  typedef ns_CsPad2x2DigitalPotsCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_pots_shape[] = { 80 };
  hdf5pp::ArrayType _array_type_pots = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::native_type(), 1, _array_type_pots_shape);
  type.insert("pots", offsetof(DsType, pots), _array_type_pots);
  return type;
}

hdf5pp::Type ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2DigitalPotsCfg_v0_dataset_data_native_type();
  return type;
}

ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::dataset_data()
{
}

ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::dataset_data(const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& psanaobj)
{
  {
    const __typeof__(psanaobj.pots())& arr = psanaobj.pots();
    std::copy(arr.begin(), arr.begin()+80, pots);
  }
}

ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::~dataset_data()
{
}
ndarray<const uint8_t, 1> CsPad2x2DigitalPotsCfg_v0::pots() const {
  if (not m_ds_data) read_ds_data();
  boost::shared_ptr<uint8_t> ptr(m_ds_data, m_ds_data->pots);
  return make_ndarray(ptr, PotsPerQuad);
}
void CsPad2x2DigitalPotsCfg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_CsPad2x2DigitalPotsCfg_v0(const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_CsPad2x2DigitalPotsCfg_v0(const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}


hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_stored_type()
{
  typedef ns_CsPad2x2ReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_native_type()
{
  typedef ns_CsPad2x2ReadOnlyCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftTest", offsetof(DsType, shiftTest), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("version", offsetof(DsType, version), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2ReadOnlyCfg_v0_dataset_data_native_type();
  return type;
}

ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::dataset_data()
{
}

ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::dataset_data(const Psana::CsPad2x2::CsPad2x2ReadOnlyCfg& psanaobj)
  : shiftTest(psanaobj.shiftTest())
  , version(psanaobj.version())
{
}

ns_CsPad2x2ReadOnlyCfg_v0::dataset_data::~dataset_data()
{
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_stored_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0_dataset_data_native_type()
{
  typedef ns_ProtectionSystemThreshold_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("adcThreshold", offsetof(DsType, adcThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pixelCountThreshold", offsetof(DsType, pixelCountThreshold), hdf5pp::TypeTraits<uint32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ProtectionSystemThreshold_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ProtectionSystemThreshold_v0_dataset_data_native_type();
  return type;
}

ns_ProtectionSystemThreshold_v0::dataset_data::dataset_data()
{
}

ns_ProtectionSystemThreshold_v0::dataset_data::dataset_data(const Psana::CsPad2x2::ProtectionSystemThreshold& psanaobj)
  : adcThreshold(psanaobj.adcThreshold())
  , pixelCountThreshold(psanaobj.pixelCountThreshold())
{
}

ns_ProtectionSystemThreshold_v0::dataset_data::~dataset_data()
{
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0_dataset_data_stored_type()
{
  typedef ns_CsPad2x2GainMapCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_gainMap_shape[] = { 185, 194 };
  hdf5pp::ArrayType _array_type_gainMap = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), 2, _array_type_gainMap_shape);
  type.insert("gainMap", offsetof(DsType, gainMap), _array_type_gainMap);
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_CsPad2x2GainMapCfg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0_dataset_data_native_type()
{
  typedef ns_CsPad2x2GainMapCfg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_gainMap_shape[] = { 185, 194 };
  hdf5pp::ArrayType _array_type_gainMap = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::native_type(), 2, _array_type_gainMap_shape);
  type.insert("gainMap", offsetof(DsType, gainMap), _array_type_gainMap);
  return type;
}

hdf5pp::Type ns_CsPad2x2GainMapCfg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_CsPad2x2GainMapCfg_v0_dataset_data_native_type();
  return type;
}

ns_CsPad2x2GainMapCfg_v0::dataset_data::dataset_data()
{
}

ns_CsPad2x2GainMapCfg_v0::dataset_data::dataset_data(const Psana::CsPad2x2::CsPad2x2GainMapCfg& psanaobj)
{
  {
    const __typeof__(psanaobj.gainMap())& arr = psanaobj.gainMap();
    std::copy(arr.begin(), arr.begin()+35890, gainMap);
  }
}

ns_CsPad2x2GainMapCfg_v0::dataset_data::~dataset_data()
{
}
ndarray<const uint16_t, 2> CsPad2x2GainMapCfg_v0::gainMap() const {
  if (not m_ds_data) read_ds_data();
  boost::shared_ptr<uint16_t> ptr(m_ds_data, m_ds_data->gainMap);
  return make_ndarray(ptr, ColumnsPerASIC,MaxRowsPerASIC);
}
void CsPad2x2GainMapCfg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_CsPad2x2GainMapCfg_v0(const Psana::CsPad2x2::CsPad2x2GainMapCfg& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_CsPad2x2GainMapCfg_v0(const Psana::CsPad2x2::CsPad2x2GainMapCfg* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}


hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV1QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1QuadReg_v0_dataset_data_native_type();
  return type;
}

ns_ConfigV1QuadReg_v0::dataset_data::dataset_data()
{
}

ns_ConfigV1QuadReg_v0::dataset_data::dataset_data(const Psana::CsPad2x2::ConfigV1QuadReg& psanaobj)
  : shiftSelect(psanaobj.shiftSelect())
  , edgeSelect(psanaobj.edgeSelect())
  , readClkSet(psanaobj.readClkSet())
  , readClkHold(psanaobj.readClkHold())
  , dataMode(psanaobj.dataMode())
  , prstSel(psanaobj.prstSel())
  , acqDelay(psanaobj.acqDelay())
  , intTime(psanaobj.intTime())
  , digDelay(psanaobj.digDelay())
  , ampIdle(psanaobj.ampIdle())
  , injTotal(psanaobj.injTotal())
  , rowColShiftPer(psanaobj.rowColShiftPer())
  , ampReset(psanaobj.ampReset())
  , digCount(psanaobj.digCount())
  , digPeriod(psanaobj.digPeriod())
  , PeltierEnable(psanaobj.PeltierEnable())
  , kpConstant(psanaobj.kpConstant())
  , kiConstant(psanaobj.kiConstant())
  , kdConstant(psanaobj.kdConstant())
  , humidThold(psanaobj.humidThold())
  , setPoint(psanaobj.setPoint())
  , readOnly(psanaobj.ro())
  , digitalPots(psanaobj.dp())
  , gainMap(psanaobj.gm())
{
}

ns_ConfigV1QuadReg_v0::dataset_data::~dataset_data()
{
}
uint32_t ConfigV1QuadReg_v0::shiftSelect() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->shiftSelect);
}
uint32_t ConfigV1QuadReg_v0::edgeSelect() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->edgeSelect);
}
uint32_t ConfigV1QuadReg_v0::readClkSet() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV1QuadReg_v0::readClkHold() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV1QuadReg_v0::dataMode() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV1QuadReg_v0::prstSel() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV1QuadReg_v0::acqDelay() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV1QuadReg_v0::intTime() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV1QuadReg_v0::digDelay() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV1QuadReg_v0::ampIdle() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV1QuadReg_v0::injTotal() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV1QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
uint32_t ConfigV1QuadReg_v0::ampReset() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->ampReset);
}
uint32_t ConfigV1QuadReg_v0::digCount() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digCount);
}
uint32_t ConfigV1QuadReg_v0::digPeriod() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digPeriod);
}
uint32_t ConfigV1QuadReg_v0::PeltierEnable() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->PeltierEnable);
}
uint32_t ConfigV1QuadReg_v0::kpConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kpConstant);
}
uint32_t ConfigV1QuadReg_v0::kiConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kiConstant);
}
uint32_t ConfigV1QuadReg_v0::kdConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kdConstant);
}
uint32_t ConfigV1QuadReg_v0::humidThold() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->humidThold);
}
uint32_t ConfigV1QuadReg_v0::setPoint() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->setPoint);
}
const Psana::CsPad2x2::CsPad2x2ReadOnlyCfg& ConfigV1QuadReg_v0::ro() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad2x2::CsPad2x2ReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& ConfigV1QuadReg_v0::dp() const {
  if (not m_ds_storage_data_digitalPots) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPad2x2::CsPad2x2DigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad2x2::CsPad2x2GainMapCfg& ConfigV1QuadReg_v0::gm() const {
  if (not m_ds_storage_data_gainMap) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPad2x2::CsPad2x2GainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV1QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_ConfigV1QuadReg_v0(const Psana::CsPad2x2::ConfigV1QuadReg& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV1QuadReg_v0(const Psana::CsPad2x2::ConfigV1QuadReg* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}


hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("testDataIndex", offsetof(DsType, testDataIndex), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("testDataIndex", offsetof(DsType, testDataIndex), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::CsPad2x2::ConfigV1& psanaobj)
  : concentratorVersion(psanaobj.concentratorVersion())
  , protectionThreshold(psanaobj.protectionThreshold())
  , protectionEnable(psanaobj.protectionEnable())
  , inactiveRunMode(psanaobj.inactiveRunMode())
  , activeRunMode(psanaobj.activeRunMode())
  , testDataIndex(psanaobj.tdi())
  , payloadSize(psanaobj.payloadSize())
  , badAsicMask(psanaobj.badAsicMask())
  , asicMask(psanaobj.asicMask())
  , roiMask(psanaobj.roiMask())
  , numAsicsRead(psanaobj.numAsicsRead())
  , numAsicsStored(psanaobj.numAsicsStored())
  , quad(psanaobj.quad())
{
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV1_v0::concentratorVersion() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
const Psana::CsPad2x2::ProtectionSystemThreshold& ConfigV1_v0::protectionThreshold() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_protectionThreshold = Psana::CsPad2x2::ProtectionSystemThreshold(m_ds_config->protectionThreshold);
  return m_ds_storage_config_protectionThreshold;
}
uint32_t ConfigV1_v0::protectionEnable() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV1_v0::inactiveRunMode() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV1_v0::activeRunMode() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV1_v0::tdi() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->testDataIndex);
}
uint32_t ConfigV1_v0::payloadSize() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV1_v0::badAsicMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask);
}
uint32_t ConfigV1_v0::asicMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV1_v0::roiMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->roiMask);
}
const Psana::CsPad2x2::ConfigV1QuadReg& ConfigV1_v0::quad() const {
  if (not m_ds_storage_config_quad) {
    if (not m_ds_config) read_ds_config();
    boost::shared_ptr<CsPad2x2::ns_ConfigV1QuadReg_v0::dataset_data> tmp(m_ds_config, &m_ds_config->quad);
    m_ds_storage_config_quad = boost::make_shared<CsPad2x2::ConfigV1QuadReg_v0>(tmp);
  }
  return *m_ds_storage_config_quad;
}
uint32_t ConfigV1_v0::numAsicsRead() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t ConfigV1_v0::numAsicsStored() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numAsicsStored);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad2x2::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::CsPad2x2::ConfigV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_ConfigV1_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::CsPad2x2::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV1> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV1>());
  }
}

void make_datasets(const Psana::CsPad2x2::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::CsPad2x2::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ConfigV1", version);
  }
}

void store(const Psana::CsPad2x2::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::CsPad2x2::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_stored_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("biasTuning", offsetof(DsType, biasTuning), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pdpmndnmBalance", offsetof(DsType, pdpmndnmBalance), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::stored_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data>::stored_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0_dataset_data_native_type()
{
  typedef ns_ConfigV2QuadReg_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("shiftSelect", offsetof(DsType, shiftSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("edgeSelect", offsetof(DsType, edgeSelect), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkSet", offsetof(DsType, readClkSet), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readClkHold", offsetof(DsType, readClkHold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("dataMode", offsetof(DsType, dataMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("prstSel", offsetof(DsType, prstSel), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("acqDelay", offsetof(DsType, acqDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("intTime", offsetof(DsType, intTime), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digDelay", offsetof(DsType, digDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampIdle", offsetof(DsType, ampIdle), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("injTotal", offsetof(DsType, injTotal), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("rowColShiftPer", offsetof(DsType, rowColShiftPer), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("ampReset", offsetof(DsType, ampReset), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digCount", offsetof(DsType, digCount), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("digPeriod", offsetof(DsType, digPeriod), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("PeltierEnable", offsetof(DsType, PeltierEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kpConstant", offsetof(DsType, kpConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kiConstant", offsetof(DsType, kiConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("kdConstant", offsetof(DsType, kdConstant), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("humidThold", offsetof(DsType, humidThold), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("setPoint", offsetof(DsType, setPoint), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("biasTuning", offsetof(DsType, biasTuning), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pdpmndnmBalance", offsetof(DsType, pdpmndnmBalance), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("readOnly", offsetof(DsType, readOnly), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2ReadOnlyCfg_v0::dataset_data>::native_type());
  type.insert("digitalPots", offsetof(DsType, digitalPots), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data>::native_type());
  type.insert("gainMap", offsetof(DsType, gainMap), hdf5pp::TypeTraits<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2QuadReg_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2QuadReg_v0_dataset_data_native_type();
  return type;
}

ns_ConfigV2QuadReg_v0::dataset_data::dataset_data()
{
}

ns_ConfigV2QuadReg_v0::dataset_data::dataset_data(const Psana::CsPad2x2::ConfigV2QuadReg& psanaobj)
  : shiftSelect(psanaobj.shiftSelect())
  , edgeSelect(psanaobj.edgeSelect())
  , readClkSet(psanaobj.readClkSet())
  , readClkHold(psanaobj.readClkHold())
  , dataMode(psanaobj.dataMode())
  , prstSel(psanaobj.prstSel())
  , acqDelay(psanaobj.acqDelay())
  , intTime(psanaobj.intTime())
  , digDelay(psanaobj.digDelay())
  , ampIdle(psanaobj.ampIdle())
  , injTotal(psanaobj.injTotal())
  , rowColShiftPer(psanaobj.rowColShiftPer())
  , ampReset(psanaobj.ampReset())
  , digCount(psanaobj.digCount())
  , digPeriod(psanaobj.digPeriod())
  , PeltierEnable(psanaobj.PeltierEnable())
  , kpConstant(psanaobj.kpConstant())
  , kiConstant(psanaobj.kiConstant())
  , kdConstant(psanaobj.kdConstant())
  , humidThold(psanaobj.humidThold())
  , setPoint(psanaobj.setPoint())
  , biasTuning(psanaobj.biasTuning())
  , pdpmndnmBalance(psanaobj.pdpmndnmBalance())
  , readOnly(psanaobj.ro())
  , digitalPots(psanaobj.dp())
  , gainMap(psanaobj.gm())
{
}

ns_ConfigV2QuadReg_v0::dataset_data::~dataset_data()
{
}
uint32_t ConfigV2QuadReg_v0::shiftSelect() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->shiftSelect);
}
uint32_t ConfigV2QuadReg_v0::edgeSelect() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->edgeSelect);
}
uint32_t ConfigV2QuadReg_v0::readClkSet() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->readClkSet);
}
uint32_t ConfigV2QuadReg_v0::readClkHold() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->readClkHold);
}
uint32_t ConfigV2QuadReg_v0::dataMode() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->dataMode);
}
uint32_t ConfigV2QuadReg_v0::prstSel() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->prstSel);
}
uint32_t ConfigV2QuadReg_v0::acqDelay() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->acqDelay);
}
uint32_t ConfigV2QuadReg_v0::intTime() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->intTime);
}
uint32_t ConfigV2QuadReg_v0::digDelay() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digDelay);
}
uint32_t ConfigV2QuadReg_v0::ampIdle() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->ampIdle);
}
uint32_t ConfigV2QuadReg_v0::injTotal() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->injTotal);
}
uint32_t ConfigV2QuadReg_v0::rowColShiftPer() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->rowColShiftPer);
}
uint32_t ConfigV2QuadReg_v0::ampReset() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->ampReset);
}
uint32_t ConfigV2QuadReg_v0::digCount() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digCount);
}
uint32_t ConfigV2QuadReg_v0::digPeriod() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->digPeriod);
}
uint32_t ConfigV2QuadReg_v0::PeltierEnable() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->PeltierEnable);
}
uint32_t ConfigV2QuadReg_v0::kpConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kpConstant);
}
uint32_t ConfigV2QuadReg_v0::kiConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kiConstant);
}
uint32_t ConfigV2QuadReg_v0::kdConstant() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->kdConstant);
}
uint32_t ConfigV2QuadReg_v0::humidThold() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->humidThold);
}
uint32_t ConfigV2QuadReg_v0::setPoint() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->setPoint);
}
uint32_t ConfigV2QuadReg_v0::biasTuning() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->biasTuning);
}
uint32_t ConfigV2QuadReg_v0::pdpmndnmBalance() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->pdpmndnmBalance);
}
const Psana::CsPad2x2::CsPad2x2ReadOnlyCfg& ConfigV2QuadReg_v0::ro() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_readOnly = Psana::CsPad2x2::CsPad2x2ReadOnlyCfg(m_ds_data->readOnly);
  return m_ds_storage_data_readOnly;
}
const Psana::CsPad2x2::CsPad2x2DigitalPotsCfg& ConfigV2QuadReg_v0::dp() const {
  if (not m_ds_storage_data_digitalPots) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2DigitalPotsCfg_v0::dataset_data> tmp(m_ds_data, &m_ds_data->digitalPots);
    m_ds_storage_data_digitalPots = boost::make_shared<CsPad2x2::CsPad2x2DigitalPotsCfg_v0>(tmp);
  }
  return *m_ds_storage_data_digitalPots;
}
const Psana::CsPad2x2::CsPad2x2GainMapCfg& ConfigV2QuadReg_v0::gm() const {
  if (not m_ds_storage_data_gainMap) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<CsPad2x2::ns_CsPad2x2GainMapCfg_v0::dataset_data> tmp(m_ds_data, &m_ds_data->gainMap);
    m_ds_storage_data_gainMap = boost::make_shared<CsPad2x2::CsPad2x2GainMapCfg_v0>(tmp);
  }
  return *m_ds_storage_data_gainMap;
}
void ConfigV2QuadReg_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data>(m_group, "data", m_idx);
}

void make_datasets_ConfigV2QuadReg_v0(const Psana::CsPad2x2::ConfigV2QuadReg& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV2QuadReg_v0(const Psana::CsPad2x2::ConfigV2QuadReg* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
}


hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::stored_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("runTriggerDelay", offsetof(DsType, runTriggerDelay), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("testDataIndex", offsetof(DsType, testDataIndex), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("concentratorVersion", offsetof(DsType, concentratorVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("protectionThreshold", offsetof(DsType, protectionThreshold), hdf5pp::TypeTraits<CsPad2x2::ns_ProtectionSystemThreshold_v0::dataset_data>::native_type());
  type.insert("protectionEnable", offsetof(DsType, protectionEnable), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("inactiveRunMode", offsetof(DsType, inactiveRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("activeRunMode", offsetof(DsType, activeRunMode), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("runTriggerDelay", offsetof(DsType, runTriggerDelay), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("testDataIndex", offsetof(DsType, testDataIndex), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("payloadSize", offsetof(DsType, payloadSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("badAsicMask", offsetof(DsType, badAsicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("asicMask", offsetof(DsType, asicMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("roiMask", offsetof(DsType, roiMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsRead", offsetof(DsType, numAsicsRead), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("numAsicsStored", offsetof(DsType, numAsicsStored), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("quad", offsetof(DsType, quad), hdf5pp::TypeTraits<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV2_v0::dataset_config::dataset_config()
{
}

ns_ConfigV2_v0::dataset_config::dataset_config(const Psana::CsPad2x2::ConfigV2& psanaobj)
  : concentratorVersion(psanaobj.concentratorVersion())
  , protectionThreshold(psanaobj.protectionThreshold())
  , protectionEnable(psanaobj.protectionEnable())
  , inactiveRunMode(psanaobj.inactiveRunMode())
  , activeRunMode(psanaobj.activeRunMode())
  , runTriggerDelay(psanaobj.runTriggerDelay())
  , testDataIndex(psanaobj.tdi())
  , payloadSize(psanaobj.payloadSize())
  , badAsicMask(psanaobj.badAsicMask())
  , asicMask(psanaobj.asicMask())
  , roiMask(psanaobj.roiMask())
  , numAsicsRead(psanaobj.numAsicsRead())
  , numAsicsStored(psanaobj.numAsicsStored())
  , quad(psanaobj.quad())
{
}

ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
uint32_t ConfigV2_v0::concentratorVersion() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->concentratorVersion);
}
const Psana::CsPad2x2::ProtectionSystemThreshold& ConfigV2_v0::protectionThreshold() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_protectionThreshold = Psana::CsPad2x2::ProtectionSystemThreshold(m_ds_config->protectionThreshold);
  return m_ds_storage_config_protectionThreshold;
}
uint32_t ConfigV2_v0::protectionEnable() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->protectionEnable);
}
uint32_t ConfigV2_v0::inactiveRunMode() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->inactiveRunMode);
}
uint32_t ConfigV2_v0::activeRunMode() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->activeRunMode);
}
uint32_t ConfigV2_v0::runTriggerDelay() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->runTriggerDelay);
}
uint32_t ConfigV2_v0::tdi() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->testDataIndex);
}
uint32_t ConfigV2_v0::payloadSize() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->payloadSize);
}
uint32_t ConfigV2_v0::badAsicMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->badAsicMask);
}
uint32_t ConfigV2_v0::asicMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->asicMask);
}
uint32_t ConfigV2_v0::roiMask() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->roiMask);
}
const Psana::CsPad2x2::ConfigV2QuadReg& ConfigV2_v0::quad() const {
  if (not m_ds_storage_config_quad) {
    if (not m_ds_config) read_ds_config();
    boost::shared_ptr<CsPad2x2::ns_ConfigV2QuadReg_v0::dataset_data> tmp(m_ds_config, &m_ds_config->quad);
    m_ds_storage_config_quad = boost::make_shared<CsPad2x2::ConfigV2QuadReg_v0>(tmp);
  }
  return *m_ds_storage_config_quad;
}
uint32_t ConfigV2_v0::numAsicsRead() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numAsicsRead);
}
uint32_t ConfigV2_v0::numAsicsStored() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->numAsicsStored);
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<CsPad2x2::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV2_v0(const Psana::CsPad2x2::ConfigV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = CsPad2x2::ns_ConfigV2_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV2_v0(const Psana::CsPad2x2::ConfigV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    CsPad2x2::ns_ConfigV2_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ConfigV2> >(boost::shared_ptr<Psana::CsPad2x2::ConfigV2>());
  }
}

void make_datasets(const Psana::CsPad2x2::ConfigV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ConfigV2", version);
  }
}

void store_ConfigV2(const Psana::CsPad2x2::ConfigV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ConfigV2", version);
  }
}

void store(const Psana::CsPad2x2::ConfigV2& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV2(&obj, group, 0, version, false);
}

void store_at(const Psana::CsPad2x2::ConfigV2* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV2(obj, group, index, version, true);
}

boost::shared_ptr<PSEvt::Proxy<Psana::CsPad2x2::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ElementV1> >(boost::make_shared<ElementV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::CsPad2x2::ElementV1> >(boost::shared_ptr<Psana::CsPad2x2::ElementV1>());
  }
}

void make_datasets(const Psana::CsPad2x2::ElementV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ElementV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ElementV1", version);
  }
}

void store_ElementV1(const Psana::CsPad2x2::ElementV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ElementV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "CsPad2x2.ElementV1", version);
  }
}

void store(const Psana::CsPad2x2::ElementV1& obj, hdf5pp::Group group, int version) 
{
  store_ElementV1(&obj, group, 0, version, false);
}

void store_at(const Psana::CsPad2x2::ElementV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ElementV1(obj, group, index, version, true);
}

} // namespace CsPad2x2
} // namespace psddl_hdf2psana
