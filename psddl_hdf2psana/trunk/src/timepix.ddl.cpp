
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/timepix.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
namespace psddl_hdf2psana {
namespace Timepix {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV1::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV1::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_triggerMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_triggerMode.insert("TriggerMode_ExtPos", Psana::Timepix::ConfigV1::TriggerMode_ExtPos);
  _enum_type_triggerMode.insert("TriggerMode_ExtNeg", Psana::Timepix::ConfigV1::TriggerMode_ExtNeg);
  _enum_type_triggerMode.insert("TriggerMode_Soft", Psana::Timepix::ConfigV1::TriggerMode_Soft);
  type.insert("triggerMode", offsetof(DsType, triggerMode), _enum_type_triggerMode);
  type.insert("shutterTimeout", offsetof(DsType, shutterTimeout), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV1::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV1::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_triggerMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_triggerMode.insert("TriggerMode_ExtPos", Psana::Timepix::ConfigV1::TriggerMode_ExtPos);
  _enum_type_triggerMode.insert("TriggerMode_ExtNeg", Psana::Timepix::ConfigV1::TriggerMode_ExtNeg);
  _enum_type_triggerMode.insert("TriggerMode_Soft", Psana::Timepix::ConfigV1::TriggerMode_Soft);
  type.insert("triggerMode", offsetof(DsType, triggerMode), _enum_type_triggerMode);
  type.insert("shutterTimeout", offsetof(DsType, shutterTimeout), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::Timepix::ConfigV1& psanaobj)
  : readoutSpeed(psanaobj.readoutSpeed())
  , triggerMode(psanaobj.triggerMode())
  , shutterTimeout(psanaobj.shutterTimeout())
  , dac0Ikrum(psanaobj.dac0Ikrum())
  , dac0Disc(psanaobj.dac0Disc())
  , dac0Preamp(psanaobj.dac0Preamp())
  , dac0BufAnalogA(psanaobj.dac0BufAnalogA())
  , dac0BufAnalogB(psanaobj.dac0BufAnalogB())
  , dac0Hist(psanaobj.dac0Hist())
  , dac0ThlFine(psanaobj.dac0ThlFine())
  , dac0ThlCourse(psanaobj.dac0ThlCourse())
  , dac0Vcas(psanaobj.dac0Vcas())
  , dac0Fbk(psanaobj.dac0Fbk())
  , dac0Gnd(psanaobj.dac0Gnd())
  , dac0Ths(psanaobj.dac0Ths())
  , dac0BiasLvds(psanaobj.dac0BiasLvds())
  , dac0RefLvds(psanaobj.dac0RefLvds())
  , dac1Ikrum(psanaobj.dac1Ikrum())
  , dac1Disc(psanaobj.dac1Disc())
  , dac1Preamp(psanaobj.dac1Preamp())
  , dac1BufAnalogA(psanaobj.dac1BufAnalogA())
  , dac1BufAnalogB(psanaobj.dac1BufAnalogB())
  , dac1Hist(psanaobj.dac1Hist())
  , dac1ThlFine(psanaobj.dac1ThlFine())
  , dac1ThlCourse(psanaobj.dac1ThlCourse())
  , dac1Vcas(psanaobj.dac1Vcas())
  , dac1Fbk(psanaobj.dac1Fbk())
  , dac1Gnd(psanaobj.dac1Gnd())
  , dac1Ths(psanaobj.dac1Ths())
  , dac1BiasLvds(psanaobj.dac1BiasLvds())
  , dac1RefLvds(psanaobj.dac1RefLvds())
  , dac2Ikrum(psanaobj.dac2Ikrum())
  , dac2Disc(psanaobj.dac2Disc())
  , dac2Preamp(psanaobj.dac2Preamp())
  , dac2BufAnalogA(psanaobj.dac2BufAnalogA())
  , dac2BufAnalogB(psanaobj.dac2BufAnalogB())
  , dac2Hist(psanaobj.dac2Hist())
  , dac2ThlFine(psanaobj.dac2ThlFine())
  , dac2ThlCourse(psanaobj.dac2ThlCourse())
  , dac2Vcas(psanaobj.dac2Vcas())
  , dac2Fbk(psanaobj.dac2Fbk())
  , dac2Gnd(psanaobj.dac2Gnd())
  , dac2Ths(psanaobj.dac2Ths())
  , dac2BiasLvds(psanaobj.dac2BiasLvds())
  , dac2RefLvds(psanaobj.dac2RefLvds())
  , dac3Ikrum(psanaobj.dac3Ikrum())
  , dac3Disc(psanaobj.dac3Disc())
  , dac3Preamp(psanaobj.dac3Preamp())
  , dac3BufAnalogA(psanaobj.dac3BufAnalogA())
  , dac3BufAnalogB(psanaobj.dac3BufAnalogB())
  , dac3Hist(psanaobj.dac3Hist())
  , dac3ThlFine(psanaobj.dac3ThlFine())
  , dac3ThlCourse(psanaobj.dac3ThlCourse())
  , dac3Vcas(psanaobj.dac3Vcas())
  , dac3Fbk(psanaobj.dac3Fbk())
  , dac3Gnd(psanaobj.dac3Gnd())
  , dac3Ths(psanaobj.dac3Ths())
  , dac3BiasLvds(psanaobj.dac3BiasLvds())
  , dac3RefLvds(psanaobj.dac3RefLvds())
{
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
Psana::Timepix::ConfigV1::ReadoutSpeed ConfigV1_v0::readoutSpeed() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV1::ReadoutSpeed(m_ds_config->readoutSpeed);
}
Psana::Timepix::ConfigV1::TriggerMode ConfigV1_v0::triggerMode() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV1::TriggerMode(m_ds_config->triggerMode);
}
int32_t ConfigV1_v0::shutterTimeout() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->shutterTimeout);
}
int32_t ConfigV1_v0::dac0Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ikrum);
}
int32_t ConfigV1_v0::dac0Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Disc);
}
int32_t ConfigV1_v0::dac0Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Preamp);
}
int32_t ConfigV1_v0::dac0BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogA);
}
int32_t ConfigV1_v0::dac0BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogB);
}
int32_t ConfigV1_v0::dac0Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Hist);
}
int32_t ConfigV1_v0::dac0ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlFine);
}
int32_t ConfigV1_v0::dac0ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlCourse);
}
int32_t ConfigV1_v0::dac0Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Vcas);
}
int32_t ConfigV1_v0::dac0Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Fbk);
}
int32_t ConfigV1_v0::dac0Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Gnd);
}
int32_t ConfigV1_v0::dac0Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ths);
}
int32_t ConfigV1_v0::dac0BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BiasLvds);
}
int32_t ConfigV1_v0::dac0RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0RefLvds);
}
int32_t ConfigV1_v0::dac1Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ikrum);
}
int32_t ConfigV1_v0::dac1Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Disc);
}
int32_t ConfigV1_v0::dac1Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Preamp);
}
int32_t ConfigV1_v0::dac1BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogA);
}
int32_t ConfigV1_v0::dac1BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogB);
}
int32_t ConfigV1_v0::dac1Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Hist);
}
int32_t ConfigV1_v0::dac1ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlFine);
}
int32_t ConfigV1_v0::dac1ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlCourse);
}
int32_t ConfigV1_v0::dac1Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Vcas);
}
int32_t ConfigV1_v0::dac1Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Fbk);
}
int32_t ConfigV1_v0::dac1Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Gnd);
}
int32_t ConfigV1_v0::dac1Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ths);
}
int32_t ConfigV1_v0::dac1BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BiasLvds);
}
int32_t ConfigV1_v0::dac1RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1RefLvds);
}
int32_t ConfigV1_v0::dac2Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ikrum);
}
int32_t ConfigV1_v0::dac2Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Disc);
}
int32_t ConfigV1_v0::dac2Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Preamp);
}
int32_t ConfigV1_v0::dac2BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogA);
}
int32_t ConfigV1_v0::dac2BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogB);
}
int32_t ConfigV1_v0::dac2Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Hist);
}
int32_t ConfigV1_v0::dac2ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlFine);
}
int32_t ConfigV1_v0::dac2ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlCourse);
}
int32_t ConfigV1_v0::dac2Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Vcas);
}
int32_t ConfigV1_v0::dac2Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Fbk);
}
int32_t ConfigV1_v0::dac2Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Gnd);
}
int32_t ConfigV1_v0::dac2Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ths);
}
int32_t ConfigV1_v0::dac2BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BiasLvds);
}
int32_t ConfigV1_v0::dac2RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2RefLvds);
}
int32_t ConfigV1_v0::dac3Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ikrum);
}
int32_t ConfigV1_v0::dac3Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Disc);
}
int32_t ConfigV1_v0::dac3Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Preamp);
}
int32_t ConfigV1_v0::dac3BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogA);
}
int32_t ConfigV1_v0::dac3BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogB);
}
int32_t ConfigV1_v0::dac3Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Hist);
}
int32_t ConfigV1_v0::dac3ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlFine);
}
int32_t ConfigV1_v0::dac3ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlCourse);
}
int32_t ConfigV1_v0::dac3Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Vcas);
}
int32_t ConfigV1_v0::dac3Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Fbk);
}
int32_t ConfigV1_v0::dac3Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Gnd);
}
int32_t ConfigV1_v0::dac3Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ths);
}
int32_t ConfigV1_v0::dac3BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BiasLvds);
}
int32_t ConfigV1_v0::dac3RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3RefLvds);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Timepix::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::Timepix::ConfigV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Timepix::ns_ConfigV1_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::Timepix::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Timepix::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Timepix::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV1> >(boost::shared_ptr<Psana::Timepix::ConfigV1>());
  }
}

void make_datasets(const Psana::Timepix::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::Timepix::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV1", version);
  }
}

void store(const Psana::Timepix::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Timepix::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV2::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV2::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_triggerMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_triggerMode.insert("TriggerMode_ExtPos", Psana::Timepix::ConfigV2::TriggerMode_ExtPos);
  _enum_type_triggerMode.insert("TriggerMode_ExtNeg", Psana::Timepix::ConfigV2::TriggerMode_ExtNeg);
  _enum_type_triggerMode.insert("TriggerMode_Soft", Psana::Timepix::ConfigV2::TriggerMode_Soft);
  type.insert("triggerMode", offsetof(DsType, triggerMode), _enum_type_triggerMode);
  type.insert("timepixSpeed", offsetof(DsType, timepixSpeed), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("driverVersion", offsetof(DsType, driverVersion), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("firmwareVersion", offsetof(DsType, firmwareVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pixelThreshSize", offsetof(DsType, pixelThreshSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hsize_t _array_type_pixelThresh_shape[] = { 4*256*256 };
  hdf5pp::ArrayType _array_type_pixelThresh = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::stored_type(), 1, _array_type_pixelThresh_shape);
  type.insert("pixelThresh", offsetof(DsType, pixelThresh), _array_type_pixelThresh);
  type.insert("chip0Name", offsetof(DsType, chip0Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip1Name", offsetof(DsType, chip1Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip2Name", offsetof(DsType, chip2Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip3Name", offsetof(DsType, chip3Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip0ID", offsetof(DsType, chip0ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip1ID", offsetof(DsType, chip1ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip2ID", offsetof(DsType, chip2ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip3ID", offsetof(DsType, chip3ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chipCount", offsetof(DsType, chipCount), hdf5pp::TypeTraits<int32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV2::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV2::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_triggerMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_triggerMode.insert("TriggerMode_ExtPos", Psana::Timepix::ConfigV2::TriggerMode_ExtPos);
  _enum_type_triggerMode.insert("TriggerMode_ExtNeg", Psana::Timepix::ConfigV2::TriggerMode_ExtNeg);
  _enum_type_triggerMode.insert("TriggerMode_Soft", Psana::Timepix::ConfigV2::TriggerMode_Soft);
  type.insert("triggerMode", offsetof(DsType, triggerMode), _enum_type_triggerMode);
  type.insert("timepixSpeed", offsetof(DsType, timepixSpeed), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("driverVersion", offsetof(DsType, driverVersion), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("firmwareVersion", offsetof(DsType, firmwareVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pixelThreshSize", offsetof(DsType, pixelThreshSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  hsize_t _array_type_pixelThresh_shape[] = { 4*256*256 };
  hdf5pp::ArrayType _array_type_pixelThresh = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::native_type(), 1, _array_type_pixelThresh_shape);
  type.insert("pixelThresh", offsetof(DsType, pixelThresh), _array_type_pixelThresh);
  type.insert("chip0Name", offsetof(DsType, chip0Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip1Name", offsetof(DsType, chip1Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip2Name", offsetof(DsType, chip2Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip3Name", offsetof(DsType, chip3Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip0ID", offsetof(DsType, chip0ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip1ID", offsetof(DsType, chip1ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip2ID", offsetof(DsType, chip2ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip3ID", offsetof(DsType, chip3ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chipCount", offsetof(DsType, chipCount), hdf5pp::TypeTraits<int32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV2_v0::dataset_config::dataset_config()
{
}

ns_ConfigV2_v0::dataset_config::dataset_config(const Psana::Timepix::ConfigV2& psanaobj)
  : readoutSpeed(psanaobj.readoutSpeed())
  , triggerMode(psanaobj.triggerMode())
  , timepixSpeed(psanaobj.timepixSpeed())
  , dac0Ikrum(psanaobj.dac0Ikrum())
  , dac0Disc(psanaobj.dac0Disc())
  , dac0Preamp(psanaobj.dac0Preamp())
  , dac0BufAnalogA(psanaobj.dac0BufAnalogA())
  , dac0BufAnalogB(psanaobj.dac0BufAnalogB())
  , dac0Hist(psanaobj.dac0Hist())
  , dac0ThlFine(psanaobj.dac0ThlFine())
  , dac0ThlCourse(psanaobj.dac0ThlCourse())
  , dac0Vcas(psanaobj.dac0Vcas())
  , dac0Fbk(psanaobj.dac0Fbk())
  , dac0Gnd(psanaobj.dac0Gnd())
  , dac0Ths(psanaobj.dac0Ths())
  , dac0BiasLvds(psanaobj.dac0BiasLvds())
  , dac0RefLvds(psanaobj.dac0RefLvds())
  , dac1Ikrum(psanaobj.dac1Ikrum())
  , dac1Disc(psanaobj.dac1Disc())
  , dac1Preamp(psanaobj.dac1Preamp())
  , dac1BufAnalogA(psanaobj.dac1BufAnalogA())
  , dac1BufAnalogB(psanaobj.dac1BufAnalogB())
  , dac1Hist(psanaobj.dac1Hist())
  , dac1ThlFine(psanaobj.dac1ThlFine())
  , dac1ThlCourse(psanaobj.dac1ThlCourse())
  , dac1Vcas(psanaobj.dac1Vcas())
  , dac1Fbk(psanaobj.dac1Fbk())
  , dac1Gnd(psanaobj.dac1Gnd())
  , dac1Ths(psanaobj.dac1Ths())
  , dac1BiasLvds(psanaobj.dac1BiasLvds())
  , dac1RefLvds(psanaobj.dac1RefLvds())
  , dac2Ikrum(psanaobj.dac2Ikrum())
  , dac2Disc(psanaobj.dac2Disc())
  , dac2Preamp(psanaobj.dac2Preamp())
  , dac2BufAnalogA(psanaobj.dac2BufAnalogA())
  , dac2BufAnalogB(psanaobj.dac2BufAnalogB())
  , dac2Hist(psanaobj.dac2Hist())
  , dac2ThlFine(psanaobj.dac2ThlFine())
  , dac2ThlCourse(psanaobj.dac2ThlCourse())
  , dac2Vcas(psanaobj.dac2Vcas())
  , dac2Fbk(psanaobj.dac2Fbk())
  , dac2Gnd(psanaobj.dac2Gnd())
  , dac2Ths(psanaobj.dac2Ths())
  , dac2BiasLvds(psanaobj.dac2BiasLvds())
  , dac2RefLvds(psanaobj.dac2RefLvds())
  , dac3Ikrum(psanaobj.dac3Ikrum())
  , dac3Disc(psanaobj.dac3Disc())
  , dac3Preamp(psanaobj.dac3Preamp())
  , dac3BufAnalogA(psanaobj.dac3BufAnalogA())
  , dac3BufAnalogB(psanaobj.dac3BufAnalogB())
  , dac3Hist(psanaobj.dac3Hist())
  , dac3ThlFine(psanaobj.dac3ThlFine())
  , dac3ThlCourse(psanaobj.dac3ThlCourse())
  , dac3Vcas(psanaobj.dac3Vcas())
  , dac3Fbk(psanaobj.dac3Fbk())
  , dac3Gnd(psanaobj.dac3Gnd())
  , dac3Ths(psanaobj.dac3Ths())
  , dac3BiasLvds(psanaobj.dac3BiasLvds())
  , dac3RefLvds(psanaobj.dac3RefLvds())
  , driverVersion(psanaobj.driverVersion())
  , firmwareVersion(psanaobj.firmwareVersion())
  , pixelThreshSize(psanaobj.pixelThreshSize())
  , chip0Name(0)
  , chip1Name(0)
  , chip2Name(0)
  , chip3Name(0)
  , chip0ID(psanaobj.chip0ID())
  , chip1ID(psanaobj.chip1ID())
  , chip2ID(psanaobj.chip2ID())
  , chip3ID(psanaobj.chip3ID())
  , chipCount(psanaobj.chipCount())
{
  {
    const __typeof__(psanaobj.pixelThresh())& arr = psanaobj.pixelThresh();
    std::copy(arr.begin(), arr.begin()+4*256*256, pixelThresh);
  }
  chip0Name = strdup(psanaobj.chip0Name());
  chip1Name = strdup(psanaobj.chip1Name());
  chip2Name = strdup(psanaobj.chip2Name());
  chip3Name = strdup(psanaobj.chip3Name());
}

ns_ConfigV2_v0::dataset_config::~dataset_config()
{
}
Psana::Timepix::ConfigV2::ReadoutSpeed ConfigV2_v0::readoutSpeed() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV2::ReadoutSpeed(m_ds_config->readoutSpeed);
}
Psana::Timepix::ConfigV2::TriggerMode ConfigV2_v0::triggerMode() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV2::TriggerMode(m_ds_config->triggerMode);
}
int32_t ConfigV2_v0::timepixSpeed() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->timepixSpeed);
}
int32_t ConfigV2_v0::dac0Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ikrum);
}
int32_t ConfigV2_v0::dac0Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Disc);
}
int32_t ConfigV2_v0::dac0Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Preamp);
}
int32_t ConfigV2_v0::dac0BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogA);
}
int32_t ConfigV2_v0::dac0BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogB);
}
int32_t ConfigV2_v0::dac0Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Hist);
}
int32_t ConfigV2_v0::dac0ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlFine);
}
int32_t ConfigV2_v0::dac0ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlCourse);
}
int32_t ConfigV2_v0::dac0Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Vcas);
}
int32_t ConfigV2_v0::dac0Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Fbk);
}
int32_t ConfigV2_v0::dac0Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Gnd);
}
int32_t ConfigV2_v0::dac0Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ths);
}
int32_t ConfigV2_v0::dac0BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BiasLvds);
}
int32_t ConfigV2_v0::dac0RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0RefLvds);
}
int32_t ConfigV2_v0::dac1Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ikrum);
}
int32_t ConfigV2_v0::dac1Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Disc);
}
int32_t ConfigV2_v0::dac1Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Preamp);
}
int32_t ConfigV2_v0::dac1BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogA);
}
int32_t ConfigV2_v0::dac1BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogB);
}
int32_t ConfigV2_v0::dac1Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Hist);
}
int32_t ConfigV2_v0::dac1ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlFine);
}
int32_t ConfigV2_v0::dac1ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlCourse);
}
int32_t ConfigV2_v0::dac1Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Vcas);
}
int32_t ConfigV2_v0::dac1Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Fbk);
}
int32_t ConfigV2_v0::dac1Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Gnd);
}
int32_t ConfigV2_v0::dac1Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ths);
}
int32_t ConfigV2_v0::dac1BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BiasLvds);
}
int32_t ConfigV2_v0::dac1RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1RefLvds);
}
int32_t ConfigV2_v0::dac2Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ikrum);
}
int32_t ConfigV2_v0::dac2Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Disc);
}
int32_t ConfigV2_v0::dac2Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Preamp);
}
int32_t ConfigV2_v0::dac2BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogA);
}
int32_t ConfigV2_v0::dac2BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogB);
}
int32_t ConfigV2_v0::dac2Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Hist);
}
int32_t ConfigV2_v0::dac2ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlFine);
}
int32_t ConfigV2_v0::dac2ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlCourse);
}
int32_t ConfigV2_v0::dac2Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Vcas);
}
int32_t ConfigV2_v0::dac2Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Fbk);
}
int32_t ConfigV2_v0::dac2Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Gnd);
}
int32_t ConfigV2_v0::dac2Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ths);
}
int32_t ConfigV2_v0::dac2BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BiasLvds);
}
int32_t ConfigV2_v0::dac2RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2RefLvds);
}
int32_t ConfigV2_v0::dac3Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ikrum);
}
int32_t ConfigV2_v0::dac3Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Disc);
}
int32_t ConfigV2_v0::dac3Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Preamp);
}
int32_t ConfigV2_v0::dac3BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogA);
}
int32_t ConfigV2_v0::dac3BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogB);
}
int32_t ConfigV2_v0::dac3Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Hist);
}
int32_t ConfigV2_v0::dac3ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlFine);
}
int32_t ConfigV2_v0::dac3ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlCourse);
}
int32_t ConfigV2_v0::dac3Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Vcas);
}
int32_t ConfigV2_v0::dac3Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Fbk);
}
int32_t ConfigV2_v0::dac3Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Gnd);
}
int32_t ConfigV2_v0::dac3Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ths);
}
int32_t ConfigV2_v0::dac3BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BiasLvds);
}
int32_t ConfigV2_v0::dac3RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3RefLvds);
}
int32_t ConfigV2_v0::driverVersion() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->driverVersion);
}
uint32_t ConfigV2_v0::firmwareVersion() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->firmwareVersion);
}
uint32_t ConfigV2_v0::pixelThreshSize() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->pixelThreshSize);
}
ndarray<const uint8_t, 1> ConfigV2_v0::pixelThresh() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<uint8_t> ptr(m_ds_config, m_ds_config->pixelThresh);
  return make_ndarray(ptr, PixelThreshMax);
}
const char* ConfigV2_v0::chip0Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip0Name);
}
const char* ConfigV2_v0::chip1Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip1Name);
}
const char* ConfigV2_v0::chip2Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip2Name);
}
const char* ConfigV2_v0::chip3Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip3Name);
}
int32_t ConfigV2_v0::chip0ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip0ID);
}
int32_t ConfigV2_v0::chip1ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip1ID);
}
int32_t ConfigV2_v0::chip2ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip2ID);
}
int32_t ConfigV2_v0::chip3ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip3ID);
}
int32_t ConfigV2_v0::chipCount() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chipCount);
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Timepix::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV2_v0(const Psana::Timepix::ConfigV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Timepix::ns_ConfigV2_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV2_v0(const Psana::Timepix::ConfigV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Timepix::ns_ConfigV2_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Timepix::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV2> >(boost::shared_ptr<Psana::Timepix::ConfigV2>());
  }
}

void make_datasets(const Psana::Timepix::ConfigV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV2", version);
  }
}

void store_ConfigV2(const Psana::Timepix::ConfigV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV2", version);
  }
}

void store(const Psana::Timepix::ConfigV2& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Timepix::ConfigV2* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV2(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV3_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV3::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV3::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_timepixMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_timepixMode.insert("TimepixMode_Counting", Psana::Timepix::ConfigV3::TimepixMode_Counting);
  _enum_type_timepixMode.insert("TimepixMode_TOT", Psana::Timepix::ConfigV3::TimepixMode_TOT);
  type.insert("timepixMode", offsetof(DsType, timepixMode), _enum_type_timepixMode);
  type.insert("timepixSpeed", offsetof(DsType, timepixSpeed), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("dacBias", offsetof(DsType, dacBias), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("flags", offsetof(DsType, flags), hdf5pp::TypeTraits<int8_t>::stored_type());
  type.insert("driverVersion", offsetof(DsType, driverVersion), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("firmwareVersion", offsetof(DsType, firmwareVersion), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("pixelThreshSize", offsetof(DsType, pixelThreshSize), hdf5pp::TypeTraits<uint32_t>::stored_type());
  hsize_t _array_type_pixelThresh_shape[] = { 4*256*256 };
  hdf5pp::ArrayType _array_type_pixelThresh = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::stored_type(), 1, _array_type_pixelThresh_shape);
  type.insert("pixelThresh", offsetof(DsType, pixelThresh), _array_type_pixelThresh);
  type.insert("chip0Name", offsetof(DsType, chip0Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip1Name", offsetof(DsType, chip1Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip2Name", offsetof(DsType, chip2Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip3Name", offsetof(DsType, chip3Name), hdf5pp::TypeTraits<const char*>::stored_type());
  type.insert("chip0ID", offsetof(DsType, chip0ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip1ID", offsetof(DsType, chip1ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip2ID", offsetof(DsType, chip2ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chip3ID", offsetof(DsType, chip3ID), hdf5pp::TypeTraits<int32_t>::stored_type());
  type.insert("chipCount", offsetof(DsType, chipCount), hdf5pp::TypeTraits<int32_t>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV3_v0_dataset_config_native_type()
{
  typedef ns_ConfigV3_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_readoutSpeed = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Slow", Psana::Timepix::ConfigV3::ReadoutSpeed_Slow);
  _enum_type_readoutSpeed.insert("ReadoutSpeed_Fast", Psana::Timepix::ConfigV3::ReadoutSpeed_Fast);
  type.insert("readoutSpeed", offsetof(DsType, readoutSpeed), _enum_type_readoutSpeed);
  hdf5pp::EnumType<uint8_t> _enum_type_timepixMode = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_timepixMode.insert("TimepixMode_Counting", Psana::Timepix::ConfigV3::TimepixMode_Counting);
  _enum_type_timepixMode.insert("TimepixMode_TOT", Psana::Timepix::ConfigV3::TimepixMode_TOT);
  type.insert("timepixMode", offsetof(DsType, timepixMode), _enum_type_timepixMode);
  type.insert("timepixSpeed", offsetof(DsType, timepixSpeed), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ikrum", offsetof(DsType, dac0Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Disc", offsetof(DsType, dac0Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Preamp", offsetof(DsType, dac0Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogA", offsetof(DsType, dac0BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BufAnalogB", offsetof(DsType, dac0BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Hist", offsetof(DsType, dac0Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlFine", offsetof(DsType, dac0ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0ThlCourse", offsetof(DsType, dac0ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Vcas", offsetof(DsType, dac0Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Fbk", offsetof(DsType, dac0Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Gnd", offsetof(DsType, dac0Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0Ths", offsetof(DsType, dac0Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0BiasLvds", offsetof(DsType, dac0BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac0RefLvds", offsetof(DsType, dac0RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ikrum", offsetof(DsType, dac1Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Disc", offsetof(DsType, dac1Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Preamp", offsetof(DsType, dac1Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogA", offsetof(DsType, dac1BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BufAnalogB", offsetof(DsType, dac1BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Hist", offsetof(DsType, dac1Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlFine", offsetof(DsType, dac1ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1ThlCourse", offsetof(DsType, dac1ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Vcas", offsetof(DsType, dac1Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Fbk", offsetof(DsType, dac1Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Gnd", offsetof(DsType, dac1Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1Ths", offsetof(DsType, dac1Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1BiasLvds", offsetof(DsType, dac1BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac1RefLvds", offsetof(DsType, dac1RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ikrum", offsetof(DsType, dac2Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Disc", offsetof(DsType, dac2Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Preamp", offsetof(DsType, dac2Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogA", offsetof(DsType, dac2BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BufAnalogB", offsetof(DsType, dac2BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Hist", offsetof(DsType, dac2Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlFine", offsetof(DsType, dac2ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2ThlCourse", offsetof(DsType, dac2ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Vcas", offsetof(DsType, dac2Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Fbk", offsetof(DsType, dac2Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Gnd", offsetof(DsType, dac2Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2Ths", offsetof(DsType, dac2Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2BiasLvds", offsetof(DsType, dac2BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac2RefLvds", offsetof(DsType, dac2RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ikrum", offsetof(DsType, dac3Ikrum), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Disc", offsetof(DsType, dac3Disc), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Preamp", offsetof(DsType, dac3Preamp), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogA", offsetof(DsType, dac3BufAnalogA), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BufAnalogB", offsetof(DsType, dac3BufAnalogB), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Hist", offsetof(DsType, dac3Hist), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlFine", offsetof(DsType, dac3ThlFine), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3ThlCourse", offsetof(DsType, dac3ThlCourse), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Vcas", offsetof(DsType, dac3Vcas), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Fbk", offsetof(DsType, dac3Fbk), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Gnd", offsetof(DsType, dac3Gnd), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3Ths", offsetof(DsType, dac3Ths), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3BiasLvds", offsetof(DsType, dac3BiasLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dac3RefLvds", offsetof(DsType, dac3RefLvds), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("dacBias", offsetof(DsType, dacBias), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("flags", offsetof(DsType, flags), hdf5pp::TypeTraits<int8_t>::native_type());
  type.insert("driverVersion", offsetof(DsType, driverVersion), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("firmwareVersion", offsetof(DsType, firmwareVersion), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("pixelThreshSize", offsetof(DsType, pixelThreshSize), hdf5pp::TypeTraits<uint32_t>::native_type());
  hsize_t _array_type_pixelThresh_shape[] = { 4*256*256 };
  hdf5pp::ArrayType _array_type_pixelThresh = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint8_t>::native_type(), 1, _array_type_pixelThresh_shape);
  type.insert("pixelThresh", offsetof(DsType, pixelThresh), _array_type_pixelThresh);
  type.insert("chip0Name", offsetof(DsType, chip0Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip1Name", offsetof(DsType, chip1Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip2Name", offsetof(DsType, chip2Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip3Name", offsetof(DsType, chip3Name), hdf5pp::TypeTraits<const char*>::native_type());
  type.insert("chip0ID", offsetof(DsType, chip0ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip1ID", offsetof(DsType, chip1ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip2ID", offsetof(DsType, chip2ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chip3ID", offsetof(DsType, chip3ID), hdf5pp::TypeTraits<int32_t>::native_type());
  type.insert("chipCount", offsetof(DsType, chipCount), hdf5pp::TypeTraits<int32_t>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV3_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV3_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV3_v0::dataset_config::dataset_config()
{
}

ns_ConfigV3_v0::dataset_config::dataset_config(const Psana::Timepix::ConfigV3& psanaobj)
  : readoutSpeed(psanaobj.readoutSpeed())
  , timepixMode(psanaobj.timepixMode())
  , timepixSpeed(psanaobj.timepixSpeed())
  , dac0Ikrum(psanaobj.dac0Ikrum())
  , dac0Disc(psanaobj.dac0Disc())
  , dac0Preamp(psanaobj.dac0Preamp())
  , dac0BufAnalogA(psanaobj.dac0BufAnalogA())
  , dac0BufAnalogB(psanaobj.dac0BufAnalogB())
  , dac0Hist(psanaobj.dac0Hist())
  , dac0ThlFine(psanaobj.dac0ThlFine())
  , dac0ThlCourse(psanaobj.dac0ThlCourse())
  , dac0Vcas(psanaobj.dac0Vcas())
  , dac0Fbk(psanaobj.dac0Fbk())
  , dac0Gnd(psanaobj.dac0Gnd())
  , dac0Ths(psanaobj.dac0Ths())
  , dac0BiasLvds(psanaobj.dac0BiasLvds())
  , dac0RefLvds(psanaobj.dac0RefLvds())
  , dac1Ikrum(psanaobj.dac1Ikrum())
  , dac1Disc(psanaobj.dac1Disc())
  , dac1Preamp(psanaobj.dac1Preamp())
  , dac1BufAnalogA(psanaobj.dac1BufAnalogA())
  , dac1BufAnalogB(psanaobj.dac1BufAnalogB())
  , dac1Hist(psanaobj.dac1Hist())
  , dac1ThlFine(psanaobj.dac1ThlFine())
  , dac1ThlCourse(psanaobj.dac1ThlCourse())
  , dac1Vcas(psanaobj.dac1Vcas())
  , dac1Fbk(psanaobj.dac1Fbk())
  , dac1Gnd(psanaobj.dac1Gnd())
  , dac1Ths(psanaobj.dac1Ths())
  , dac1BiasLvds(psanaobj.dac1BiasLvds())
  , dac1RefLvds(psanaobj.dac1RefLvds())
  , dac2Ikrum(psanaobj.dac2Ikrum())
  , dac2Disc(psanaobj.dac2Disc())
  , dac2Preamp(psanaobj.dac2Preamp())
  , dac2BufAnalogA(psanaobj.dac2BufAnalogA())
  , dac2BufAnalogB(psanaobj.dac2BufAnalogB())
  , dac2Hist(psanaobj.dac2Hist())
  , dac2ThlFine(psanaobj.dac2ThlFine())
  , dac2ThlCourse(psanaobj.dac2ThlCourse())
  , dac2Vcas(psanaobj.dac2Vcas())
  , dac2Fbk(psanaobj.dac2Fbk())
  , dac2Gnd(psanaobj.dac2Gnd())
  , dac2Ths(psanaobj.dac2Ths())
  , dac2BiasLvds(psanaobj.dac2BiasLvds())
  , dac2RefLvds(psanaobj.dac2RefLvds())
  , dac3Ikrum(psanaobj.dac3Ikrum())
  , dac3Disc(psanaobj.dac3Disc())
  , dac3Preamp(psanaobj.dac3Preamp())
  , dac3BufAnalogA(psanaobj.dac3BufAnalogA())
  , dac3BufAnalogB(psanaobj.dac3BufAnalogB())
  , dac3Hist(psanaobj.dac3Hist())
  , dac3ThlFine(psanaobj.dac3ThlFine())
  , dac3ThlCourse(psanaobj.dac3ThlCourse())
  , dac3Vcas(psanaobj.dac3Vcas())
  , dac3Fbk(psanaobj.dac3Fbk())
  , dac3Gnd(psanaobj.dac3Gnd())
  , dac3Ths(psanaobj.dac3Ths())
  , dac3BiasLvds(psanaobj.dac3BiasLvds())
  , dac3RefLvds(psanaobj.dac3RefLvds())
  , dacBias(psanaobj.dacBias())
  , flags(psanaobj.flags())
  , driverVersion(psanaobj.driverVersion())
  , firmwareVersion(psanaobj.firmwareVersion())
  , pixelThreshSize(psanaobj.pixelThreshSize())
  , chip0Name(0)
  , chip1Name(0)
  , chip2Name(0)
  , chip3Name(0)
  , chip0ID(psanaobj.chip0ID())
  , chip1ID(psanaobj.chip1ID())
  , chip2ID(psanaobj.chip2ID())
  , chip3ID(psanaobj.chip3ID())
  , chipCount(psanaobj.chipCount())
{
  {
    const __typeof__(psanaobj.pixelThresh())& arr = psanaobj.pixelThresh();
    std::copy(arr.begin(), arr.begin()+4*256*256, pixelThresh);
  }
  chip0Name = strdup(psanaobj.chip0Name());
  chip1Name = strdup(psanaobj.chip1Name());
  chip2Name = strdup(psanaobj.chip2Name());
  chip3Name = strdup(psanaobj.chip3Name());
}

ns_ConfigV3_v0::dataset_config::~dataset_config()
{
}
Psana::Timepix::ConfigV3::ReadoutSpeed ConfigV3_v0::readoutSpeed() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV3::ReadoutSpeed(m_ds_config->readoutSpeed);
}
Psana::Timepix::ConfigV3::TimepixMode ConfigV3_v0::timepixMode() const {
  if (not m_ds_config) read_ds_config();
  return Psana::Timepix::ConfigV3::TimepixMode(m_ds_config->timepixMode);
}
int32_t ConfigV3_v0::timepixSpeed() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->timepixSpeed);
}
int32_t ConfigV3_v0::dac0Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ikrum);
}
int32_t ConfigV3_v0::dac0Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Disc);
}
int32_t ConfigV3_v0::dac0Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Preamp);
}
int32_t ConfigV3_v0::dac0BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogA);
}
int32_t ConfigV3_v0::dac0BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BufAnalogB);
}
int32_t ConfigV3_v0::dac0Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Hist);
}
int32_t ConfigV3_v0::dac0ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlFine);
}
int32_t ConfigV3_v0::dac0ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0ThlCourse);
}
int32_t ConfigV3_v0::dac0Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Vcas);
}
int32_t ConfigV3_v0::dac0Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Fbk);
}
int32_t ConfigV3_v0::dac0Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Gnd);
}
int32_t ConfigV3_v0::dac0Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0Ths);
}
int32_t ConfigV3_v0::dac0BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0BiasLvds);
}
int32_t ConfigV3_v0::dac0RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac0RefLvds);
}
int32_t ConfigV3_v0::dac1Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ikrum);
}
int32_t ConfigV3_v0::dac1Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Disc);
}
int32_t ConfigV3_v0::dac1Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Preamp);
}
int32_t ConfigV3_v0::dac1BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogA);
}
int32_t ConfigV3_v0::dac1BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BufAnalogB);
}
int32_t ConfigV3_v0::dac1Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Hist);
}
int32_t ConfigV3_v0::dac1ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlFine);
}
int32_t ConfigV3_v0::dac1ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1ThlCourse);
}
int32_t ConfigV3_v0::dac1Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Vcas);
}
int32_t ConfigV3_v0::dac1Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Fbk);
}
int32_t ConfigV3_v0::dac1Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Gnd);
}
int32_t ConfigV3_v0::dac1Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1Ths);
}
int32_t ConfigV3_v0::dac1BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1BiasLvds);
}
int32_t ConfigV3_v0::dac1RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac1RefLvds);
}
int32_t ConfigV3_v0::dac2Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ikrum);
}
int32_t ConfigV3_v0::dac2Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Disc);
}
int32_t ConfigV3_v0::dac2Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Preamp);
}
int32_t ConfigV3_v0::dac2BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogA);
}
int32_t ConfigV3_v0::dac2BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BufAnalogB);
}
int32_t ConfigV3_v0::dac2Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Hist);
}
int32_t ConfigV3_v0::dac2ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlFine);
}
int32_t ConfigV3_v0::dac2ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2ThlCourse);
}
int32_t ConfigV3_v0::dac2Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Vcas);
}
int32_t ConfigV3_v0::dac2Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Fbk);
}
int32_t ConfigV3_v0::dac2Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Gnd);
}
int32_t ConfigV3_v0::dac2Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2Ths);
}
int32_t ConfigV3_v0::dac2BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2BiasLvds);
}
int32_t ConfigV3_v0::dac2RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac2RefLvds);
}
int32_t ConfigV3_v0::dac3Ikrum() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ikrum);
}
int32_t ConfigV3_v0::dac3Disc() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Disc);
}
int32_t ConfigV3_v0::dac3Preamp() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Preamp);
}
int32_t ConfigV3_v0::dac3BufAnalogA() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogA);
}
int32_t ConfigV3_v0::dac3BufAnalogB() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BufAnalogB);
}
int32_t ConfigV3_v0::dac3Hist() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Hist);
}
int32_t ConfigV3_v0::dac3ThlFine() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlFine);
}
int32_t ConfigV3_v0::dac3ThlCourse() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3ThlCourse);
}
int32_t ConfigV3_v0::dac3Vcas() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Vcas);
}
int32_t ConfigV3_v0::dac3Fbk() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Fbk);
}
int32_t ConfigV3_v0::dac3Gnd() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Gnd);
}
int32_t ConfigV3_v0::dac3Ths() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3Ths);
}
int32_t ConfigV3_v0::dac3BiasLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3BiasLvds);
}
int32_t ConfigV3_v0::dac3RefLvds() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->dac3RefLvds);
}
int8_t ConfigV3_v0::dacBias() const {
  if (not m_ds_config) read_ds_config();
  return int8_t(m_ds_config->dacBias);
}
int8_t ConfigV3_v0::flags() const {
  if (not m_ds_config) read_ds_config();
  return int8_t(m_ds_config->flags);
}
int32_t ConfigV3_v0::driverVersion() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->driverVersion);
}
uint32_t ConfigV3_v0::firmwareVersion() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->firmwareVersion);
}
uint32_t ConfigV3_v0::pixelThreshSize() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->pixelThreshSize);
}
ndarray<const uint8_t, 1> ConfigV3_v0::pixelThresh() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<uint8_t> ptr(m_ds_config, m_ds_config->pixelThresh);
  return make_ndarray(ptr, PixelThreshMax);
}
const char* ConfigV3_v0::chip0Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip0Name);
}
const char* ConfigV3_v0::chip1Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip1Name);
}
const char* ConfigV3_v0::chip2Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip2Name);
}
const char* ConfigV3_v0::chip3Name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->chip3Name);
}
int32_t ConfigV3_v0::chip0ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip0ID);
}
int32_t ConfigV3_v0::chip1ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip1ID);
}
int32_t ConfigV3_v0::chip2ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip2ID);
}
int32_t ConfigV3_v0::chip3ID() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chip3ID);
}
int32_t ConfigV3_v0::chipCount() const {
  if (not m_ds_config) read_ds_config();
  return int32_t(m_ds_config->chipCount);
}
void ConfigV3_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<Timepix::ns_ConfigV3_v0::dataset_config>(m_group, "config", m_idx);
}

void make_datasets_ConfigV3_v0(const Psana::Timepix::ConfigV3& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Timepix::ns_ConfigV3_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV3_v0(const Psana::Timepix::ConfigV3* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Timepix::ns_ConfigV3_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Timepix::ConfigV3> > make_ConfigV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV3> >(boost::make_shared<ConfigV3_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::ConfigV3> >(boost::shared_ptr<Psana::Timepix::ConfigV3>());
  }
}

void make_datasets(const Psana::Timepix::ConfigV3& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV3_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV3", version);
  }
}

void store_ConfigV3(const Psana::Timepix::ConfigV3* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV3_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.ConfigV3", version);
  }
}

void store(const Psana::Timepix::ConfigV3& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV3(&obj, group, 0, version, false);
}

void store_at(const Psana::Timepix::ConfigV3* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV3(obj, group, index, version, true);
}


hdf5pp::Type ns_DataV1_v0_dataset_data_stored_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("timestamp", offsetof(DsType, timestamp), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("lostRows", offsetof(DsType, lostRows), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV1_v0_dataset_data_native_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("timestamp", offsetof(DsType, timestamp), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("lostRows", offsetof(DsType, lostRows), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_native_type();
  return type;
}

ns_DataV1_v0::dataset_data::dataset_data()
{
}

ns_DataV1_v0::dataset_data::dataset_data(const Psana::Timepix::DataV1& psanaobj)
  : timestamp(psanaobj.timestamp())
  , frameCounter(psanaobj.frameCounter())
  , lostRows(psanaobj.lostRows())
{
}

ns_DataV1_v0::dataset_data::~dataset_data()
{
}
uint32_t DataV1_v0::timestamp() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->timestamp);
}
uint16_t DataV1_v0::frameCounter() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->frameCounter);
}
uint16_t DataV1_v0::lostRows() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->lostRows);
}
ndarray<const uint16_t, 2> DataV1_v0::data() const {
  if (m_ds_image.empty()) read_ds_image();
  return m_ds_image;
}





void DataV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Timepix::ns_DataV1_v0::dataset_data>(m_group, "data", m_idx);
}
void DataV1_v0::read_ds_image() const {
  m_ds_image = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "image", m_idx);
}

void make_datasets_DataV1_v0(const Psana::Timepix::DataV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Timepix::ns_DataV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.data()) PsanaArray;
    const PsanaArray& psana_array = obj.data();
    hsize_t dims[2];
    std::copy(psana_array.shape(), psana_array.shape()+2, dims);
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), 2, dims);
    hdf5pp::Utils::createDataset(group, "image", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_DataV1_v0(const Psana::Timepix::DataV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Timepix::ns_DataV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "image", obj->data(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "image", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "image", obj->data());
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Timepix::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::DataV1> >(boost::make_shared<DataV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::DataV1> >(boost::shared_ptr<Psana::Timepix::DataV1>());
  }
}

void make_datasets(const Psana::Timepix::DataV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_DataV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.DataV1", version);
  }
}

void store_DataV1(const Psana::Timepix::DataV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_DataV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.DataV1", version);
  }
}

void store(const Psana::Timepix::DataV1& obj, hdf5pp::Group group, int version) 
{
  store_DataV1(&obj, group, 0, version, false);
}

void store_at(const Psana::Timepix::DataV1* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV1(obj, group, index, version, true);
}


hdf5pp::Type ns_DataV2_v0_dataset_data_stored_type()
{
  typedef ns_DataV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("timestamp", offsetof(DsType, timestamp), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("lostRows", offsetof(DsType, lostRows), hdf5pp::TypeTraits<uint16_t>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV2_v0_dataset_data_native_type()
{
  typedef ns_DataV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("width", offsetof(DsType, width), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("height", offsetof(DsType, height), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("timestamp", offsetof(DsType, timestamp), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("frameCounter", offsetof(DsType, frameCounter), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("lostRows", offsetof(DsType, lostRows), hdf5pp::TypeTraits<uint16_t>::native_type());
  return type;
}

hdf5pp::Type ns_DataV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV2_v0_dataset_data_native_type();
  return type;
}

ns_DataV2_v0::dataset_data::dataset_data()
{
}

ns_DataV2_v0::dataset_data::dataset_data(const Psana::Timepix::DataV2& psanaobj)
  : width(psanaobj.width())
  , height(psanaobj.height())
  , timestamp(psanaobj.timestamp())
  , frameCounter(psanaobj.frameCounter())
  , lostRows(psanaobj.lostRows())
{
}

ns_DataV2_v0::dataset_data::~dataset_data()
{
}
uint16_t DataV2_v0::width() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->width);
}
uint16_t DataV2_v0::height() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->height);
}
uint32_t DataV2_v0::timestamp() const {
  if (not m_ds_data) read_ds_data();
  return uint32_t(m_ds_data->timestamp);
}
uint16_t DataV2_v0::frameCounter() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->frameCounter);
}
uint16_t DataV2_v0::lostRows() const {
  if (not m_ds_data) read_ds_data();
  return uint16_t(m_ds_data->lostRows);
}
ndarray<const uint16_t, 2> DataV2_v0::data() const {
  if (m_ds_image.empty()) read_ds_image();
  return m_ds_image;
}



void DataV2_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Timepix::ns_DataV2_v0::dataset_data>(m_group, "data", m_idx);
}
void DataV2_v0::read_ds_image() const {
  m_ds_image = hdf5pp::Utils::readNdarray<uint16_t, 2>(m_group, "image", m_idx);
}

void make_datasets_DataV2_v0(const Psana::Timepix::DataV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = Timepix::ns_DataV2_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.data()) PsanaArray;
    const PsanaArray& psana_array = obj.data();
    hsize_t dims[2];
    std::copy(psana_array.shape(), psana_array.shape()+2, dims);
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint16_t>::stored_type(), 2, dims);
    hdf5pp::Utils::createDataset(group, "image", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_DataV2_v0(const Psana::Timepix::DataV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    Timepix::ns_DataV2_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "image", obj->data(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "image", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "image", obj->data());
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::Timepix::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::DataV2> >(boost::make_shared<DataV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Timepix::DataV2> >(boost::shared_ptr<Psana::Timepix::DataV2>());
  }
}

void make_datasets(const Psana::Timepix::DataV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_DataV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.DataV2", version);
  }
}

void store_DataV2(const Psana::Timepix::DataV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_DataV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "Timepix.DataV2", version);
  }
}

void store(const Psana::Timepix::DataV2& obj, hdf5pp::Group group, int version) 
{
  store_DataV2(&obj, group, 0, version, false);
}

void store_at(const Psana::Timepix::DataV2* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV2(obj, group, index, version, true);
}

} // namespace Timepix
} // namespace psddl_hdf2psana
