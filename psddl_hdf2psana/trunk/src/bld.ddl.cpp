
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/bld.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/bld.h"
namespace psddl_hdf2psana {
namespace Bld {

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0_dataset_data_stored_type()
{
  typedef ns_BldDataFEEGasDetEnergy_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergy_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0_dataset_data_native_type()
{
  typedef ns_BldDataFEEGasDetEnergy_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("f_11_ENRC", offsetof(DsType, f_11_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_12_ENRC", offsetof(DsType, f_12_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_21_ENRC", offsetof(DsType, f_21_ENRC), hdf5pp::TypeTraits<double>::native_type());
  type.insert("f_22_ENRC", offsetof(DsType, f_22_ENRC), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataFEEGasDetEnergy_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataFEEGasDetEnergy_v0_dataset_data_native_type();
  return type;
}
ns_BldDataFEEGasDetEnergy_v0::dataset_data::dataset_data()
{
}
ns_BldDataFEEGasDetEnergy_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy>
Proxy_BldDataFEEGasDetEnergy_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataFEEGasDetEnergy_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->f_11_ENRC, ds_data->f_12_ENRC, ds_data->f_21_ENRC, ds_data->f_22_ENRC));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataFEEGasDetEnergy> > make_BldDataFEEGasDetEnergy(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataFEEGasDetEnergy_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataFEEGasDetEnergy> >(boost::shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy>());
  }
}

hdf5pp::Type ns_BldDataEBeamV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV0_v0_dataset_data_native_type();
  return type;
}
ns_BldDataEBeamV0_v0::dataset_data::dataset_data()
{
}
ns_BldDataEBeamV0_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV0>
Proxy_BldDataEBeamV0_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV0_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV0_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV0> > make_BldDataEBeamV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV0_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV0> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV0>());
  }
}

hdf5pp::Type ns_BldDataEBeamV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV1_v0_dataset_data_native_type();
  return type;
}
ns_BldDataEBeamV1_v0::dataset_data::dataset_data()
{
}
ns_BldDataEBeamV1_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV1>
Proxy_BldDataEBeamV1_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV1_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV1_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV1> > make_BldDataEBeamV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV1_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV1> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV1>());
  }
}

hdf5pp::Type ns_BldDataEBeamV2_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV2_v0_dataset_data_native_type();
  return type;
}
ns_BldDataEBeamV2_v0::dataset_data::dataset_data()
{
}
ns_BldDataEBeamV2_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV2>
Proxy_BldDataEBeamV2_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV2_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV2_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV2> > make_BldDataEBeamV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV2_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV2> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV2>());
  }
}

hdf5pp::Type ns_BldDataEBeamV3_v0_dataset_data_stored_type()
{
  typedef ns_BldDataEBeamV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV3_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0_dataset_data_native_type()
{
  typedef ns_BldDataEBeamV3_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("uDamageMask", offsetof(DsType, uDamageMask), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("fEbeamCharge", offsetof(DsType, fEbeamCharge), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamL3Energy", offsetof(DsType, fEbeamL3Energy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosX", offsetof(DsType, fEbeamLTUPosX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUPosY", offsetof(DsType, fEbeamLTUPosY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngX", offsetof(DsType, fEbeamLTUAngX), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamLTUAngY", offsetof(DsType, fEbeamLTUAngY), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC2", offsetof(DsType, fEbeamPkCurrBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC2", offsetof(DsType, fEbeamEnergyBC2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamPkCurrBC1", offsetof(DsType, fEbeamPkCurrBC1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fEbeamEnergyBC1", offsetof(DsType, fEbeamEnergyBC1), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataEBeamV3_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataEBeamV3_v0_dataset_data_native_type();
  return type;
}
ns_BldDataEBeamV3_v0::dataset_data::dataset_data()
{
}
ns_BldDataEBeamV3_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataEBeamV3>
Proxy_BldDataEBeamV3_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataEBeamV3_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataEBeamV3_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->uDamageMask, ds_data->fEbeamCharge, ds_data->fEbeamL3Energy, ds_data->fEbeamLTUPosX, ds_data->fEbeamLTUPosY, ds_data->fEbeamLTUAngX, ds_data->fEbeamLTUAngY, ds_data->fEbeamPkCurrBC2, ds_data->fEbeamEnergyBC2, ds_data->fEbeamPkCurrBC1, ds_data->fEbeamEnergyBC1));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataEBeamV3> > make_BldDataEBeamV3(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataEBeamV3_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataEBeamV3> >(boost::shared_ptr<Psana::Bld::BldDataEBeamV3>());
  }
}

hdf5pp::Type ns_BldDataPhaseCavity_v0_dataset_data_stored_type()
{
  typedef ns_BldDataPhaseCavity_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fFitTime1", offsetof(DsType, fFitTime1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fFitTime2", offsetof(DsType, fFitTime2), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCharge1", offsetof(DsType, fCharge1), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCharge2", offsetof(DsType, fCharge2), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataPhaseCavity_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0_dataset_data_native_type()
{
  typedef ns_BldDataPhaseCavity_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fFitTime1", offsetof(DsType, fFitTime1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fFitTime2", offsetof(DsType, fFitTime2), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCharge1", offsetof(DsType, fCharge1), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCharge2", offsetof(DsType, fCharge2), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataPhaseCavity_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataPhaseCavity_v0_dataset_data_native_type();
  return type;
}
ns_BldDataPhaseCavity_v0::dataset_data::dataset_data()
{
}
ns_BldDataPhaseCavity_v0::dataset_data::~dataset_data()
{
}
boost::shared_ptr<Psana::Bld::BldDataPhaseCavity>
Proxy_BldDataPhaseCavity_v0::getTypedImpl(PSEvt::ProxyDictI* dict, const Pds::Src& source, const std::string& key)
{
  if (not m_data) {
    boost::shared_ptr<Bld::ns_BldDataPhaseCavity_v0::dataset_data> ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataPhaseCavity_v0::dataset_data>(m_group, "data", m_idx);
    m_data.reset(new PsanaType(ds_data->fFitTime1, ds_data->fFitTime2, ds_data->fCharge1, ds_data->fCharge2));
  }
  return m_data;
}

boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataPhaseCavity> > make_BldDataPhaseCavity(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<Proxy_BldDataPhaseCavity_v0>(group, idx);
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPhaseCavity> >(boost::shared_ptr<Psana::Bld::BldDataPhaseCavity>());
  }
}

hdf5pp::Type ns_BldDataIpimbV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataIpimbV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV1_v0::dataset_data>::stored_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV1_v0::dataset_config>::stored_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataIpimbV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV1_v0::dataset_data>::native_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV1_v0::dataset_config>::native_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV0_v0_dataset_data_native_type();
  return type;
}
ns_BldDataIpimbV0_v0::dataset_data::dataset_data()
{
}
ns_BldDataIpimbV0_v0::dataset_data::~dataset_data()
{
}
const Psana::Ipimb::DataV1& BldDataIpimbV0_v0::ipimbData() const {
  if (not m_ds_storage_data_ipimbData) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_DataV1_v0::dataset_data> tmp(m_ds_data, &m_ds_data->ipimbData);
    m_ds_storage_data_ipimbData = boost::make_shared<Ipimb::DataV1_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbData;
}
const Psana::Ipimb::ConfigV1& BldDataIpimbV0_v0::ipimbConfig() const {
  if (not m_ds_storage_data_ipimbConfig) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_ConfigV1_v0::dataset_config> tmp(m_ds_data, &m_ds_data->ipimbConfig);
    m_ds_storage_data_ipimbConfig = boost::make_shared<Ipimb::ConfigV1_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbConfig;
}
const Psana::Lusi::IpmFexV1& BldDataIpimbV0_v0::ipmFexData() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_ipmFexData = Psana::Lusi::IpmFexV1(m_ds_data->ipmFexData);
  return m_ds_storage_data_ipmFexData;
}
void BldDataIpimbV0_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataIpimbV0_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataIpimbV0> > make_BldDataIpimbV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV0> >(boost::make_shared<BldDataIpimbV0_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV0> >(boost::shared_ptr<Psana::Bld::BldDataIpimbV0>());
  }
}

hdf5pp::Type ns_BldDataIpimbV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataIpimbV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV2_v0::dataset_data>::stored_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV2_v0::dataset_config>::stored_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataIpimbV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("ipimbData", offsetof(DsType, ipimbData), hdf5pp::TypeTraits<Ipimb::ns_DataV2_v0::dataset_data>::native_type());
  type.insert("ipimbConfig", offsetof(DsType, ipimbConfig), hdf5pp::TypeTraits<Ipimb::ns_ConfigV2_v0::dataset_config>::native_type());
  type.insert("ipmFexData", offsetof(DsType, ipmFexData), hdf5pp::TypeTraits<Lusi::ns_IpmFexV1_v0::dataset_data>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataIpimbV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataIpimbV1_v0_dataset_data_native_type();
  return type;
}
ns_BldDataIpimbV1_v0::dataset_data::dataset_data()
{
}
ns_BldDataIpimbV1_v0::dataset_data::~dataset_data()
{
}
const Psana::Ipimb::DataV2& BldDataIpimbV1_v0::ipimbData() const {
  if (not m_ds_storage_data_ipimbData) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_DataV2_v0::dataset_data> tmp(m_ds_data, &m_ds_data->ipimbData);
    m_ds_storage_data_ipimbData = boost::make_shared<Ipimb::DataV2_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbData;
}
const Psana::Ipimb::ConfigV2& BldDataIpimbV1_v0::ipimbConfig() const {
  if (not m_ds_storage_data_ipimbConfig) {
    if (not m_ds_data) read_ds_data();
    boost::shared_ptr<Ipimb::ns_ConfigV2_v0::dataset_config> tmp(m_ds_data, &m_ds_data->ipimbConfig);
    m_ds_storage_data_ipimbConfig = boost::make_shared<Ipimb::ConfigV2_v0>(tmp);
  }
  return *m_ds_storage_data_ipimbConfig;
}
const Psana::Lusi::IpmFexV1& BldDataIpimbV1_v0::ipmFexData() const {
  if (not m_ds_data) read_ds_data();
  m_ds_storage_data_ipmFexData = Psana::Lusi::IpmFexV1(m_ds_data->ipmFexData);
  return m_ds_storage_data_ipmFexData;
}
void BldDataIpimbV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataIpimbV1_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataIpimbV1> > make_BldDataIpimbV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV1> >(boost::make_shared<BldDataIpimbV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataIpimbV1> >(boost::shared_ptr<Psana::Bld::BldDataIpimbV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataPimV1> > make_BldDataPimV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPimV1> >(boost::make_shared<BldDataPimV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataPimV1> >(boost::shared_ptr<Psana::Bld::BldDataPimV1>());
  }
}

hdf5pp::Type ns_BldDataGMDV0_v0_dataset_data_stored_type()
{
  typedef ns_BldDataGMDV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("strGasType", offsetof(DsType, strGasType), hdf5pp::TypeTraits<const char*>::stored_type(32));
  type.insert("fPressure", offsetof(DsType, fPressure), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTemperature", offsetof(DsType, fTemperature), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCurrent", offsetof(DsType, fCurrent), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMeshElectron", offsetof(DsType, fHvMeshElectron), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMeshIon", offsetof(DsType, fHvMeshIon), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fHvMultIon", offsetof(DsType, fHvMultIon), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fChargeQ", offsetof(DsType, fChargeQ), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPhotonEnergy", offsetof(DsType, fPhotonEnergy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fMultPulseIntensity", offsetof(DsType, fMultPulseIntensity), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fKeithleyPulseIntensity", offsetof(DsType, fKeithleyPulseIntensity), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPulseEnergy", offsetof(DsType, fPulseEnergy), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fPulseEnergyFEE", offsetof(DsType, fPulseEnergyFEE), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTransmission", offsetof(DsType, fTransmission), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fTransmissionFEE", offsetof(DsType, fTransmissionFEE), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV0_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0_dataset_data_native_type()
{
  typedef ns_BldDataGMDV0_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("strGasType", offsetof(DsType, strGasType), hdf5pp::TypeTraits<const char*>::native_type(32));
  type.insert("fPressure", offsetof(DsType, fPressure), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTemperature", offsetof(DsType, fTemperature), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCurrent", offsetof(DsType, fCurrent), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMeshElectron", offsetof(DsType, fHvMeshElectron), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMeshIon", offsetof(DsType, fHvMeshIon), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fHvMultIon", offsetof(DsType, fHvMultIon), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fChargeQ", offsetof(DsType, fChargeQ), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPhotonEnergy", offsetof(DsType, fPhotonEnergy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fMultPulseIntensity", offsetof(DsType, fMultPulseIntensity), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fKeithleyPulseIntensity", offsetof(DsType, fKeithleyPulseIntensity), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPulseEnergy", offsetof(DsType, fPulseEnergy), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fPulseEnergyFEE", offsetof(DsType, fPulseEnergyFEE), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTransmission", offsetof(DsType, fTransmission), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fTransmissionFEE", offsetof(DsType, fTransmissionFEE), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV0_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV0_v0_dataset_data_native_type();
  return type;
}
ns_BldDataGMDV0_v0::dataset_data::dataset_data()
{
}
ns_BldDataGMDV0_v0::dataset_data::~dataset_data()
{
}
const char* BldDataGMDV0_v0::gasType() const {
  if (not m_ds_data) read_ds_data();
  return (const char*)(m_ds_data->strGasType);
}
double BldDataGMDV0_v0::pressure() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPressure);
}
double BldDataGMDV0_v0::temperature() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTemperature);
}
double BldDataGMDV0_v0::current() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fCurrent);
}
double BldDataGMDV0_v0::hvMeshElectron() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMeshElectron);
}
double BldDataGMDV0_v0::hvMeshIon() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMeshIon);
}
double BldDataGMDV0_v0::hvMultIon() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fHvMultIon);
}
double BldDataGMDV0_v0::chargeQ() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fChargeQ);
}
double BldDataGMDV0_v0::photonEnergy() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPhotonEnergy);
}
double BldDataGMDV0_v0::multPulseIntensity() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMultPulseIntensity);
}
double BldDataGMDV0_v0::keithleyPulseIntensity() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fKeithleyPulseIntensity);
}
double BldDataGMDV0_v0::pulseEnergy() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPulseEnergy);
}
double BldDataGMDV0_v0::pulseEnergyFEE() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fPulseEnergyFEE);
}
double BldDataGMDV0_v0::transmission() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTransmission);
}
double BldDataGMDV0_v0::transmissionFEE() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fTransmissionFEE);
}
void BldDataGMDV0_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataGMDV0_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataGMDV0> > make_BldDataGMDV0(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV0> >(boost::make_shared<BldDataGMDV0_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV0> >(boost::shared_ptr<Psana::Bld::BldDataGMDV0>());
  }
}

hdf5pp::Type ns_BldDataGMDV1_v0_dataset_data_stored_type()
{
  typedef ns_BldDataGMDV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fCorrectedSumPerPulse", offsetof(DsType, fCorrectedSumPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fBgValuePerSample", offsetof(DsType, fBgValuePerSample), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0_dataset_data_native_type()
{
  typedef ns_BldDataGMDV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("fMilliJoulesPerPulse", offsetof(DsType, fMilliJoulesPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fMilliJoulesAverage", offsetof(DsType, fMilliJoulesAverage), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fCorrectedSumPerPulse", offsetof(DsType, fCorrectedSumPerPulse), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fBgValuePerSample", offsetof(DsType, fBgValuePerSample), hdf5pp::TypeTraits<double>::native_type());
  type.insert("fRelativeEnergyPerPulse", offsetof(DsType, fRelativeEnergyPerPulse), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_BldDataGMDV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_BldDataGMDV1_v0_dataset_data_native_type();
  return type;
}
ns_BldDataGMDV1_v0::dataset_data::dataset_data()
{
}
ns_BldDataGMDV1_v0::dataset_data::~dataset_data()
{
}
double BldDataGMDV1_v0::milliJoulesPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesPerPulse);
}
double BldDataGMDV1_v0::milliJoulesAverage() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fMilliJoulesAverage);
}
double BldDataGMDV1_v0::correctedSumPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fCorrectedSumPerPulse);
}
double BldDataGMDV1_v0::bgValuePerSample() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fBgValuePerSample);
}
double BldDataGMDV1_v0::relativeEnergyPerPulse() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->fRelativeEnergyPerPulse);
}
void BldDataGMDV1_v0::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<Bld::ns_BldDataGMDV1_v0::dataset_data>(m_group, "data", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::Bld::BldDataGMDV1> > make_BldDataGMDV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV1> >(boost::make_shared<BldDataGMDV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::Bld::BldDataGMDV1> >(boost::shared_ptr<Psana::Bld::BldDataGMDV1>());
  }
}
} // namespace Bld
} // namespace psddl_hdf2psana
