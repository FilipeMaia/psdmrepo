
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/usdusb.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/usdusb.ddlm.h"
#include "psddl_hdf2psana/usdusb.ddlm.h"
namespace psddl_hdf2psana {
namespace UsdUsb {

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_counting_mode_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_counting_mode = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::stored_type(), 1, _array_type_counting_mode_shape);
  type.insert("counting_mode", offsetof(DsType, counting_mode), _array_type_counting_mode);
  hsize_t _array_type_quadrature_mode_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_quadrature_mode = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::stored_type(), 1, _array_type_quadrature_mode_shape);
  type.insert("quadrature_mode", offsetof(DsType, quadrature_mode), _array_type_quadrature_mode);
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hsize_t _array_type_counting_mode_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_counting_mode = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::native_type(), 1, _array_type_counting_mode_shape);
  type.insert("counting_mode", offsetof(DsType, counting_mode), _array_type_counting_mode);
  hsize_t _array_type_quadrature_mode_shape[] = { 4 };
  hdf5pp::ArrayType _array_type_quadrature_mode = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<uint32_t>::native_type(), 1, _array_type_quadrature_mode_shape);
  type.insert("quadrature_mode", offsetof(DsType, quadrature_mode), _array_type_quadrature_mode);
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}
ns_ConfigV1_v0::dataset_config::dataset_config()
{
}
ns_ConfigV1_v0::dataset_config::~dataset_config()
{
}
ndarray<const uint32_t, 1> ConfigV1_v0::counting_mode() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<uint32_t> ptr(m_ds_config, m_ds_config->counting_mode);
  return make_ndarray(ptr, NCHANNELS);
}
ndarray<const uint32_t, 1> ConfigV1_v0::quadrature_mode() const {
  if (not m_ds_config) read_ds_config();
  boost::shared_ptr<uint32_t> ptr(m_ds_config, m_ds_config->quadrature_mode);
  return make_ndarray(ptr, NCHANNELS);
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<UsdUsb::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
boost::shared_ptr<PSEvt::Proxy<Psana::UsdUsb::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::UsdUsb::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::UsdUsb::ConfigV1> >(boost::shared_ptr<Psana::UsdUsb::ConfigV1>());
  }
}
boost::shared_ptr<PSEvt::Proxy<Psana::UsdUsb::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::UsdUsb::DataV1> >(boost::make_shared<DataV1_v0>(group, idx));
  case 1:
    return boost::make_shared<PSEvt::DataProxy<Psana::UsdUsb::DataV1> >(boost::make_shared<DataV1_v1>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::UsdUsb::DataV1> >(boost::shared_ptr<Psana::UsdUsb::DataV1>());
  }
}
} // namespace UsdUsb
} // namespace psddl_hdf2psana
