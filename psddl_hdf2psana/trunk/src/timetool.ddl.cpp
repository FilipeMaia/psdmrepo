
// *** Do not edit this file, it is auto-generated ***

#include "psddl_hdf2psana/timetool.ddl.h"
#include "hdf5pp/ArrayType.h"
#include "hdf5pp/CompoundType.h"
#include "hdf5pp/EnumType.h"
#include "hdf5pp/VlenType.h"
#include "hdf5pp/Utils.h"
#include "PSEvt/DataProxy.h"
#include "psddl_hdf2psana/Exceptions.h"
namespace psddl_hdf2psana {
namespace TimeTool {

hdf5pp::Type ns_EventLogic_v0_dataset_data_stored_type()
{
  typedef ns_EventLogic_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("event_code", offsetof(DsType, event_code), hdf5pp::TypeTraits<uint8_t>::stored_type());
  hdf5pp::EnumType<uint8_t> _enum_type_logic_op = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_logic_op.insert("L_OR", Psana::TimeTool::EventLogic::L_OR);
  _enum_type_logic_op.insert("L_AND", Psana::TimeTool::EventLogic::L_AND);
  _enum_type_logic_op.insert("L_OR_NOT", Psana::TimeTool::EventLogic::L_OR_NOT);
  _enum_type_logic_op.insert("L_AND_NOT", Psana::TimeTool::EventLogic::L_AND_NOT);
  type.insert("logic_op", offsetof(DsType, logic_op), _enum_type_logic_op);
  return type;
}

hdf5pp::Type ns_EventLogic_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_EventLogic_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_EventLogic_v0_dataset_data_native_type()
{
  typedef ns_EventLogic_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  type.insert("event_code", offsetof(DsType, event_code), hdf5pp::TypeTraits<uint8_t>::native_type());
  hdf5pp::EnumType<uint8_t> _enum_type_logic_op = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_logic_op.insert("L_OR", Psana::TimeTool::EventLogic::L_OR);
  _enum_type_logic_op.insert("L_AND", Psana::TimeTool::EventLogic::L_AND);
  _enum_type_logic_op.insert("L_OR_NOT", Psana::TimeTool::EventLogic::L_OR_NOT);
  _enum_type_logic_op.insert("L_AND_NOT", Psana::TimeTool::EventLogic::L_AND_NOT);
  type.insert("logic_op", offsetof(DsType, logic_op), _enum_type_logic_op);
  return type;
}

hdf5pp::Type ns_EventLogic_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_EventLogic_v0_dataset_data_native_type();
  return type;
}

ns_EventLogic_v0::dataset_data::dataset_data()
{
}

ns_EventLogic_v0::dataset_data::dataset_data(const Psana::TimeTool::EventLogic& psanaobj)
  : event_code(psanaobj.event_code())
  , logic_op(psanaobj.logic_op())
{
}

ns_EventLogic_v0::dataset_data::~dataset_data()
{
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_project_axis = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_project_axis.insert("X", Psana::TimeTool::ConfigV1::X);
  _enum_type_project_axis.insert("Y", Psana::TimeTool::ConfigV1::Y);
  type.insert("project_axis", offsetof(DsType, project_axis), _enum_type_project_axis);
  type.insert("write_image", offsetof(DsType, write_image), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("write_projections", offsetof(DsType, write_projections), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("subtract_sideband", offsetof(DsType, subtract_sideband), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("number_of_weights", offsetof(DsType, number_of_weights), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("calib_poly_dim", offsetof(DsType, calib_poly_dim), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("number_of_beam_event_codes", offsetof(DsType, number_of_beam_event_codes), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("number_of_laser_event_codes", offsetof(DsType, number_of_laser_event_codes), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("signal_cut", offsetof(DsType, signal_cut), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sig_roi_lo", offsetof(DsType, sig_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sig_roi_hi", offsetof(DsType, sig_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_roi_lo", offsetof(DsType, sb_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_roi_hi", offsetof(DsType, sb_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_convergence", offsetof(DsType, sb_convergence), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("ref_convergence", offsetof(DsType, ref_convergence), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("base_name_length", offsetof(DsType, base_name_length), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("base_name", offsetof(DsType, base_name), hdf5pp::TypeTraits<const char*>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV1_v0_dataset_config_native_type()
{
  typedef ns_ConfigV1_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_project_axis = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_project_axis.insert("X", Psana::TimeTool::ConfigV1::X);
  _enum_type_project_axis.insert("Y", Psana::TimeTool::ConfigV1::Y);
  type.insert("project_axis", offsetof(DsType, project_axis), _enum_type_project_axis);
  type.insert("write_image", offsetof(DsType, write_image), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("write_projections", offsetof(DsType, write_projections), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("subtract_sideband", offsetof(DsType, subtract_sideband), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("number_of_weights", offsetof(DsType, number_of_weights), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("calib_poly_dim", offsetof(DsType, calib_poly_dim), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("number_of_beam_event_codes", offsetof(DsType, number_of_beam_event_codes), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("number_of_laser_event_codes", offsetof(DsType, number_of_laser_event_codes), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("signal_cut", offsetof(DsType, signal_cut), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sig_roi_lo", offsetof(DsType, sig_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sig_roi_hi", offsetof(DsType, sig_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_roi_lo", offsetof(DsType, sb_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_roi_hi", offsetof(DsType, sb_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_convergence", offsetof(DsType, sb_convergence), hdf5pp::TypeTraits<double>::native_type());
  type.insert("ref_convergence", offsetof(DsType, ref_convergence), hdf5pp::TypeTraits<double>::native_type());
  type.insert("base_name_length", offsetof(DsType, base_name_length), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("base_name", offsetof(DsType, base_name), hdf5pp::TypeTraits<const char*>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV1_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV1_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV1_v0::dataset_config::dataset_config()
{
  this->base_name = 0;
}

ns_ConfigV1_v0::dataset_config::dataset_config(const Psana::TimeTool::ConfigV1& psanaobj)
  : project_axis(psanaobj.project_axis())
  , write_image(psanaobj.write_image())
  , write_projections(psanaobj.write_projections())
  , subtract_sideband(psanaobj.subtract_sideband())
  , number_of_weights(psanaobj.number_of_weights())
  , calib_poly_dim(psanaobj.calib_poly_dim())
  , number_of_beam_event_codes(psanaobj.number_of_beam_event_codes())
  , number_of_laser_event_codes(psanaobj.number_of_laser_event_codes())
  , signal_cut(psanaobj.signal_cut())
  , sig_roi_lo(psanaobj.sig_roi_lo())
  , sig_roi_hi(psanaobj.sig_roi_hi())
  , sb_roi_lo(psanaobj.sb_roi_lo())
  , sb_roi_hi(psanaobj.sb_roi_hi())
  , sb_convergence(psanaobj.sb_convergence())
  , ref_convergence(psanaobj.ref_convergence())
  , base_name_length(psanaobj.base_name_length())
  , base_name(0)
{
  base_name = strdup(psanaobj.base_name());
}

ns_ConfigV1_v0::dataset_config::~dataset_config()
{
  free(this->base_name);
}
Psana::TimeTool::ConfigV1::Axis ConfigV1_v0::project_axis() const {
  if (not m_ds_config) read_ds_config();
  return Psana::TimeTool::ConfigV1::Axis(m_ds_config->project_axis);
}
uint8_t ConfigV1_v0::write_image() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->write_image);
}
uint8_t ConfigV1_v0::write_projections() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->write_projections);
}
uint8_t ConfigV1_v0::subtract_sideband() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->subtract_sideband);
}
uint16_t ConfigV1_v0::number_of_weights() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_weights);
}
uint8_t ConfigV1_v0::calib_poly_dim() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->calib_poly_dim);
}
uint8_t ConfigV1_v0::base_name_length() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->base_name_length);
}
uint16_t ConfigV1_v0::number_of_beam_event_codes() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_beam_event_codes);
}
uint16_t ConfigV1_v0::number_of_laser_event_codes() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_laser_event_codes);
}
uint32_t ConfigV1_v0::signal_cut() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->signal_cut);
}
const Psana::Camera::FrameCoord& ConfigV1_v0::sig_roi_lo() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sig_roi_lo = Psana::Camera::FrameCoord(m_ds_config->sig_roi_lo);
  return m_ds_storage_config_sig_roi_lo;
}
const Psana::Camera::FrameCoord& ConfigV1_v0::sig_roi_hi() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sig_roi_hi = Psana::Camera::FrameCoord(m_ds_config->sig_roi_hi);
  return m_ds_storage_config_sig_roi_hi;
}
const Psana::Camera::FrameCoord& ConfigV1_v0::sb_roi_lo() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sb_roi_lo = Psana::Camera::FrameCoord(m_ds_config->sb_roi_lo);
  return m_ds_storage_config_sb_roi_lo;
}
const Psana::Camera::FrameCoord& ConfigV1_v0::sb_roi_hi() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sb_roi_hi = Psana::Camera::FrameCoord(m_ds_config->sb_roi_hi);
  return m_ds_storage_config_sb_roi_hi;
}
double ConfigV1_v0::sb_convergence() const {
  if (not m_ds_config) read_ds_config();
  return double(m_ds_config->sb_convergence);
}
double ConfigV1_v0::ref_convergence() const {
  if (not m_ds_config) read_ds_config();
  return double(m_ds_config->ref_convergence);
}
ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV1_v0::beam_logic() const {
  if (m_ds_beam_logic.empty()) read_ds_beam_logic();
  return m_ds_beam_logic;
}
ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV1_v0::laser_logic() const {
  if (m_ds_laser_logic.empty()) read_ds_laser_logic();
  return m_ds_laser_logic;
}
ndarray<const double, 1> ConfigV1_v0::weights() const {
  if (m_ds_weights.empty()) read_ds_weights();
  return m_ds_weights;
}
ndarray<const double, 1> ConfigV1_v0::calib_poly() const {
  if (m_ds_calib_poly.empty()) read_ds_calib_poly();
  return m_ds_calib_poly;
}
const char* ConfigV1_v0::base_name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->base_name);
}
uint32_t
ConfigV1_v0::signal_projection_size() const{ 
return (this->write_projections() ? (this->project_axis()==X ?
  this->sig_roi_hi().column()-this->sig_roi_lo().column()+1 :
  this->sig_roi_hi().row   ()-this->sig_roi_lo().row   ()+1) : 0); 
}
uint32_t
ConfigV1_v0::sideband_projection_size() const{ 
return ((this->write_projections()&&this->subtract_sideband()) ?
  (this->project_axis()==X ?
     this->sb_roi_hi().column()-this->sb_roi_lo().column()+1 :
     this->sb_roi_hi().row   ()-this->sb_roi_lo().row   ()+1) : 0); 
}
std::vector<int>
ConfigV1_v0::base_name_shape() const{ 
  int shape[] = { this->base_name_length() };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV1_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<TimeTool::ns_ConfigV1_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV1_v0::read_ds_beam_logic() const {
  ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<TimeTool::ns_EventLogic_v0::dataset_data, 1>(m_group, "beam_logic", m_idx);
  ndarray<Psana::TimeTool::EventLogic, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_beam_logic = tmp;
}
void ConfigV1_v0::read_ds_laser_logic() const {
  ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<TimeTool::ns_EventLogic_v0::dataset_data, 1>(m_group, "laser_logic", m_idx);
  ndarray<Psana::TimeTool::EventLogic, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_laser_logic = tmp;
}
void ConfigV1_v0::read_ds_weights() const {
  m_ds_weights = hdf5pp::Utils::readNdarray<double, 1>(m_group, "weights", m_idx);
}
void ConfigV1_v0::read_ds_calib_poly() const {
  m_ds_calib_poly = hdf5pp::Utils::readNdarray<double, 1>(m_group, "calib_poly", m_idx);
}

void make_datasets_ConfigV1_v0(const Psana::TimeTool::ConfigV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = TimeTool::ns_ConfigV1_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.beam_logic()) PsanaArray;
    const PsanaArray& psana_array = obj.beam_logic();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<TimeTool::ns_EventLogic_v0::dataset_data>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "beam_logic", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.laser_logic()) PsanaArray;
    const PsanaArray& psana_array = obj.laser_logic();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<TimeTool::ns_EventLogic_v0::dataset_data>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "laser_logic", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.weights()) PsanaArray;
    const PsanaArray& psana_array = obj.weights();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "weights", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.calib_poly()) PsanaArray;
    const PsanaArray& psana_array = obj.calib_poly();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "calib_poly", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV1_v0(const Psana::TimeTool::ConfigV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    TimeTool::ns_ConfigV1_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
  if (obj) {
    typedef __typeof__(obj->beam_logic()) PsanaArray;
    typedef ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> HdfArray;
    PsanaArray psana_array = obj->beam_logic();
    HdfArray hdf_array(psana_array.shape());
    HdfArray::iterator out = hdf_array.begin();
    for (PsanaArray::iterator it = psana_array.begin(); it != psana_array.end(); ++ it, ++ out) {
      *out = TimeTool::ns_EventLogic_v0::dataset_data(*it);
    }
    if (append) {
      hdf5pp::Utils::storeNDArrayAt(group, "beam_logic", hdf_array, index);
    } else {
      hdf5pp::Utils::storeNDArray(group, "beam_logic", hdf_array);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "beam_logic", index < 0 ? index : index + 1);
  }

  if (obj) {
    typedef __typeof__(obj->laser_logic()) PsanaArray;
    typedef ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> HdfArray;
    PsanaArray psana_array = obj->laser_logic();
    HdfArray hdf_array(psana_array.shape());
    HdfArray::iterator out = hdf_array.begin();
    for (PsanaArray::iterator it = psana_array.begin(); it != psana_array.end(); ++ it, ++ out) {
      *out = TimeTool::ns_EventLogic_v0::dataset_data(*it);
    }
    if (append) {
      hdf5pp::Utils::storeNDArrayAt(group, "laser_logic", hdf_array, index);
    } else {
      hdf5pp::Utils::storeNDArray(group, "laser_logic", hdf_array);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "laser_logic", index < 0 ? index : index + 1);
  }

  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "weights", obj->weights(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "weights", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "weights", obj->weights());
  }

  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "calib_poly", obj->calib_poly(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "calib_poly", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "calib_poly", obj->calib_poly());
  }

}

boost::shared_ptr<PSEvt::Proxy<Psana::TimeTool::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::ConfigV1> >(boost::make_shared<ConfigV1_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::ConfigV1> >(boost::shared_ptr<Psana::TimeTool::ConfigV1>());
  }
}

void make_datasets(const Psana::TimeTool::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.ConfigV1", version);
  }
}

void store_ConfigV1(const Psana::TimeTool::ConfigV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.ConfigV1", version);
  }
}

void store(const Psana::TimeTool::ConfigV1& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV1(&obj, group, 0, version, false);
}

void store_at(const Psana::TimeTool::ConfigV1* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV1(obj, group, index, version, true);
}


hdf5pp::Type ns_ConfigV2_v0_dataset_config_stored_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_project_axis = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_project_axis.insert("X", Psana::TimeTool::ConfigV2::X);
  _enum_type_project_axis.insert("Y", Psana::TimeTool::ConfigV2::Y);
  type.insert("project_axis", offsetof(DsType, project_axis), _enum_type_project_axis);
  type.insert("write_image", offsetof(DsType, write_image), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("write_projections", offsetof(DsType, write_projections), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("subtract_sideband", offsetof(DsType, subtract_sideband), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("use_reference_roi", offsetof(DsType, use_reference_roi), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("number_of_weights", offsetof(DsType, number_of_weights), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("calib_poly_dim", offsetof(DsType, calib_poly_dim), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("number_of_beam_event_codes", offsetof(DsType, number_of_beam_event_codes), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("number_of_laser_event_codes", offsetof(DsType, number_of_laser_event_codes), hdf5pp::TypeTraits<uint16_t>::stored_type());
  type.insert("signal_cut", offsetof(DsType, signal_cut), hdf5pp::TypeTraits<uint32_t>::stored_type());
  type.insert("sig_roi_lo", offsetof(DsType, sig_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sig_roi_hi", offsetof(DsType, sig_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_roi_lo", offsetof(DsType, sb_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_roi_hi", offsetof(DsType, sb_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("ref_roi_lo", offsetof(DsType, ref_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("ref_roi_hi", offsetof(DsType, ref_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::stored_type());
  type.insert("sb_convergence", offsetof(DsType, sb_convergence), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("ref_convergence", offsetof(DsType, ref_convergence), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("base_name_length", offsetof(DsType, base_name_length), hdf5pp::TypeTraits<uint8_t>::stored_type());
  type.insert("base_name", offsetof(DsType, base_name), hdf5pp::TypeTraits<const char*>::stored_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::stored_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_stored_type();
  return type;
}

hdf5pp::Type ns_ConfigV2_v0_dataset_config_native_type()
{
  typedef ns_ConfigV2_v0::dataset_config DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint8_t> _enum_type_project_axis = hdf5pp::EnumType<uint8_t>::enumType();
  _enum_type_project_axis.insert("X", Psana::TimeTool::ConfigV2::X);
  _enum_type_project_axis.insert("Y", Psana::TimeTool::ConfigV2::Y);
  type.insert("project_axis", offsetof(DsType, project_axis), _enum_type_project_axis);
  type.insert("write_image", offsetof(DsType, write_image), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("write_projections", offsetof(DsType, write_projections), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("subtract_sideband", offsetof(DsType, subtract_sideband), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("use_reference_roi", offsetof(DsType, use_reference_roi), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("number_of_weights", offsetof(DsType, number_of_weights), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("calib_poly_dim", offsetof(DsType, calib_poly_dim), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("number_of_beam_event_codes", offsetof(DsType, number_of_beam_event_codes), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("number_of_laser_event_codes", offsetof(DsType, number_of_laser_event_codes), hdf5pp::TypeTraits<uint16_t>::native_type());
  type.insert("signal_cut", offsetof(DsType, signal_cut), hdf5pp::TypeTraits<uint32_t>::native_type());
  type.insert("sig_roi_lo", offsetof(DsType, sig_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sig_roi_hi", offsetof(DsType, sig_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_roi_lo", offsetof(DsType, sb_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_roi_hi", offsetof(DsType, sb_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("ref_roi_lo", offsetof(DsType, ref_roi_lo), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("ref_roi_hi", offsetof(DsType, ref_roi_hi), hdf5pp::TypeTraits<Camera::ns_FrameCoord_v0::dataset_data>::native_type());
  type.insert("sb_convergence", offsetof(DsType, sb_convergence), hdf5pp::TypeTraits<double>::native_type());
  type.insert("ref_convergence", offsetof(DsType, ref_convergence), hdf5pp::TypeTraits<double>::native_type());
  type.insert("base_name_length", offsetof(DsType, base_name_length), hdf5pp::TypeTraits<uint8_t>::native_type());
  type.insert("base_name", offsetof(DsType, base_name), hdf5pp::TypeTraits<const char*>::native_type());
  return type;
}

hdf5pp::Type ns_ConfigV2_v0::dataset_config::native_type()
{
  static hdf5pp::Type type = ns_ConfigV2_v0_dataset_config_native_type();
  return type;
}

ns_ConfigV2_v0::dataset_config::dataset_config()
{
  this->base_name = 0;
}

ns_ConfigV2_v0::dataset_config::dataset_config(const Psana::TimeTool::ConfigV2& psanaobj)
  : project_axis(psanaobj.project_axis())
  , write_image(psanaobj.write_image())
  , write_projections(psanaobj.write_projections())
  , subtract_sideband(psanaobj.subtract_sideband())
  , use_reference_roi(psanaobj.use_reference_roi())
  , number_of_weights(psanaobj.number_of_weights())
  , calib_poly_dim(psanaobj.calib_poly_dim())
  , number_of_beam_event_codes(psanaobj.number_of_beam_event_codes())
  , number_of_laser_event_codes(psanaobj.number_of_laser_event_codes())
  , signal_cut(psanaobj.signal_cut())
  , sig_roi_lo(psanaobj.sig_roi_lo())
  , sig_roi_hi(psanaobj.sig_roi_hi())
  , sb_roi_lo(psanaobj.sb_roi_lo())
  , sb_roi_hi(psanaobj.sb_roi_hi())
  , ref_roi_lo(psanaobj.ref_roi_lo())
  , ref_roi_hi(psanaobj.ref_roi_hi())
  , sb_convergence(psanaobj.sb_convergence())
  , ref_convergence(psanaobj.ref_convergence())
  , base_name_length(psanaobj.base_name_length())
  , base_name(0)
{
  base_name = strdup(psanaobj.base_name());
}

ns_ConfigV2_v0::dataset_config::~dataset_config()
{
  free(this->base_name);
}
Psana::TimeTool::ConfigV2::Axis ConfigV2_v0::project_axis() const {
  if (not m_ds_config) read_ds_config();
  return Psana::TimeTool::ConfigV2::Axis(m_ds_config->project_axis);
}
uint8_t ConfigV2_v0::write_image() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->write_image);
}
uint8_t ConfigV2_v0::write_projections() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->write_projections);
}
uint8_t ConfigV2_v0::subtract_sideband() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->subtract_sideband);
}
uint8_t ConfigV2_v0::use_reference_roi() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->use_reference_roi);
}
uint16_t ConfigV2_v0::number_of_weights() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_weights);
}
uint8_t ConfigV2_v0::calib_poly_dim() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->calib_poly_dim);
}
uint8_t ConfigV2_v0::base_name_length() const {
  if (not m_ds_config) read_ds_config();
  return uint8_t(m_ds_config->base_name_length);
}
uint16_t ConfigV2_v0::number_of_beam_event_codes() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_beam_event_codes);
}
uint16_t ConfigV2_v0::number_of_laser_event_codes() const {
  if (not m_ds_config) read_ds_config();
  return uint16_t(m_ds_config->number_of_laser_event_codes);
}
uint32_t ConfigV2_v0::signal_cut() const {
  if (not m_ds_config) read_ds_config();
  return uint32_t(m_ds_config->signal_cut);
}
const Psana::Camera::FrameCoord& ConfigV2_v0::sig_roi_lo() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sig_roi_lo = Psana::Camera::FrameCoord(m_ds_config->sig_roi_lo);
  return m_ds_storage_config_sig_roi_lo;
}
const Psana::Camera::FrameCoord& ConfigV2_v0::sig_roi_hi() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sig_roi_hi = Psana::Camera::FrameCoord(m_ds_config->sig_roi_hi);
  return m_ds_storage_config_sig_roi_hi;
}
const Psana::Camera::FrameCoord& ConfigV2_v0::sb_roi_lo() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sb_roi_lo = Psana::Camera::FrameCoord(m_ds_config->sb_roi_lo);
  return m_ds_storage_config_sb_roi_lo;
}
const Psana::Camera::FrameCoord& ConfigV2_v0::sb_roi_hi() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_sb_roi_hi = Psana::Camera::FrameCoord(m_ds_config->sb_roi_hi);
  return m_ds_storage_config_sb_roi_hi;
}
double ConfigV2_v0::sb_convergence() const {
  if (not m_ds_config) read_ds_config();
  return double(m_ds_config->sb_convergence);
}
const Psana::Camera::FrameCoord& ConfigV2_v0::ref_roi_lo() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_ref_roi_lo = Psana::Camera::FrameCoord(m_ds_config->ref_roi_lo);
  return m_ds_storage_config_ref_roi_lo;
}
const Psana::Camera::FrameCoord& ConfigV2_v0::ref_roi_hi() const {
  if (not m_ds_config) read_ds_config();
  m_ds_storage_config_ref_roi_hi = Psana::Camera::FrameCoord(m_ds_config->ref_roi_hi);
  return m_ds_storage_config_ref_roi_hi;
}
double ConfigV2_v0::ref_convergence() const {
  if (not m_ds_config) read_ds_config();
  return double(m_ds_config->ref_convergence);
}
ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV2_v0::beam_logic() const {
  if (m_ds_beam_logic.empty()) read_ds_beam_logic();
  return m_ds_beam_logic;
}
ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV2_v0::laser_logic() const {
  if (m_ds_laser_logic.empty()) read_ds_laser_logic();
  return m_ds_laser_logic;
}
ndarray<const double, 1> ConfigV2_v0::weights() const {
  if (m_ds_weights.empty()) read_ds_weights();
  return m_ds_weights;
}
ndarray<const double, 1> ConfigV2_v0::calib_poly() const {
  if (m_ds_calib_poly.empty()) read_ds_calib_poly();
  return m_ds_calib_poly;
}
const char* ConfigV2_v0::base_name() const {
  if (not m_ds_config) read_ds_config();
  return (const char*)(m_ds_config->base_name);
}
uint32_t
ConfigV2_v0::signal_projection_size() const{ 
return (this->write_projections() ? (this->project_axis()==X ?
  this->sig_roi_hi().column()-this->sig_roi_lo().column()+1 :
  this->sig_roi_hi().row   ()-this->sig_roi_lo().row   ()+1) : 0); 
}
uint32_t
ConfigV2_v0::sideband_projection_size() const{ 
return ((this->write_projections()&&this->subtract_sideband()) ?
  (this->project_axis()==X ?
     this->sb_roi_hi().column()-this->sb_roi_lo().column()+1 :
     this->sb_roi_hi().row   ()-this->sb_roi_lo().row   ()+1) : 0); 
}
uint32_t
ConfigV2_v0::reference_projection_size() const{ 
return ((this->write_projections()&&this->use_reference_roi()) ?
  (this->project_axis()==X ?
     this->ref_roi_hi().column()-this->ref_roi_lo().column()+1 :
     this->ref_roi_hi().row   ()-this->ref_roi_lo().row   ()+1) : 0); 
}
std::vector<int>
ConfigV2_v0::base_name_shape() const{ 
  int shape[] = { this->base_name_length() };
  return std::vector<int>(shape, shape+1); 
}
void ConfigV2_v0::read_ds_config() const {
  m_ds_config = hdf5pp::Utils::readGroup<TimeTool::ns_ConfigV2_v0::dataset_config>(m_group, "config", m_idx);
}
void ConfigV2_v0::read_ds_beam_logic() const {
  ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<TimeTool::ns_EventLogic_v0::dataset_data, 1>(m_group, "beam_logic", m_idx);
  ndarray<Psana::TimeTool::EventLogic, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_beam_logic = tmp;
}
void ConfigV2_v0::read_ds_laser_logic() const {
  ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> arr = hdf5pp::Utils::readNdarray<TimeTool::ns_EventLogic_v0::dataset_data, 1>(m_group, "laser_logic", m_idx);
  ndarray<Psana::TimeTool::EventLogic, 1> tmp(arr.shape());
  std::copy(arr.begin(), arr.end(), tmp.begin());
  m_ds_laser_logic = tmp;
}
void ConfigV2_v0::read_ds_weights() const {
  m_ds_weights = hdf5pp::Utils::readNdarray<double, 1>(m_group, "weights", m_idx);
}
void ConfigV2_v0::read_ds_calib_poly() const {
  m_ds_calib_poly = hdf5pp::Utils::readNdarray<double, 1>(m_group, "calib_poly", m_idx);
}

void make_datasets_ConfigV2_v0(const Psana::TimeTool::ConfigV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = TimeTool::ns_ConfigV2_v0::dataset_config::stored_type();
    hdf5pp::Utils::createDataset(group, "config", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.beam_logic()) PsanaArray;
    const PsanaArray& psana_array = obj.beam_logic();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<TimeTool::ns_EventLogic_v0::dataset_data>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "beam_logic", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.laser_logic()) PsanaArray;
    const PsanaArray& psana_array = obj.laser_logic();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<TimeTool::ns_EventLogic_v0::dataset_data>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "laser_logic", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.weights()) PsanaArray;
    const PsanaArray& psana_array = obj.weights();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "weights", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.calib_poly()) PsanaArray;
    const PsanaArray& psana_array = obj.calib_poly();
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<double>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "calib_poly", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
}

void store_ConfigV2_v0(const Psana::TimeTool::ConfigV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    TimeTool::ns_ConfigV2_v0::dataset_config ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "config", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "config", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "config", index < 0 ? index : index + 1);
  }
  if (obj) {
    typedef __typeof__(obj->beam_logic()) PsanaArray;
    typedef ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> HdfArray;
    PsanaArray psana_array = obj->beam_logic();
    HdfArray hdf_array(psana_array.shape());
    HdfArray::iterator out = hdf_array.begin();
    for (PsanaArray::iterator it = psana_array.begin(); it != psana_array.end(); ++ it, ++ out) {
      *out = TimeTool::ns_EventLogic_v0::dataset_data(*it);
    }
    if (append) {
      hdf5pp::Utils::storeNDArrayAt(group, "beam_logic", hdf_array, index);
    } else {
      hdf5pp::Utils::storeNDArray(group, "beam_logic", hdf_array);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "beam_logic", index < 0 ? index : index + 1);
  }

  if (obj) {
    typedef __typeof__(obj->laser_logic()) PsanaArray;
    typedef ndarray<TimeTool::ns_EventLogic_v0::dataset_data, 1> HdfArray;
    PsanaArray psana_array = obj->laser_logic();
    HdfArray hdf_array(psana_array.shape());
    HdfArray::iterator out = hdf_array.begin();
    for (PsanaArray::iterator it = psana_array.begin(); it != psana_array.end(); ++ it, ++ out) {
      *out = TimeTool::ns_EventLogic_v0::dataset_data(*it);
    }
    if (append) {
      hdf5pp::Utils::storeNDArrayAt(group, "laser_logic", hdf_array, index);
    } else {
      hdf5pp::Utils::storeNDArray(group, "laser_logic", hdf_array);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "laser_logic", index < 0 ? index : index + 1);
  }

  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "weights", obj->weights(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "weights", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "weights", obj->weights());
  }

  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "calib_poly", obj->calib_poly(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "calib_poly", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "calib_poly", obj->calib_poly());
  }

}

boost::shared_ptr<PSEvt::Proxy<Psana::TimeTool::ConfigV2> > make_ConfigV2(int version, hdf5pp::Group group, hsize_t idx) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::ConfigV2> >(boost::make_shared<ConfigV2_v0>(group, idx));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::ConfigV2> >(boost::shared_ptr<Psana::TimeTool::ConfigV2>());
  }
}

void make_datasets(const Psana::TimeTool::ConfigV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_ConfigV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.ConfigV2", version);
  }
}

void store_ConfigV2(const Psana::TimeTool::ConfigV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_ConfigV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.ConfigV2", version);
  }
}

void store(const Psana::TimeTool::ConfigV2& obj, hdf5pp::Group group, int version) 
{
  store_ConfigV2(&obj, group, 0, version, false);
}

void store_at(const Psana::TimeTool::ConfigV2* obj, hdf5pp::Group group, long index, int version)
{
  store_ConfigV2(obj, group, index, version, true);
}


hdf5pp::Type ns_DataV1_v0_dataset_data_stored_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint32_t> _enum_type_event_type = hdf5pp::EnumType<uint32_t>::enumType();
  _enum_type_event_type.insert("Dark", Psana::TimeTool::DataV1::Dark);
  _enum_type_event_type.insert("Reference", Psana::TimeTool::DataV1::Reference);
  _enum_type_event_type.insert("Signal", Psana::TimeTool::DataV1::Signal);
  type.insert("event_type", offsetof(DsType, event_type), _enum_type_event_type);
  type.insert("amplitude", offsetof(DsType, amplitude), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_pixel", offsetof(DsType, position_pixel), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_time", offsetof(DsType, position_time), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_fwhm", offsetof(DsType, position_fwhm), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("ref_amplitude", offsetof(DsType, ref_amplitude), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("nxt_amplitude", offsetof(DsType, nxt_amplitude), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV1_v0_dataset_data_native_type()
{
  typedef ns_DataV1_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint32_t> _enum_type_event_type = hdf5pp::EnumType<uint32_t>::enumType();
  _enum_type_event_type.insert("Dark", Psana::TimeTool::DataV1::Dark);
  _enum_type_event_type.insert("Reference", Psana::TimeTool::DataV1::Reference);
  _enum_type_event_type.insert("Signal", Psana::TimeTool::DataV1::Signal);
  type.insert("event_type", offsetof(DsType, event_type), _enum_type_event_type);
  type.insert("amplitude", offsetof(DsType, amplitude), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_pixel", offsetof(DsType, position_pixel), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_time", offsetof(DsType, position_time), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_fwhm", offsetof(DsType, position_fwhm), hdf5pp::TypeTraits<double>::native_type());
  type.insert("ref_amplitude", offsetof(DsType, ref_amplitude), hdf5pp::TypeTraits<double>::native_type());
  type.insert("nxt_amplitude", offsetof(DsType, nxt_amplitude), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_DataV1_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV1_v0_dataset_data_native_type();
  return type;
}

ns_DataV1_v0::dataset_data::dataset_data()
{
}

ns_DataV1_v0::dataset_data::dataset_data(const Psana::TimeTool::DataV1& psanaobj)
  : event_type(psanaobj.event_type())
  , amplitude(psanaobj.amplitude())
  , position_pixel(psanaobj.position_pixel())
  , position_time(psanaobj.position_time())
  , position_fwhm(psanaobj.position_fwhm())
  , ref_amplitude(psanaobj.ref_amplitude())
  , nxt_amplitude(psanaobj.nxt_amplitude())
{
}

ns_DataV1_v0::dataset_data::~dataset_data()
{
}
template <typename Config>
Psana::TimeTool::DataV1::EventType DataV1_v0<Config>::event_type() const {
  if (not m_ds_data) read_ds_data();
  return Psana::TimeTool::DataV1::EventType(m_ds_data->event_type);
}
template <typename Config>
double DataV1_v0<Config>::amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->amplitude);
}
template <typename Config>
double DataV1_v0<Config>::position_pixel() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_pixel);
}
template <typename Config>
double DataV1_v0<Config>::position_time() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_time);
}
template <typename Config>
double DataV1_v0<Config>::position_fwhm() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_fwhm);
}
template <typename Config>
double DataV1_v0<Config>::ref_amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->ref_amplitude);
}
template <typename Config>
double DataV1_v0<Config>::nxt_amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->nxt_amplitude);
}
template <typename Config>
ndarray<const int32_t, 1> DataV1_v0<Config>::projected_signal() const {
  if (m_ds_projected_signal.empty()) read_ds_projected_signal();
  return m_ds_projected_signal;
}
template <typename Config>
ndarray<const int32_t, 1> DataV1_v0<Config>::projected_sideband() const {
  if (m_ds_projected_sideband.empty()) read_ds_projected_sideband();
  return m_ds_projected_sideband;
}
template <typename Config>
void DataV1_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<TimeTool::ns_DataV1_v0::dataset_data>(m_group, "data", m_idx);
}
template <typename Config>
void DataV1_v0<Config>::read_ds_projected_signal() const {
  if (not m_group.hasChild("projected_signal")) {
    m_ds_projected_signal = ndarray<int32_t, 1>();
    return;
  }
  m_ds_projected_signal = hdf5pp::Utils::readNdarray<int32_t, 1>(m_group, "projected_signal", m_idx);
}
template <typename Config>
void DataV1_v0<Config>::read_ds_projected_sideband() const {
  if (not m_group.hasChild("projected_sideband")) {
    m_ds_projected_sideband = ndarray<int32_t, 1>();
    return;
  }
  m_ds_projected_sideband = hdf5pp::Utils::readNdarray<int32_t, 1>(m_group, "projected_sideband", m_idx);
}
template class DataV1_v0<Psana::TimeTool::ConfigV1>;

void make_datasets_DataV1_v0(const Psana::TimeTool::DataV1& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = TimeTool::ns_DataV1_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.projected_signal()) PsanaArray;
    const PsanaArray& psana_array = obj.projected_signal();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<int32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "projected_signal", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
  {
    typedef __typeof__(obj.projected_sideband()) PsanaArray;
    const PsanaArray& psana_array = obj.projected_sideband();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<int32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "projected_sideband", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
}

void store_DataV1_v0(const Psana::TimeTool::DataV1* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    TimeTool::ns_DataV1_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
  if (group.hasChild("projected_signal")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "projected_signal", obj->projected_signal(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "projected_signal", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "projected_signal", obj->projected_signal());
  }
  }
  if (group.hasChild("projected_sideband")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "projected_sideband", obj->projected_sideband(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "projected_sideband", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "projected_sideband", obj->projected_sideband());
  }
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::TimeTool::DataV1> > make_DataV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::TimeTool::ConfigV1>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::DataV1> >(boost::make_shared<DataV1_v0<Psana::TimeTool::ConfigV1> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::DataV1> >(boost::shared_ptr<Psana::TimeTool::DataV1>());
  }
}

void make_datasets(const Psana::TimeTool::DataV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_DataV1_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.DataV1", version);
  }
}

void store_DataV1(const Psana::TimeTool::DataV1* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_DataV1_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.DataV1", version);
  }
}

void store(const Psana::TimeTool::DataV1& obj, hdf5pp::Group group, int version) 
{
  store_DataV1(&obj, group, 0, version, false);
}

void store_at(const Psana::TimeTool::DataV1* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV1(obj, group, index, version, true);
}


hdf5pp::Type ns_DataV2_v0_dataset_data_stored_type()
{
  typedef ns_DataV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint32_t> _enum_type_event_type = hdf5pp::EnumType<uint32_t>::enumType();
  _enum_type_event_type.insert("Dark", Psana::TimeTool::DataV2::Dark);
  _enum_type_event_type.insert("Reference", Psana::TimeTool::DataV2::Reference);
  _enum_type_event_type.insert("Signal", Psana::TimeTool::DataV2::Signal);
  type.insert("event_type", offsetof(DsType, event_type), _enum_type_event_type);
  type.insert("amplitude", offsetof(DsType, amplitude), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_pixel", offsetof(DsType, position_pixel), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_time", offsetof(DsType, position_time), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("position_fwhm", offsetof(DsType, position_fwhm), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("ref_amplitude", offsetof(DsType, ref_amplitude), hdf5pp::TypeTraits<double>::stored_type());
  type.insert("nxt_amplitude", offsetof(DsType, nxt_amplitude), hdf5pp::TypeTraits<double>::stored_type());
  return type;
}

hdf5pp::Type ns_DataV2_v0::dataset_data::stored_type()
{
  static hdf5pp::Type type = ns_DataV2_v0_dataset_data_stored_type();
  return type;
}

hdf5pp::Type ns_DataV2_v0_dataset_data_native_type()
{
  typedef ns_DataV2_v0::dataset_data DsType;
  hdf5pp::CompoundType type = hdf5pp::CompoundType::compoundType<DsType>();
  hdf5pp::EnumType<uint32_t> _enum_type_event_type = hdf5pp::EnumType<uint32_t>::enumType();
  _enum_type_event_type.insert("Dark", Psana::TimeTool::DataV2::Dark);
  _enum_type_event_type.insert("Reference", Psana::TimeTool::DataV2::Reference);
  _enum_type_event_type.insert("Signal", Psana::TimeTool::DataV2::Signal);
  type.insert("event_type", offsetof(DsType, event_type), _enum_type_event_type);
  type.insert("amplitude", offsetof(DsType, amplitude), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_pixel", offsetof(DsType, position_pixel), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_time", offsetof(DsType, position_time), hdf5pp::TypeTraits<double>::native_type());
  type.insert("position_fwhm", offsetof(DsType, position_fwhm), hdf5pp::TypeTraits<double>::native_type());
  type.insert("ref_amplitude", offsetof(DsType, ref_amplitude), hdf5pp::TypeTraits<double>::native_type());
  type.insert("nxt_amplitude", offsetof(DsType, nxt_amplitude), hdf5pp::TypeTraits<double>::native_type());
  return type;
}

hdf5pp::Type ns_DataV2_v0::dataset_data::native_type()
{
  static hdf5pp::Type type = ns_DataV2_v0_dataset_data_native_type();
  return type;
}

ns_DataV2_v0::dataset_data::dataset_data()
{
}

ns_DataV2_v0::dataset_data::dataset_data(const Psana::TimeTool::DataV2& psanaobj)
  : event_type(psanaobj.event_type())
  , amplitude(psanaobj.amplitude())
  , position_pixel(psanaobj.position_pixel())
  , position_time(psanaobj.position_time())
  , position_fwhm(psanaobj.position_fwhm())
  , ref_amplitude(psanaobj.ref_amplitude())
  , nxt_amplitude(psanaobj.nxt_amplitude())
{
}

ns_DataV2_v0::dataset_data::~dataset_data()
{
}
template <typename Config>
Psana::TimeTool::DataV2::EventType DataV2_v0<Config>::event_type() const {
  if (not m_ds_data) read_ds_data();
  return Psana::TimeTool::DataV2::EventType(m_ds_data->event_type);
}
template <typename Config>
double DataV2_v0<Config>::amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->amplitude);
}
template <typename Config>
double DataV2_v0<Config>::position_pixel() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_pixel);
}
template <typename Config>
double DataV2_v0<Config>::position_time() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_time);
}
template <typename Config>
double DataV2_v0<Config>::position_fwhm() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->position_fwhm);
}
template <typename Config>
double DataV2_v0<Config>::ref_amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->ref_amplitude);
}
template <typename Config>
double DataV2_v0<Config>::nxt_amplitude() const {
  if (not m_ds_data) read_ds_data();
  return double(m_ds_data->nxt_amplitude);
}
template <typename Config>
ndarray<const int32_t, 1> DataV2_v0<Config>::projected_signal() const {
  if (m_ds_projected_signal.empty()) read_ds_projected_signal();
  return m_ds_projected_signal;
}
template <typename Config>
ndarray<const int32_t, 1> DataV2_v0<Config>::projected_sideband() const {
  if (m_ds_projected_sideband.empty()) read_ds_projected_sideband();
  return m_ds_projected_sideband;
}
template <typename Config>
ndarray<const int32_t, 1> DataV2_v0<Config>::projected_reference() const {
  if (m_ds_projected_reference.empty()) read_ds_projected_reference();
  return m_ds_projected_reference;
}
template <typename Config>
void DataV2_v0<Config>::read_ds_data() const {
  m_ds_data = hdf5pp::Utils::readGroup<TimeTool::ns_DataV2_v0::dataset_data>(m_group, "data", m_idx);
}
template <typename Config>
void DataV2_v0<Config>::read_ds_projected_signal() const {
  if (not m_group.hasChild("projected_signal")) {
    m_ds_projected_signal = ndarray<int32_t, 1>();
    return;
  }
  m_ds_projected_signal = hdf5pp::Utils::readNdarray<int32_t, 1>(m_group, "projected_signal", m_idx);
}
template <typename Config>
void DataV2_v0<Config>::read_ds_projected_sideband() const {
  if (not m_group.hasChild("projected_sideband")) {
    m_ds_projected_sideband = ndarray<int32_t, 1>();
    return;
  }
  m_ds_projected_sideband = hdf5pp::Utils::readNdarray<int32_t, 1>(m_group, "projected_sideband", m_idx);
}
template <typename Config>
void DataV2_v0<Config>::read_ds_projected_reference() const {
  if (not m_group.hasChild("projected_reference")) {
    m_ds_projected_reference = ndarray<int32_t, 1>();
    return;
  }
  m_ds_projected_reference = hdf5pp::Utils::readNdarray<int32_t, 1>(m_group, "projected_reference", m_idx);
}
template class DataV2_v0<Psana::TimeTool::ConfigV2>;

void make_datasets_DataV2_v0(const Psana::TimeTool::DataV2& obj, 
      hdf5pp::Group group, const ChunkPolicy& chunkPolicy, int deflate, bool shuffle)
{
  {
    hdf5pp::Type dstype = TimeTool::ns_DataV2_v0::dataset_data::stored_type();
    hdf5pp::Utils::createDataset(group, "data", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
  }
  {
    typedef __typeof__(obj.projected_signal()) PsanaArray;
    const PsanaArray& psana_array = obj.projected_signal();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<int32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "projected_signal", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
  {
    typedef __typeof__(obj.projected_sideband()) PsanaArray;
    const PsanaArray& psana_array = obj.projected_sideband();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<int32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "projected_sideband", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
  {
    typedef __typeof__(obj.projected_reference()) PsanaArray;
    const PsanaArray& psana_array = obj.projected_reference();
    if (psana_array.size() > 0) {
    hdf5pp::Type dstype = hdf5pp::ArrayType::arrayType(hdf5pp::TypeTraits<int32_t>::stored_type(), psana_array.shape()[0]);
    hdf5pp::Utils::createDataset(group, "projected_reference", dstype, chunkPolicy.chunkSize(dstype), chunkPolicy.chunkCacheSize(dstype), deflate, shuffle);    
    }
  }
}

void store_DataV2_v0(const Psana::TimeTool::DataV2* obj, hdf5pp::Group group, long index, bool append)
{
  if (obj) {
    TimeTool::ns_DataV2_v0::dataset_data ds_data(*obj);
    if (append) {
      hdf5pp::Utils::storeAt(group, "data", ds_data, index);
    } else {
      hdf5pp::Utils::storeScalar(group, "data", ds_data);
    }
  } else if (append) {
    hdf5pp::Utils::resizeDataset(group, "data", index < 0 ? index : index + 1);
  }
  if (group.hasChild("projected_signal")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "projected_signal", obj->projected_signal(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "projected_signal", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "projected_signal", obj->projected_signal());
  }
  }
  if (group.hasChild("projected_sideband")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "projected_sideband", obj->projected_sideband(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "projected_sideband", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "projected_sideband", obj->projected_sideband());
  }
  }
  if (group.hasChild("projected_reference")) {
  if (append) {
    if (obj) {
      hdf5pp::Utils::storeNDArrayAt(group, "projected_reference", obj->projected_reference(), index);
    } else {
      hdf5pp::Utils::resizeDataset(group, "projected_reference", index < 0 ? index : index + 1);
    }
  } else {
    hdf5pp::Utils::storeNDArray(group, "projected_reference", obj->projected_reference());
  }
  }
}

boost::shared_ptr<PSEvt::Proxy<Psana::TimeTool::DataV2> > make_DataV2(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::TimeTool::ConfigV2>& cfg) {
  switch (version) {
  case 0:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::DataV2> >(boost::make_shared<DataV2_v0<Psana::TimeTool::ConfigV2> >(group, idx, cfg));
  default:
    return boost::make_shared<PSEvt::DataProxy<Psana::TimeTool::DataV2> >(boost::shared_ptr<Psana::TimeTool::DataV2>());
  }
}

void make_datasets(const Psana::TimeTool::DataV2& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version)
{
  if (version < 0) version = 0;
  group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    make_datasets_DataV2_v0(obj, group, chunkPolicy, deflate, shuffle);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.DataV2", version);
  }
}

void store_DataV2(const Psana::TimeTool::DataV2* obj, hdf5pp::Group group, long index, int version, bool append)
{
  if (version < 0) version = 0;
  if (not append) group.createAttr<uint32_t>("_schemaVersion").store(version);
  switch (version) {
  case 0:
    store_DataV2_v0(obj, group, index, append);
    break;
  default:
    throw ExceptionSchemaVersion(ERR_LOC, "TimeTool.DataV2", version);
  }
}

void store(const Psana::TimeTool::DataV2& obj, hdf5pp::Group group, int version) 
{
  store_DataV2(&obj, group, 0, version, false);
}

void store_at(const Psana::TimeTool::DataV2* obj, hdf5pp::Group group, long index, int version)
{
  store_DataV2(obj, group, index, version, true);
}

} // namespace TimeTool
} // namespace psddl_hdf2psana
