#ifndef PSDDL_HDF2PSANA_EPIXSAMPLER_DDL_H
#define PSDDL_HDF2PSANA_EPIXSAMPLER_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/epixsampler.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
#include "psddl_hdf2psana/ChunkPolicy.h"
namespace psddl_hdf2psana {
namespace EpixSampler {

namespace ns_ConfigV1_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  dataset_config(const Psana::EpixSampler::ConfigV1& psanaobj);
  ~dataset_config();

  uint32_t version;
  uint32_t runTrigDelay;
  uint32_t daqTrigDelay;
  uint32_t daqSetting;
  uint32_t adcClkHalfT;
  uint32_t adcPipelineDelay;
  uint32_t digitalCardId0;
  uint32_t digitalCardId1;
  uint32_t analogCardId0;
  uint32_t analogCardId1;
  uint32_t numberOfChannels;
  uint32_t samplesPerChannel;
  uint32_t baseClockFrequency;
  uint8_t testPatternEnable;


};
}


class ConfigV1_v0 : public Psana::EpixSampler::ConfigV1 {
public:
  typedef Psana::EpixSampler::ConfigV1 PsanaType;
  ConfigV1_v0() {}
  ConfigV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  ConfigV1_v0(const boost::shared_ptr<EpixSampler::ns_ConfigV1_v0::dataset_config>& ds) : m_ds_config(ds) {}
  virtual ~ConfigV1_v0() {}
  virtual uint32_t version() const;
  virtual uint32_t runTrigDelay() const;
  virtual uint32_t daqTrigDelay() const;
  virtual uint32_t daqSetting() const;
  virtual uint32_t adcClkHalfT() const;
  virtual uint32_t adcPipelineDelay() const;
  virtual uint32_t digitalCardId0() const;
  virtual uint32_t digitalCardId1() const;
  virtual uint32_t analogCardId0() const;
  virtual uint32_t analogCardId1() const;
  virtual uint32_t numberOfChannels() const;
  virtual uint32_t samplesPerChannel() const;
  virtual uint32_t baseClockFrequency() const;
  virtual uint8_t testPatternEnable() const;
    double sampleInterval_sec() const;

private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<EpixSampler::ns_ConfigV1_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::EpixSampler::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::EpixSampler::ConfigV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::EpixSampler::ConfigV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::EpixSampler::ConfigV1* obj, hdf5pp::Group group, long index = -1, int version = -1);


namespace ns_ElementV1_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  dataset_data(const Psana::EpixSampler::ElementV1& psanaobj);
  ~dataset_data();

  uint8_t vc;
  uint8_t lane;
  uint16_t acqCount;
  uint32_t frameNumber;
  uint32_t ticks;
  uint32_t fiducials;
  uint32_t lastWord;


};
}


template <typename Config>
class ElementV1_v0 : public Psana::EpixSampler::ElementV1 {
public:
  typedef Psana::EpixSampler::ElementV1 PsanaType;
  ElementV1_v0() {}
  ElementV1_v0(hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Config>& cfg)
    : m_group(group), m_idx(idx), m_cfg(cfg) {}
  virtual ~ElementV1_v0() {}
  virtual uint8_t vc() const;
  virtual uint8_t lane() const;
  virtual uint16_t acqCount() const;
  virtual uint32_t frameNumber() const;
  virtual uint32_t ticks() const;
  virtual uint32_t fiducials() const;
  virtual ndarray<const uint16_t, 2> frame() const;
  virtual ndarray<const uint16_t, 1> temperatures() const;
  virtual uint32_t lastWord() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  boost::shared_ptr<Config> m_cfg;
  mutable boost::shared_ptr<EpixSampler::ns_ElementV1_v0::dataset_data> m_ds_data;
  void read_ds_data() const;
  mutable ndarray<const uint16_t, 1> m_ds_temperatures;
  void read_ds_temperatures() const;
  mutable ndarray<const uint16_t, 2> m_ds_frame;
  void read_ds_frame() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::EpixSampler::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::EpixSampler::ConfigV1>& cfg);

/// Store object as a single instance (scalar dataset) inside specified group.
void store(const Psana::EpixSampler::ElementV1& obj, hdf5pp::Group group, int version = -1);
/// Create container (rank=1) datasets for storing objects of specified type.
void make_datasets(const Psana::EpixSampler::ElementV1& obj, hdf5pp::Group group, const ChunkPolicy& chunkPolicy,
                   int deflate, bool shuffle, int version = -1);
/// Add one more object to the containers created by previous method at the specified index,
/// negative index means append to the end of dataset. If pointer to object is zero then
/// datsets are extended with zero-filled of default-initialized data.
void store_at(const Psana::EpixSampler::ElementV1* obj, hdf5pp::Group group, long index = -1, int version = -1);

} // namespace EpixSampler
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_EPIXSAMPLER_DDL_H
