#ifndef PSDDL_HDF2PSANA_IMP_DDL_H
#define PSDDL_HDF2PSANA_IMP_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "psddl_psana/imp.ddl.h"
#include "hdf5pp/Group.h"
#include "hdf5pp/Type.h"
#include "PSEvt/Proxy.h"
namespace psddl_hdf2psana {
namespace Imp {

namespace ns_ConfigV1_v0 {
struct dataset_config {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_config();
  ~dataset_config();

  uint32_t range; 
  uint32_t calRange; 
  uint32_t reset; 
  uint32_t biasData; 
  uint32_t calData; 
  uint32_t biasDacData; 
  uint32_t calStrobe; 
  uint32_t numberOfSamples; 
  uint32_t trigDelay; 
  uint32_t adcDelay; 

};
}


class ConfigV1_v0 : public Psana::Imp::ConfigV1 {
public:
  typedef Psana::Imp::ConfigV1 PsanaType;
  ConfigV1_v0() {}
  ConfigV1_v0(hdf5pp::Group group, hsize_t idx)
    : m_group(group), m_idx(idx) {}
  ConfigV1_v0(const boost::shared_ptr<Imp::ns_ConfigV1_v0::dataset_config>& ds) : m_ds_config(ds) {}
  virtual ~ConfigV1_v0() {}
  virtual uint32_t range() const;
  virtual uint32_t calRange() const;
  virtual uint32_t reset() const;
  virtual uint32_t biasData() const;
  virtual uint32_t calData() const;
  virtual uint32_t biasDacData() const;
  virtual uint32_t calStrobe() const;
  virtual uint32_t numberOfSamples() const;
  virtual uint32_t trigDelay() const;
  virtual uint32_t adcDelay() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  mutable boost::shared_ptr<Imp::ns_ConfigV1_v0::dataset_config> m_ds_config;
  void read_ds_config() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::Imp::ConfigV1> > make_ConfigV1(int version, hdf5pp::Group group, hsize_t idx);

namespace ns_Sample_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  ~dataset_data();

  uint16_t channels[4]; 

  operator Psana::Imp::Sample() const { return Psana::Imp::Sample(channels); }
};
}

namespace ns_LaneStatus_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  ~dataset_data();

  uint8_t linkErrCount; 
  uint8_t linkDownCount; 
  uint8_t cellErrCount; 
  uint8_t rxCount; 
  uint8_t locLinked; 
  uint8_t remLinked; 
  uint16_t zeros; 
  uint8_t powersOkay; 

  operator Psana::Imp::LaneStatus() const { return Psana::Imp::LaneStatus(linkErrCount, linkDownCount, cellErrCount, rxCount, locLinked, remLinked, zeros, powersOkay); }
};
}

namespace ns_ElementV1_v0 {
struct dataset_data {
  static hdf5pp::Type native_type();
  static hdf5pp::Type stored_type();

  dataset_data();
  ~dataset_data();

  uint8_t vc; 
  uint8_t lane; 
  uint32_t frameNumber; 
  uint32_t range; 
  Imp::ns_LaneStatus_v0::dataset_data laneStatus; 

};
}


template <typename Config>
class ElementV1_v0 : public Psana::Imp::ElementV1 {
public:
  typedef Psana::Imp::ElementV1 PsanaType;
  ElementV1_v0() {}
  ElementV1_v0(hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Config>& cfg)
    : m_group(group), m_idx(idx), m_cfg(cfg) {}
  virtual ~ElementV1_v0() {}
  virtual uint8_t vc() const;
  virtual uint8_t lane() const;
  virtual uint32_t frameNumber() const;
  virtual uint32_t range() const;
  virtual const Psana::Imp::LaneStatus& laneStatus() const;
  virtual ndarray<const Psana::Imp::Sample, 1> samples() const;
private:
  mutable hdf5pp::Group m_group;
  hsize_t m_idx;
  boost::shared_ptr<Config> m_cfg;
  mutable boost::shared_ptr<Imp::ns_ElementV1_v0::dataset_data> m_ds_data;
  void read_ds_data() const;
  mutable Psana::Imp::LaneStatus m_ds_storage_data_laneStatus;
  mutable ndarray<const Psana::Imp::Sample, 1> m_ds_samples;
  void read_ds_samples() const;
};

boost::shared_ptr<PSEvt::Proxy<Psana::Imp::ElementV1> > make_ElementV1(int version, hdf5pp::Group group, hsize_t idx, const boost::shared_ptr<Psana::Imp::ConfigV1>& cfg);
} // namespace Imp
} // namespace psddl_hdf2psana
#endif // PSDDL_HDF2PSANA_IMP_DDL_H
