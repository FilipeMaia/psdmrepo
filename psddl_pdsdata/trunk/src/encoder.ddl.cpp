
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pdsdata/encoder.ddl.h"

#include <iostream>
namespace PsddlPds {
namespace Encoder {
std::ostream& operator<<(std::ostream& str, Encoder::ConfigV1::count_mode_type enval) {
  const char* val;
  switch (enval) {
  case Encoder::ConfigV1::WRAP_FULL:
    val = "WRAP_FULL";
    break;
  case Encoder::ConfigV1::LIMIT:
    val = "LIMIT";
    break;
  case Encoder::ConfigV1::HALT:
    val = "HALT";
    break;
  case Encoder::ConfigV1::WRAP_PRESET:
    val = "WRAP_PRESET";
    break;
  case Encoder::ConfigV1::COUNT_END:
    val = "COUNT_END";
    break;
  default:
    return str << "count_mode_type(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Encoder::ConfigV1::quad_mode enval) {
  const char* val;
  switch (enval) {
  case Encoder::ConfigV1::CLOCK_DIR:
    val = "CLOCK_DIR";
    break;
  case Encoder::ConfigV1::X1:
    val = "X1";
    break;
  case Encoder::ConfigV1::X2:
    val = "X2";
    break;
  case Encoder::ConfigV1::X4:
    val = "X4";
    break;
  case Encoder::ConfigV1::QUAD_END:
    val = "QUAD_END";
    break;
  default:
    return str << "quad_mode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Encoder::ConfigV2::count_mode_type enval) {
  const char* val;
  switch (enval) {
  case Encoder::ConfigV2::WRAP_FULL:
    val = "WRAP_FULL";
    break;
  case Encoder::ConfigV2::LIMIT:
    val = "LIMIT";
    break;
  case Encoder::ConfigV2::HALT:
    val = "HALT";
    break;
  case Encoder::ConfigV2::WRAP_PRESET:
    val = "WRAP_PRESET";
    break;
  case Encoder::ConfigV2::COUNT_END:
    val = "COUNT_END";
    break;
  default:
    return str << "count_mode_type(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Encoder::ConfigV2::quad_mode enval) {
  const char* val;
  switch (enval) {
  case Encoder::ConfigV2::CLOCK_DIR:
    val = "CLOCK_DIR";
    break;
  case Encoder::ConfigV2::X1:
    val = "X1";
    break;
  case Encoder::ConfigV2::X2:
    val = "X2";
    break;
  case Encoder::ConfigV2::X4:
    val = "X4";
    break;
  case Encoder::ConfigV2::QUAD_END:
    val = "QUAD_END";
    break;
  default:
    return str << "quad_mode(" << int(enval) << ")";
  }
  return str << val;
}
int32_t
DataV1::value() const {
  return int(this->encoder_count() << 8)/256;;
}
int32_t
DataV2::value(uint32_t i) const {
  return int(this->encoder_count()[i] << 8)/256;;
}
} // namespace Encoder
} // namespace PsddlPds
