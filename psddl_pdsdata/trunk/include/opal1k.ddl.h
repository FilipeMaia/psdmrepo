#ifndef PSDDLPDS_OPAL1K_DDL_H
#define PSDDLPDS_OPAL1K_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

#include "psddl_pdsdata/camera.ddl.h"
namespace PsddlPds {
namespace Opal1k {

/** Class: ConfigV1
  
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_Opal1kConfig};
  enum {LUT_Size = 4096};
  enum {Row_Pixels = 1024};
  enum {Column_Pixels = 1024};
  enum {Output_LUT_Size = 4096};
  enum Depth {
    Eight_bit,
    Ten_bit,
    Twelve_bit,
  };
  enum Binning {
    x1,
    x2,
    x4,
    x8,
  };
  enum Mirroring {
    None,
    HFlip,
    VFlip,
    HVFlip,
  };
  uint16_t black_level() const {return uint16_t(this->_offsetAndGain & 0xffff);}
  uint16_t gain_percent() const {return uint16_t((this->_offsetAndGain>>16) & 0xffff);}
  Opal1k::ConfigV1::Depth output_resolution() const {return Depth(this->_outputOptions & 0xf);}
  Opal1k::ConfigV1::Binning vertical_binning() const {return Binning((this->_outputOptions>>4) & 0xf);}
  Opal1k::ConfigV1::Mirroring output_mirroring() const {return Mirroring((this->_outputOptions>>8) & 0xf);}
  uint8_t vertical_remapping() const {return uint8_t((this->_outputOptions>>12) & 0x1);}
  uint8_t defect_pixel_correction_enabled() const {return uint8_t((this->_outputOptions>>13) & 0x1);}
  uint8_t output_lookup_table_enabled() const {return uint8_t((this->_outputOptions>>14) & 0x1);}
  uint32_t number_of_defect_pixels() const {return _defectPixelCount;}
  const uint16_t* output_lookup_table() const {
    ptrdiff_t offset=12;
    return (const uint16_t*)(((const char*)this)+offset);
  }
  const Camera::FrameCoord& defect_pixel_coordinates(uint32_t i0) const {
    ptrdiff_t offset=12+(2*(Output_LUT_Size*this->output_lookup_table_enabled()));
    const Camera::FrameCoord* memptr = (const Camera::FrameCoord*)(((const char*)this)+offset);
    size_t memsize = memptr->_sizeof();
    return *(const Camera::FrameCoord*)((const char*)memptr + (i0)*memsize);
  }
  uint16_t output_offset() const;
  uint32_t output_resolution_bits() const;
  uint32_t _sizeof() const {return (12+(2*(Output_LUT_Size*this->output_lookup_table_enabled())))+(Camera::FrameCoord::_sizeof()*(this->_defectPixelCount));}
  std::vector<int> output_lookup_table_shape() const;
  std::vector<int> defect_pixel_coordinates_shape() const;
private:
  uint32_t	_offsetAndGain;	/* offset and gain */
  uint32_t	_outputOptions;	/* bit mask of output formatting options */
  uint32_t	_defectPixelCount;
  //uint16_t	_lookup_table[Output_LUT_Size*this->output_lookup_table_enabled()];
  //Camera::FrameCoord	_defectPixels[this->_defectPixelCount];
};
} // namespace Opal1k
} // namespace PsddlPds
#endif // PSDDLPDS_OPAL1K_DDL_H
