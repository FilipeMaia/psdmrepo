#ifndef PSDDLPDS_PNCCD_DDL_H
#define PSDDLPDS_PNCCD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

namespace PsddlPds {
namespace PNCCD {

/** Class: ConfigV1
  pnCCD configuration class ConfigV1
*/


class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_pnCCDconfig};
  uint32_t numLinks() const {return _numLinks;}
  uint32_t payloadSizePerLink() const {return _payloadSizePerLink;}
  static uint32_t _sizeof()  {return 8;}
private:
  uint32_t	_numLinks;	/* Number of links in the pnCCD. */
  uint32_t	_payloadSizePerLink;	/* Size of the payload in bytes for single link */
};

/** Class: ConfigV2
  pnCCD configuration class ConfigV2
*/


class ConfigV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_pnCCDconfig};
  uint32_t numLinks() const {return _numLinks;}
  uint32_t payloadSizePerLink() const {return _payloadSizePerLink;}
  uint32_t numChannels() const {return _numChannels;}
  uint32_t numRows() const {return _numRows;}
  uint32_t numSubmoduleChannels() const {return _numSubmoduleChannels;}
  uint32_t numSubmoduleRows() const {return _numSubmoduleRows;}
  uint32_t numSubmodules() const {return _numSubmodules;}
  uint32_t camexMagic() const {return _camexMagic;}
  const char* info() const {return &_info[0];}
  const char* timingFName() const {return &_timingFName[0];}
  static uint32_t _sizeof()  {return (32+(1*(256)))+(1*(256));}
  std::vector<int> _info_shape() const;
  std::vector<int> _timingFName_shape() const;
private:
  uint32_t	_numLinks;	/* Number of links in the pnCCD. */
  uint32_t	_payloadSizePerLink;	/* Size of the payload in bytes for single link */
  uint32_t	_numChannels;	/* Number of channels */
  uint32_t	_numRows;	/* Number of rows */
  uint32_t	_numSubmoduleChannels;	/* Number of submodule channels */
  uint32_t	_numSubmoduleRows;	/* Number of submodule rows */
  uint32_t	_numSubmodules;	/* Number of submodules */
  uint32_t	_camexMagic;	/* Magic word from CAMEX */
  char	_info[256];	/* Information data string */
  char	_timingFName[256];	/* Timing file name string */
};

/** Class: FrameV1
  pnCCD configuration class FrameV1
*/

class ConfigV1;
class ConfigV2;

class FrameV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_pnCCDframe};
  uint32_t specialWord() const {return _specialWord;}
  uint32_t frameNumber() const {return _frameNumber;}
  uint32_t timeStampHi() const {return _timeStampHi;}
  uint32_t timeStampLo() const {return _timeStampLo;}
  const uint16_t* data() const {
    ptrdiff_t offset=16;
    return (const uint16_t*)(((const char*)this)+offset);
  }
  static uint32_t _sizeof(const PNCCD::ConfigV1& cfg)  {return 16+(2*((cfg.payloadSizePerLink()-16)/2));}
  static uint32_t _sizeof(const PNCCD::ConfigV2& cfg)  {return 16+(2*((cfg.payloadSizePerLink()-16)/2));}
  std::vector<int> __data_shape(const PNCCD::ConfigV1& cfg) const;
  std::vector<int> __data_shape(const PNCCD::ConfigV2& cfg) const;
private:
  uint32_t	_specialWord;	/* Special values */
  uint32_t	_frameNumber;	/* Frame number */
  uint32_t	_timeStampHi;	/* Most significant part of timestamp */
  uint32_t	_timeStampLo;	/* Least significant part of timestamp */
  //uint16_t	__data[(cfg.payloadSizePerLink()-16)/2];	/* Frame data */
};
} // namespace PNCCD
} // namespace PsddlPds
#endif // PSDDLPDS_PNCCD_DDL_H
