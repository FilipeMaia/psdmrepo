#ifndef PSDDLPDS_FCCD_DDL_H
#define PSDDLPDS_FCCD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

namespace PsddlPds {
namespace FCCD {

/** Class: FccdConfigV1
  
*/


class FccdConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_FccdConfig};
  enum {Row_Pixels = 500};
  enum {Column_Pixels = 576};
  enum {Trimmed_Row_Pixels = 480};
  enum {Trimmed_Column_Pixels = 480};
  enum Depth {
    Sixteen_bit = 16,
  };
  enum Output_Source {
    Output_FIFO = 0,
    Output_Pattern4 = 4,
  };
  uint16_t outputMode() const {return _u16OutputMode;}
  uint32_t width() const;
  uint32_t height() const;
  uint32_t trimmedWidth() const;
  uint32_t trimmedHeight() const;
  static uint32_t _sizeof()  {return 2;}
private:
  uint16_t	_u16OutputMode;
};

/** Class: FccdConfigV2
  
*/

#pragma pack(push,4)

class FccdConfigV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_FccdConfig};
  enum {Row_Pixels = 500};
  enum {Column_Pixels = 576 * 2};
  enum {Trimmed_Row_Pixels = 480};
  enum {Trimmed_Column_Pixels = 480};
  enum {NVoltages = 17};
  enum {NWaveforms = 15};
  enum Depth {
    Eight_bit = 8,
    Sixteen_bit = 16,
  };
  enum Output_Source {
    Output_FIFO = 0,
    Test_Pattern1 = 1,
    Test_Pattern2 = 2,
    Test_Pattern3 = 3,
    Test_Pattern4 = 4,
  };
  uint16_t outputMode() const {return _outputMode;}
  uint8_t ccdEnable() const {return _ccdEnable;}
  uint8_t focusMode() const {return _focusMode;}
  uint32_t exposureTime() const {return _exposureTime;}
  const float* dacVoltages() const {return &_dacVoltage[0];}
  const uint16_t* waveforms() const {return &_waveform[0];}
  uint32_t width() const;
  uint32_t height() const;
  uint32_t trimmedWidth() const;
  uint32_t trimmedHeight() const;
  static uint32_t _sizeof()  {return (8+(4*(NVoltages)))+(2*(NWaveforms));}
  std::vector<int> dacVoltages_shape() const;
  std::vector<int> waveforms_shape() const;
private:
  uint16_t	_outputMode;
  uint8_t	_ccdEnable;
  uint8_t	_focusMode;
  uint32_t	_exposureTime;
  float	_dacVoltage[NVoltages];
  uint16_t	_waveform[NWaveforms];
};
#pragma pack(pop)
} // namespace FCCD
} // namespace PsddlPds
#endif // PSDDLPDS_FCCD_DDL_H
