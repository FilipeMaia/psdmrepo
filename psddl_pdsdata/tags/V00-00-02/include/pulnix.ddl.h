#ifndef PSDDLPDS_PULNIX_DDL_H
#define PSDDLPDS_PULNIX_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

namespace PsddlPds {
namespace Pulnix {

/** Class: TM6740ConfigV1
  
*/


class TM6740ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_TM6740Config};
  enum {Row_Pixels = 480};
  enum {Column_Pixels = 640};
  enum Depth {
    Eight_bit,
    Ten_bit,
  };
  enum Binning {
    x1,
    x2,
    x4,
  };
  enum LookupTable {
    Gamma,
    Linear,
  };
  uint16_t gain_a() const {return uint16_t(this->_gain_a_b & 0xffff);}
  uint16_t gain_b() const {return uint16_t((this->_gain_a_b>>16) & 0xffff);}
  uint16_t vref() const {return uint16_t(this->_vref_shutter & 0xffff);}
  uint16_t shutter_width() const {return uint16_t((this->_vref_shutter>>16) & 0xffff);}
  uint8_t gain_balance() const {return uint8_t(this->_control & 0x1);}
  Pulnix::TM6740ConfigV1::Depth output_resolution() const {return Depth((this->_control>>1) & 0x1);}
  Pulnix::TM6740ConfigV1::Binning horizontal_binning() const {return Binning((this->_control>>2) & 0x3);}
  Pulnix::TM6740ConfigV1::Binning vertical_binning() const {return Binning((this->_control>>4) & 0x3);}
  Pulnix::TM6740ConfigV1::LookupTable lookuptable_mode() const {return LookupTable((this->_control>>6) & 0x1);}
  uint8_t output_resolution_bits() const;
  static uint32_t _sizeof()  {return 12;}
private:
  uint32_t	_gain_a_b;
  uint32_t	_vref_shutter;
  uint32_t	_control;
};

/** Class: TM6740ConfigV2
  
*/


class TM6740ConfigV2 {
public:
  enum {Version = 2};
  enum {TypeId = Pds::TypeId::Id_TM6740Config};
  enum {Row_Pixels = 480};
  enum {Column_Pixels = 640};
  enum Depth {
    Eight_bit,
    Ten_bit,
  };
  enum Binning {
    x1,
    x2,
    x4,
  };
  enum LookupTable {
    Gamma,
    Linear,
  };
  uint16_t gain_a() const {return uint16_t(this->_gain_a_b & 0xffff);}
  uint16_t gain_b() const {return uint16_t((this->_gain_a_b>>16) & 0xffff);}
  uint16_t vref_a() const {return uint16_t(this->_vref_shutter & 0x3ff);}
  uint16_t vref_b() const {return uint16_t((this->_vref_shutter>>16) & 0x3ff);}
  uint8_t gain_balance() const {return uint8_t(this->_control & 0x1);}
  Pulnix::TM6740ConfigV2::Depth output_resolution() const {return Depth((this->_control>>1) & 0x1);}
  Pulnix::TM6740ConfigV2::Binning horizontal_binning() const {return Binning((this->_control>>2) & 0x3);}
  Pulnix::TM6740ConfigV2::Binning vertical_binning() const {return Binning((this->_control>>4) & 0x3);}
  Pulnix::TM6740ConfigV2::LookupTable lookuptable_mode() const {return LookupTable((this->_control>>6) & 0x1);}
  uint8_t output_resolution_bits() const;
  static uint32_t _sizeof()  {return 12;}
private:
  uint32_t	_gain_a_b;
  uint32_t	_vref_shutter;
  uint32_t	_control;
};
} // namespace Pulnix
} // namespace PsddlPds
#endif // PSDDLPDS_PULNIX_DDL_H
