#ifndef PSDDLPDS_BLD_DDL_H
#define PSDDLPDS_BLD_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

#include "psddl_pdsdata/ipimb.ddl.h"
#include "psddl_pdsdata/lusi.ddl.h"
namespace PsddlPds {
namespace Bld {

/** Class: BldDataFEEGasDetEnergy
  PV names: GDET:FEE1:11:ENRC, GDET:FEE1:12:ENRC, GDET:FEE1:21:ENRC, GDET:FEE1:22:ENRC
*/

#pragma pack(push,4)

class BldDataFEEGasDetEnergy {
public:
  enum {Version = 0};
  enum {TypeId = Pds::TypeId::Id_FEEGasDetEnergy};
  BldDataFEEGasDetEnergy(double arg__f_11_ENRC, double arg__f_12_ENRC, double arg__f_21_ENRC, double arg__f_22_ENRC)
    : _f_11_ENRC(arg__f_11_ENRC), _f_12_ENRC(arg__f_12_ENRC), _f_21_ENRC(arg__f_21_ENRC), _f_22_ENRC(arg__f_22_ENRC)
  {
  }
  double f_11_ENRC() const {return _f_11_ENRC;}
  double f_12_ENRC() const {return _f_12_ENRC;}
  double f_21_ENRC() const {return _f_21_ENRC;}
  double f_22_ENRC() const {return _f_22_ENRC;}
  static uint32_t _sizeof()  {return 32;}
private:
  double	_f_11_ENRC;	/* in mJ */
  double	_f_12_ENRC;	/* in mJ */
  double	_f_21_ENRC;	/* in mJ */
  double	_f_22_ENRC;	/* in mJ */
};
#pragma pack(pop)

/** Class: BldDataEBeamV0
  
*/

#pragma pack(push,4)

class BldDataEBeamV0 {
public:
  enum {Version = 0};
  enum {TypeId = Pds::TypeId::Id_EBeam};
  BldDataEBeamV0(uint32_t arg__uDamageMask, double arg__fEbeamCharge, double arg__fEbeamL3Energy, double arg__fEbeamLTUPosX, double arg__fEbeamLTUPosY, double arg__fEbeamLTUAngX, double arg__fEbeamLTUAngY)
    : _uDamageMask(arg__uDamageMask), _fEbeamCharge(arg__fEbeamCharge), _fEbeamL3Energy(arg__fEbeamL3Energy), _fEbeamLTUPosX(arg__fEbeamLTUPosX), _fEbeamLTUPosY(arg__fEbeamLTUPosY), _fEbeamLTUAngX(arg__fEbeamLTUAngX), _fEbeamLTUAngY(arg__fEbeamLTUAngY)
  {
  }
  uint32_t damageMask() const {return _uDamageMask;}
  double ebeamCharge() const {return _fEbeamCharge;}
  double ebeamL3Energy() const {return _fEbeamL3Energy;}
  double ebeamLTUPosX() const {return _fEbeamLTUPosX;}
  double ebeamLTUPosY() const {return _fEbeamLTUPosY;}
  double ebeamLTUAngX() const {return _fEbeamLTUAngX;}
  double ebeamLTUAngY() const {return _fEbeamLTUAngY;}
  static uint32_t _sizeof()  {return 52;}
private:
  uint32_t	_uDamageMask;
  double	_fEbeamCharge;	/* in nC */
  double	_fEbeamL3Energy;	/* in MeV */
  double	_fEbeamLTUPosX;	/* in mm */
  double	_fEbeamLTUPosY;	/* in mm */
  double	_fEbeamLTUAngX;	/* in mrad */
  double	_fEbeamLTUAngY;	/* in mrad */
};
#pragma pack(pop)

/** Class: BldDataEBeam
  
*/

#pragma pack(push,4)

class BldDataEBeam {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_EBeam};
  BldDataEBeam(uint32_t arg__uDamageMask, double arg__fEbeamCharge, double arg__fEbeamL3Energy, double arg__fEbeamLTUPosX, double arg__fEbeamLTUPosY, double arg__fEbeamLTUAngX, double arg__fEbeamLTUAngY, double arg__fEbeamPkCurrBC2)
    : _uDamageMask(arg__uDamageMask), _fEbeamCharge(arg__fEbeamCharge), _fEbeamL3Energy(arg__fEbeamL3Energy), _fEbeamLTUPosX(arg__fEbeamLTUPosX), _fEbeamLTUPosY(arg__fEbeamLTUPosY), _fEbeamLTUAngX(arg__fEbeamLTUAngX), _fEbeamLTUAngY(arg__fEbeamLTUAngY), _fEbeamPkCurrBC2(arg__fEbeamPkCurrBC2)
  {
  }
  uint32_t damageMask() const {return _uDamageMask;}
  double ebeamCharge() const {return _fEbeamCharge;}
  double ebeamL3Energy() const {return _fEbeamL3Energy;}
  double ebeamLTUPosX() const {return _fEbeamLTUPosX;}
  double ebeamLTUPosY() const {return _fEbeamLTUPosY;}
  double ebeamLTUAngX() const {return _fEbeamLTUAngX;}
  double ebeamLTUAngY() const {return _fEbeamLTUAngY;}
  double ebeamPkCurrBC2() const {return _fEbeamPkCurrBC2;}
  static uint32_t _sizeof()  {return 60;}
private:
  uint32_t	_uDamageMask;
  double	_fEbeamCharge;	/* in nC */
  double	_fEbeamL3Energy;	/* in MeV */
  double	_fEbeamLTUPosX;	/* in mm */
  double	_fEbeamLTUPosY;	/* in mm */
  double	_fEbeamLTUAngX;	/* in mrad */
  double	_fEbeamLTUAngY;	/* in mrad */
  double	_fEbeamPkCurrBC2;	/* in Amps */
};
#pragma pack(pop)

/** Class: BldDataPhaseCavity
  PV names: UND:R02:IOC:16:BAT:FitTime1, UND:R02:IOC:16:BAT:FitTime2, 
                UND:R02:IOC:16:BAT:Charge1,  UND:R02:IOC:16:BAT:Charge2
*/

#pragma pack(push,4)

class BldDataPhaseCavity {
public:
  enum {Version = 0};
  enum {TypeId = Pds::TypeId::Id_PhaseCavity};
  BldDataPhaseCavity(double arg__fFitTime1, double arg__fFitTime2, double arg__fCharge1, double arg__fCharge2)
    : _fFitTime1(arg__fFitTime1), _fFitTime2(arg__fFitTime2), _fCharge1(arg__fCharge1), _fCharge2(arg__fCharge2)
  {
  }
  double fitTime1() const {return _fFitTime1;}
  double fitTime2() const {return _fFitTime2;}
  double charge1() const {return _fCharge1;}
  double charge2() const {return _fCharge2;}
  static uint32_t _sizeof()  {return 32;}
private:
  double	_fFitTime1;	/* in pico-seconds */
  double	_fFitTime2;	/* in pico-seconds */
  double	_fCharge1;	/* in pico-columbs */
  double	_fCharge2;	/* in pico-columbs */
};
#pragma pack(pop)

/** Class: BldDataIpimb
  
*/

#pragma pack(push,4)

class BldDataIpimb {
public:
  enum {Version = 0};
  enum {TypeId = Pds::TypeId::Id_SharedIpimb};
  const Ipimb::DataV1& ipimbData() const {return _ipimbData;}
  const Ipimb::ConfigV1& ipimbConfig() const {return _ipimbConfig;}
  const Lusi::IpmFexV1& ipmFexData() const {return _ipmFexData;}
  static uint32_t _sizeof()  {return ((0+(Ipimb::DataV1::_sizeof()))+(Ipimb::ConfigV1::_sizeof()))+(Lusi::IpmFexV1::_sizeof());}
private:
  Ipimb::DataV1	_ipimbData;
  Ipimb::ConfigV1	_ipimbConfig;
  Lusi::IpmFexV1	_ipmFexData;
};
#pragma pack(pop)
} // namespace Bld
} // namespace PsddlPds
#endif // PSDDLPDS_BLD_DDL_H
