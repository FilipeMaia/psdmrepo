
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pdsdata/cspad.ddl.h"

namespace PsddlPds {
namespace CsPad {
std::vector<int> CsPadDigitalPotsCfg::pots_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(PotsPerQuad);
  return shape;
}

std::vector<int> CsPadGainMapCfg::gainMap_shape() const
{
  std::vector<int> shape;
  shape.reserve(2);
  shape.push_back(ColumnsPerASIC);
  shape.push_back(MaxRowsPerASIC);
  return shape;
}

std::vector<int> ConfigV1QuadReg::shiftSelect_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(TwoByTwosPerQuad);
  return shape;
}

std::vector<int> ConfigV1QuadReg::edgeSelect_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(TwoByTwosPerQuad);
  return shape;
}

uint32_t
ConfigV1::numAsicsRead() const {
  return (this->_AsicMask & 0xf)==1 ? 4 : 16;
}
uint32_t
ConfigV1::numQuads() const {
  return __builtin_popcount(this->_quadMask);
}
uint32_t
ConfigV1::numSect() const {
  return this->numAsicsRead()/2;
}
std::vector<int> ConfigV1::quads_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MaxQuadsPerSensor);
  return shape;
}

uint32_t
ConfigV2::numAsicsRead() const {
  return (this->_AsicMask & 0xf)==1 ? 4 : 16;
}
uint32_t
ConfigV2::roiMask(uint32_t iq) const {
  return (this->_roiMask >> (8*iq)) & 0xff;
}
uint32_t
ConfigV2::numAsicsStored(uint32_t iq) const {
  return __builtin_popcount(this->roiMask(iq))*2;
}
uint32_t
ConfigV2::numQuads() const {
  return __builtin_popcount(this->_quadMask);
}
uint32_t
ConfigV2::numSect() const {
  return __builtin_popcount(this->_roiMask);
}
std::vector<int> ConfigV2::quads_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(MaxQuadsPerSensor);
  return shape;
}

std::vector<int> ElementV1::sb_temp_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(Nsbtemp);
  return shape;
}

std::vector<int> ElementV1::data_shape(const CsPad::ConfigV1& cfg) const
{
  std::vector<int> shape;
  shape.reserve(3);
  shape.push_back(cfg.numAsicsRead()/2);
  shape.push_back( ColumnsPerASIC);
  shape.push_back( MaxRowsPerASIC*2);
  return shape;
}

std::vector<int> ElementV1::data_shape(const CsPad::ConfigV2& cfg) const
{
  std::vector<int> shape;
  shape.reserve(3);
  shape.push_back(cfg.numAsicsRead()/2);
  shape.push_back( ColumnsPerASIC);
  shape.push_back( MaxRowsPerASIC*2);
  return shape;
}

std::vector<int> ElementV1::_extra_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(2);
  return shape;
}

std::vector<int> DataV1::quads_shape(const CsPad::ConfigV1& cfg) const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(cfg.numQuads());
  return shape;
}

std::vector<int> DataV1::quads_shape(const CsPad::ConfigV2& cfg) const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(cfg.numQuads());
  return shape;
}

std::vector<int> ElementV2::sb_temp_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(Nsbtemp);
  return shape;
}

std::vector<int> ElementV2::data_shape(const CsPad::ConfigV2& cfg) const
{
  std::vector<int> shape;
  shape.reserve(3);
  shape.push_back(cfg.numAsicsStored(this->quad())/2);
  shape.push_back( ColumnsPerASIC);
  shape.push_back( MaxRowsPerASIC*2);
  return shape;
}

std::vector<int> ElementV2::_extra_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(2);
  return shape;
}

std::vector<int> DataV2::quads_shape(const CsPad::ConfigV2& cfg) const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(cfg.numQuads());
  return shape;
}

} // namespace CsPad
} // namespace PsddlPds
