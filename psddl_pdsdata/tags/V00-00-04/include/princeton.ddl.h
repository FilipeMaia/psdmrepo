#ifndef PSDDLPDS_PRINCETON_DDL_H
#define PSDDLPDS_PRINCETON_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/xtc/TypeId.hh"

#include <vector>

#include <cstddef>

namespace PsddlPds {
namespace Princeton {

/** Class: ConfigV1
  
*/

#pragma pack(push,4)

class ConfigV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_PrincetonConfig};
  uint32_t width() const {return _uWidth;}
  uint32_t height() const {return _uHeight;}
  uint32_t orgX() const {return _uOrgX;}
  uint32_t orgY() const {return _uOrgY;}
  uint32_t binX() const {return _uBinX;}
  uint32_t binY() const {return _uBinY;}
  float exposureTime() const {return _f32ExposureTime;}
  float coolingTemp() const {return _f32CoolingTemp;}
  uint32_t readoutSpeedIndex() const {return _u32ReadoutSpeedIndex;}
  uint16_t readoutEventCode() const {return _u16ReadoutEventCode;}
  uint16_t delayMode() const {return _u16DelayMode;}
  uint32_t frameSize() const;
  uint32_t numPixels() const;
  static uint32_t _sizeof()  {return 40;}
private:
  uint32_t	_uWidth;
  uint32_t	_uHeight;
  uint32_t	_uOrgX;
  uint32_t	_uOrgY;
  uint32_t	_uBinX;
  uint32_t	_uBinY;
  float	_f32ExposureTime;
  float	_f32CoolingTemp;
  uint32_t	_u32ReadoutSpeedIndex;
  uint16_t	_u16ReadoutEventCode;
  uint16_t	_u16DelayMode;
};
#pragma pack(pop)

/** Class: FrameV1
  
*/

class ConfigV1;
#pragma pack(push,4)

class FrameV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_PrincetonFrame};
  uint32_t shotIdStart() const {return _iShotIdStart;}
  float readoutTime() const {return _fReadoutTime;}
  const uint16_t* data() const {
    ptrdiff_t offset=8;
    return (const uint16_t*)(((const char*)this)+offset);
  }
  static uint32_t _sizeof(const Princeton::ConfigV1& cfg)  {return 8+(2*(cfg.numPixels()));}
  std::vector<int> data_shape(const Princeton::ConfigV1& cfg) const;
private:
  uint32_t	_iShotIdStart;
  float	_fReadoutTime;
  //uint16_t	_data[cfg.numPixels()];
};
#pragma pack(pop)

/** Class: InfoV1
  
*/


class InfoV1 {
public:
  enum {Version = 1};
  enum {TypeId = Pds::TypeId::Id_PrincetonInfo};
  InfoV1(float arg__fTemperature)
    : _fTemperature(arg__fTemperature)
  {
  }
  float temperature() const {return _fTemperature;}
  static uint32_t _sizeof()  {return 4;}
private:
  float	_fTemperature;
};
} // namespace Princeton
} // namespace PsddlPds
#endif // PSDDLPDS_PRINCETON_DDL_H
