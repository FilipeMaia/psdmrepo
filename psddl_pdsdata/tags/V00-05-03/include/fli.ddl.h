#ifndef PSDDLPDS_FLI_DDL_H
#define PSDDLPDS_FLI_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstddef>
#include "pdsdata/xtc/TypeId.hh"
#include "ndarray/ndarray.h"
namespace PsddlPds {
namespace Fli {

/** @class ConfigV1

  
*/

#pragma pack(push,4)

class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_FliConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  uint32_t width() const { return _uWidth; }
  uint32_t height() const { return _uHeight; }
  uint32_t orgX() const { return _uOrgX; }
  uint32_t orgY() const { return _uOrgY; }
  uint32_t binX() const { return _uBinX; }
  uint32_t binY() const { return _uBinY; }
  float exposureTime() const { return _f32ExposureTime; }
  float coolingTemp() const { return _f32CoolingTemp; }
  uint8_t gainIndex() const { return _u8GainIndex; }
  uint8_t readoutSpeedIndex() const { return _u8ReadoutSpeedIndex; }
  uint16_t exposureEventCode() const { return _u16ExposureEventCode; }
  uint32_t numDelayShots() const { return _u32NumDelayShots; }
  /** Total size in bytes of the Frame object, including image and frame header. */
  uint32_t frameSize() const;
  /** calculate frame X size in pixels based on the current ROI and binning settings */
  uint32_t numPixelsX() const { return (this->width() + this->binX() - 1) / this->binX(); }
  /** calculate frame Y size in pixels based on the current ROI and binning settings */
  uint32_t numPixelsY() const { return (this->height() + this->binY() - 1) / this->binY(); }
  /** calculate total frame size in pixels based on the current ROI and binning settings */
  uint32_t numPixels() const { return ((this->width() + this->binX() - 1)/ this->binX())*((this->height() + this->binY() - 1)/ this->binY()); }
  static uint32_t _sizeof() { return 40; }
private:
  uint32_t	_uWidth;
  uint32_t	_uHeight;
  uint32_t	_uOrgX;
  uint32_t	_uOrgY;
  uint32_t	_uBinX;
  uint32_t	_uBinY;
  float	_f32ExposureTime;
  float	_f32CoolingTemp;
  uint8_t	_u8GainIndex;
  uint8_t	_u8ReadoutSpeedIndex;
  uint16_t	_u16ExposureEventCode;
  uint32_t	_u32NumDelayShots;
};
#pragma pack(pop)

/** @class FrameV1

  
*/

class ConfigV1;
#pragma pack(push,4)

class FrameV1 {
public:
  enum { TypeId = Pds::TypeId::Id_FliFrame /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  uint32_t shotIdStart() const { return _iShotIdStart; }
  float readoutTime() const { return _fReadoutTime; }
  float temperature() const { return _fTemperature; }
  /**     Note: this overloaded method accepts shared pointer argument which must point to an object containing
    this instance, the returned ndarray object can be used even after this instance disappears. */
  template <typename T>
  ndarray<const uint16_t, 2> data(const Fli::ConfigV1& cfg, const boost::shared_ptr<T>& owner) const { 
    ptrdiff_t offset=12;
    const uint16_t* data = (const uint16_t*)(((char*)this)+offset);
    return make_ndarray(boost::shared_ptr<const uint16_t>(owner, data), cfg.numPixelsY(), cfg.numPixelsX());
  }
  /**     Note: this method returns ndarray instance which does not control lifetime
    of the data, do not use returned ndarray after this instance disappears. */
  ndarray<const uint16_t, 2> data(const Fli::ConfigV1& cfg) const { ptrdiff_t offset=12;
  const uint16_t* data = (const uint16_t*)(((char*)this)+offset);
  return make_ndarray(data, cfg.numPixelsY(), cfg.numPixelsX()); }
  static uint32_t _sizeof(const Fli::ConfigV1& cfg) { return ((((12+(2*(cfg.numPixelsY())*(cfg.numPixelsX())))+4)-1)/4)*4; }
private:
  uint32_t	_iShotIdStart;
  float	_fReadoutTime;
  float	_fTemperature;
  //uint16_t	_data[cfg.numPixelsY()][cfg.numPixelsX()];
};
#pragma pack(pop)
} // namespace Fli
} // namespace PsddlPds
#endif // PSDDLPDS_FLI_DDL_H
