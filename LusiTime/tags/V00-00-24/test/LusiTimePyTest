#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script LusiTimePyTest...
#
#------------------------------------------------------------------------

"""Unit test application for LusiTime.Time class.

This software was developed for the LUSI project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andrei Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision: 8 $"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os
import unittest

#---------------------------------
#  Imports of base class module --
#---------------------------------

#-----------------------------
# Imports for other modules --
#-----------------------------
from LusiTime.Time import *

#---------------------
# Local definitions --
#---------------------

#--------------------------
#  Test class definition --
#--------------------------

class LusiTimePyTest ( unittest.TestCase ) :

    def setUp(self) :
        pass
    
    def tearDown(self) :
        pass

    def testValid(self):
        t0 = Time()
        self.assert_( not t0.isValid() )
        t0 = Time(123)
        self.assert_( t0.isValid() )
        t0 = Time(12345,12345)
        self.assert_( t0.isValid() )

    def testFieldValues(self):
        t0 = Time( 1234567, 123456 )
        self.assert_( t0.isValid() )
        self.assertEqual( t0.sec(), 1234567 )
        self.assertEqual( t0.nsec(), 123456 )

    def test_cmp_1(self):
        t0 = Time( 1234567, 123456 )
        t1 = Time( 1234567, 123456 )
        self.assert_( t0 == t1 )
        self.assert_( not ( t0 != t1 ) )
        self.assert_( not ( t0 < t1 ) )
        self.assert_( t0 <= t1 )
        self.assert_( not ( t0 > t1 ) )
        self.assert_( t0 >= t1 )

    def test_cmp_2(self):
        t0 = Time( 1234567, 0 )
        t1 = Time( 1234567, 123456 )
        self.assert_( not ( t0 == t1 ) ) ;
        self.assert_( t0 != t1 ) ;
        self.assert_( t0 < t1 ) ;
        self.assert_( t0 <= t1 ) ;
        self.assert_( not ( t0 > t1 ) ) ;
        self.assert_( not ( t0 >= t1 ) ) ;

    def test_cmp_3(self):
        t0 = Time( 123, 123 )
        t1 = Time( 1234567, 123456 )
        self.assert_( not ( t0 == t1 ) ) ;
        self.assert_( t0 != t1 ) ;
        self.assert_( t0 < t1 ) ;
        self.assert_( t0 <= t1 ) ;
        self.assert_( not ( t0 > t1 ) ) ;
        self.assert_( not ( t0 >= t1 ) ) ;

    def test_cmp_4(self):
        t0 = Time( 123, 123456 )  ;
        t1 = Time( 1234567, 123456 )  ;
        self.assert_( not ( t0 == t1 ) ) ;
        self.assert_( t0 != t1 ) ;
        self.assert_( t0 < t1 ) ;
    	self.assert_( t0 <= t1 ) ;
        self.assert_( not ( t0 > t1 ) ) ;
        self.assert_( not ( t0 >= t1 ) ) ;

    def test_cmp_5(self):
    	t0 = Time( 1234567, 123456 )
        t1 = Time( 123, 123 )
        self.assert_( not ( t0 == t1 ) ) ;
        self.assert_( t0 != t1 ) ;
        self.assert_( not ( t0 < t1 ) ) ;
        self.assert_( not ( t0 <= t1 ) ) ;
        self.assert_( t0 > t1 ) ;
        self.assert_( t0 >= t1 ) ;

    def test_cmp_6(self):
        t0 = Time()
        t1 = Time( 123, 123 )
        self.assertRaises( Exception, lambda : t0 == t1 ) ;
        self.assertRaises( Exception, lambda : t0 != t1 ) ;
        self.assertRaises( Exception, lambda : t0 < t1 ) ;
        self.assertRaises( Exception, lambda : t0 <= t1 ) ;
        self.assertRaises( Exception, lambda : t0 > t1 ) ;
        self.assertRaises( Exception, lambda : t0 >= t1 ) ;

    def test_cmp_7(self):
        t0 = Time( 123, 123 ) 
        t1 = Time() ;
        self.assertRaises( Exception, lambda : t0 == t1 ) ;
        self.assertRaises( Exception, lambda : t0 != t1 ) ;
        self.assertRaises( Exception, lambda : t0 < t1 ) ;
        self.assertRaises( Exception, lambda : t0 <= t1 ) ;
        self.assertRaises( Exception, lambda : t0 > t1 ) ;
        self.assertRaises( Exception, lambda : t0 >= t1 ) ;

    def test_cmp_8(self):
        t0 = Time() ;
        t1 = Time() ;
        self.assertRaises( Exception, lambda : t0 == t1 ) ;
        self.assertRaises( Exception, lambda : t0 != t1 ) ;
        self.assertRaises( Exception, lambda : t0 < t1 ) ;
        self.assertRaises( Exception, lambda : t0 <= t1 ) ;
        self.assertRaises( Exception, lambda : t0 > t1 ) ;
        self.assertRaises( Exception, lambda : t0 >= t1 ) ;

    def test_hash(self):

    	d = {}
    	d[Time(1)] = 1000
    	d[Time(2)] = 10000
    	d[Time(1000)] = 3

    	self.assertEqual( len(d), 3 )
    	self.assertEqual( d[Time(1)], 1000 )
    	self.assertEqual( d[Time(2)], 10000 )
    	self.assertEqual( d[Time(1000)], 3 )
    	self.assertEqual( d.get(Time(5),5), 5 )
        self.assertRaises( Exception, lambda : d.get(Time(),None) )

#
#  run application when imported as a main module
#
if __name__ == "__main__":
    unittest.main()
