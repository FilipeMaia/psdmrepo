#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script DataSourceTestPy...
#
#------------------------------------------------------------------------

"""Unit test for python bindings for psana framework

This software was developed for the LCLS project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andy Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision: 8 $"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import unittest

#---------------------------------
#  Imports of base class module --
#---------------------------------

#-----------------------------
# Imports for other modules --
#-----------------------------
import _psana

#---------------------
# Local definitions --
#---------------------

psana = _psana.PSAna('')

_input = '/reg/g/pcds/package/anatestdata/opal.xtc'

#-------------------------------
#  Unit test class definition --
#-------------------------------

class DataSourceTestPy ( unittest.TestCase ) :

    def setUp(self) :
    	""" 
    	Method called to prepare the test fixture. This is called immediately 
    	before calling the test method; any exception raised by this method 
    	will be considered an error rather than a test failure.  
    	"""
        pass
    
    def tearDown(self) :
        """
        Method called immediately after the test method has been called and 
        the result recorded. This is called even if the test method raised 
        an exception, so the implementation in subclasses may need to be 
        particularly careful about checking internal state. Any exception raised 
        by this method will be considered an error rather than a test failure. 
        This method will only be called if the setUp() succeeds, regardless 
        of the outcome of the test method. 
        """
        pass


    def test_eventIter(self):

        src = psana.dataSource(_input)
    	nevents = len([e for e in src.events()])

    	self.assertEqual( nevents, 96 )

    def test_ScanIter(self):

        src = psana.dataSource(_input)
    	nscans = len([scan for scan in src.scans()])

    	self.assertEqual( nscans, 1 )

    def test_RunIter(self):

        src = psana.dataSource(_input)
    	nruns = len([run for run in src.runs()])

    	self.assertEqual( nruns, 1 )

    def test_AllIter(self):

        src = psana.dataSource(_input)
    	nruns = 0
    	nscans = 0
    	nevents = 0
        for run in src.runs():
            nruns += 1
            for scan in run.scans():
                nscans += 1
                for evt in scan.events():
                    nevents += 1

    	self.assertEqual( nruns, 1 )
    	self.assertEqual( nscans, 1 )
    	self.assertEqual( nevents, 96 )

#
#  run unit tests when imported as a main module
#
if __name__ == "__main__":
    unittest.main()
