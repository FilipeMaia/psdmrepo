#!/usr/bin/env python 


"""
Get the list of active experiments and check if the experiment folders exist.

"""

from __future__ import print_function

import os
import time 
import argparse
import datetime

import DmMover.experiment as experiment
import DmMover.exper_folders as exper_folders
import RegDB.experiment_info as expinfo
import RegDB.RegDb
from DbTools.DbConnection import DbConnection


REGDB_CONN_STR = 'file:/reg/g/psdm/psdatmgr/regdb/.regdb-reader-conn'

def stations_instr(instr):
    # there could be more then one station per experiment
    if instr == 'CXI':
        return (0,1)
    else:
        return (0,)


def all_experiments(age_days=0):
    conn = DbConnection ( conn_string=REGDB_CONN_STR )
    
    regdb = RegDB.RegDb.RegDb(conn)
    
    res = regdb.get_experiments()
    cut = time.time() - (age_days * 24 * 3600) 
    for e in res:
        reg_time = long(e['registration_time']) / 1E9
        if reg_time < cut:
            continue

        yield e['name'], e['instr_name'].lower()


def active_experiments():
    """ find active experiments and return exp,instr """

    for instr in ('AMO', 'CXI', 'MEC', 'SXR', 'XCS', 'XPP'):
        for station_id in stations_instr(instr):            
            info = expinfo.active_experiment(instr, station_id)
            yield info[1], instr.lower()
            

# -------------------------------------------------------------------------------    

usage="List and create missing experiment folders"
help_epilog="""
Check either all experiments or only the activated ones. 
If --allexp is selected only the scratch,res,ftc and calib folders are created.
"""

def main():

    parser = argparse.ArgumentParser(description=usage, epilog=help_epilog,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--mkdir', action='store_true', 
                        help="create missing data folder (xtc, hdf5, scratch, ...) otherwise just list them")
    parser.add_argument('--allexp', action='store_true', 
                        help="checkall experiments. By default check only the active ones.")
    parser.add_argument('--agereg', type=int, default=90, 
                        help="Select only experiments that were registered in the db less than %(dest)s days ago.")

    parser.add_argument('sel_exper', nargs='*') 


    try:
        args = parser.parse_args()
    except SystemExit:
        return 0

    if args.allexp:
        gen = all_experiments(args.agereg)
        dirs_to_check = ('res', 'ftc', 'scratch', 'calib')
    else:
        gen = active_experiments()
        dirs_to_check = ('xtc', 'hdf5', 'usr', 'res', 'ftc', 'scratch', 'calib')


    nexp, nmissing, nset = 0,0,0
    for expname, instr in gen:
        nexp += 1
        if len(expname) != 8:
            print("Wrong detector name", expname, instr)
            continue

        # select experiment
        if args.sel_exper and expname not in args.sel_exper:
            continue

        exppath = "/reg/d/psdm/%s/%s/" % (instr, expname)
        missing_dirs = []
        for dt in dirs_to_check:
            if not os.path.exists(exppath + dt):
                missing_dirs.append(dt)

        if missing_dirs:
            print("-", instr, exppath, "missing dirs:", " ".join(missing_dirs))
            nmissing += 1

        if args.mkdir and missing_dirs:
            nset += 1
            print("Create dirs")
            exper = experiment.Experiment(name=expname)
            exper_folders.check_all_destpath(exper, missing_dirs)
    
        
    date = datetime.datetime.now()
    print("Experiments found:", nexp, "with missing dirs:", nmissing, "nset:", nset, 
          "date", date.strftime("%Y%m%d %H:%M:%S")) 


if __name__ == "__main__":
    
    main()
