#!/usr/bin/env python 

import os
import sys
import argparse
import subprocess

path = os.path

def read_bbcp_checksum(lfn, anapath=True,chkext='md5'):
    """ read checksum from bbcp checksum output file 
    
    Return checksum-value, checksum-type, file-size
    """

    prefix = "/reg/d/psdm" if anapath else "/reg/d/ffb"
    
    sp = path.split(lfn)
    chkfile = path.join(prefix, sp[0].lstrip('/'), 'md5', sp[1]) + '.' + chkext

    # size for xtc file
    pfn = path.join(prefix, lfn.lstrip('/'))
    try:
        size = os.path.getsize(pfn)
    except OSError:
        size = -1

    if not path.exists(chkfile):
        #print "Missing", chkfile
        return None,None, size

    with open(chkfile) as fp:
        line = fp.readline()
    tok = line.split()
    try:
        chk_type, chk_value = tok[1], tok[2]
    except IndexError:
        # print "Error reading", chkfile, line.lstrip()
        chk_type, chk_value = None, None
    return  chk_value, chk_type, size


def comp_checksum(lfn, quiet=False, pfn_prefix=None):
    """ Comapre checksums 
    
    Compare bbcp checksum values from ffb and ana file system and compare 
    file sizes.
    Optionally calculate checksum of the file (given on command line) and 
    compare to bbcp checksum.
    """

    ana_chksum, ana_cktype, ana_size = read_bbcp_checksum(path.join("/reg/d/psdm",lfn))
    ffb_chksum, ffb_fcktype, ffb_size = read_bbcp_checksum(path.join("/reg/d/ffb",lfn), False)
        
    disk_comp = True
    if pfn_prefix:
        pfn = path.join(pfn_prefix, lfn.lstrip('/'))
        if os.path.exists(pfn):
            res = subprocess.check_output(["md5sum", pfn])
            md5_dsk = res.split()[0]
        if md5_dsk != ana_chksum:
            print "Mismatch disk", lfn
            disk_comp = False

    st_size = (ana_size == ffb_size) and ana_size >= 0
    st = ana_chksum == ffb_chksum
    if not quiet:
        print "stat (cksum, size, disk) %s, %s, %s(%s)  %s %s, %s %s %s" % (
            ana_chksum == ffb_chksum, st_size, disk_comp, pfn_prefix != None,
            ana_chksum, ffb_chksum, ana_size, ffb_size, lfn)
        
    return (ana_chksum == ffb_chksum) and disk_comp and st_size


usage = """
Compare the checksums on ANA and FFB using the bbcp created checksum files. 
"""
epilog=""" 
Example:
    %(prog)s --quiet /reg/d/ffb/xpp/xppa1213/xtc/e*xtc 

The checksums of the files on ffb and ana are read from the bbcp-checksum files. 
An error is reported if the two checksums or the file sizes (files are stat'ed)
show a mismatch. With the --disk option the files specified on the cmdline are 
checksummed (md5sum) and the value is comapred agsainst the one from the 
bbcp-checksum.
"""

#
#  lfn = 
#  cfn = /reg/d/psdm/<instr>/....  


def main():

    parser = argparse.ArgumentParser(description=usage, epilog=epilog)
    
    parser.add_argument("--quiet", action="store_true", help="Quiet, only print final stats")
    parser.add_argument("--disk", action="store_true", 
                        help="checksum the files from the cmdline and compare")
    parser.add_argument("fnames", nargs='+', help="xtc file names either on ffb or ana")
    
    try:
        args = parser.parse_args()
    except SystemExit:
        return 0
    
    prlen = len("/reg/d/psdm")
    n_good, n_bad = 0,0
    experiments = set()
    for pfn in args.fnames:
        ptoken = [x for x in pfn.split('/') if x]
        exp = ptoken[4]
        if not exp in experiments:
            experiments.add(exp)
        prefix = path.join("/", *ptoken[:3]) if args.disk else None
        # lfn: /<instr>/<exp>/xtc/... 
        lfn = path.join("/", *ptoken[3:])
        stat = comp_checksum(lfn, args.quiet, pfn_prefix=prefix)
        if stat:
            n_good += 1
        else:
            n_bad += 1
            print "ERROR:", pfn

    print "Result Good:", n_good, "Bad:", n_bad, experiments


if __name__ == "__main__":

    main()
