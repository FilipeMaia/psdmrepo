#!/usr/bin/env python 


import os
import argparse
import psutil

from datetime import datetime

from DmMover.mvrcfg import Config



# ====================================================================================

def move_logfile(fn):

    if os.path.isfile(fn):
        newfn = "{0}.{1}".format(fn, datetime.now().strftime("%Y%m%dT%H%M%S"))
        os.rename(fn, newfn)
        print "Renamed log to {}".format(newfn)
    else:
        print "log {} didn't exist yet".format(fn)

# ====================================================================================


def list_all_movers(cfg_fn, args):

    config = Config(cfg_fn, False)

    for mover in config.movers():
        if args.names and mover.name not in args.names:
            continue

        # Check procServ port

        print mover.name, mover.port, mover.host, mover.mode.replace("--mode","")


# ====================================================================================


usage = """ """
help_epilog = """ """

CFG_GROUP = {
    'ioc' : "/reg/g/psdm/psdatmgr/etc/mover_ioc.cfg",
    'smd' : "/reg/g/psdm/psdatmgr/etc/mover_smd.cfg",
    'ana' : "/reg/g/psdm/psdatmgr/etc/mover_ffb_ana.cfg"
}


def main():

    parser = argparse.ArgumentParser(description=usage, epilog=help_epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument("--cfg", choices=CFG_GROUP.keys(), help="config file or alias")
    parser.add_argument("--cfgfn", help="config file or alias")
    parser.add_argument("--list", action="store_true", default=False,
                        help="list all movers")    
    parser.add_argument("--test","-T", action="store_true", default=False,
                        help="test only, mover is not started")
    parser.add_argument("--force", dest="check_port",action="store_false", default=True,
                        help="Do not check if port is already open")

    
    parser.add_argument("names", nargs=argparse.REMAINDER, 
                        help="mover names that should be started")

    try:
        args = parser.parse_args()
    except SystemExit:
        return 0




    cfg_fn = CFG_GROUP.get(args.cfg, None) if args.cfg else args.cfgfn
    if not cfg_fn or not os.path.exists(cfg_fn):
        print "No config file", cfg_fn
        return

        
    if args.list:
        list_all_movers(cfg_fn, args)
        print "No movers have been started"
        return 
        
    config = Config(cfg_fn)

    b = psutil.net_connections()
    pp = [ x.laddr[1] for x in b ]

    
    for mover in config.movers():
        if args.names and mover.name not in args.names:
            continue
                    
        # Check procServ port 

        print "==== ", mover.name

        if args.check_port and int(mover.port) in pp:
            print "  Port is already open, mover {} not started ".format(mover.port)
            if not args.test:
                continue
                
        cmd = mover.mvr_cmd()

        if args.test:
            print "  List", cmd
        else:
            move_logfile(mover.procserv_logfile())
            rc = os.system(cmd)
            print rc
    

if __name__ == "__main__":
    main()
