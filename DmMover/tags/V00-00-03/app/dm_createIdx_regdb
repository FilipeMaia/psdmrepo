#!@PYTHON@

import os
import sys
import stat
import time
import logging
import argparse

import DmMover.db_access as db
from DmMover.xtcidx import CreateIdx

# ========================================================================

db_conn = "/reg/g/psdm/psdatmgr/datamigr/.mvrdb-conn"
test_db_conn = "/reg/g/psdm/psdatmgr/datamigr/.mvrtestdb-conn"

usage="""
Find index files that were not transfered by the data movers and create them.
"""
help_epilog=""" """

# ========================================================================
    
class ExperInfo:
    def __init__(self,conn):
        self.conn = conn
    
        self.id2name = {}

    def id2exp_instr(self, exp_id):
        """ Return name and instr for an experiment using its ID """
        if exp_id in self.id2name:
            return  self.id2name[exp_id] 
        
        name, instr = (self.conn.id2name(exp_id), self.conn.instr4id(exp_id))
        self.id2name[exp_id] = (name, instr)
        return name, instr


class ExpFile:
    def __init__(self,name,instr,xtc_dir,idx_file):
        self.name, self.instr = name, instr
        self.xtc_dir = xtc_dir
        self.idx_file = idx_file


def main():

    parser = argparse.ArgumentParser(description=usage, epilog=help_epilog,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--hours", type=int, default=24, help="")
    parser.add_argument("--nmax", type=int, default=-1, help="Max number of index files to create (-1: infinity)")
    parser.add_argument("--wait", type=int, default=-1, help="run continously, wait %(metavar)s min") 
    parser.add_argument("--instr", help="select only index files from a specific instr")
    #parser.add_argument("--exp", metavar='EXP-ID', type=int, help="experiment ID")
    parser.add_argument("--listonly", action='store_true', default=False)
    parser.add_argument("--verbose", "-v", action='count', default=0)

    try:
        args = parser.parse_args()
    except SystemExit:
        return 0

    log_levels = [logging.WARNING, logging.INFO, logging.DEBUG]
    args.verbose = min(args.verbose, len(log_levels)-1)
    logging.basicConfig(level=log_levels[args.verbose], format='%(asctime)s %(name)s %(message)s',
                        datefmt="%Y%m%d %H:%M:%S")
    db.select_db(db_conn)
    logging.warning("use production db")

    exp_info = ExperInfo(db)
    cridx = CreateIdx(listonly=args.listonly)


    while True:
        
        age = long(1E9 * (time.time() - args.hours*3600))
        idx_files = db.failed_idx_files(age=age)

        logging.info("Found %d files", len(idx_files))
    
        ndone, nexists = 0, 0 
        
        for idx in idx_files:
            if args.nmax >= 0 and ndone >= args.nmax:
                logging.warning("exit loop limit")
                break

            exp_id =  idx['exper_id']
            name, instr = exp_info.id2exp_instr(exp_id)
        
            if args.instr and args.instr != instr.lower():
                continue

            xtc_path = os.path.join("/reg/d/psdm", instr.lower(), name, 'xtc')
            exp_file = ExpFile(name, instr, xtc_path, idx['file'])

            stat = cridx.add_request(exp_file)

            if stat == -1 : nexists += 1

            if stat >= 0:
                ndone += 1
        
        if args.wait <= 0:
            break
        else:
            time.sleep(args.wait * 60)


    logging.info("Done %s exists %d", ndone, nexists)
    return 

  
# Main Entry
if __name__ == "__main__":
    
    main()
