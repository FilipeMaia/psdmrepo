
// *** Do not edit this file, it is auto-generated ***

#include <cstddef>
#include "psddl_psana/princeton.ddl.h" // inc_psana
#include "psddl_pypsana/princeton.ddl.wrapper.h" // inc_pypsana
namespace Psana {
namespace Princeton {
using namespace boost::python;

void createWrappers() {

#define _CLASS(n, policy) class_<n>("Psana::Princeton::ConfigV1", no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("readoutEventCode", &n::readoutEventCode)\
    .def("delayMode", &n::delayMode)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(ConfigV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV1);


#define _CLASS(n, policy) class_<n>("Psana::Princeton::ConfigV2", no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("readoutEventCode", &n::readoutEventCode)\
    .def("delayMode", &n::delayMode)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(ConfigV2_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV2_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV2);


#define _CLASS(n, policy) class_<n>("Psana::Princeton::ConfigV3", no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("exposureEventCode", &n::exposureEventCode)\
    .def("numDelayShots", &n::numDelayShots)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(ConfigV3_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV3_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV3);


#define _CLASS(n, policy) class_<n>("Psana::Princeton::FrameV1", no_init)\
    .def("shotIdStart", &n::shotIdStart)\
    .def("readoutTime", &n::readoutTime)\
    .def("data", &n::data)\

  _CLASS(FrameV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(FrameV1_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::Princeton::InfoV1", no_init)\
    .def("temperature", &n::temperature)\
    .def("_sizeof", &n::_sizeof)\

  _CLASS(InfoV1, return_value_policy<copy_const_reference>());
  _CLASS(InfoV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(InfoV1);
  std_vector_class_(InfoV1_Wrapper);
#undef _CLASS

}
} // namespace Princeton
} // namespace Psana
