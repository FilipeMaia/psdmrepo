
// *** Do not edit this file, it is auto-generated ***

#include <cstddef>
#include "psddl_psana/cspad.ddl.h" // inc_psana
#include "psddl_pypsana/cspad.ddl.wrapper.h" // inc_pypsana
namespace Psana {
namespace CsPad {
using namespace boost::python;

void createWrappers() {

#define _CLASS(n, policy) class_<n>("Psana::CsPad::CsPadDigitalPotsCfg", no_init)\
    .def("pots", &n::pots)\

  _CLASS(CsPadDigitalPotsCfg_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(CsPadDigitalPotsCfg_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::CsPadReadOnlyCfg", no_init)\
    .def("shiftTest", &n::shiftTest)\
    .def("version", &n::version)\

  _CLASS(CsPadReadOnlyCfg_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(CsPadReadOnlyCfg_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ProtectionSystemThreshold", no_init)\
    .def("adcThreshold", &n::adcThreshold)\
    .def("pixelCountThreshold", &n::pixelCountThreshold)\

  _CLASS(ProtectionSystemThreshold_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ProtectionSystemThreshold_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::CsPadGainMapCfg", no_init)\
    .def("gainMap", &n::gainMap)\

  _CLASS(CsPadGainMapCfg_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(CsPadGainMapCfg_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ConfigV1QuadReg", no_init)\
    .def("shiftSelect", &n::shiftSelect)\
    .def("edgeSelect", &n::edgeSelect)\
    .def("readClkSet", &n::readClkSet)\
    .def("readClkHold", &n::readClkHold)\
    .def("dataMode", &n::dataMode)\
    .def("prstSel", &n::prstSel)\
    .def("acqDelay", &n::acqDelay)\
    .def("intTime", &n::intTime)\
    .def("digDelay", &n::digDelay)\
    .def("ampIdle", &n::ampIdle)\
    .def("injTotal", &n::injTotal)\
    .def("rowColShiftPer", &n::rowColShiftPer)\
    .def("ro", &n::ro, policy)\
    .def("dp", &n::dp, policy)\
    .def("gm", &n::gm, policy)\

  _CLASS(ConfigV1QuadReg_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1QuadReg_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV1QuadReg);


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ConfigV1", no_init)\
    .def("concentratorVersion", &n::concentratorVersion)\
    .def("runDelay", &n::runDelay)\
    .def("eventCode", &n::eventCode)\
    .def("inactiveRunMode", &n::inactiveRunMode)\
    .def("activeRunMode", &n::activeRunMode)\
    .def("tdi", &n::tdi)\
    .def("payloadSize", &n::payloadSize)\
    .def("badAsicMask0", &n::badAsicMask0)\
    .def("badAsicMask1", &n::badAsicMask1)\
    .def("asicMask", &n::asicMask)\
    .def("quadMask", &n::quadMask)\
    .def("quads", &n::quads, policy)\
    .def("numAsicsRead", &n::numAsicsRead)\
    .def("numQuads", &n::numQuads)\
    .def("numSect", &n::numSect)\
    .def("quads_shape", &n::quads_shape)\

  _CLASS(ConfigV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV1);


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ConfigV2", no_init)\
    .def("concentratorVersion", &n::concentratorVersion)\
    .def("runDelay", &n::runDelay)\
    .def("eventCode", &n::eventCode)\
    .def("inactiveRunMode", &n::inactiveRunMode)\
    .def("activeRunMode", &n::activeRunMode)\
    .def("tdi", &n::tdi)\
    .def("payloadSize", &n::payloadSize)\
    .def("badAsicMask0", &n::badAsicMask0)\
    .def("badAsicMask1", &n::badAsicMask1)\
    .def("asicMask", &n::asicMask)\
    .def("quadMask", &n::quadMask)\
    .def("quads", &n::quads, policy)\
    .def("numAsicsRead", &n::numAsicsRead)\
    .def("roiMask", &n::roiMask)\
    .def("numAsicsStored", &n::numAsicsStored)\
    .def("numQuads", &n::numQuads)\
    .def("numSect", &n::numSect)\
    .def("quads_shape", &n::quads_shape)\

  _CLASS(ConfigV2_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV2_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV2);


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ConfigV3", no_init)\
    .def("concentratorVersion", &n::concentratorVersion)\
    .def("runDelay", &n::runDelay)\
    .def("eventCode", &n::eventCode)\
    .def("protectionThresholds", &n::protectionThresholds, policy)\
    .def("protectionEnable", &n::protectionEnable)\
    .def("inactiveRunMode", &n::inactiveRunMode)\
    .def("activeRunMode", &n::activeRunMode)\
    .def("tdi", &n::tdi)\
    .def("payloadSize", &n::payloadSize)\
    .def("badAsicMask0", &n::badAsicMask0)\
    .def("badAsicMask1", &n::badAsicMask1)\
    .def("asicMask", &n::asicMask)\
    .def("quadMask", &n::quadMask)\
    .def("quads", &n::quads, policy)\
    .def("numAsicsRead", &n::numAsicsRead)\
    .def("roiMask", &n::roiMask)\
    .def("numAsicsStored", &n::numAsicsStored)\
    .def("numQuads", &n::numQuads)\
    .def("numSect", &n::numSect)\
    .def("protectionThresholds_shape", &n::protectionThresholds_shape)\
    .def("quads_shape", &n::quads_shape)\

  _CLASS(ConfigV3_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV3_Wrapper);
#undef _CLASS
  ENV_GETTER(ConfigV3);


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ElementV1", no_init)\
    .def("virtual_channel", &n::virtual_channel)\
    .def("lane", &n::lane)\
    .def("tid", &n::tid)\
    .def("acq_count", &n::acq_count)\
    .def("op_code", &n::op_code)\
    .def("quad", &n::quad)\
    .def("seq_count", &n::seq_count)\
    .def("ticks", &n::ticks)\
    .def("fiducials", &n::fiducials)\
    .def("sb_temp", &n::sb_temp)\
    .def("frame_type", &n::frame_type)\
    .def("data", &n::data)\
    .def("sectionMask", &n::sectionMask)\
    .def("common_mode", &n::common_mode)\

  _CLASS(ElementV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ElementV1_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::DataV1", no_init)\
    .def("quads", &n::quads, policy)\
    .def("quads_shape", &n::quads_shape)\

  _CLASS(DataV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(DataV1_Wrapper);
#undef _CLASS
  EVT_GETTER(DataV1);


#define _CLASS(n, policy) class_<n>("Psana::CsPad::ElementV2", no_init)\
    .def("virtual_channel", &n::virtual_channel)\
    .def("lane", &n::lane)\
    .def("tid", &n::tid)\
    .def("acq_count", &n::acq_count)\
    .def("op_code", &n::op_code)\
    .def("quad", &n::quad)\
    .def("seq_count", &n::seq_count)\
    .def("ticks", &n::ticks)\
    .def("fiducials", &n::fiducials)\
    .def("sb_temp", &n::sb_temp)\
    .def("frame_type", &n::frame_type)\
    .def("data", &n::data)\
    .def("sectionMask", &n::sectionMask)\
    .def("common_mode", &n::common_mode)\

  _CLASS(ElementV2_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ElementV2_Wrapper);
#undef _CLASS


#define _CLASS(n, policy) class_<n>("Psana::CsPad::DataV2", no_init)\
    .def("quads", &n::quads, policy)\
    .def("quads_shape", &n::quads_shape)\

  _CLASS(DataV2_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(DataV2_Wrapper);
#undef _CLASS
  EVT_GETTER(DataV2);

}
} // namespace CsPad
} // namespace Psana
