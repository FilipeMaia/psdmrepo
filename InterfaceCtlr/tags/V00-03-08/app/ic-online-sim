#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script OnlineSim.
#
#------------------------------------------------------------------------

"""Simulate the Online system for the Interface Controller.

To test the Interface Controller, use this script to add new filesets and
associated files to the interface database. When file copies are complete
the status of the fileset is changed to "Waiting_Translation".

This software was developed for the LUSI project.  If you use all or
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$

@author Robert C. Sass
"""


#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision$"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys, os, pwd, socket
import MySQLdb

#---------------------------------
#  Imports of base class module --
#---------------------------------
from LusiPython.LusiPyApp import LusiPyApp
from LusiTime.Time import Time

#-----------------------------
# Imports for other modules --
#-----------------------------
#from PkgPackage.PkgModule import PkgClass

#---------------------
# Local definitions --
#---------------------

# local variable accessible in this module only
_OP_X = 'Y'

#-------------------
# Local functions --
#-------------------

def _default_user():
    """Return the effective user name"""

    return pwd.getpwuid(os.geteuid())[0]

def _default_host():
    """Return the default host on which the MySQL is run"""

    return "bbt-odf101.slac.stanford.edu"

def _default_port():
    """Return the default port on which the MySQL server would respond"""

    return "3306"

def _default_database():
    """Return the default database"""

    return "interface_db"

def _exper_id_sql (experiment):
    """Return a nested SQL query to retrieve an identifier of an experiment"""

    return """(SELECT id FROM "experiment" WHERE name='%s')""" % experiment

def _time2str(timestamp):
    """Turn a number 64-bit timestamp got from the database into
    a string. Return an empty string if the input object is None"""

    if timestamp is None: return ''
    return "%s" % Time.from64(timestamp)

#--------------------------
# Specialized exceptions --
#--------------------------

class DatabaseOperatonFailed(Exception):
    def __init__ (self, message):
        self.__message = message

    def __str__ (self):
        return repr(self.__message)

#--------------------------------
# Application class definition --
#--------------------------------

class OnlineSim ( LusiPyApp ) :

    # ===============================================
    # An indirection for handling the standard output
    # ===============================================

    __out = sys.stdout

    def print_out (self, *params):
        for p in params:
            self.__out.write(p)
        self.__out.write("\n")

 
    # =========================================================================
    # Command handlers are registered in the dictionary. There is a separate list
    # to specify an order in which the command information is reported by
    # the tool.
    # =========================================================================

    __cmd_handlers = {};
    __cmd_order = [];

    def __add_handler(self, command, syntax, description, handler, connects2server=True):
        self.__cmd_handlers[command] = {
        'SYNTAX':syntax,
        'DESCRIPTION':description,
        'HANDLER':handler,
        'CONNECTS2SERVER':connects2server}
        self.__cmd_order.append(command)

    def __usage(self, command):
        print "Usage: %s  %s" % (command, self.__cmd_handlers[command]['SYNTAX'])

    # =======================================================================
    # Database connection parameters and connection handle. They would change
    # their default state at the first attempt to connect to the database.
    # =======================================================================

    __host       = _default_host()
    __port       = _default_port()
    __user       = _default_user()
    __password   = ""
    __database   = _default_database()
    __connection = None

    # ===========
    # constructor
    # ===========

    def __init__ ( self ) :

        LusiPyApp.__init__ (
            self,
            installLogger = True,
            usage = "usage: %prog [<command>] [<parameters>] [<options>]" )

        # Add application options, see optparse module for details -------------
        #
        self._parser.add_option ( '-D', "--database",
								  action="store", dest="database", default=None,
				      			  help="override default database name (%s)" % _default_database())

        self._parser.add_option ( '-H', "--host",
								  action="store", dest="host", default=None,
				      			  help="override default host name (%s)" % _default_host())

        self._parser.add_option ( '-P', "--port",
								  action="store", dest="port", default=None,
				      			  help="override default port number (%s)" % _default_port())

        self._parser.add_option ( '-U', "--user",
								  action="store", dest="user", default=None,
								  help="override default user name (%s)" % _default_user())

        self._parser.add_option ( '-p', "--password",
								  action="store", dest="password", default=None,
							      help="specify user password (no password by default)" )

        self._parser.add_option ( '-o', "--output",
                                  action="store", dest="output", default=None,
                                  help="send output to file instead of STDOUT" )

        self._parser.add_option ( '-d', "--description",
                                  action="store", dest="description", default=None,
                                  help="a description given as a parameter's value" )

        self._parser.add_option ( '-f', "--description-file",
                                  action="store", dest="description_file", default=None,
                                  help="a description stored in a file" )

        self._parser.add_option ( '-l', "--long",
                                  action="count", dest="long", default=0,
                                  help="produce the detailed output" )

        self._parser.add_option ( '-t', "--truncate-no",
                                  action="count", dest="truncate_no", default=0,
                                  help="do not truncate long multiline strings in output" )

        self._parser.add_option ( '-u', "--update",
                                  action="count", dest="update", default=0,
                                  help="allow updating an existing entry" )


        # Register command handlers for known command --------------------------
        #
        self.__add_handler(
            'help',
            '[<command> [<command> [...]]]',
            """
    If no specific command (or commands) will be presented
    then general information about the tool will be printed.
    Otherwise detailed description of each command will be
    printed.
    """,
            self.__cmd_help,
            connects2server=False);
        #
        # ----------------------------------------------------------------------
        #
        self.__add_handler(
            'init',
            '<schema_file>',
            """
    The command will (re-)initialize the database using
    a schema found in an input file. Note, that all prior
    contents of the database will get destroyed.
    """,
            self.__cmd_init);
        #
        # ----------------------------------------------------------------------
        #
        self.__add_handler(
            'new_fileset',
            '<experiment> <instrument> <run_type> <run_number>',
            """
    Create a new fileset.
    """,
             self.__cmd_new_fileset)

        #
        # ----------------------------------------------------------------------
        #
        self.__add_handler(
            'add_filename',
            '<fileset_id> <filetype> <filename>',
            """
    Add a file to an existing fileset.
    """,
             self.__cmd_add_filename)

        #
        # ----------------------------------------------------------------------
        #
        self.__add_handler(
            'change_fileset_status',
            '<fileset_id> <status_id>',
            """
    Change the status of an existing fileset and all files it contains.
    """,
             self.__cmd_change_fileset_status)

        #
        # ----------------------------------------------------------------------
        #
        self.__add_handler(
            'list_fileset_status',
            '',
            """
    List all possivle fileset/filename statii.
    """,
             self.__cmd_list_fileset_status)


    # ============================================================
    # Run the whole thing after parsing the command argunments and
    # installing logger. See BbrPyApp class for details.
    # ============================================================

    def _run ( self ) :

        # Print the list of supported commands of none is given ----------------
        #
        if not self._args :
            self.__cmd_help('help', self._args)
            return 0

        # Open output file -----------------------------------------------------
        #
        if self._options.output:
            self.debug( "Open alternative output file" )
            self.__out = open ( self._options.output, "w" )

        # Get the command name,  connect to the server (unless we're -----------
        #  dealing with the command which doesn't need this) and invoke
        # the corresponding handler.
        #
        command = self._args[0]
        if command not in self.__cmd_handlers:
            self._parser.error("unknown command: %s" % command)
            return 2

        self.trace( "command: %s: arguments: %s" % (command,str(self._args[1:])))

        if self.__cmd_handlers[command]['CONNECTS2SERVER']: self.__connect()
        return self.__cmd_handlers[command]['HANDLER'](command, self._args[1:])

    # ===========================================
    # Print the information on supported commands
    # ===========================================

    def __cmd_help ( self, command, args ) :

        names = args
        if names is not None and len(names) > 0:
            verbose = True
        else:
            names = self.__cmd_order
            verbose = False

        if verbose:

            # Print full description of each command
            #
            for name in names:
                self.print_out("""COMMAND:

    %s

PARAMETERS:

    %s

DESCRIPTION:
%s
""" % (name,
         self.__cmd_handlers[name]['SYNTAX'],
         self.__cmd_handlers[name]['DESCRIPTION']))

        else:

            self.print_out("""APPLICATION:

    %s

        This is the Online simulator for the Interface Controller
        Database. The application has been developed in a context of
        the OFFLINE Data Management Project for LCLS/LUSI experiments.

USAGE:

    command [parameters] [options]

    help
    help [command [command ...]]   (for detailed explanation)

    -h | --help                    (for a full list of available options)

SUPPORTED COMMANDS:
""" %  os.path.basename(sys.argv[0]))

            # Reserve enough space for the command names based on
            # the longest name.
            #
            max_len = 1
            for name in names:
                if len(name) > max_len: max_len = len(name)
            fmt = "    %-"+str(max_len)+"s  %s"
            for name in names:
                self.print_out(fmt % (name, self.__cmd_handlers[name]['SYNTAX']))

            self.print_out()

        return 0

    # =============================================
    # Load the initial schema and initialize tables
    # =============================================

    def __cmd_init ( self, command, args ) :
        self.print_out("Entereid cmd_init")
        if len(args) < 1:
            self._parser.error("Enter schema file name : %s" % command)

        filepath = args[0]
        if not self.__simple_query(
            'source %s' % filepath): return 1 
        return 0

    # ====================
    # Add a new fileset
    # ====================

    def __cmd_new_fileset ( self, command, args ) :

        if len(args) < 4:
            self._parser.error(
                "Enter: experiment instrument run_type run_num - %s" % command)

        exper      = args[0]
        instr      = args[1]
        runtype    = args[2]
        runnum     = args[3]

        if not self.__simple_query(
            """SET @_new_fileset_0 = NULL; 
            CALL new_fileset_nocache ('%s','%s','%s','%s',@_new_fileset_0);""" % (
            exper, instr, runtype, runnum )): return 1
        setrow = self.__select_query('SELECT @_new_fileset_0', return_dict=True)
        if not setrow: return 1
        newset = setrow[0]['@_new_fileset_0']
        print "newset = %s" % newset
        return 0


    # =================================
    # Add a file to an existing fileset
    # =================================

    def __cmd_add_filename ( self, command, args ) :

        if len(args) < 3:
            self._parser.error("Enter: fileset_id  filetype filename - %s" % command)

        fileset_id = args[0]
        filetype   = args[1]
        filename   = args[2]
        status = None 
        if not self.__simple_query(
            """SET @_new_fileset_0 = NULL;
            CALL add_file_nocache ('%s','%s', '%s', @_new_fileset_0);""" % (
            fileset_id, filetype, filename)): return 1
        row = self.__select_query('SELECT @_new_fileset_0', return_dict=True)
        if not row: return 1
        status = row[0]['@_new_fileset_0']
        print "add_filename return = %s " % (status)
        return 0

    # =============================================
    # List all possible statii for filesets & files
    # =============================================

    def __cmd_list_fileset_status ( self, command, args ) :

        if len(args) > 0:
            self._parser.error("No args required - %s" % command)

        rows = self.__select_query('SELECT * FROM fileset_status_def', return_dict=True)
        if not rows: return 1
        self.print_out("""
   Fileset Status Definitions
ID     Name                  Description""")

        for r in rows:
            self.print_out(
            "%-5s  %-20s  %-60s" % (r['id'], r['name'], r['description'])) 
        return 0

    # ========================================================
    # Change the status of a fileset and all files it contains
    # ========================================================

    def __cmd_change_fileset_status ( self, command, args ) :

        if len(args) < 2:
            self._parser.error("Enter: fileset_id  new_status - %s" % command)

        fileset_id = args[0]
        filestatus = args[1]
        status = None
        if not self.__simple_query(
            """SET @_new_fileset_0 = NULL;
            CALL change_fileset_status ('%s','%s', @_new_fileset_0);""" % (
            fileset_id, filestatus)): return 1
        row = self.__select_query('SELECT @_new_fileset_0', return_dict=True)
        if not row: return 1
        status = row[0]['@_new_fileset_0']
        print "change_fileset_status return = %s " % (status)
        return 0

    # ====================================
    # Report current connection parameters
    # ====================================

    def __conn_params(self):
        using_password = "NO"
        if self.__password != "": using_password = "YES"
        return "'%s'@'%s':%s (using password: %s)" % (
            self.__user,
            self.__host,
            self.__port,
            using_password)

    # =====================
    # Connect to the server
    # ====================

    def __connect(self):

        """Connect to the database if the connection has not been established
        yet. In case of success initialize a connection handle and
        return True. Return False otherwise."""
        if self.__connection is not None: return True

        # Make ajustments to the connection parameters if requested ------------
        # in the command options.
        #
        self.info("Default connection parameters for MySQL: %s" % self.__conn_params())
 
        if self._options.host and self.__host != self._options.host:
             self.__host = self._options.host

        if self._options.port and port != self._options.port:
            port = self._options.port

        if self._options.user and self.__user != self._options.user:
            self.__user = self._options.user

        if self._options.password and self.__password != self._options.password:
            self.__password = self._options.password

        if self._options.database and self.__database != self._options.database:
            self.__database = self._options.database

        self.info("Requested connection parameters for MySQL: %s" % self.__conn_params())

        # Try to connect -------------------------------------------------------
        #
        self.info("Connecting to MySQL: %s" % self.__conn_params())
        try:
            self.__connection = MySQLdb.connect(
                host=self.__host,
                port=int(self.__port),
                user=self.__user,
                passwd=self.__password,
                db=self.__database)
        except MySQLdb.Error, ex:
            self.error("MySQL error %d: %s" % (ex[0],ex[1]))
            sys.exit(1)

    # ========================================================
    # Execute a simple query which doesn't return a result set
    # ========================================================

    def __simple_query(self, *queries):

        """Execute a list of simple queries which do not require any parsing
        of results. Queries will be executed one by one till all is done or
        till the very first failure. In the later case the rest of the list
        won't be executed.

        The method will return True if all query succeeded, and False otherwise."""

        result = False
        cursor = self.__connection.cursor()

        for query in queries:
            self.info( "SQL: %s" % query)
            try:
                cursor.execute(query)
                result = True
            except MySQLdb.Error, ex:
                self.error("MySQL error %d: %s" % (ex[0],ex[1]))

        cursor.close()
        return result

    # ============================================================
    # Execute a single SELECT type query and return its result set
    # ============================================================

    def __select_query(self, query, return_dict=False):

        """Execute a single SELECT type query and return a sequence of sequences
        (or dictionaries, depending on the optional flag). If no results are found
        then an empty sequence is retunred.

        The method will return None if the query fails."""

        rows = None

        cursor = None
        if return_dict: cursor = self.__connection.cursor(MySQLdb.cursors.SSDictCursor)
        else:           cursor = self.__connection.cursor()

        self.info( "SQL: %s" % query)
        try:
            cursor.execute(query)
            rows = cursor.fetchall()
        except MySQLdb.Error, ex:
            self.error("MySQL error %d: %s" % (ex[0],ex[1]))

        cursor.close()
        return rows

    # ======================================================
    # Execute a single SELECT type query on a single collumn
    # ======================================================

    def __select_query_1(self, query):

        """Execute a single SELECT type query on a single column and
        return a sequence of values found in all rows for that collumn.
        If no results are found then an empty sequence is returned.

        The method will return None if the query fails."""

        result = None
        cursor = self.__connection.cursor()

        self.info( "SQL: %s" % query)
        try:
            cursor.execute(query)
            rows = cursor.fetchall()
            result = [r[0] for r in rows]
        except MySQLdb.Error, ex:
            self.error("MySQL error %d: %s" % (ex[0],ex[1]))

        cursor.close()
        return result

    # ============================================
    # Get an internal identifier of the experiment
    # ============================================

    def _exper_id (self, experiment):

        if self.__simple_query("SET SESSION SQL_MODE='ANSI'"):

            rows = self.__select_query(
                """(SELECT id FROM "experiment" WHERE name='%s')""" % experiment,
                return_dict=True)
            if rows:
                return rows[0]['id']

        raise DatabaseOperatonFailed, "failed to obtain experiment identifier for: %s" % experiment

    # =====================================
    # Get an internal identifier of the run
    # =====================================

    def _run_id (self, exper_id, run):

        if self.__simple_query("SET SESSION SQL_MODE='ANSI'"):

            rows = self.__select_query(
                """(SELECT id FROM "run" WHERE exper_id=%s AND num=%s)""" % (exper_id, run),
                return_dict=True)
            if rows:
                return rows[0]['id']

        raise DatabaseOperatonFailed, "failed to obtain run identifier for exper_id: %s, run: %s" % (exper_id, run)

    # ===================================================================
    # Expect a query which counts a number of rows, and return the number
    # ===================================================================

    def _count (self, sql, colname="COUNT(*)"):

        if self.__simple_query("SET SESSION SQL_MODE='ANSI'"):

            rows = self.__select_query(sql,return_dict=True)
            for r in rows:
                return r[colname]

            raise DatabaseOperatonFailed, "inconsistent results from counting query: %s" % (sql)

    # =========================================
    # Read an optional description if avaialble
    # =========================================

    def _description (self):

        description = self._options.description
        description_file = self._options.description_file

        if description is not None and description_file is not None:
            self._parser.error("do not use mutually exclusive description options")

        if description is not None:
            return MySQLdb.escape_string(description)

        if description_file is not None:
            return MySQLdb.escape_string("".join(open(description_file, "r").readlines()))

        return ""


    # ==============================================
    # Extract only the first part of the description
    # ==============================================

    def _description_hint (self, description, maxlen=0):

        """Analyze the contents of the input string and return
        a substring which would end when the first of the following
        conditions is met:

        - the maximul length (in characters) as requested by the optional
          parameter 'maxlen' (the default value of 0 means no limit)

        - the newline character (in case of multiline string)

        If none of these conditions is detected the whole input string
        is returned. The whole input string is returned if the following
        option is set:

            --no-truncate
        """

        if self._options.truncate_no:
            return description

        begin = 0
        end = len(description)
        if maxlen > 0 and maxlen < end:
            end = maxlen

        idx = description.find("\n", begin, end)
        if idx >= 0:
            end = idx

        if end < len(description):
            return "%s  (truncated: %d of %d)" % (description[begin:end], end, len(description))

        return description

# ==============================================
# Run application when imported as a main module
# ==============================================

if __name__ == "__main__" :
    app = OnlineSim()
    rc = app.run()
    sys.exit(rc)
