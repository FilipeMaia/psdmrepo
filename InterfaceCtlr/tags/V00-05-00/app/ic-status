#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script ic-status...
#
#------------------------------------------------------------------------

"""Script to display status information for the controller.

This software was developed for the LUSI project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andrei Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision$"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os

#---------------------------------
#  Imports of base class module --
#---------------------------------
from LusiPython.LusiPyApp import LusiPyApp

#-----------------------------
# Imports for other modules --
#-----------------------------
from LusiPython.DbConnection import DbConnection

#---------------------
# Local definitions --
#---------------------

_conn_str = "Server=psdb.slac.stanford.edu;Database=interface_db;"

#---------------------------------
#  Application class definition --
#---------------------------------

class ICStatus ( LusiPyApp ) :

    def __init__ ( self ) :

        LusiPyApp.__init__ ( self, installLogger = True, usage = "usage: %prog [options]" )

        self._parser.add_option ( '-d', "--conn-string",
                                  action="store", dest="conn_string", default=_conn_str,
                                  help="database connection string", metavar="CONN_STRING" )

        self._parser.add_option ( '-u', "--user",
                                  action="store", dest="user", default=None,
                                  help="override default user name" )

        self._parser.add_option ( '-p', "--password",
                                  action="store", dest="password", default=None,
                                  help="specify user password (no password by default)" )

        self._parser.add_option ( '-e', "--experiment",
                                  action="store", dest="experiment", default=None,
                                  help="limit display to particular instrument:experiment" )

        self._parser.add_option ( '-Q', "--queue",
                                  action="store_true", dest="queue", default=False,
                                    help="only show queued datasets" )

        self._parser.add_option ( '-D', "--done",
                                  action="store_true", dest="done", default=False,
                                    help="only show processed datasets" )

        self._parser.add_option ( '-F', "--failed",
                                  action="store_true", dest="failed", default=False,
                                    help="only show failed datasets" )

        self._parser.add_option ( '-S', "--success",
                                  action="store_true", dest="success", default=False,
                                    help="only show successfully processed datasets" )

        self._parser.add_option ( '-l', "--last",
                                  action="store_true", dest="last", default=False,
                                    help="only show last processing" )
        

    #
    #  Run the whole thing after parsing the command argunments and 
    #  installing logger. See BbrPyApp class for details.
    #
    def _run ( self ) :

        # check the arguments
        if self._args :
            self._parser.error("unexpected arguments")
            return 2

        # create database instance
        conn = DbConnection( conn_string=self._options.conn_string, 
                             user=self._options.user,
                             passwd=self._options.password,
                             timeout = 0 )

        # build query
        vars = ()
        if self._options.last :
            subq = "SELECT instrument, experiment, run_number, max(created) AS last FROM fileset"
            if self._options.experiment :
                words = self._options.experiment.split(':', 1)
                if len(words) == 1 :
                    subq += " WHERE experiment=%s"
                    vars += (words[0],)
                else :
                    subq += " WHERE instrument=%s AND experiment=%s"
                    vars += (words[0], words[1])
            subq += " GROUP BY run_number, instrument, experiment"
 
            q = """SELECT fs.id, fs.instrument, fs.experiment, fs.run_number, 
                          stat.name as status, fs.run_type, fs.created
                FROM fileset fs, fileset_status_def stat, (""" +subq+ """) flast
                WHERE fs.instrument=flast.instrument AND fs.experiment=flast.experiment 
                AND fs.run_number=flast.run_number AND fs.created=flast.last
                AND stat.id=fs.fk_fileset_status  
            """
            
        else :
            
            q = """SELECT fs.id, fs.instrument, fs.experiment, fs.run_number, 
                          stat.name as status, fs.run_type, fs.created
                FROM fileset fs, fileset_status_def stat
                WHERE stat.id=fs.fk_fileset_status 
            """
        
            if self._options.experiment :
                words = self._options.experiment.split(':', 1)
                if len(words) == 1 :
                    q += " AND fs.experiment=%s "
                    vars += (words[0],)
                else :
                    q += " AND fs.instrument=%s AND fs.experiment=%s "
                    vars += (words[0], words[1])
                
        if self._options.queue :
            q += " AND stat.name IN (%s,%s,%s) "
            vars += ('Initial_Entry', 'Being_Copied', 'Waiting_Translation')
        if self._options.done :
            q += " AND stat.name IN (%s,%s) "
            vars += ('Archive_Error','Complete')
        if self._options.failed :
            q += " AND stat.name IN (%s,%s) "
            vars += ('Translation_Error','Archive_Error')
        if self._options.success :
            q += " AND stat.name=%s "
            vars += ('Complete',)

        q += " ORDER BY fs.instrument, fs.experiment, fs.run_number, fs.created"


        # execute query
        self.trace( "query: %s" % q)
        self.trace( "query vars: %s" % (vars,) )
        cursor = conn.cursor()
        cursor.execute( q, vars )

        # dump it
        rows = cursor.fetchmany()
        while rows :
            for row in rows :
                print "%-8s %-10s %4d %-20s %8s %-16s" % tuple( row[1:] )
            rows = cursor.fetchmany()

#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    app = ICStatus()
    rc = app.run()
    sys.exit(rc)
