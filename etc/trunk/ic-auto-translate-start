#!/bin/sh
#
# Shell script which runs a manages a bunch of controllers
#
# $Id$
#

# release directory
release=dm-current

# log directory
logdir=/reg/g/psdm/psdatmgr/ic/log

no_ffb="-O AMO -O CXI -O MEC -O MOB -O SXR"

prog=ic-auto-translate

# ===================================================================

usage () {
    cat <<EOF
Usage: $(basename $0) [options]
  Options:
    -h        - print this message
    -e        - start controller using exec
    -r path   - release name or directory
    -p path   - PID file path, def: none
EOF
}

while getopts her:p: c ; do
    case $c in
        h) usage ; exit 0 ;;
        r) release="$OPTARG" ;;
        p) pidfile="$OPTARG" ;;
        e) doexec=1 ;;
        \?) usage ; exit 2 ;;
    esac
done
shift `expr $OPTIND - 1`

# allow world access
umask 022

# create log dir
test -d "${logdir}" || mkdir -p "${logdir}" || exit 2

# redirect output
time=$(date +%Y%m%dT%H%M%S)
log="${logdir}/ic-controller/ic-auto-translate-${time}-$(hostname).log"
exec >"${log}" 2>&1

# run setup script, it should guess everything based on the current directory
. /reg/g/psdm/bin/sit_setup.sh "${release}"

echo "Running from release ${release}"
type ${prog} 



if [[ ${doexec:-0} -eq 1 ]] ; then
    pid=$$ 
    [[ -n "${pidfile}" ]] && echo "${pid}" >  "${pidfile}"
    exec PYTHONUNBUFFERED=x ${cmd} -v -v ${no_ffb} 
else
    PYTHONUNBUFFERED=x ${cmd} -v -v ${no_ffb} &
    pid=$!
    [[ -n "${pidfile}" ]] && echo "${pid}" >  "${pidfile}"
    exit
fi
