The layout of the sections in each quadrant in array coordinate system 
(i.e. 0,0 at the top left corner, first axis "x" pointing down (row number), 
second axis "y", pointing to the left (column number), is as follows: 

 # Quadrant 0, with 8 sections (2x1).
 # Each section has 2*194 x 185 pixels (2 asics)
 #   +---+---+-------+
 #   |   |   |   6   |
 #   + 5 | 4 +-------+    Each subsequent quadrant is rotated Nx90 degrees
 #   |   |   |   7   |
 #   +---+---+---+---+    
 #   |   2   |   |   |    
 #   +-------+ 0 | 1 |    
 #   |   3   |   |   |
 #   +-------+---+---+  <-- this corner is near beamline, for all quadrants. 


The geometry of the CSPad detector changes over time, so parameters 
should be read in from calibration files in 
  /reg/d/psdm/<INSTRUMENT>/<EXPERIMENT>/calib/<CalibVersion>/<DetAddress>/

The parameters in pyana / xtcexplorer follow the same scheme as designed 
for psana. 

 - For each section, there's a gap between asics: 3 pixels. In reality, 
   there isn't a real gap, but the pixels near the border are enlongated
   and the length can be represented by a 3-pixel gap. The longer pixels 
   have a larger active area for collecting light, and may seem brighter 
   when represented by a single pixel in the plot. 

 - The "psana geometry" is contructed from 9 types of constants, 
   in 9 config parameter files: 

   - marg_gap_shift: 
    (margin gaps and shifts. Movements due to motors)
     3x4 array:
	   	sec_offset  Quad_offset Quad_gap Quad_shift
	---------------------------------------------------
	x		15  	40   	0  	38
	y		15  	40   	0  	38
	z		 0  	 0   	0   	 0


 For each section:

   - rotation:
	(of each section, approximate orientation)
	8x4

           |  S0   S1   S2   S3   S4   S5   S6   S7
     -----------------------------------------------
     Q0    |   0    0  270  270  180  180  270  270
     Q1    |   0    0  270  270  180  180  270  270
     Q2    |   0    0  270  270  180  180  270  270
     Q3    |   0    0  270  270  180  180  270  270
     

   - tilt:
	(of each section, from optical measurements)
	 8x4
	Same layout as "rotation", containing measured small angles
	Simply tilting the array will interpolate pixels, and you will 
	loose information w.r.t. the original data. 
	Good enough for display, but sloooow!

   - center:
	(location of each section center in the quad array, from optical measurements)	
	8x12 array: The first 4 rows are x-position, the second 4 rows are y-positions, 
	the third 4 rows are z-positions:

		   S0       S1	      S2       S3      S4       S5        S6      S7
		---------------------------------------------------------------------
	x Q0	199.14   198.05   310.67    98.22   629.71   629.68   711.87   499.32
	  Q1	198.52   198.08   311.50    98.69   627.27   627.27   712.35   499.77
	  Q2	198.32   198.04   310.53    97.43   626.68   628.45   710.86   498.01
	  Q3	198.26   198.04   308.70    96.42   627.66   628.04   711.12   498.25

	y Q0	308.25    95.11   625.60   625.70   515.02   727.37   198.53   199.30
	  Q1	307.18    95.08   622.98   623.51   514.99   727.35   199.27   198.94
	  Q2	307.68    95.09   623.95   625.29   512.32   724.63   198.04   200.35
	  Q3	307.39    95.12   627.57   626.65   518.03   730.95   200.02   199.70

	z Q0	  0.31     0.12     0.05     0.12     0.28     0.24     0.40     0.27
	  Q1	  0.45     0.36     0.62     0.33     1.02     0.92     1.30     1.07
	  Q2	  0.23     0.22     0.11     0.15     0.24     0.20     0.60     0.42
	  Q3	  0.25     0.21     0.12     0.10     0.35     0.28     0.66     0.40
		----------------------------------------------------------------------

	To read this in to a more easy-to-use matrix form, I have done: 
	center = array.reshape((3,4,8))
	Thus center[0] gives a 4x8 array of x-coordinates, center[1] a 4x8 array of 
 	y-coordinates, etc. 

   - center_corr:
	(Mikhail's fine tuning of center coordinates of each section)
	I have simply used a single array = center + center_corr. 


  For each quad: 

   - offset:
     3x4 array for each quad, x,y,z offset w.r.t. upper left corner (0,0)

	   | Q0   Q1    Q2   Q3
	--------------------
	x  |  0    0  834  834
	y  |  0  834  834    0
	z  |  0    0    0    0
	
   - offset_corr:
     Mikhail's fine tuning
	
     Also here, I'm using an effective offset array that is simply = (offset + offset_corr)
   
   - quad_rotation (of each quad)
     1x4 array:
     180   90    0   270

     Instead of this array, I simply transpose the array. I don't know if it's any faster, but 
     at least it shouldn't be slower, and I don't think this rotation will ever change, so 
     I don't see the point of having a parameter for this

   - quad_tilt (of each quad)
     0 0 0 0

     Allow small-angle tilt of each quad. Not currently used. 


