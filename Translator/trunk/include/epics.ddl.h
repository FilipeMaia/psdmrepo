#ifndef TRANSLATOR_EPICS_DDL_H
#define TRANSLATOR_EPICS_DDL_H

/* ****************************
** Do not edit this file.  It is auto generated. **

The code is generated from psddl/src/DdlHdf5Translator.py 
  and the template in      psddl/data/templates/hdf5Translator.tmpl?XXX

The DDL defines the 14 epics classes via a C++ class hierarchy. 
These 14 types are EpicsPvCtrl* and EpicsPvTime* where * is one of:
String, Short, Float, Enum, Char, Long or Double.

An example of the hierarchy is

EpicsPvTimeDouble  derives from 
EpicsPvTimeHeader  derives from
EpicsPvHeader

moreover, classes have attributes that are themselves classes - the
dbr and stamp attributes.

We use the DDL description of the Epics Pv to 'unroll' the 14 epicsPv
types into  'flat' structures.  All fields within dbr are brought into
the top level. stamp in not flattened, so as not to deviate from the previous hdf5 schema.


For each of the 14 classes, we define a flat structure (except for stamp) in the Unroll
namespace. These structs hold one value.  See EpicsWriteBuffer for the templatized class
that will hold all the values.

Note for Unroll::EpicsPvCtrlEnum - space is allocated for the maximum number of 
enum string constants and the first value is stored after this. The hdf5 type will
only store the number of string constants used, with the values occuring after these.

 */

#include <string.h>

#include "hdf5/hdf5.h"
#include "psddl_psana/epics.ddl.h"

namespace Translator {

namespace Unroll {

struct epicsTimeStamp {
  uint32_t secPastEpoch;
  uint32_t nsec;
  epicsTimeStamp & operator=(const Psana::Epics::epicsTimeStamp & rhs) {
    secPastEpoch = rhs.sec();
    nsec = rhs.nsec();
    return *this;
 };
};

struct EpicsPvCtrlString {
  typedef Psana::Epics::EpicsPvCtrlString PsanaSrc;
  typedef char valueBaseType[Psana::Epics:: MAX_STRING_SIZE];
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
 
  char value[Psana::Epics:: MAX_STRING_SIZE];
};

struct EpicsPvCtrlShort {
  typedef Psana::Epics::EpicsPvCtrlShort PsanaSrc;
  typedef int16_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  char units[Psana::Epics::MAX_UNITS_SIZE];
  int16_t upper_disp_limit;
  int16_t lower_disp_limit;
  int16_t upper_alarm_limit;
  int16_t upper_warning_limit;
  int16_t lower_warning_limit;
  int16_t lower_alarm_limit;
  int16_t upper_ctrl_limit;
  int16_t lower_ctrl_limit;
 
  int16_t value;
};

struct EpicsPvCtrlFloat {
  typedef Psana::Epics::EpicsPvCtrlFloat PsanaSrc;
  typedef float valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  int16_t precision;
  char units[Psana::Epics::MAX_UNITS_SIZE];
  float upper_disp_limit;
  float lower_disp_limit;
  float upper_alarm_limit;
  float upper_warning_limit;
  float lower_warning_limit;
  float lower_alarm_limit;
  float upper_ctrl_limit;
  float lower_ctrl_limit;
 
  float value;
};

struct EpicsPvCtrlEnum {
  typedef Psana::Epics::EpicsPvCtrlEnum PsanaSrc;
  typedef uint16_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  int16_t no_str;
  char strs[Psana::Epics::MAX_ENUM_STATES][Psana::Epics::MAX_ENUM_STRING_SIZE];
 
  uint16_t value;
};

struct EpicsPvCtrlChar {
  typedef Psana::Epics::EpicsPvCtrlChar PsanaSrc;
  typedef uint8_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  char units[Psana::Epics::MAX_UNITS_SIZE];
  uint8_t upper_disp_limit;
  uint8_t lower_disp_limit;
  uint8_t upper_alarm_limit;
  uint8_t upper_warning_limit;
  uint8_t lower_warning_limit;
  uint8_t lower_alarm_limit;
  uint8_t upper_ctrl_limit;
  uint8_t lower_ctrl_limit;
 
  uint8_t value;
};

struct EpicsPvCtrlLong {
  typedef Psana::Epics::EpicsPvCtrlLong PsanaSrc;
  typedef int32_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  char units[Psana::Epics::MAX_UNITS_SIZE];
  int32_t upper_disp_limit;
  int32_t lower_disp_limit;
  int32_t upper_alarm_limit;
  int32_t upper_warning_limit;
  int32_t lower_warning_limit;
  int32_t lower_alarm_limit;
  int32_t upper_ctrl_limit;
  int32_t lower_ctrl_limit;
 
  int32_t value;
};

struct EpicsPvCtrlDouble {
  typedef Psana::Epics::EpicsPvCtrlDouble PsanaSrc;
  typedef double valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  char sPvName[Psana::Epics::iMaxPvNameLength];
  int16_t status;
  int16_t severity;
  int16_t precision;
  char units[Psana::Epics::MAX_UNITS_SIZE];
  double upper_disp_limit;
  double lower_disp_limit;
  double upper_alarm_limit;
  double upper_warning_limit;
  double lower_warning_limit;
  double lower_alarm_limit;
  double upper_ctrl_limit;
  double lower_ctrl_limit;
 
  double value;
};

struct EpicsPvTimeString {
  typedef Psana::Epics::EpicsPvTimeString PsanaSrc;
  typedef char valueBaseType[Psana::Epics:: MAX_STRING_SIZE];
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  char value[Psana::Epics:: MAX_STRING_SIZE];
};

struct EpicsPvTimeShort {
  typedef Psana::Epics::EpicsPvTimeShort PsanaSrc;
  typedef int16_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  int16_t value;
};

struct EpicsPvTimeFloat {
  typedef Psana::Epics::EpicsPvTimeFloat PsanaSrc;
  typedef float valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  float value;
};

struct EpicsPvTimeEnum {
  typedef Psana::Epics::EpicsPvTimeEnum PsanaSrc;
  typedef uint16_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  uint16_t value;
};

struct EpicsPvTimeChar {
  typedef Psana::Epics::EpicsPvTimeChar PsanaSrc;
  typedef uint8_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  uint8_t value;
};

struct EpicsPvTimeLong {
  typedef Psana::Epics::EpicsPvTimeLong PsanaSrc;
  typedef int32_t valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  int32_t value;
};

struct EpicsPvTimeDouble {
  typedef Psana::Epics::EpicsPvTimeDouble PsanaSrc;
  typedef double valueBaseType;
  int16_t iPvId;
  int16_t iDbrType;
  int16_t iNumElements;
  int16_t status;
  int16_t severity;
  epicsTimeStamp stamp;
 
  double value;
};

} // namespace Unroll

void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlString &source, Unroll::EpicsPvCtrlString &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlShort &source, Unroll::EpicsPvCtrlShort &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlFloat &source, Unroll::EpicsPvCtrlFloat &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlEnum &source, Unroll::EpicsPvCtrlEnum &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlChar &source, Unroll::EpicsPvCtrlChar &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlLong &source, Unroll::EpicsPvCtrlLong &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvCtrlDouble &source, Unroll::EpicsPvCtrlDouble &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeString &source, Unroll::EpicsPvTimeString &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeShort &source, Unroll::EpicsPvTimeShort &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeFloat &source, Unroll::EpicsPvTimeFloat &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeEnum &source, Unroll::EpicsPvTimeEnum &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeChar &source, Unroll::EpicsPvTimeChar &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeLong &source, Unroll::EpicsPvTimeLong &dest);
void copyToUnrolledExceptForValue(const Psana::Epics::EpicsPvTimeDouble &source, Unroll::EpicsPvTimeDouble &dest);
 

} // namespace Translator

#endif
