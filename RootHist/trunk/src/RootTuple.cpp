//------------------------------------------------------------------------
// File and Version Information:
// 	$Id$
//
// Description:
//	Class RootTuple...
//
// Author List:
//      Mikhail S. Dubrovin
//
//------------------------------------------------------------------------

//-----------------
// Class Headers --
//-----------------
#include "RootHist/RootTuple.h"

//-----------------
// C/C++ Headers --
//-----------------
#include <iostream>
#include <sstream>
#include <iomanip>

//-------------------------------
// Collaborating Class Headers --
//-------------------------------
#include "MsgLogger/MsgLogger.h"
#include "PSHist/Exceptions.h"
#include "RootHist/RootColumn.h"

//-----------------------------------------------------------------------
// Local Macros, Typedefs, Structures, Unions and Forward Declarations --
//-----------------------------------------------------------------------

namespace {
  
  const char* logger = "RootHist";
  
}

//		----------------------------------------
// 		-- Public Function Member Definitions --
//		----------------------------------------

namespace RootHist {

int RootTuple::s_number_of_columns = 0;

RootTuple::RootTuple ( const std::string& name, const std::string& title )
 : PSHist::Tuple()
{
  m_tuple = new TTree( name.c_str(), title.c_str() ); 
  MsgLog(logger, debug, "Created tuple " << name << " with title=" << title);
}

RootTuple::~RootTuple()
{
  // delete all column objects
  for (std::map<std::string, PSHist::Column*>::iterator it = m_columns.begin() ; it != m_columns.end() ; ++ it) {
    delete it->second;
  }
}

PSHist::Column* 
RootTuple::column( const std::string& name, void* address, const std::string& columnlist ) 
{
  if (m_columns.find(name) != m_columns.end()) {
    throw PSHist::ExceptionDuplicateColumn(ERR_LOC, m_tuple->GetName(), name);
  }
  
  RootColumn* col = new RootColumn (this, name, address, columnlist);
  m_columns.insert(std::make_pair(name, col));
  
  return col;
}

PSHist::Column* RootTuple::column( void* address, const std::string& columnlist ) 
{
  // make unique name
  std::string name = RootTuple::getAutoGeneratedName();
 
  PSHist::Column* col = new RootColumn (this, name, address, columnlist);
  m_columns.insert(std::make_pair(name, col));
  
  return col;
}


void RootTuple::print( std::ostream& o ) const 
{
  o << "RootTuple(" << m_tuple->GetName() << ")";
}


void RootTuple::fill() 
{
  m_tuple->Fill();
} 


void RootTuple::reset() 
{
  m_tuple->Reset();
}


std::string 
RootTuple::getAutoGeneratedName() 
{
  s_number_of_columns++;
  //cout << "RootTuple::getAutoGeneratedName() : s_number_of_columns = " << s_number_of_columns << endl;  
  std::stringstream stream_name;
  stream_name << "C_N" << std::setw(4) << std::setfill('0') << s_number_of_columns;
  return stream_name.str();
}



} // namespace RootHist
