//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id$
//
// Description:
//	Class RootH1...
//
// Author List:
//      Mikhail S. Dubrovin
//
//------------------------------------------------------------------------

//-----------------------
// This Class's Header --
//-----------------------
#include "RootHist/RootH1.h"
#include "PSHist/HManager.h" // to get type_int, type_float, etc.  

//-----------------
// C/C++ Headers --
//-----------------
#include <sstream> // for int to string conversion using std::stringstream 
#include <iomanip> // for formatted conversion std::setw(3) , std::setfill

using std::cout;
using std::endl;
using std::ostream;

//-------------------------------
// Collaborating Class Headers --
//-------------------------------

//-----------------------------------------------------------------------
// Local Macros, Typedefs, Structures, Unions and Forward Declarations --
//-----------------------------------------------------------------------

//		----------------------------------------
// 		-- Public Function Member Definitions --
//		----------------------------------------

namespace RootHist {

int RootH1::s_number_of_booked_histograms = 0;

//----------------
// Constructors --
//----------------

RootH1::RootH1 ( int type, const std::string &name, const std::string &title, int nbins, double xlow, double xhigh )
  : PSHist::H1()
{
  m_hnumber = ++s_number_of_booked_histograms;
  m_type    = type;

  if      (m_type == PSHist::HManager::type_int   ) { m_histp = new TH1I( name.c_str(), title.c_str(), nbins, xlow, xhigh ); }
  else if (m_type == PSHist::HManager::type_float ) { m_histp = new TH1F( name.c_str(), title.c_str(), nbins, xlow, xhigh ); }
  else if (m_type == PSHist::HManager::type_double) { m_histp = new TH1D( name.c_str(), title.c_str(), nbins, xlow, xhigh ); }

  cout << "RootH1::RootH1(...) - Created the 1d equi-binned histogram N" << m_hnumber << " of type=" << type << endl;
  //printHistogramDataTypes();
}


RootH1::RootH1 ( int type, const std::string &name, const std::string &title, int nbins, double *xbinedges )
  : PSHist::H1()
{
  m_hnumber = ++s_number_of_booked_histograms;
  m_type    = type;

  if      (m_type == PSHist::HManager::type_int   ) { m_histp = new TH1I( name.c_str(), title.c_str(), nbins, xbinedges ); }
  else if (m_type == PSHist::HManager::type_float ) { m_histp = new TH1F( name.c_str(), title.c_str(), nbins, xbinedges ); }
  else if (m_type == PSHist::HManager::type_double) { m_histp = new TH1D( name.c_str(), title.c_str(), nbins, xbinedges ); }

  cout << "RootH1::RootH1(...) - Created the 1d variable bin sizes histogram N" << m_hnumber << " of type=" << type << endl;
}


//--------------
// Destructor --
//--------------
RootH1::~RootH1 ()
{
}


void RootH1::print(ostream &o) const
{ 
  o << "RootH1, title" << endl;
}


void RootH1::fill( double x, double weight ) {

  m_histp->Fill( x, weight );

  /*
  if ( histp->IsA() == TProfile::Class() ) {
    ((TProfile*)histp)->Fill( x , weight , 1. );
  }
  */
} 


void RootH1::reset() {

  m_histp->Reset();

}


void RootH1::printHistogramDataTypes()
{
  cout << "type_int   =" << PSHist::HManager::type_int    << endl;
  cout << "type_float =" << PSHist::HManager::type_float  << endl;
  cout << "type_double=" << PSHist::HManager::type_double << endl;
}


// RootH1::getAutoGeneratedName() generates an automatic name for histogram, which looks like: H1_N0001
std::string RootH1::getAutoGeneratedName() {
  std::stringstream stream_hname;
  stream_hname << "H1_N" << std::setw(4) << std::setfill('0') << m_hnumber;
  m_hname = stream_hname.str();
  return m_hname;
}

  //// factory for 1d histograms
  //template <typename HTYPE>
  //HTYPE* makeH1(const std::string& name, const std::string& title, int nbins, double xlow, double xhigh )
  //{
  //    return new HTYPE(name.c_str(), title.c_str(), nbins, xlow, xhigh);
  //}  

} // namespace RootHist


