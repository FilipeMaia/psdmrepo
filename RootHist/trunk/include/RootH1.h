#ifndef ROOTHIST_ROOTH1_H
#define ROOTHIST_ROOTH1_H

//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id$
//
// Description:
//	Class RootH1.
//
//------------------------------------------------------------------------

//-----------------
// C/C++ Headers --
//-----------------
#include <iostream>
#include <string>


//----------------------
// Base Class Headers --
//----------------------
#include "PSHist/H1.h"

//-------------------------------
// Collaborating Class Headers --
//-------------------------------

//------------------------------------
// Collaborating Class Declarations --
//------------------------------------

#include "root/TH1.h"
//#include "root/TH2.h"
#include "root/TProfile.h"

//		---------------------
// 		-- Class Interface --
//		---------------------

namespace RootHist {

/**
 *  This software was developed for the LCLS project.  If you use all or 
 *  part of it, please give an appropriate acknowledgment.
 *
 *  @see AdditionalClass
 *
 *  @version $Id$
 *
 *  @author Mikhail S. Dubrovin
 */

class RootH1 : public PSHist::H1 {
public:

  // Constructors
  RootH1 () ;
  RootH1 ( int type, const std::string &name, const std::string &title, int nbins, double xlow, double xhigh ) ;
  RootH1 ( int type, const std::string &name, const std::string &title, int nbins, double *xbinedges ) ;

  // Destructor
  virtual ~RootH1 () ;

  // Selectors (const)

  // Modifiers

  virtual void fill(double x, double weight=1.0);
  virtual void reset();
  virtual void print(std::ostream &o) const;

private:

  // Data members
  std::string m_hname;
  int         m_hnumber;
  int         m_type;
  TH1        *m_histp;

  //TH1I       *m_hist1i;
  //TH1F       *m_hist1f;
  //TH1D       *m_hist1d;

  // Static members
  static int s_number_of_booked_histograms;

  // Copy constructor and assignment are disabled by default
  RootH1 ( const RootH1& ) ;
  RootH1& operator = ( const RootH1& ) ;

  std::string getAutoGeneratedName();
  void printHistogramDataTypes();
};

} // namespace RootHist

#endif // ROOTHIST_ROOTH1_H
