#!/bin/sh
#
# $Id$
#
# Convenience interface for Subversion
#


usage() {
  svn help
  cat << EOD

psvn is a wrapper script for svn which forwards most of the commands to
svn but adds few subcommands which simply common tasks. Use psvn in 
place of regular svn command, all commands noty listed below are passed 
to svn.

psvn-specific subcommands:
   tags      - list all tags for a given or current package
   tag       - make new tag for a package
   newpkg    - create directory structure for new package
   export    - extracts code and adds .sit-tag file
   mktxtprop - set svn properties for text-like files
   tar       - make tarball from a package in repository

EOD
}

help_() {
  case "$1" in
    tags|tag|newpkg|export|mktxtprop|tar) help_$1 ;;
    '') usage ;;
    *) svn help "$@" ;;
  esac
}

help_tags() {
  cat << EOD

Usage: `basename $0` tags [<package>]

  Prints the list of tags for the given package. If package name is not 
  given then use current package. Uses "long" SVN format for "svn ls".

EOD
}

help_tag() {
  cat << EOD

Usage: `basename $0` tag [options] <tag-name>

  Available options:
    -p package    makes tag for package name, otherwise for local package
    -r revision   makes tag for a specific revision (could be HEAD), 
                  otherwise for working copy
    
EOD
}

help_newpkg() {
  cat << EOD

Usage: `basename $0` newpkg <package>

EOD
}

help_export() {
  cat << EOD

Usage: `basename $0` export [options] <package> <tag> <path>

  Will export package named <package> with the specified tag into 
  a directory <path>. Creates .sit-tag file in the package directory
  with the tag name.

  Available options:
    -f|--force   override the content of the directory
    
EOD
}

help_mktxtprop() {
  cat << EOD

Usage: `basename $0` mktxtprop [options] file [...]

  Sets SVN properties for specified files: 
     svn:keywords : Author Date Id Revision
     svn:eol-style : native
    
  Available options:
    -R    descend recursively
EOD
}

help_tar() {
  cat << EOD

Usage: `basename $0` tar [options] <package> <tag> [<file-name>]

  Extract package from repository and make tarball out of it.
  If file-name is not specified then top directory name will be
  used (given with -d option, default is package name) with 
  added .tar, .tar.gz, or .tar.bz2 extension.

  Available options:
    -d directory   Tar top-level directory name, default is package name
    -z             Compress tar file with gzip
    -j             Compress tar file with bzip2
EOD
}

# get SVN package name in the current directory
localpkg() {
  svn info 2>/dev/null | sed -n "\%^URL: $SIT_SVN%s%URL: $SIT_SVN/*\([^/]*\)/.*%\1%p"
}

#
# Print the list of the tags
#
exec_tags() {

  pkg=${1:-`localpkg`}
  pkg=${pkg:?Cannot determine package name}
  
  svn ls -r HEAD -v "$SIT_SVN/$pkg/tags"

}

#
# Create new package
#
exec_newpkg() {
	
  pkg=${1:?No package name provided}

  svn mkdir -m "Creating package $pkg" "$SIT_SVN/$pkg" \
              "$SIT_SVN/$pkg/trunk" "$SIT_SVN/$pkg/tags" "$SIT_SVN/$pkg/branches"
}

#
# Export the package
#
exec_export() {
	
  force=""
  if [ "$1" == "-f" -o "$1" == "--force" ] ; then
  	force="--force"
  	shift
  fi
  pkg=${1:?No package name provided}
  tag=${2:?No tag name provided}
  path=${3:?No path provided}

  svn export $force "$SIT_SVN/$pkg/tags/$tag" "$path" &&
     echo "$tag" > "$path/.sit-tag"

}

#
# Make tarball
#
exec_tar() {
    
  dir=""
  taropt=""
  ext=".tar"
  # get the options
  OPTIND=1
  while getopts d:zj c ; do
    case $c in
      d) dir="$OPTARG" ;;
      z) taropt="-z"; ext="$ext.gz" ;;
      j) taropt="-j"; ext="$ext.bz2" ;;
      \?) help_tar ; exit 2 ;;
    esac
  done
  shift `expr $OPTIND - 1`
  
  pkg=${1:?No package name provided}
  tag=${2:?No tag name provided}
  dir="${dir:-${pkg}}"
  tar="${3:-${dir}${ext}}"

  repo="$SIT_SVN/$pkg/tags/$tag"
  test "$tag" = "HEAD" && repo="$SIT_SVN/$pkg/trunk"

  # make temporary directory
  tmpdir=${TMPDIR:-${TMP:-/tmp}}/svn-tar-$$
  mkdir "$tmpdir"
  svn export "$repo" "$tmpdir/$dir" &&
     echo "$tag" > "$tmpdir/$dir/.sit-tag" &&
     tar -c $taropt -C "$tmpdir" -f "$tar" "$dir"
  rm -rf "$tmpdir"
}

#
# Change properties
#
exec_mktxtprop() {

  recurse=""
  # get the options
  OPTIND=1
  while getopts R c ; do
    case $c in
      R) recurse="-R" ;;
      \?) help_mktxtprop ; exit 2 ;;
    esac
  done
  shift `expr $OPTIND - 1`

  target=${1:?No target name provided}
  
  svn propdel $recurse svn:executable "$@"
  svn propset $recurse svn:keywords "Author Date Id Revision" "$@"
  svn propset $recurse svn:eol-style native "$@"

}

#
# Create new tag for a package
#
exec_tag() {
	
  rev=""
  pkg=""
  # get the options
  OPTIND=1
  while getopts r:p: c ; do
    case $c in
      p) pkg="$OPTARG" ;;
      r) rev="$OPTARG" ;;
      \?) help_tag ; exit 2 ;;
    esac
  done
  shift `expr $OPTIND - 1`

  tag=${1:?No tag provided}

  if [ -n "$rev" ] ; then

    pkg=${pkg:-`localpkg`}
    pkg=${pkg:?Cannot determine package name}
    svn copy -r "$rev" -m 'Tagging $pkg with $tag' \
      "$SIT_SVN/$pkg/trunk" "$SIT_SVN/$pkg/tags/$tag"

  elif [ -n "$pkg" ] ; then

    svn copy -m "Tagging $pkg with $tag" "$pkg" "$SIT_SVN/$pkg/tags/$tag"
    
  else

    pkg=`localpkg`
    pkg=${pkg:?Cannot determine package name}
    svn copy -m "Tagging $pkg with $tag" "." "$SIT_SVN/$pkg/tags/$tag"
    
  fi
}


# need SIT_SVN for operations
_chk=${SIT_SVN:?}

# check arguments
if [ $# -eq 0 ] ; then
  echo "Type '`basename $0` help' for usage."
  exit 2
fi

# check arguments
case "$2" in
  --help|-h|-\?) help_ $1 ; exit ;;
esac

# dispatch
case "$1" in
  help) shift ; help_ $1 ;;
  tags|tag|newpkg|export|mktxtprop|tar) c=$1; shift ; exec_$c "$@" ;;
  *) svn "$@" ;;
esac
