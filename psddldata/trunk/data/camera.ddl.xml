<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE psddl SYSTEM "psddl.dtd">

<psddl>
	<package name="Camera">
	
	   Package which defines data types for different kinds of cameras.
	
		<pstype name="FrameCoord">

            Class representing the coordinates of pixels iside the camera frame.
		
            <tag name="value-type"/>
        
            <attribute name="_column" type="uint16_t" accessor="column">
            Column index (x value).
            </attribute>

            <attribute name="_row" type="uint16_t" accessor="row">
            Row index (y value).
            </attribute>
            
            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

		</pstype>
		
		<!-- ========================================================================= -->
		

		<pstype name="FrameFccdConfigV1" version="1" type_id="Id_FrameFccdConfig">
		
		    This class was never defined/implemented.
		
		</pstype>
		
		<!-- ========================================================================= -->
		
		<pstype name="FrameFexConfigV1" version="1" type_id="Id_FrameFexConfig">

            Class containing configuration data for online frame feature extraction process.
		
            <enum name="Forwarding">
                <enum-const name="NoFrame" />
                <enum-const name="FullFrame" />
                <enum-const name="RegionOfInterest" />
            </enum>

            <enum name="Processing">
                <enum-const name="NoProcessing" />
                <enum-const name="GssFullFrame" />
                <enum-const name="GssRegionOfInterest" />
                <enum-const name="GssThreshold" />
            </enum>


            <attribute name="_forwarding" type="uint32_t">
            frame forwarding policy
            </attribute>

            <method name="forwarding" type="Forwarding">
                Forwarding policy for frame data.
                <tag name="inline" />
                <expr lang="C++" value="Forwarding({self}._forwarding)"/>
            </method>

            <attribute name="_forward_prescale" type="uint32_t" accessor="forward_prescale">
            Prescale of events with forwarded frames
            </attribute>

            <attribute name="_processing" type="uint32_t">
            algorithm to apply to frames to produce processed output
            </attribute>

            <method name="processing" type="Processing">
            Algorithm to apply to frames to produce processed output.
                <tag name="inline" />
                <expr lang="C++" value="Processing({self}._processing)"/>
            </method>

            <attribute name="_roiBegin" type="FrameCoord" accessor="roiBegin">
            Coordinate of start of rectangular region of interest (inclusive).
            </attribute>

            <attribute name="_roiEnd" type="FrameCoord" accessor="roiEnd">
            Coordinate of finish of rectangular region of interest (exclusive).
            </attribute>

            <attribute name="_threshold" type="uint32_t" accessor="threshold">
            Pixel data threshold value to apply in processing.
            </attribute>

            <attribute name="_masked_pixel_count" type="uint32_t" accessor="number_of_masked_pixels">
            Count of masked pixels to exclude from processing.
            </attribute>

            <attribute name="_masked_pixel_coordinates" type="FrameCoord"
                shape="{self}._masked_pixel_count" 
                accessor="masked_pixel_coordinates"
                shape_method="masked_pixel_shape">
            Location of masked pixel coordinates.
            </attribute>


		</pstype>
		

        <!-- ========================================================================= -->
        
        <pstype name="FrameV1" version="1" type_id="Id_Frame">
        

            <attribute name="_width" type="uint32_t" accessor="width">
            Number of pixels in a row.
            </attribute>

            <attribute name="_height" type="uint32_t" accessor="height">
            Number of pixels in a column.
            </attribute>

            <attribute name="_depth" type="uint32_t" accessor="depth">
            Number of bits per pixel.
            </attribute>

            <attribute name="_offset" type="uint32_t" accessor="offset">
            Fixed offset/pedestal value of pixel data.
            </attribute>

            <attribute name="_pixel_data" type="uint8_t"
                shape="{self}._width*{self}._height*(({self}._depth+7)/8)" 
                accessor="_int_pixel_data">
            Pixel data as array of bytes, method is for internal use only, use data8() or 
            data16() for access to the data.
            </attribute>

            <method name="data8" type="uint8_t" rank="2">
                Returns pixel data array when stored data type is 8-bit (depth() is less than 9).
                If data type is 16-bit then empty array is returned, use data16() method in this case.
                <code lang="C++" body="if ({self}._depth &gt; 8) return ndarray&lt;uint8_t, 2&gt;(); return make_ndarray(_int_pixel_data().data(), _height, _width);" />
            </method>

            <method name="data16" type="uint16_t" rank="2">
                Returns pixel data array when stored data type is 16-bit (depth() is greater than 8).
                If data type is 8-bit then empty array is returned, use data8() method in this case.
                <code lang="C++" body="if ({self}._depth &lt;= 8) return ndarray&lt;uint16_t, 2&gt;(); return make_ndarray((uint16_t*)_int_pixel_data().data(), _height, _width);" />
            </method>

        </pstype>
        
        <!-- ========================================================================= -->
        
        <pstype name="TwoDGaussianV1" version="1" type_id="Id_TwoDGaussian">
        

            <attribute name="_integral" type="uint64_t" accessor="integral">
            </attribute>

            <attribute name="_xmean" type="double" accessor="xmean">
            </attribute>

            <attribute name="_ymean" type="double" accessor="ymean">
            </attribute>

            <attribute name="_major_axis_width" type="double" accessor="major_axis_width">
            </attribute>

            <attribute name="_minor_axis_width" type="double" accessor="minor_axis_width">
            </attribute>

            <attribute name="_major_axis_tilt" type="double" accessor="major_axis_tilt">
            </attribute>

            <ctor>
                Default constructor
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="auto"/>
            </ctor>

        </pstype>
        
	</package>
</psddl>
