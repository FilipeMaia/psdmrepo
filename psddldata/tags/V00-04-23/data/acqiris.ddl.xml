<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE psddl SYSTEM "psddl.dtd">

<psddl>
    <package name="Acqiris">
    
       Package containing all data classes produced by Acqiris devices.
       
    
        <pstype name="VertV1" version="1" pack="4">
        
               Class containing Acqiris configuration data for vertical axis.
        
            <tag name="value-type"/>
        
            <enum name="Coupling">
            
              Coupling modes
            
              <enum-const name="GND" />
              <enum-const name="DC" />
              <enum-const name="AC" />
              <enum-const name="DC50ohm" />
              <enum-const name="AC50ohm" />
            </enum>
        
            <enum name="Bandwidth">
              <enum-const name="None" />
              <enum-const name="MHz25" />
              <enum-const name="MHz700" />
              <enum-const name="MHz200" />
              <enum-const name="MHz20" />
              <enum-const name="MHz35" />
            </enum>
        
            <attribute name="_fullScale" type="double" accessor="fullScale">
            Full vertical scale.
            </attribute>

            <attribute name="_offset" type="double" accessor="offset">
            Offset value.
            </attribute>

            <attribute name="_coupling" type="uint32_t" accessor="coupling">
            Coupling mode.
            </attribute>

            <attribute name="_bandwidth" type="uint32_t" accessor="bandwidth">
            Bandwidth enumeration.
            </attribute>

            <method name="slope" type="double">
                Calculated slope.
                <expr lang="C++" value="{self}.fullScale() / ((1 &lt;&lt; Acqiris::DataDescV1Elem::NumberOfBits)*(1 &lt;&lt; Acqiris::DataDescV1Elem::BitShift))" />
            </method>

            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        
        <pstype name="HorizV1" version="1" pack="4">
        
            Class containing Acqiris configuration data for horizontal axis.
        
            <tag name="value-type"/>
        
            <attribute name="_sampInterval" type="double" accessor="sampInterval">
            Interval for single sample.
            </attribute>

            <attribute name="_delayTime" type="double" accessor="delayTime">
            Delay time.
            </attribute>

            <attribute name="_nbrSamples" type="uint32_t" accessor="nbrSamples">
            Number of samples.
            </attribute>

            <attribute name="_nbrSegments" type="uint32_t" accessor="nbrSegments">
            Number of segments.
            </attribute>

            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->

        <pstype name="TrigV1" version="1" pack="4">
        
            Class containing Acqiris configuration data for triggering.
        
            <tag name="value-type"/>
        
            <enum name="Source">
              Trigger source.
              <enum-const name="Internal" value="1" />
              <enum-const name="External" value="-1" />
            </enum>

            <enum name="Coupling">
              <enum-const name="DC" value="0" />
              <enum-const name="AC" value="1" />
              <enum-const name="HFreject" value="2" />
              <enum-const name="DC50ohm" value="3" />
              <enum-const name="AC50ohm" value="4" />
            </enum>

            <enum name="Slope">
            Triggering slope.
              <enum-const name="Positive" />
              <enum-const name="Negative" />
              <enum-const name="OutOfWindow" />
              <enum-const name="IntoWindow" />
              <enum-const name="HFDivide" />
              <enum-const name="SpikeStretcher" />
            </enum>
        
            <attribute name="_coupling" type="uint32_t" accessor="coupling">
            </attribute>

            <attribute name="_input" type="uint32_t" accessor="input">
            Trigger source
            </attribute>

            <attribute name="_slope" type="uint32_t" accessor="slope">
            Triggering slope.
            </attribute>

            <attribute name="_level" type="double" accessor="level">
            Trigger level.
            </attribute>

            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->

        <pstype name="ConfigV1" version="1" type_id="Id_AcqConfig" pack="4" levels="Source">
        
            Class containing all Acqiris configuration data.

            <tag name="config-type"/>
        
        
            <const name="MaxChan" value="20">
            Maximum number of the configured channels.
            </const>

            <attribute name="_nbrConvertersPerChannel" type="uint32_t" accessor="nbrConvertersPerChannel">
            Number of ADCs per channel.
            </attribute>

            <attribute name="_channelMask" type="uint32_t" accessor="channelMask">
            Bit mask for channels.
            </attribute>

            <attribute name="_nbrBanks" type="uint32_t" accessor="nbrBanks">
            Total number of banks.
            </attribute>

            <attribute name="_trig" type="TrigV1" accessor="trig">
            Trigger configuration.
            </attribute>

            <attribute name="_horiz" type="HorizV1" accessor="horiz">
            Configuration for horizontal axis
            </attribute>

            <attribute name="_vert" type="VertV1" shape="MaxChan" accessor="vert" shape_method="vert_shape">
            Configuration for vertical axis (one per channel).
            </attribute>

            <method name="nbrChannels" type="uint32_t">
                Number of channels calculated from channel bit mask.
                <expr lang="C++" value="__builtin_popcount({self}._channelMask)"/>
            </method>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TimestampV1" version="1" pack="4">
        
            Class representing Acqiris timestamp value.

            <tag name="value-type"/>
        
            <attribute name="_horPos" type="double" accessor="pos">
            Horizontal position, for the segment, of the first (nominal) data point with respect 
            to the origin of the nominal trigger delay in seconds.
            </attribute>

            <attribute name="_timeStampLo" type="uint32_t" accessor="timeStampLo">
            </attribute>

            <attribute name="_timeStampHi" type="uint32_t" accessor="timeStampHi">
            </attribute>

            <method name="value" type="uint64_t">
                64-bit trigger timestamp, in units of picoseconds. The timestamp is the trigger time 
                with respect to an arbitrary time origin.
                <expr lang="C++" value="(((uint64_t){self}._timeStampHi)&lt;&lt;32) + {self}._timeStampLo" />
            </method>

            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>
        </pstype>

        <!-- ========================================================================= -->

        <pstype name="DataDescV1Elem" version="1" pack="4">
        
            Class representing Acqiris waveforms from single channel.

            <const name="NumberOfBits" value="10" />
            <const name="BitShift" value="6" />
            <const name="_extraSize" value="32" />

            <xtc-config name="ConfigV1" />

            <attribute name="_returnedSamplesPerSeg" type="uint32_t" accessor="nbrSamplesInSeg">
            Number of samples in one segment.
            </attribute>

            <attribute name="_indexFirstPoint" type="uint32_t" accessor="indexFirstPoint">
            
            </attribute>

            <attribute name="_sampTime" type="double" accessor="">
            </attribute>

            <attribute name="_vGain" type="double" accessor="">
            </attribute>

            <attribute name="_vOffset" type="double" accessor="">
            </attribute>

            <attribute name="_returnedSegments" type="uint32_t" accessor="nbrSegments">
            Number of segments.
            </attribute>

            <attribute name="_nbrAvgWforms" type="uint32_t" accessor="">
            </attribute>

            <attribute name="_actualTriggersInAcqLo" type="uint32_t" accessor="">
            </attribute>

            <attribute name="_actualTriggersInAcqHi" type="uint32_t" accessor="">
            </attribute>

            <attribute name="_actualDataSize" type="uint32_t" accessor="">
            </attribute>

            <attribute name="_reserved2" type="uint32_t" accessor="">
            </attribute>

            <attribute name="_reserved3" type="double" accessor="">
            </attribute>

            <attribute name="_timestamps" type="TimestampV1" 
                    shape="{xtc-config}.horiz().nbrSegments()" accessor="timestamp"
                    shape_method="timestamps_shape">
            Timestamps, one timestamp per segment.
            </attribute>

            <attribute name="_skip" type="int16_t" shape="{self}.indexFirstPoint()" />

            <attribute name="_waveforms" type="int16_t" 
                    shape="{xtc-config}.horiz().nbrSegments(),{xtc-config}.horiz().nbrSamples()" 
                    accessor="waveforms" shape_method="waveforms_shape">
            Waveforms data, two-dimensional array [nbrSegments()]*[nbrSamplesInSeg()]. Note that 
            unlike in pdsdata this already takes into account value of the indexFirstPoint so
            that client code does not need to correct for this offset.
            </attribute>

            <attribute name="_extraSpace" type="int16_t" shape="_extraSize-{self}.indexFirstPoint()">
            </attribute>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="DataDescV1" version="1" type_id="Id_AcqWaveform" pack="4" levels="Source">
        
            Class containing waveform data (DataDescV1Elem) for all channels.

            <xtc-config name="ConfigV1" />

            <attribute name="_data" type="DataDescV1Elem" shape="{xtc-config}.nbrChannels()" 
                accessor="data" shape_method="data_shape">
            Waveform data, one object per channel.
            </attribute>
            
        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcChannel" pack="4">
        
            Configuration for Acqiris TDC channel.

            <tag name="value-type"/>
        
            <enum name="Channel">
              Types of channels.
              <enum-const name="Veto" value="-2" />
              <enum-const name="Common" value="-1" />
              <enum-const name="Input1" value="1" />
              <enum-const name="Input2" value="2" />
              <enum-const name="Input3" value="3" />
              <enum-const name="Input4" value="4" />
              <enum-const name="Input5" value="5" />
              <enum-const name="Input6" value="6" />
            </enum>

            <enum name="Mode">
              <enum-const name="Active" value="0" />
              <enum-const name="Inactive" value="1" />
            </enum>

            <enum name="Slope">
              <enum-const name="Positive"/>
              <enum-const name="Negative"/>
            </enum>

            <attribute name="_channel" type="uint32_t" accessor="_channel_int">
            Channel type as integer number, clients should use channel() method instead. 
            </attribute>

            <attribute name="_mode" type="uint32_t" accessor="_mode_int">
            
                Bitfield value, should not be used directly. Use mode() and slope()
                in the client code.

                <bitfield name="_bf_slope" size="1" type="Slope" accessor="slope">
                </bitfield>

                <bitfield name="_bf_pad" size="30">
                </bitfield>

                <bitfield name="_bf_mode" size="1" type="Mode" accessor="mode">
                </bitfield>

            </attribute>

            <attribute name="_level" type="double" accessor="level">
            </attribute>

            <method name="channel" type="Channel">
                <expr lang="C++" value="Channel({self}._channel)" />
                <tag name="inline"/>
            </method>

            <ctor>
                Default constructor without arguments
                <tag name="inline"/>
            </ctor>
            <ctor>
                Standard constructor
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcAuxIO" pack="4">
        
            configuration for auxiliary IO channel.

            <tag name="value-type"/>
        
            <enum name="Channel">
              <enum-const name="IOAux1" value="1" />
              <enum-const name="IOAux2" value="2" />
            </enum>

            <enum name="Mode">
              <enum-const name="BankSwitch" value="1" />
              <enum-const name="Marker" value="2" />
              <enum-const name="OutputLo" value="32" />
              <enum-const name="OutputHi" value="33" />
            </enum>

            <enum name="Termination">
              <enum-const name="ZHigh" value="0"/>
              <enum-const name="Z50" value="1"/>
            </enum>

            <attribute name="_channel" type="uint32_t" accessor="channel_int">
            Channel type as integer number, clients should use channel() method instead. 
            </attribute>

            <attribute name="_signal" type="uint32_t" accessor="signal_int">
            Mode as integer number, clients should use mode() method instead.
            </attribute>

            <attribute name="_qualifier" type="uint32_t" accessor="qualifier_int">
            Termination as integer number, clients should use term() method instead.
            </attribute>

            <method name="channel" type="Channel">
                <expr lang="C++" value="Channel({self}._channel)" />
                <tag name="inline"/>
            </method>

            <method name="mode" type="Mode">
                <expr lang="C++" value="Mode({self}._signal)" />
                <tag name="inline"/>
            </method>

            <method name="term" type="Termination">
                <expr lang="C++" value="Termination({self}._qualifier)" />
                <tag name="inline"/>
            </method>

            <ctor>
                Default constructor without arguments
                <tag name="inline"/>
            </ctor>
            <ctor>
                Standard constructor
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcVetoIO" pack="4">
        
            Class with configuration data for Veto IO channel.

            <tag name="value-type"/>
        
            <enum name="Channel">
              <enum-const name="ChVeto" value="13" />
            </enum>

            <enum name="Mode">
              <enum-const name="Veto" value="1" />
              <enum-const name="SwitchVeto" value="2" />
              <enum-const name="InvertedVeto" value="3" />
              <enum-const name="InvertedSwitchVeto" value="4" />
            </enum>

            <enum name="Termination">
              <enum-const name="ZHigh" value="0"/>
              <enum-const name="Z50" value="1"/>
            </enum>

            <attribute name="_channel" type="uint32_t">
            Channel type as integer number, clients should use channel() method instead. 
            </attribute>

            <attribute name="_signal" type="uint32_t" accessor="signal_int">
            Mode as integer number, clients should use mode() method instead.
            </attribute>

            <attribute name="_qualifier" type="uint32_t" accessor="qualifier_int">
            Termination as integer number, clients should use term() method instead.
            </attribute>

            <method name="channel" type="Channel">
                <expr lang="C++" value="Channel({self}._channel)" />
                <tag name="inline"/>
            </method>

            <method name="mode" type="Mode">
                <expr lang="C++" value="Mode({self}._signal)" />
                <tag name="inline"/>
            </method>

            <method name="term" type="Termination">
                <expr lang="C++" value="Termination({self}._qualifier)" />
                <tag name="inline"/>
            </method>

            <ctor>
                Default constructor without arguments
                <tag name="inline"/>
            </ctor>
            <ctor>
                Standard constructor
                <tag name="inline"/>
                <arg name="mode" dest="_signal"/>
                <arg name="term" dest="_qualifier"/>
                <attr-init dest="_channel" value="ChVeto"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcConfigV1" version="1" type_id="Id_AcqTdcConfig" pack="4" levels="Source">
        
            Class with complete Acqiris TDC configuration. 

            <tag name="config-type"/>
        
            <const name="NChannels" value="8">
            Total number of channel configurations.
            </const>
            <const name="NAuxIO" value="2">
            Total number of auxiliary IO configurations.
            </const>

            <attribute name="_channel" type="TdcChannel" shape="NChannels" 
                       accessor="channels" shape_method="channels_shape">
            Channel configurations, one object per channel.
            </attribute>

            <attribute name="_auxIO" type="TdcAuxIO" shape="NAuxIO" 
                    accessor="auxio" shape_method="auxio_shape">
            Axiliary configurations, one object per channel.
            </attribute>

            <attribute name="_veto" type="TdcVetoIO" accessor="veto">
            </attribute>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcDataV1_Item">
        
            Base class for all Acqiris TDC data objects.

            <tag name="value-type"/>
        
            <enum name="Source">
              Enum for types of data objects. Comm means data object has TdcDataV1Common
              type, AuxIO means TdcDataV1Marker class, all others are for TdcDataV1Channel.
              <enum-const name="Comm" />
              <enum-const name="Chan1" />
              <enum-const name="Chan2" />
              <enum-const name="Chan3" />
              <enum-const name="Chan4" />
              <enum-const name="Chan5" />
              <enum-const name="Chan6" />
              <enum-const name="AuxIO" />
            </enum>

            <attribute name="_value" type="uint32_t" accessor="value">
            
                Value as integer number whiis composed of several bit fields. Do not use value directly,
                instead cast this object to one of the actual types and use corresponding methods.
            
                <bitfield name="_bf_val" size="28" type="uint32_t" accessor="bf_val_" access="protected">
                </bitfield>
                
                <bitfield name="_bf_source" size="3" type="Source" accessor="source">
                Source of this data object, use returned enum to distinguish between actual 
                types of data objecs and cast appropriately.
                </bitfield>
            
                <bitfield name="_bf_ovf" size="1" type="uint8_t" accessor="bf_ofv_" access="protected">
                </bitfield>
                
            </attribute>

            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcDataV1Common" base="TdcDataV1_Item">
        
            Class for the "common" TDC data object.

            <tag name="value-type"/>
        
            <method name="nhits" type="uint32_t">
                Returns number of hits.
                <expr lang="C++" value="{self}.bf_val_()" />
            </method>

            <method name="overflow" type="uint8_t">
                Returns overflow status.
                <expr lang="C++" value="{self}.bf_ofv_()" />
            </method>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcDataV1Channel" base="TdcDataV1_Item">
        
            Class for the "channel" TDC data object.

            <tag name="value-type"/>
        
            <method name="ticks" type="uint32_t">
                Returns number of ticks.
                <expr lang="C++" value="{self}.bf_val_()" />
            </method>

            <method name="overflow" type="uint8_t">
                Returns overflow status.
                <expr lang="C++" value="{self}.bf_ofv_()" />
            </method>

            <method name="time" type="double">
                Ticks converted to time, tick resolution is 50 picosecond.
                <expr lang="C++" value="{self}.bf_val_() * 50e-12" />
            </method>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcDataV1Marker" base="TdcDataV1_Item">
        
            Class for the "marker" TDC data object.

            <tag name="value-type"/>
        
            <enum name="Type">
              Enum for the type of marker.
              <enum-const name="AuxIOSwitch" value="0" />
              <enum-const name="EventCntSwitch" value="1" />
              <enum-const name="MemFullSwitch" value="2" />
              <enum-const name="AuxIOMarker" value="16" />
            </enum>

            <method name="type" type="Type">
                Returns type of the marker.
                <expr lang="C++" value="Type({self}.bf_val_())" />
            </method>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="TdcDataV1" version="1" type_id="Id_AcqTdcData" levels="Source">
        
            Acqiris TDS data object is a container for TdcDataV1_Item object (or their
            sub-types).

            <attribute name="_data" type="TdcDataV1_Item" shape="*" accessor="data"
                        shape_method="data_shape">
            Access TDC data items. The data_shape() method should be used to 
            obtain the number of elements.
            </attribute>

        </pstype>

    </package>
</psddl>
