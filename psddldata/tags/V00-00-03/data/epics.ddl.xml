<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE psddl SYSTEM "psddl.dtd">

<psddl>
	<package name="Epics">

        <const name="iXtcVersion" value="1"/>

        <const name="iMaxPvNameLength" value="64"/>

        <const name="MAX_STRING_SIZE" value="40"/>
        <const name="MAX_UNITS_SIZE" value="8"/>
        <const name="MAX_ENUM_STRING_SIZE" value="26"/>
        <const name="MAX_ENUM_STATES" value="16"/>

        <enum name="">
	   <enum-const name="DBR_STRING" value="0"/>
           <enum-const name="DBR_SHORT" value="1"/>
           <enum-const name="DBR_FLOAT" value="2"/>
           <enum-const name="DBR_ENUM" value="3"/>
           <enum-const name="DBR_CHAR" value="4"/>
           <enum-const name="DBR_LONG" value="5"/>
           <enum-const name="DBR_DOUBLE" value="6"/>
           <enum-const name="DBR_STS_STRING" value="7"/>
           <enum-const name="DBR_STS_SHORT" value="8"/>
           <enum-const name="DBR_STS_FLOAT" value="9"/>
           <enum-const name="DBR_STS_ENUM" value="10"/>
           <enum-const name="DBR_STS_CHAR" value="11"/>
           <enum-const name="DBR_STS_LONG" value="12"/>
           <enum-const name="DBR_STS_DOUBLE" value="13"/>
           <enum-const name="DBR_TIME_STRING" value="14"/>
           <enum-const name="DBR_TIME_INT" value="15"/>
           <enum-const name="DBR_TIME_SHORT" value="15"/>
           <enum-const name="DBR_TIME_FLOAT" value="16"/>
           <enum-const name="DBR_TIME_ENUM" value="17"/>
           <enum-const name="DBR_TIME_CHAR" value="18"/>
           <enum-const name="DBR_TIME_LONG" value="19"/>
           <enum-const name="DBR_TIME_DOUBLE" value="20"/>
           <enum-const name="DBR_GR_STRING" value="21"/>
           <enum-const name="DBR_GR_SHORT" value="22"/>
           <enum-const name="DBR_GR_FLOAT" value="23"/>
           <enum-const name="DBR_GR_ENUM" value="24"/>
           <enum-const name="DBR_GR_CHAR" value="25"/>
           <enum-const name="DBR_GR_LONG" value="26"/>
           <enum-const name="DBR_GR_DOUBLE" value="27"/>
           <enum-const name="DBR_CTRL_STRING" value="28"/>
           <enum-const name="DBR_CTRL_SHORT" value="29"/>
           <enum-const name="DBR_CTRL_FLOAT" value="30"/>
           <enum-const name="DBR_CTRL_ENUM" value="31"/>
           <enum-const name="DBR_CTRL_CHAR" value="32"/>
           <enum-const name="DBR_CTRL_LONG" value="33"/>
           <enum-const name="DBR_CTRL_DOUBLE" value="34"/>
        </enum>

		<!-- ========================================================================= -->
		
		<pstype name="epicsTimeStamp">
			
            <tag name="value-type"/>
        
			<attribute name="_secPastEpoch" type="uint32_t" accessor="sec">
			seconds since 00:00 Jan 1, 1990 UTC
			</attribute>
			
			<attribute name="_nsec" type="uint32_t" accessor="nsec">
			nanoseconds within second
			</attribute>
			
            <ctor>
                Default constructor
                <tag name="inline"/>
            </ctor>
            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>


		<!-- ========================================================================= -->

		<pstype name="dbr_time_string">
		
            <tag name="value-type"/>
        
		    <const name="DBR_TYPE_ID" value="DBR_TIME_STRING"/>
		    
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
			<attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status" dest="_status"/>
                <arg name="severity" dest="_severity"/>
                <arg name="stamp" dest="_stamp"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->

		<pstype name="dbr_time_short">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_SHORT"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>
			<attribute name="RISC_pad" type="int16_t"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
                <attr-init dest="RISC_pad" value="0"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->

		<pstype name="dbr_time_float">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_FLOAT"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->
		
		<pstype name="dbr_time_enum">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_ENUM"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>
            <attribute name="RISC_pad" type="int16_t"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
                <attr-init dest="RISC_pad" value="0"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->

		<pstype name="dbr_time_char">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_CHAR"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>
            <attribute name="RISC_pad0" type="int16_t"/>
            <attribute name="RISC_pad1" type="uint8_t"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
                <attr-init dest="RISC_pad0" value="0"/>
                <attr-init dest="RISC_pad1" value="0"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->

		<pstype name="dbr_time_long">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_LONG"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->

		<pstype name="dbr_time_double">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_TIME_DOUBLE"/>
            
			<attribute name="_status" type="int16_t" accessor="status"/>
			<attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_stamp" type="epicsTimeStamp" accessor="stamp"/>
            <attribute name="RISC_pad" type="int32_t"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="stamp"       dest="_stamp"/>
                <attr-init dest="RISC_pad" value="0"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_sts_string">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_STRING"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_short">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_SHORT"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_units" type="char" dimensions="MAX_UNITS_SIZE" accessor="units"/>
            <attribute name="_upper_disp_limit" type="int16_t" accessor="upper_disp_limit"/>
            <attribute name="_lower_disp_limit" type="int16_t" accessor="lower_disp_limit"/>
            <attribute name="_upper_alarm_limit" type="int16_t" accessor="upper_alarm_limit"/>
            <attribute name="_upper_warning_limit" type="int16_t" accessor="upper_warning_limit"/>
            <attribute name="_lower_warning_limit" type="int16_t" accessor="lower_warning_limit"/>
            <attribute name="_lower_alarm_limit" type="int16_t" accessor="lower_alarm_limit"/>
            <attribute name="_upper_ctrl_limit" type="int16_t" accessor="upper_ctrl_limit"/>
            <attribute name="_lower_ctrl_limit" type="int16_t" accessor="lower_ctrl_limit"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="units"       dest="_units"/>
	            <arg dest="_upper_disp_limit"      name="upper_disp_limit"/>
	            <arg dest="_lower_disp_limit"      name="lower_disp_limit"/>
	            <arg dest="_upper_alarm_limit"     name="upper_alarm_limit"/>
	            <arg dest="_upper_warning_limit"   name="upper_warning_limit"/>
	            <arg dest="_lower_warning_limit"   name="lower_warning_limit"/>
	            <arg dest="_lower_alarm_limit"     name="lower_alarm_limit"/>
	            <arg dest="_upper_ctrl_limit"      name="upper_ctrl_limit"/>
	            <arg dest="_lower_ctrl_limit"      name="lower_ctrl_limit"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_float">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_FLOAT"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_precision" type="int16_t" accessor="precision"/>
            <attribute name="RISC_pad" type="int16_t"/>
            <attribute name="_units" type="char" dimensions="MAX_UNITS_SIZE" accessor="units"/>
            <attribute name="_upper_disp_limit" type="float" accessor="upper_disp_limit"/>
            <attribute name="_lower_disp_limit" type="float" accessor="lower_disp_limit"/>
            <attribute name="_upper_alarm_limit" type="float" accessor="upper_alarm_limit"/>
            <attribute name="_upper_warning_limit" type="float" accessor="upper_warning_limit"/>
            <attribute name="_lower_warning_limit" type="float" accessor="lower_warning_limit"/>
            <attribute name="_lower_alarm_limit" type="float" accessor="lower_alarm_limit"/>
            <attribute name="_upper_ctrl_limit" type="float" accessor="upper_ctrl_limit"/>
            <attribute name="_lower_ctrl_limit" type="float" accessor="lower_ctrl_limit"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="units"       dest="_units"/>
                <arg dest="_upper_disp_limit"      name="upper_disp_limit"/>
                <arg dest="_lower_disp_limit"      name="lower_disp_limit"/>
                <arg dest="_upper_alarm_limit"     name="upper_alarm_limit"/>
                <arg dest="_upper_warning_limit"   name="upper_warning_limit"/>
                <arg dest="_lower_warning_limit"   name="lower_warning_limit"/>
                <arg dest="_lower_alarm_limit"     name="lower_alarm_limit"/>
                <arg dest="_upper_ctrl_limit"      name="upper_ctrl_limit"/>
                <arg dest="_lower_ctrl_limit"      name="lower_ctrl_limit"/>
                <attr-init dest="RISC_pad" value="0"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_enum">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_ENUM"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_no_str" type="int16_t" accessor="no_str"/>
            <attribute name="_strs" type="char" dimensions="MAX_ENUM_STATES,MAX_ENUM_STRING_SIZE" accessor="strings"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg dest="_no_str"     name="no_str"/>
                <arg dest="_strs"       name="strings"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_char">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_CHAR"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_units" type="char" dimensions="MAX_UNITS_SIZE" accessor="units"/>
            <attribute name="_upper_disp_limit" type="uint8_t" accessor="upper_disp_limit"/>
            <attribute name="_lower_disp_limit" type="uint8_t" accessor="lower_disp_limit"/>
            <attribute name="_upper_alarm_limit" type="uint8_t" accessor="upper_alarm_limit"/>
            <attribute name="_upper_warning_limit" type="uint8_t" accessor="upper_warning_limit"/>
            <attribute name="_lower_warning_limit" type="uint8_t" accessor="lower_warning_limit"/>
            <attribute name="_lower_alarm_limit" type="uint8_t" accessor="lower_alarm_limit"/>
            <attribute name="_upper_ctrl_limit" type="uint8_t" accessor="upper_ctrl_limit"/>
            <attribute name="_lower_ctrl_limit" type="uint8_t" accessor="lower_ctrl_limit"/>
            <attribute name="RISC_pad" type="uint8_t"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="units"       dest="_units"/>
                <arg dest="_upper_disp_limit"      name="upper_disp_limit"/>
                <arg dest="_lower_disp_limit"      name="lower_disp_limit"/>
                <arg dest="_upper_alarm_limit"     name="upper_alarm_limit"/>
                <arg dest="_upper_warning_limit"   name="upper_warning_limit"/>
                <arg dest="_lower_warning_limit"   name="lower_warning_limit"/>
                <arg dest="_lower_alarm_limit"     name="lower_alarm_limit"/>
                <arg dest="_upper_ctrl_limit"      name="upper_ctrl_limit"/>
                <arg dest="_lower_ctrl_limit"      name="lower_ctrl_limit"/>
                <attr-init dest="RISC_pad" value="0"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_long">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_LONG"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_units" type="char" dimensions="MAX_UNITS_SIZE" accessor="units"/>
            <attribute name="_upper_disp_limit" type="int32_t" accessor="upper_disp_limit"/>
            <attribute name="_lower_disp_limit" type="int32_t" accessor="lower_disp_limit"/>
            <attribute name="_upper_alarm_limit" type="int32_t" accessor="upper_alarm_limit"/>
            <attribute name="_upper_warning_limit" type="int32_t" accessor="upper_warning_limit"/>
            <attribute name="_lower_warning_limit" type="int32_t" accessor="lower_warning_limit"/>
            <attribute name="_lower_alarm_limit" type="int32_t" accessor="lower_alarm_limit"/>
            <attribute name="_upper_ctrl_limit" type="int32_t" accessor="upper_ctrl_limit"/>
            <attribute name="_lower_ctrl_limit" type="int32_t" accessor="lower_ctrl_limit"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="units"       dest="_units"/>
                <arg dest="_upper_disp_limit"      name="upper_disp_limit"/>
                <arg dest="_lower_disp_limit"      name="lower_disp_limit"/>
                <arg dest="_upper_alarm_limit"     name="upper_alarm_limit"/>
                <arg dest="_upper_warning_limit"   name="upper_warning_limit"/>
                <arg dest="_lower_warning_limit"   name="lower_warning_limit"/>
                <arg dest="_lower_alarm_limit"     name="lower_alarm_limit"/>
                <arg dest="_upper_ctrl_limit"      name="upper_ctrl_limit"/>
                <arg dest="_lower_ctrl_limit"      name="lower_ctrl_limit"/>
            </ctor>

        </pstype>

        <!-- ========================================================================= -->

        <pstype name="dbr_ctrl_double">
        
            <tag name="value-type"/>
        
            <const name="DBR_TYPE_ID" value="DBR_CTRL_DOUBLE"/>
            
            <attribute name="_status" type="int16_t" accessor="status"/>
            <attribute name="_severity" type="int16_t" accessor="severity"/>
            <attribute name="_precision" type="int16_t" accessor="precision"/>
            <attribute name="RISC_pad0" type="int16_t"/>
            <attribute name="_units" type="char" dimensions="MAX_UNITS_SIZE" accessor="units"/>
            <attribute name="_upper_disp_limit" type="double" accessor="upper_disp_limit"/>
            <attribute name="_lower_disp_limit" type="double" accessor="lower_disp_limit"/>
            <attribute name="_upper_alarm_limit" type="double" accessor="upper_alarm_limit"/>
            <attribute name="_upper_warning_limit" type="double" accessor="upper_warning_limit"/>
            <attribute name="_lower_warning_limit" type="double" accessor="lower_warning_limit"/>
            <attribute name="_lower_alarm_limit" type="double" accessor="lower_alarm_limit"/>
            <attribute name="_upper_ctrl_limit" type="double" accessor="upper_ctrl_limit"/>
            <attribute name="_lower_ctrl_limit" type="double" accessor="lower_ctrl_limit"/>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <arg name="status"      dest="_status"/>
                <arg name="severity"    dest="_severity"/>
                <arg name="units"       dest="_units"/>
                <arg dest="_upper_disp_limit"      name="upper_disp_limit"/>
                <arg dest="_lower_disp_limit"      name="lower_disp_limit"/>
                <arg dest="_upper_alarm_limit"     name="upper_alarm_limit"/>
                <arg dest="_upper_warning_limit"   name="upper_warning_limit"/>
                <arg dest="_lower_warning_limit"   name="lower_warning_limit"/>
                <arg dest="_lower_alarm_limit"     name="lower_alarm_limit"/>
                <arg dest="_upper_ctrl_limit"      name="upper_ctrl_limit"/>
                <arg dest="_lower_ctrl_limit"      name="lower_ctrl_limit"/>
                <attr-init dest="RISC_pad0" value="0"/>
            </ctor>

        </pstype>

		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvHeader">

			<attribute name="_iPvId" type="int16_t" accessor="pvId"/>
			<attribute name="_iDbrType" type="int16_t" accessor="dbrType"/>
			<attribute name="_iNumElements" type="int16_t" accessor="numElements"/>
			
			<method name="print">
			This method will be implemented separately, it will act as a virtual method.
			</method>
			
        </pstype>
        
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlHeader" base="EpicsPvHeader">

			<attribute name="_sPvName" type="char" dimensions="iMaxPvNameLength" accessor="pvName"/>

        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlString" base="EpicsPvCtrlHeader">
			<attribute name="_dbr" type="dbr_sts_string" accessor="dbr"/>
			<attribute name="_data" type="char" dimensions="{self}.numElements(), MAX_STRING_SIZE" accessor="data"/>
			
			<method name="value" type="string">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()+i*MAX_STRING_SIZE"/>
			</method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlShort" base="EpicsPvCtrlHeader">
			<attribute name="_dbr" type="dbr_ctrl_short" accessor="dbr"/>
			<attribute name="_data" type="int16_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="int16_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlFloat" base="EpicsPvCtrlHeader">
            <attribute name="pad0" type="int16_t"/>
			<attribute name="_dbr" type="dbr_ctrl_float" accessor="dbr"/>
			<attribute name="_data" type="float" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="float">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlEnum" base="EpicsPvCtrlHeader">
			<attribute name="_dbr" type="dbr_ctrl_enum" accessor="dbr"/>
			<attribute name="_data" type="uint16_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="uint16_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlChar" base="EpicsPvCtrlHeader">
			<attribute name="_dbr" type="dbr_ctrl_char" accessor="dbr"/>
			<attribute name="_data" type="uint8_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="uint8_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlLong" base="EpicsPvCtrlHeader">
            <attribute name="pad0" type="int16_t"/>
			<attribute name="_dbr" type="dbr_ctrl_long" accessor="dbr"/>
			<attribute name="_data" type="int32_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="int32_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvCtrlDouble" base="EpicsPvCtrlHeader">
            <attribute name="pad0" type="int16_t"/>
			<attribute name="_dbr" type="dbr_ctrl_double" accessor="dbr"/>
			<attribute name="_data" type="double" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="double">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeString" base="EpicsPvHeader">
            <attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_string" accessor="dbr"/>
            <attribute name="_data" type="char" dimensions="{self}.numElements(), MAX_STRING_SIZE" accessor="data"/>
            
            <method name="value" type="string">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()+MAX_STRING_SIZE*i"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeShort" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_short" accessor="dbr"/>
            <attribute name="_data" type="int16_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="int16_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeFloat" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_float" accessor="dbr"/>
            <attribute name="_data" type="float" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="float">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeEnum" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_enum" accessor="dbr"/>
            <attribute name="_data" type="uint16_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="uint16_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeChar" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_char" accessor="dbr"/>
            <attribute name="_data" type="uint8_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="uint8_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeLong" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t"/>
            <attribute name="_dbr" type="dbr_time_long" accessor="dbr"/>
            <attribute name="_data" type="int32_t" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="int32_t">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
		<pstype name="EpicsPvTimeDouble" base="EpicsPvHeader">
			<attribute name="pad0" type="int16_t" />
            <attribute name="_dbr" type="dbr_time_double" accessor="dbr"/>
            <attribute name="_data" type="double" dimensions="{self}.numElements()" accessor="data"/>

            <method name="value" type="double">
                <arg name="i" type="uint32_t"/>
                <expr lang="C++" value="data()[i]"/>
            </method>
        </pstype>
        
		<!-- ========================================================================= -->
		
	</package>
</psddl>
