<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE psddl SYSTEM "psddl.dtd">

<psddl>

    <use file="psddldata/camera.ddl.xml"/>
    <use file="psddldata/ipimb.ddl.xml"/>
    <use file="psddldata/lusi.ddl.xml"/>
    <use file="psddldata/pulnix.ddl.xml"/>

    <package name="Bld">
    
       Package (namespace) containing all data types pproduced by BLD 
       (BeamLine Data) devices.
    
        <pstype name="BldDataFEEGasDetEnergy" type_id="Id_FEEGasDetEnergy" version="0" pack="4">
        
            Four energy measurements from Front End Enclosure Gas Detector.
               PV names: GDET:FEE1:11:ENRC, GDET:FEE1:12:ENRC, GDET:FEE1:21:ENRC, GDET:FEE1:22:ENRC.
        
            <tag name="value-type"/>
        
            <attribute name="_f_11_ENRC" type="double" accessor="f_11_ENRC">
            Value of GDET:FEE1:11:ENRC, in mJ.
            </attribute>

            <attribute name="_f_12_ENRC" type="double" accessor="f_12_ENRC">
            Value of GDET:FEE1:12:ENRC, in mJ.
            </attribute>

            <attribute name="_f_21_ENRC" type="double" accessor="f_21_ENRC">
            Value of GDET:FEE1:21:ENRC, in mJ.
            </attribute>

            <attribute name="_f_22_ENRC" type="double" accessor="f_22_ENRC">
            Value of GDET:FEE1:22:ENRC, in mJ.
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        

        <pstype name="BldDataEBeamV0" type_id="Id_EBeam" version="0" pack="4">
        
            Beam parameters.
            
            <tag name="value-type"/>
        
            <enum name="DamageMask">
                Constants defining bit mask for individual damage bits in value returned from damageMask()
                <enum-const name="EbeamChargeDamage" value="0x001"/>
                <enum-const name="EbeamL3EnergyDamage" value="0x002"/>
                <enum-const name="EbeamLTUPosXDamage" value="0x004"/>
                <enum-const name="EbeamLTUPosYDamage" value="0x008"/>
                <enum-const name="EbeamLTUAngXDamage" value="0x010"/>
                <enum-const name="EbeamLTUAngYDamage" value="0x020"/>
            </enum>
        
            <attribute name="_uDamageMask" type="uint32_t" accessor="damageMask">
            Damage mask.
            </attribute>

            <attribute name="_fEbeamCharge" type="double" accessor="ebeamCharge">
            Beam charge in nC.
            </attribute>

            <attribute name="_fEbeamL3Energy" type="double" accessor="ebeamL3Energy">
            Beam energy in MeV.
            </attribute>

            <attribute name="_fEbeamLTUPosX" type="double" accessor="ebeamLTUPosX">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUPosY" type="double" accessor="ebeamLTUPosY">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUAngX" type="double" accessor="ebeamLTUAngX">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamLTUAngY" type="double" accessor="ebeamLTUAngY">
            LTU beam angle in mrad.
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        
        <pstype name="BldDataEBeamV1" type_id="Id_EBeam" version="1" pack="4">
        
            <tag name="value-type"/>
        
            <enum name="DamageMask">
                Constants defining bit mask for individual damage bits in value returned from damageMask()
                <enum-const name="EbeamChargeDamage" value="0x001"/>
                <enum-const name="EbeamL3EnergyDamage" value="0x002"/>
                <enum-const name="EbeamLTUPosXDamage" value="0x004"/>
                <enum-const name="EbeamLTUPosYDamage" value="0x008"/>
                <enum-const name="EbeamLTUAngXDamage" value="0x010"/>
                <enum-const name="EbeamLTUAngYDamage" value="0x020"/>
                <enum-const name="EbeamPkCurrBC2Damage" value="0x040"/>
            </enum>
        
            <attribute name="_uDamageMask" type="uint32_t" accessor="damageMask">
            Damage mask.
            </attribute>

            <attribute name="_fEbeamCharge" type="double" accessor="ebeamCharge">
            Beam charge in nC.
            </attribute>

            <attribute name="_fEbeamL3Energy" type="double" accessor="ebeamL3Energy">
            Beam energy in MeV.
            </attribute>

            <attribute name="_fEbeamLTUPosX" type="double" accessor="ebeamLTUPosX">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUPosY" type="double" accessor="ebeamLTUPosY">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUAngX" type="double" accessor="ebeamLTUAngX">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamLTUAngY" type="double" accessor="ebeamLTUAngY">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamPkCurrBC2" type="double" accessor="ebeamPkCurrBC2">
            Beam current in Amps.
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        
        <pstype name="BldDataEBeamV2" type_id="Id_EBeam" version="2" pack="4">
        
            <tag name="value-type"/>
        
            <enum name="DamageMask">
                Constants defining bit mask for individual damage bits in value returned from damageMask()
                <enum-const name="EbeamChargeDamage" value="0x001"/>
                <enum-const name="EbeamL3EnergyDamage" value="0x002"/>
                <enum-const name="EbeamLTUPosXDamage" value="0x004"/>
                <enum-const name="EbeamLTUPosYDamage" value="0x008"/>
                <enum-const name="EbeamLTUAngXDamage" value="0x010"/>
                <enum-const name="EbeamLTUAngYDamage" value="0x020"/>
                <enum-const name="EbeamPkCurrBC2Damage" value="0x040"/>
                <enum-const name="EbeamEnergyBC2Damage" value="0x080"/>
            </enum>
        
            <attribute name="_uDamageMask" type="uint32_t" accessor="damageMask">
            Damage mask.
            </attribute>

            <attribute name="_fEbeamCharge" type="double" accessor="ebeamCharge">
            Beam charge in nC.
            </attribute>

            <attribute name="_fEbeamL3Energy" type="double" accessor="ebeamL3Energy">
            Beam energy in MeV.
            </attribute>

            <attribute name="_fEbeamLTUPosX" type="double" accessor="ebeamLTUPosX">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUPosY" type="double" accessor="ebeamLTUPosY">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUAngX" type="double" accessor="ebeamLTUAngX">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamLTUAngY" type="double" accessor="ebeamLTUAngY">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamPkCurrBC2" type="double" accessor="ebeamPkCurrBC2">
            Beam current in Amps.
            </attribute>

            <attribute name="_fEbeamEnergyBC2" type="double" accessor="ebeamEnergyBC2">
            Beam energy in MeV.
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        
        <pstype name="BldDataEBeamV3" type_id="Id_EBeam" version="3" pack="4">
        
            <tag name="value-type"/>
        
            <enum name="DamageMask">
                Constants defining bit mask for individual damage bits in value returned from damageMask()
                <enum-const name="EbeamChargeDamage" value="0x001"/>
                <enum-const name="EbeamL3EnergyDamage" value="0x002"/>
                <enum-const name="EbeamLTUPosXDamage" value="0x004"/>
                <enum-const name="EbeamLTUPosYDamage" value="0x008"/>
                <enum-const name="EbeamLTUAngXDamage" value="0x010"/>
                <enum-const name="EbeamLTUAngYDamage" value="0x020"/>
                <enum-const name="EbeamPkCurrBC2Damage" value="0x040"/>
                <enum-const name="EbeamEnergyBC2Damage" value="0x080"/>
                <enum-const name="EbeamPkCurrBC1Damage" value="0x100"/>
                <enum-const name="EbeamEnergyBC1Damage" value="0x200"/>
            </enum>
        
            <attribute name="_uDamageMask" type="uint32_t" accessor="damageMask">
            Damage mask.
            </attribute>

            <attribute name="_fEbeamCharge" type="double" accessor="ebeamCharge">
            Beam charge in nC.
            </attribute>

            <attribute name="_fEbeamL3Energy" type="double" accessor="ebeamL3Energy">
            Beam energy in MeV.
            </attribute>

            <attribute name="_fEbeamLTUPosX" type="double" accessor="ebeamLTUPosX">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUPosY" type="double" accessor="ebeamLTUPosY">
            LTU beam position in mm.
            </attribute>

            <attribute name="_fEbeamLTUAngX" type="double" accessor="ebeamLTUAngX">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamLTUAngY" type="double" accessor="ebeamLTUAngY">
            LTU beam angle in mrad.
            </attribute>

            <attribute name="_fEbeamPkCurrBC2" type="double" accessor="ebeamPkCurrBC2">
            Beam current in Amps.
            </attribute>

            <attribute name="_fEbeamEnergyBC2" type="double" accessor="ebeamEnergyBC2">
            Beam position in mm (related to beam energy).
            </attribute>

            <attribute name="_fEbeamPkCurrBC1" type="double" accessor="ebeamPkCurrBC1">
            Beam current in Amps.
            </attribute>

            <attribute name="_fEbeamEnergyBC1" type="double" accessor="ebeamEnergyBC1">
            Beam position in mm (related to beam energy).
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        
        <!-- ========================================================================= -->
        

        <pstype name="BldDataPhaseCavity" type_id="Id_PhaseCavity" version="0" pack="4">

            PV names: UND:R02:IOC:16:BAT:FitTime1, UND:R02:IOC:16:BAT:FitTime2, 
                UND:R02:IOC:16:BAT:Charge1,  UND:R02:IOC:16:BAT:Charge2
    
            <tag name="value-type"/>
        
            <attribute name="_fFitTime1" type="double" accessor="fitTime1">
            UND:R02:IOC:16:BAT:FitTime1 value in pico-seconds.
            </attribute>

            <attribute name="_fFitTime2" type="double" accessor="fitTime2">
            UND:R02:IOC:16:BAT:FitTime2 value in pico-seconds.
            </attribute>

            <attribute name="_fCharge1" type="double" accessor="charge1">
            UND:R02:IOC:16:BAT:Charge1 value in pico-columbs.
            </attribute>

            <attribute name="_fCharge2" type="double" accessor="charge2">
            UND:R02:IOC:16:BAT:Charge2 value in pico-columbs.
            </attribute>

            <ctor>
                Constructor which takes values for every attribute
                <tag name="inline"/>
                <tag name="auto"/>
            </ctor>

        </pstype>
        

        <!-- ========================================================================= -->
        

        <pstype name="BldDataIpimbV0" type_id="Id_SharedIpimb" version="0" pack="4">

            Combined structure which includes Ipimb.DataV1, Ipimb.ConfigV1, and 
            Lusi.IpmFexV1 objects.

            <attribute name="_ipimbData" type="Ipimb.DataV1" accessor="ipimbData">
            </attribute>

            <attribute name="_ipimbConfig" type="Ipimb.ConfigV1" accessor="ipimbConfig">
            </attribute>

            <attribute name="_ipmFexData" type="Lusi.IpmFexV1" accessor="ipmFexData">
            </attribute>

        </pstype>
        
        <!-- ========================================================================= -->
        

        <pstype name="BldDataIpimbV1" type_id="Id_SharedIpimb" version="1" pack="4">

            Combined structure which includes Ipimb.DataV2, Ipimb.ConfigV2, and 
            Lusi.IpmFexV1 objects.

            <attribute name="_ipimbData" type="Ipimb.DataV2" accessor="ipimbData">
            </attribute>

            <attribute name="_ipimbConfig" type="Ipimb.ConfigV2" accessor="ipimbConfig">
            </attribute>

            <attribute name="_ipmFexData" type="Lusi.IpmFexV1" accessor="ipmFexData">
            </attribute>

        </pstype>
        

        <!-- ========================================================================= -->
        

        <pstype name="BldDataPimV1" type_id="Id_SharedPim" version="1" pack="4">

            Combined structure which includes Pulnix.TM6740ConfigV2, Lusi.PimImageConfigV1, and 
            Camera.FrameV1 objects.

            <attribute name="_camConfig" type="Pulnix.TM6740ConfigV2" accessor="camConfig">
            </attribute>

            <attribute name="_pimConfig" type="Lusi.PimImageConfigV1" accessor="pimConfig">
            </attribute>

            <attribute name="_frame" type="Camera.FrameV1" accessor="frame">
            </attribute>

        </pstype>
        

        <!-- ========================================================================= -->
        

        <pstype name="BldDataGMDV0" type_id="Id_GMD" version="0" pack="4">
        
            Gas Monitor Detector data.

            <attribute name="_strGasType" type="char" shape="32" accessor="gasType" shape_method="None">
            String describing gas type
            </attribute>

            <attribute name="_fPressure" type="double" accessor="pressure">
            Pressure from Spinning Rotor Gauge
            </attribute>

            <attribute name="_fTemperature" type="double" accessor="temperature">
            Temp from PT100
            </attribute>

            <attribute name="_fCurrent" type="double" accessor="current">
            Current from Keithley Electrometer
            </attribute>

            <attribute name="_fHvMeshElectron" type="double" accessor="hvMeshElectron">
            HV Mesh Electron
            </attribute>

            <attribute name="_fHvMeshIon" type="double" accessor="hvMeshIon">
            HV Mesh Ion
            </attribute>

            <attribute name="_fHvMultIon" type="double" accessor="hvMultIon">
            HV Mult Ion
            </attribute>

            <attribute name="_fChargeQ" type="double" accessor="chargeQ">
            Charge Q
            </attribute>

            <attribute name="_fPhotonEnergy" type="double" accessor="photonEnergy">
            Photon Energy
            </attribute>

            <attribute name="_fMultPulseIntensity" type="double" accessor="multPulseIntensity">
            Pulse Intensity derived from Electron Multiplier
            </attribute>

            <attribute name="_fKeithleyPulseIntensity" type="double" accessor="keithleyPulseIntensity">
            Pulse Intensity derived from ION cup current
            </attribute>

            <attribute name="_fPulseEnergy" type="double" accessor="pulseEnergy">
            Pulse Energy derived from Electron Multiplier
            </attribute>

            <attribute name="_fPulseEnergyFEE" type="double" accessor="pulseEnergyFEE">
            Pulse Energy from FEE Gas Detector
            </attribute>

            <attribute name="_fTransmission" type="double" accessor="transmission">
            Transmission derived from Electron Multiplier
            </attribute>

            <attribute name="_fTransmissionFEE" type="double" accessor="transmissionFEE">
            Transmission from FEE Gas Detector
            </attribute>

            <attribute name="_fSpare6" type="double"/>

        </pstype>
        

    </package>
</psddl>
