#--------------------------------------------------------------------------
# File and Version Information:
#  $Id: DdlPythonInterfaces.py 3643 2012-05-26 04:23:12Z jbarrera@SLAC.STANFORD.EDU $
#
# Description:
#  Module DdlPythonInterfaces...
#
#------------------------------------------------------------------------

"""DDL parser which generates psana C++ interfaces.

This software was developed for the SIT project.  If you use all or 
part of it, please give an appropriate acknowledgment.

@see RelatedModule

@version $Id: DdlPythonInterfaces.py 3643 2012-05-26 04:23:12Z jbarrera@SLAC.STANFORD.EDU $

@author Andrei Salnikov
"""


#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision: 3643 $"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os
import logging
import types
import string
import re

#---------------------------------
#  Imports of base class module --
#---------------------------------

#-----------------------------
# Imports for other modules --
#-----------------------------
from psddl.PythonCodegen import PythonCodegen
from psddl.Package import Package
from psddl.Type import Type
from psddl.Template import Template as T

#----------------------------------
# Local non-exported definitions --
#----------------------------------

#------------------------
# Exported definitions --
#------------------------

#---------------------
#  Class definition --
#---------------------
class DdlPythonInterfaces ( object ) :

    #----------------
    #  Constructor --
    #----------------
    def __init__ ( self, incname, cppname, backend_options ) :
        """Constructor
        
            @param incname  include file name
        """
        self.incname = incname
        self.cppname = cppname
        self.incdirname = backend_options.get('gen-incdir', "")
        self.top_pkg = backend_options.get('top-package')

        #include guard
        g = os.path.split(self.incname)[1]
        if self.top_pkg: g = self.top_pkg + '_' + g
        self.guard = g.replace('.', '_').upper()

    #-------------------
    #  Public methods --
    #-------------------

    def parseTree ( self, model ) :
        
        # open output files
        self.inc = file(self.incname, 'w')
        self.cpp = file(self.cppname, 'w')

        warning = "/* Do not edit this file, as it is auto-generated */\n"
        print >>self.inc, warning
        print >>self.cpp, warning

        # include guard to header
        print >>self.inc, "#ifndef", self.guard 
        print >>self.inc, "#define", self.guard, "1"
        print >>self.inc, ""

        inc = os.path.join(self.incdirname, os.path.basename(self.incname))
        inc_base = self.incname
        index = inc_base.rfind("/")
        if index != -1:
            inc_base = inc_base[index+1:]
            print inc_base

        # add necessary includes to include file
        print >>self.inc, "#include <vector>"
        print >>self.inc, "#include <ndarray/ndarray.h>"
        print >>self.inc, "#include <pdsdata/xtc/TypeId.hh>"
        print >>self.inc, "#include <psddl_python/DdlWrapper.h>"
        print >>self.inc, ""

        # add necessary includes to source file
        print >>self.cpp, "#include <cstddef>"
        inc_psana = "psddl_psana/" + string.replace(inc_base, ".wrapper", "")
        inc_python = "psddl_python/" + inc_base
        print >>self.cpp, "#include <%s> // inc_psana" % inc_psana
        print >>self.cpp, "#include <%s> // inc_python" % inc_python
        print >>self.cpp, ""

        # headers for other included packages
        for use in model.use:
            path = use['file']
            headers = use['cpp_headers']
            if not headers:
                header = os.path.splitext(path)[0] + '.h'
                header = os.path.join(self.incdirname, os.path.basename(header))
                headers = [header]
            for header in headers:
                if "/" in header:
                    print >>self.inc, "#include <%s> // other included packages" % header
                else:
                    print >>self.inc, "#include <psddl_psana/%s> // other included packages" % header

        if self.top_pkg : 
            print >>self.cpp, T("namespace $top_pkg {")[self]
            print >>self.inc, T("namespace $top_pkg {")[self]

        # loop over packages in the model
        for pkg in model.packages() :
            if not pkg.included :
                logging.debug("parseTree: package=%s", repr(pkg))
                self._parsePackage(pkg)

        if self.top_pkg : 
            print >>self.inc, T("} // namespace $top_pkg")[self]
            print >>self.cpp, T("} // namespace $top_pkg")[self]

        # close include guard
        print >>self.inc, "#endif //", self.guard

        # close all files
        self.inc.close()
        self.cpp.close()


    def _parsePackage(self, pkg):

        # open namespaces
        print >>self.inc, T("namespace $name {")[pkg]
        print >>self.inc, ""
        print >>self.inc, "using namespace boost::python;"
        print >>self.inc, "using boost::python::api::object;"
        print >>self.inc, "using boost::shared_ptr;"
        print >>self.inc, "using std::vector;"
        print >>self.inc, ""
        print >>self.inc, "extern void createWrappers();"

        print >>self.cpp, T("namespace $name {")[pkg]
        print >>self.cpp, ""
        print >>self.cpp, "void createWrappers() {"

        # loop over packages and types
        for ns in pkg.namespaces() :
            
            if isinstance(ns, Package) :
                
                self._parsePackage(ns)
            
            elif isinstance(ns, Type) :
    
                namespace_prefix = pkg.name + "::"
                if self.top_pkg : 
                    namespace_prefix = self.top_pkg + "::" + namespace_prefix
                self._parseType(type = ns, namespace_prefix = namespace_prefix, pkg_name = pkg.name)

        # end createWrappers()
        print >>self.cpp, ""
        print >>self.cpp, "} // createWrappers()"
        # now create EventGetter and EnvironmentGetter classes
        for ns in pkg.namespaces() :
            if isinstance(ns, Type) :
                namespace_prefix = pkg.name + "::"
                if self.top_pkg : 
                    namespace_prefix = self.top_pkg + "::" + namespace_prefix
                self._parseType2(type = ns, namespace_prefix = namespace_prefix, pkg_name = pkg.name)

        # close namespaces
        print >>self.inc, T("} // namespace $name")[pkg]
        print >>self.cpp, T("} // namespace $name")[pkg]

    def _parseType(self, type, namespace_prefix = "", pkg_name = ""):

        logging.debug("_parseType: type=%s", repr(type))

        # skip included types
        if type.included : return

        codegen = PythonCodegen(self.inc, self.cpp)
        codegen.codegen(type, namespace_prefix, pkg_name)

    def _parseType2(self, type, namespace_prefix = "", pkg_name = ""):
        type_name = type.name
        getter_class = None
        if re.match(r'.*(Data|DataDesc|Element)V[1-9][0-9]*', type_name):
            getter_class = "Psana::EvtGetter"
        elif re.match(r'.*(Config)V[1-9][0-9]*', type_name):
            getter_class = "Psana::EnvGetter"
        if getter_class:
            print >>self.inc, ''
            print >> self.inc, T('  class ${type_name}_Getter : public ${getter_class} {')(locals())
            print >> self.inc, '  public:'
            print >> self.inc, '    const std::type_info& getTypeInfo() {'
            print >> self.inc, T('      return typeid(${namespace_prefix}${type_name});')(locals())
            print >> self.inc, '    }'
            print >> self.inc, '    const char* getTypeName() {'
            print >> self.inc, T('      return "${namespace_prefix}${type_name}";')(locals())
            print >> self.inc, '    }'
            if type.type_id is not None:
                print >> self.inc, '    int getTypeId() {'
                print >> self.inc, T('      return ${type_name}::TypeId;')(locals())
                print >> self.inc, '    }'
            if type.version is not None:
                print >> self.inc, '    int getVersion() {'
                print >> self.inc, T('      return ${type_name}::Version;')(locals())
                print >> self.inc, '    }'
            if getter_class == "Psana::EvtGetter":
                print >> self.inc, T('    object get(PSEvt::Event& evt, const std::string& key=std::string(), Pds::Src* foundSrc=0) {')(locals())
                print >> self.inc, T('      shared_ptr<$type_name> result = evt.get(key, foundSrc);')(locals())
                print >> self.inc, T('      return result.get() ? object(${type_name}_Wrapper(result)) : object();')(locals())
                print >> self.inc, '    }'
                print >> self.inc, T('    object get(PSEvt::Event& evt, Pds::Src& src, const std::string& key=std::string(), Pds::Src* foundSrc=0) {')(locals())
                print >> self.inc, T('      shared_ptr<$type_name> result = evt.get(src, key, foundSrc);')(locals())
                print >> self.inc, T('      return result.get() ? object(${type_name}_Wrapper(result)) : object();')(locals())
                print >> self.inc, '    }'
                print >> self.inc, T('    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key=std::string(), Pds::Src* foundSrc=0) {')(locals())
                print >> self.inc, T('      shared_ptr<$type_name> result = evt.get(source, key, foundSrc);')(locals())
                print >> self.inc, T('      return result.get() ? object(${type_name}_Wrapper(result)) : object();')(locals())
                print >> self.inc, '    }'
            elif getter_class == "Psana::EnvGetter":
                print >> self.inc, T('    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {')(locals())
                print >> self.inc, T('      boost::shared_ptr<$type_name> result = store.get(src, 0);')(locals())
                print >> self.inc, T('      return result.get() ? object(${type_name}_Wrapper(result)) : object();')(locals())
                print >> self.inc, '    }'
            print >> self.inc, '  };'

#
#  In case someone decides to run this module
#
if __name__ == "__main__" :

    # In principle we can try to run test suite for this module,
    # have to think about it later. Right now just abort.
    sys.exit ( "Module is not supposed to be run as main module" )
