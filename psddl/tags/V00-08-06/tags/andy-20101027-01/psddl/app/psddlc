#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script psddlc...
#
#------------------------------------------------------------------------

"""Compiler from psddl into other formats.

This software was developed for the LCLS project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andrei Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision$"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os

#---------------------------------
#  Imports of base class module --
#---------------------------------
from LusiPython.LusiPyApp import LusiPyApp

#-----------------------------
# Imports for other modules --
#-----------------------------
from psddl.XmlReader import XmlReader
from psddl.DdlPdsdata import DdlPdsdata

#---------------------
# Local definitions --
#---------------------

#---------------------------------
#  Application class definition --
#---------------------------------

class psddlc ( LusiPyApp ) :

    def __init__ ( self ) :

        LusiPyApp.__init__ ( self, installLogger = True, usage = "usage: %prog [options] input-file" )
        
        self._parser.set_defaults(pdsdata=False,
                                  header=None,
                                  output=None)
        
        self._parser.add_option("-p", "--pdsdata", action="store_true", 
                                help="generate output for pdsdata")
        self._parser.add_option("-d", "--header",  
                                help="output file name for header/declarations", metavar="PATH")
        self._parser.add_option("-o", "--output",  
                                help="output file name for source", metavar="PATH")


    #
    #  Run the whole thing after parsing the command argunments and 
    #  installing logger. See BbrPyApp class for details.
    #
    def _run ( self ) :

        # check the arguments
        if len(self._args) != 1:
            self._parser.error("one argument is required")
            return 2

        input = self._args[0]
        base = os.path.basename(input)

        header = self._options.header
        source = self._options.output
        
        generator = None

        if self._options.pdsdata :
            if not header : header = os.path.splitext(base)[0] + '.hh'
            if not source : source = os.path.splitext(base)[0] + '.cc'
            generator = DdlPdsdata(header, source)

        try :
            reader = XmlReader(input)
            model = reader.read()
        except Exception, ex:
            print >>sys.stderr, "parsing failed for file", input
            print >>sys.stderr, "reason:", ex
            raise
            return 2

        if generator :
            try :
                generator.parseTree(model)
            except Exception, ex:
                print >>sys.stderr, "generation failed for file", input
                print >>sys.stderr, "reason:", ex
                raise
                return 2

        return 0

#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    app = psddlc()
    rc = app.run()
    sys.exit(rc)
