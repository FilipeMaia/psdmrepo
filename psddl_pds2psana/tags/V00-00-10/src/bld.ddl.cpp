
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/bld.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Bld {
Psana::Bld::BldDataFEEGasDetEnergy pds_to_psana(PsddlPds::Bld::BldDataFEEGasDetEnergy pds)
{
  return Psana::Bld::BldDataFEEGasDetEnergy(pds.f_11_ENRC(), pds.f_12_ENRC(), pds.f_21_ENRC(), pds.f_22_ENRC());
}

Psana::Bld::BldDataEBeamV0 pds_to_psana(PsddlPds::Bld::BldDataEBeamV0 pds)
{
  return Psana::Bld::BldDataEBeamV0(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY());
}

Psana::Bld::BldDataEBeam pds_to_psana(PsddlPds::Bld::BldDataEBeam pds)
{
  return Psana::Bld::BldDataEBeam(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY(), pds.ebeamPkCurrBC2());
}

Psana::Bld::BldDataPhaseCavity pds_to_psana(PsddlPds::Bld::BldDataPhaseCavity pds)
{
  return Psana::Bld::BldDataPhaseCavity(pds.fitTime1(), pds.fitTime2(), pds.charge1(), pds.charge2());
}

BldDataIpimb::BldDataIpimb(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Bld::BldDataIpimb()
  , m_xtcObj(xtcPtr)
  , _ipimbData(boost::shared_ptr<const PsddlPds::Ipimb::DataV1>(xtcPtr, &xtcPtr->ipimbData()))
  , _ipimbConfig(boost::shared_ptr<const PsddlPds::Ipimb::ConfigV1>(xtcPtr, &xtcPtr->ipimbConfig()))
  , _ipmFexData(psddl_pds2psana::Lusi::pds_to_psana(xtcPtr->ipmFexData()))
{
}
BldDataIpimb::~BldDataIpimb()
{
}


const Psana::Ipimb::DataV1& BldDataIpimb::ipimbData() const { return _ipimbData; }

const Psana::Ipimb::ConfigV1& BldDataIpimb::ipimbConfig() const { return _ipimbConfig; }

const Psana::Lusi::IpmFexV1& BldDataIpimb::ipmFexData() const { return _ipmFexData; }
} // namespace Bld
} // namespace psddl_pds2psana
