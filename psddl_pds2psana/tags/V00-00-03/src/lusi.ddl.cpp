
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/lusi.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Lusi {
Psana::Lusi::DiodeFexConfigV1 pds_to_psana(PsddlPds::Lusi::DiodeFexConfigV1 pds)
{
  return Psana::Lusi::DiodeFexConfigV1(pds.base(), pds.scale());
}

Psana::Lusi::DiodeFexV1 pds_to_psana(PsddlPds::Lusi::DiodeFexV1 pds)
{
  return Psana::Lusi::DiodeFexV1(pds.value());
}

IpmFexConfigV1::IpmFexConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Lusi::IpmFexConfigV1()
  , m_xtcObj(xtcPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->_diode_shape();
    _diode.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      _diode.push_back(psddl_pds2psana::Lusi::pds_to_psana(xtcPtr->diode(i0)));
    }
  }
}
IpmFexConfigV1::~IpmFexConfigV1()
{
}


const Psana::Lusi::DiodeFexConfigV1& IpmFexConfigV1::diode(uint32_t i0) const { return _diode[i0]; }

float IpmFexConfigV1::xscale() const { return m_xtcObj->xscale(); }

float IpmFexConfigV1::yscale() const { return m_xtcObj->yscale(); }
std::vector<int> IpmFexConfigV1::_diode_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_diode.size());
  return shape;
}

Psana::Lusi::IpmFexV1 pds_to_psana(PsddlPds::Lusi::IpmFexV1 pds)
{
  return Psana::Lusi::IpmFexV1(pds.channel(), pds.sum(), pds.xpos(), pds.ypos());
}

Psana::Lusi::PimImageConfigV1 pds_to_psana(PsddlPds::Lusi::PimImageConfigV1 pds)
{
  return Psana::Lusi::PimImageConfigV1(pds.xscale(), pds.yscale());
}

} // namespace Lusi
} // namespace psddl_pds2psana
