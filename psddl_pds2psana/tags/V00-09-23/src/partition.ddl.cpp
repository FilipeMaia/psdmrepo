
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/partition.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Partition {
Psana::Partition::Source pds_to_psana(Pds::Partition::Source pds)
{
  return Psana::Partition::Source(pds.src(), pds.group());
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Partition::ConfigV1()
  , m_xtcObj(xtcPtr)
{
  {
    typedef ndarray<Psana::Partition::Source, 1> NDArray;
    typedef ndarray<const Pds::Partition::Source, 1> XtcNDArray;
    const XtcNDArray& xtc_ndarr = xtcPtr->sources();
    _sources_ndarray_storage_ = NDArray(xtc_ndarr.shape());
    NDArray::iterator out = _sources_ndarray_storage_.begin();
    for (XtcNDArray::iterator it = xtc_ndarr.begin(); it != xtc_ndarr.end(); ++ it, ++ out) {
      *out = psddl_pds2psana::Partition::pds_to_psana(*it);
    }
  }
}
ConfigV1::~ConfigV1()
{
}


uint64_t ConfigV1::bldMask() const {
  return m_xtcObj->bldMask();
}


uint32_t ConfigV1::numSources() const {
  return m_xtcObj->numSources();
}

ndarray<const Psana::Partition::Source, 1> ConfigV1::sources() const { return _sources_ndarray_storage_; }
} // namespace Partition
} // namespace psddl_pds2psana
