
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/epixsampler.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace EpixSampler {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::EpixSampler::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::version() const {
  return m_xtcObj->version();
}


uint32_t ConfigV1::runTrigDelay() const {
  return m_xtcObj->runTrigDelay();
}


uint32_t ConfigV1::daqTrigDelay() const {
  return m_xtcObj->daqTrigDelay();
}


uint32_t ConfigV1::daqSetting() const {
  return m_xtcObj->daqSetting();
}


uint32_t ConfigV1::adcClkHalfT() const {
  return m_xtcObj->adcClkHalfT();
}


uint32_t ConfigV1::adcPipelineDelay() const {
  return m_xtcObj->adcPipelineDelay();
}


uint32_t ConfigV1::digitalCardId0() const {
  return m_xtcObj->digitalCardId0();
}


uint32_t ConfigV1::digitalCardId1() const {
  return m_xtcObj->digitalCardId1();
}


uint32_t ConfigV1::analogCardId0() const {
  return m_xtcObj->analogCardId0();
}


uint32_t ConfigV1::analogCardId1() const {
  return m_xtcObj->analogCardId1();
}


uint32_t ConfigV1::numberOfChannels() const {
  return m_xtcObj->numberOfChannels();
}


uint32_t ConfigV1::samplesPerChannel() const {
  return m_xtcObj->samplesPerChannel();
}


uint32_t ConfigV1::baseClockFrequency() const {
  return m_xtcObj->baseClockFrequency();
}


uint8_t ConfigV1::testPatternEnable() const {
  return m_xtcObj->testPatternEnable();
}

template <typename Config>
ElementV1<Config>::ElementV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::EpixSampler::ElementV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
ElementV1<Config>::~ElementV1()
{
}


template <typename Config>
uint8_t ElementV1<Config>::vc() const {
  return m_xtcObj->vc();
}


template <typename Config>
uint8_t ElementV1<Config>::lane() const {
  return m_xtcObj->lane();
}


template <typename Config>
uint16_t ElementV1<Config>::acqCount() const {
  return m_xtcObj->acqCount();
}


template <typename Config>
uint32_t ElementV1<Config>::frameNumber() const {
  return m_xtcObj->frameNumber();
}


template <typename Config>
uint32_t ElementV1<Config>::ticks() const {
  return m_xtcObj->ticks();
}


template <typename Config>
uint32_t ElementV1<Config>::fiducials() const {
  return m_xtcObj->fiducials();
}


template <typename Config>
ndarray<const uint16_t, 2> ElementV1<Config>::frame() const {
  return m_xtcObj->frame(*m_cfgPtr, m_xtcObj);
}


template <typename Config>
ndarray<const uint16_t, 1> ElementV1<Config>::temperatures() const {
  return m_xtcObj->temperatures(*m_cfgPtr, m_xtcObj);
}


template <typename Config>
uint32_t ElementV1<Config>::lastWord() const {
  return m_xtcObj->lastWord(*m_cfgPtr);
}

template class ElementV1<Pds::EpixSampler::ConfigV1>;
} // namespace EpixSampler
} // namespace psddl_pds2psana
