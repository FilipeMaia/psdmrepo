#ifndef PSDDL_PDS2PSANA_CONTROL_DDL_H
#define PSDDL_PDS2PSANA_CONTROL_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <boost/shared_ptr.hpp>
#include "psddl_psana/control.ddl.h"
#include "psddl_pdsdata/control.ddl.h"
#include "pdsdata/xtc/ClockTime.hh"
namespace psddl_pds2psana {
namespace ControlData {
Psana::ControlData::PVControl pds_to_psana(PsddlPds::ControlData::PVControl pds);

Psana::ControlData::PVMonitor pds_to_psana(PsddlPds::ControlData::PVMonitor pds);


class ConfigV1 : public Psana::ControlData::ConfigV1 {
public:
  typedef PsddlPds::ControlData::ConfigV1 XtcType;
  typedef Psana::ControlData::ConfigV1 PsanaType;
  ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV1();
  virtual uint32_t events() const;
  virtual uint8_t uses_duration() const;
  virtual uint8_t uses_events() const;
  virtual const Pds::ClockTime& duration() const;
  virtual uint32_t npvControls() const;
  virtual uint32_t npvMonitors() const;
  virtual const Psana::ControlData::PVControl& pvControls(uint32_t i0) const;
  virtual const Psana::ControlData::PVMonitor& pvMonitors(uint32_t i0) const;
  virtual std::vector<int> pvControls_shape() const;
  virtual std::vector<int> pvMonitors_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  Pds::ClockTime _duration;
  std::vector< Psana::ControlData::PVControl > _pvControls;
  std::vector< Psana::ControlData::PVMonitor > _pvMonitors;
};

} // namespace ControlData
} // namespace psddl_pds2psana
#endif // PSDDL_PDS2PSANA_CONTROL_DDL_H
