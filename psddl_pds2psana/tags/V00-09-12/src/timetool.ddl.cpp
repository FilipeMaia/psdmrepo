
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/timetool.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace TimeTool {
Psana::TimeTool::EventLogic::LogicOp pds_to_psana(Pds::TimeTool::EventLogic::LogicOp e)
{
  return Psana::TimeTool::EventLogic::LogicOp(e);
}

Psana::TimeTool::EventLogic pds_to_psana(Pds::TimeTool::EventLogic pds)
{
  return Psana::TimeTool::EventLogic(pds.event_code(), pds_to_psana(pds.logic_op()));
}

Psana::TimeTool::ConfigV1::Axis pds_to_psana(Pds::TimeTool::ConfigV1::Axis e)
{
  return Psana::TimeTool::ConfigV1::Axis(e);
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::TimeTool::ConfigV1()
  , m_xtcObj(xtcPtr)
  , _sig_roi_lo(psddl_pds2psana::Camera::pds_to_psana(xtcPtr->sig_roi_lo()))
  , _sig_roi_hi(psddl_pds2psana::Camera::pds_to_psana(xtcPtr->sig_roi_hi()))
  , _sb_roi_lo(psddl_pds2psana::Camera::pds_to_psana(xtcPtr->sb_roi_lo()))
  , _sb_roi_hi(psddl_pds2psana::Camera::pds_to_psana(xtcPtr->sb_roi_hi()))
{
  {
    typedef ndarray<Psana::TimeTool::EventLogic, 1> NDArray;
    typedef ndarray<const Pds::TimeTool::EventLogic, 1> XtcNDArray;
    const XtcNDArray& xtc_ndarr = xtcPtr->beam_logic();
    _beam_logic_ndarray_storage_ = NDArray(xtc_ndarr.shape());
    NDArray::iterator out = _beam_logic_ndarray_storage_.begin();
    for (XtcNDArray::iterator it = xtc_ndarr.begin(); it != xtc_ndarr.end(); ++ it, ++ out) {
      *out = psddl_pds2psana::TimeTool::pds_to_psana(*it);
    }
  }
  {
    typedef ndarray<Psana::TimeTool::EventLogic, 1> NDArray;
    typedef ndarray<const Pds::TimeTool::EventLogic, 1> XtcNDArray;
    const XtcNDArray& xtc_ndarr = xtcPtr->laser_logic();
    _laser_logic_ndarray_storage_ = NDArray(xtc_ndarr.shape());
    NDArray::iterator out = _laser_logic_ndarray_storage_.begin();
    for (XtcNDArray::iterator it = xtc_ndarr.begin(); it != xtc_ndarr.end(); ++ it, ++ out) {
      *out = psddl_pds2psana::TimeTool::pds_to_psana(*it);
    }
  }
}
ConfigV1::~ConfigV1()
{
}


Psana::TimeTool::ConfigV1::Axis ConfigV1::project_axis() const {
  return pds_to_psana(m_xtcObj->project_axis());
}


uint8_t ConfigV1::write_image() const {
  return m_xtcObj->write_image();
}


uint8_t ConfigV1::write_projections() const {
  return m_xtcObj->write_projections();
}


uint8_t ConfigV1::subtract_sideband() const {
  return m_xtcObj->subtract_sideband();
}


uint16_t ConfigV1::number_of_weights() const {
  return m_xtcObj->number_of_weights();
}


uint8_t ConfigV1::calib_poly_dim() const {
  return m_xtcObj->calib_poly_dim();
}


uint8_t ConfigV1::base_name_length() const {
  return m_xtcObj->base_name_length();
}


uint16_t ConfigV1::number_of_beam_event_codes() const {
  return m_xtcObj->number_of_beam_event_codes();
}


uint16_t ConfigV1::number_of_laser_event_codes() const {
  return m_xtcObj->number_of_laser_event_codes();
}


uint32_t ConfigV1::signal_cut() const {
  return m_xtcObj->signal_cut();
}

const Psana::Camera::FrameCoord& ConfigV1::sig_roi_lo() const { return _sig_roi_lo; }
const Psana::Camera::FrameCoord& ConfigV1::sig_roi_hi() const { return _sig_roi_hi; }
const Psana::Camera::FrameCoord& ConfigV1::sb_roi_lo() const { return _sb_roi_lo; }
const Psana::Camera::FrameCoord& ConfigV1::sb_roi_hi() const { return _sb_roi_hi; }

double ConfigV1::sb_convergence() const {
  return m_xtcObj->sb_convergence();
}


double ConfigV1::ref_convergence() const {
  return m_xtcObj->ref_convergence();
}

ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV1::beam_logic() const { return _beam_logic_ndarray_storage_; }
ndarray<const Psana::TimeTool::EventLogic, 1> ConfigV1::laser_logic() const { return _laser_logic_ndarray_storage_; }

ndarray<const double, 1> ConfigV1::weights() const {
  return m_xtcObj->weights(m_xtcObj);
}


ndarray<const double, 1> ConfigV1::calib_poly() const {
  return m_xtcObj->calib_poly(m_xtcObj);
}


const char* ConfigV1::base_name() const {
  return m_xtcObj->base_name();
}


uint32_t ConfigV1::signal_projection_size() const {
  return m_xtcObj->signal_projection_size();
}


uint32_t ConfigV1::sideband_projection_size() const {
  return m_xtcObj->sideband_projection_size();
}


std::vector<int> ConfigV1::base_name_shape() const {
  return m_xtcObj->base_name_shape();
}

Psana::TimeTool::DataV1::EventType pds_to_psana(Pds::TimeTool::DataV1::EventType e)
{
  return Psana::TimeTool::DataV1::EventType(e);
}

template <typename Config>
DataV1<Config>::DataV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::TimeTool::DataV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
DataV1<Config>::~DataV1()
{
}


template <typename Config>
Psana::TimeTool::DataV1::EventType DataV1<Config>::event_type() const {
  return pds_to_psana(m_xtcObj->event_type());
}


template <typename Config>
double DataV1<Config>::amplitude() const {
  return m_xtcObj->amplitude();
}


template <typename Config>
double DataV1<Config>::position_pixel() const {
  return m_xtcObj->position_pixel();
}


template <typename Config>
double DataV1<Config>::position_time() const {
  return m_xtcObj->position_time();
}


template <typename Config>
double DataV1<Config>::position_fwhm() const {
  return m_xtcObj->position_fwhm();
}


template <typename Config>
double DataV1<Config>::ref_amplitude() const {
  return m_xtcObj->ref_amplitude();
}


template <typename Config>
double DataV1<Config>::nxt_amplitude() const {
  return m_xtcObj->nxt_amplitude();
}


template <typename Config>
ndarray<const int32_t, 1> DataV1<Config>::projected_signal() const {
  return m_xtcObj->projected_signal(*m_cfgPtr, m_xtcObj);
}


template <typename Config>
ndarray<const int32_t, 1> DataV1<Config>::projected_sideband() const {
  return m_xtcObj->projected_sideband(*m_cfgPtr, m_xtcObj);
}

template class DataV1<Pds::TimeTool::ConfigV1>;
} // namespace TimeTool
} // namespace psddl_pds2psana
