#ifndef PSDDL_PDS2PSANA_ACQIRIS_DDL_H
#define PSDDL_PDS2PSANA_ACQIRIS_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <boost/shared_ptr.hpp>
#include "psddl_psana/acqiris.ddl.h"
#include "psddl_pdsdata/acqiris.ddl.h"
namespace psddl_pds2psana {
namespace Acqiris {
Psana::Acqiris::VertV1 pds_to_psana(PsddlPds::Acqiris::VertV1 pds);

Psana::Acqiris::HorizV1 pds_to_psana(PsddlPds::Acqiris::HorizV1 pds);

Psana::Acqiris::TrigV1 pds_to_psana(PsddlPds::Acqiris::TrigV1 pds);


class ConfigV1 : public Psana::Acqiris::ConfigV1 {
public:
  typedef PsddlPds::Acqiris::ConfigV1 XtcType;
  typedef Psana::Acqiris::ConfigV1 PsanaType;
  ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV1();
  virtual uint32_t nbrConvertersPerChannel() const;
  virtual uint32_t channelMask() const;
  virtual uint32_t nbrBanks() const;
  virtual const Psana::Acqiris::TrigV1& trig() const;
  virtual const Psana::Acqiris::HorizV1& horiz() const;
  virtual const Psana::Acqiris::VertV1& vert(uint32_t i0) const;
  virtual uint32_t nbrChannels() const;
  virtual std::vector<int> vert_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  Psana::Acqiris::TrigV1 _trig;
  Psana::Acqiris::HorizV1 _horiz;
  std::vector< Psana::Acqiris::VertV1 > _vert;
};

Psana::Acqiris::TimestampV1 pds_to_psana(PsddlPds::Acqiris::TimestampV1 pds);


class DataDescV1Elem : public Psana::Acqiris::DataDescV1Elem {
public:
  typedef PsddlPds::Acqiris::DataDescV1Elem XtcType;
  typedef Psana::Acqiris::DataDescV1Elem PsanaType;
  DataDescV1Elem(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const PsddlPds::Acqiris::ConfigV1>& cfgPtr);
  virtual ~DataDescV1Elem();
  virtual uint32_t nbrSamplesInSeg() const;
  virtual uint32_t indexFirstPoint() const;
  virtual uint32_t nbrSegments() const;
  virtual const Psana::Acqiris::TimestampV1& timestamp(uint32_t i0) const;
  virtual const int16_t* waveforms() const;
  virtual std::vector<int> timestamps_shape() const;
  virtual std::vector<int> waveforms_shape() const;
  virtual std::vector<int> _extraSpace_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  boost::shared_ptr<const PsddlPds::Acqiris::ConfigV1> m_cfgPtr0;
  std::vector< Psana::Acqiris::TimestampV1 > _timestamps;
};


class DataDescV1 : public Psana::Acqiris::DataDescV1 {
public:
  typedef PsddlPds::Acqiris::DataDescV1 XtcType;
  typedef Psana::Acqiris::DataDescV1 PsanaType;
  DataDescV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const PsddlPds::Acqiris::ConfigV1>& cfgPtr);
  virtual ~DataDescV1();
  virtual const Psana::Acqiris::DataDescV1Elem& data(uint32_t i0) const;
  virtual std::vector<int> data_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  boost::shared_ptr<const PsddlPds::Acqiris::ConfigV1> m_cfgPtr0;
  std::vector< psddl_pds2psana::Acqiris::DataDescV1Elem > _data;
};

Psana::Acqiris::TdcChannel pds_to_psana(PsddlPds::Acqiris::TdcChannel pds);

Psana::Acqiris::TdcAuxIO pds_to_psana(PsddlPds::Acqiris::TdcAuxIO pds);

Psana::Acqiris::TdcVetoIO pds_to_psana(PsddlPds::Acqiris::TdcVetoIO pds);


class TdcConfigV1 : public Psana::Acqiris::TdcConfigV1 {
public:
  typedef PsddlPds::Acqiris::TdcConfigV1 XtcType;
  typedef Psana::Acqiris::TdcConfigV1 PsanaType;
  TdcConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~TdcConfigV1();
  virtual const Psana::Acqiris::TdcChannel& channels(uint32_t i0) const;
  virtual const Psana::Acqiris::TdcAuxIO& auxio(uint32_t i0) const;
  virtual const Psana::Acqiris::TdcVetoIO& veto() const;
  virtual std::vector<int> channels_shape() const;
  virtual std::vector<int> auxio_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  std::vector< Psana::Acqiris::TdcChannel > _channel;
  std::vector< Psana::Acqiris::TdcAuxIO > _auxIO;
  Psana::Acqiris::TdcVetoIO _veto;
};

Psana::Acqiris::TdcDataV1_Item pds_to_psana(PsddlPds::Acqiris::TdcDataV1_Item pds);


class TdcDataV1 : public Psana::Acqiris::TdcDataV1 {
public:
  typedef PsddlPds::Acqiris::TdcDataV1 XtcType;
  typedef Psana::Acqiris::TdcDataV1 PsanaType;
  TdcDataV1(const boost::shared_ptr<const XtcType>& xtcPtr, size_t xtcSize);
  virtual ~TdcDataV1();
  virtual const Psana::Acqiris::TdcDataV1_Item& data(uint32_t i0) const;
  virtual std::vector<int> data_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  std::vector< Psana::Acqiris::TdcDataV1_Item > _data;
};

} // namespace Acqiris
} // namespace psddl_pds2psana
#endif // PSDDL_PDS2PSANA_ACQIRIS_DDL_H
