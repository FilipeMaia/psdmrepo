#ifndef PSDDL_PDS2PSANA_SMLDATA_DDL_H
#define PSDDL_PDS2PSANA_SMLDATA_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <boost/shared_ptr.hpp>
#include "psddl_psana/smldata.ddl.h"
#include "pdsdata/psddl/smldata.ddl.h"
#include "pdsdata/xtc/TypeId.hh"
namespace psddl_pds2psana {
namespace SmlData {

class ConfigV1 : public Psana::SmlData::ConfigV1 {
public:
  typedef Pds::SmlData::ConfigV1 XtcType;
  typedef Psana::SmlData::ConfigV1 PsanaType;
  ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~ConfigV1();
  virtual uint32_t sizeThreshold() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
};


template <typename Config>
class OrigDgramOffsetV1 : public Psana::SmlData::OrigDgramOffsetV1 {
public:
  typedef Pds::SmlData::OrigDgramOffsetV1 XtcType;
  typedef Psana::SmlData::OrigDgramOffsetV1 PsanaType;
  OrigDgramOffsetV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr);
  virtual ~OrigDgramOffsetV1();
  virtual int64_t fileOffset() const;
  virtual uint32_t extent() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  boost::shared_ptr<const Config> m_cfgPtr;
};


template <typename Config>
class ProxyV1 : public Psana::SmlData::ProxyV1 {
public:
  typedef Pds::SmlData::ProxyV1 XtcType;
  typedef Psana::SmlData::ProxyV1 PsanaType;
  ProxyV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr);
  virtual ~ProxyV1();
  virtual int64_t fileOffset() const;
  virtual const Pds::TypeId& type() const;
  virtual uint32_t extent() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  boost::shared_ptr<const Config> m_cfgPtr;
  Pds::TypeId _type;
};

} // namespace SmlData
} // namespace psddl_pds2psana
#endif // PSDDL_PDS2PSANA_SMLDATA_DDL_H
