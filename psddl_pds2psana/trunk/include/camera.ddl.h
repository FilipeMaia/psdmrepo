#ifndef PSDDL_PDS2PSANA_CAMERA_DDL_H
#define PSDDL_PDS2PSANA_CAMERA_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <boost/shared_ptr.hpp>
#include "psddl_psana/camera.ddl.h"
#include "psddl_pdsdata/camera.ddl.h"
namespace psddl_pds2psana {
namespace Camera {
Psana::Camera::FrameCoord pds_to_psana(PsddlPds::Camera::FrameCoord pds);


class FrameFccdConfigV1 : public Psana::Camera::FrameFccdConfigV1 {
public:
  typedef PsddlPds::Camera::FrameFccdConfigV1 XtcType;
  typedef Psana::Camera::FrameFccdConfigV1 PsanaType;
  FrameFccdConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~FrameFccdConfigV1();
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
};


class FrameFexConfigV1 : public Psana::Camera::FrameFexConfigV1 {
public:
  typedef PsddlPds::Camera::FrameFexConfigV1 XtcType;
  typedef Psana::Camera::FrameFexConfigV1 PsanaType;
  FrameFexConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~FrameFexConfigV1();
  virtual Psana::Camera::FrameFexConfigV1::Forwarding forwarding() const;
  virtual uint32_t forward_prescale() const;
  virtual Psana::Camera::FrameFexConfigV1::Processing processing() const;
  virtual const Psana::Camera::FrameCoord& roiBegin() const;
  virtual const Psana::Camera::FrameCoord& roiEnd() const;
  virtual uint32_t threshold() const;
  virtual uint32_t number_of_masked_pixels() const;
  virtual const Psana::Camera::FrameCoord& masked_pixel_coordinates(uint32_t i0) const;
  virtual std::vector<int> _masked_pixel_coordinates_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
  Psana::Camera::FrameCoord _roiBegin;
  Psana::Camera::FrameCoord _roiEnd;
  std::vector< Psana::Camera::FrameCoord > _masked_pixel_coordinates;
};


class FrameV1 : public Psana::Camera::FrameV1 {
public:
  typedef PsddlPds::Camera::FrameV1 XtcType;
  typedef Psana::Camera::FrameV1 PsanaType;
  FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~FrameV1();
  virtual uint32_t width() const;
  virtual uint32_t height() const;
  virtual uint32_t depth() const;
  virtual uint32_t offset() const;
  virtual const uint8_t* data() const;
  virtual std::vector<int> _pixel_data_shape() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
};


class TwoDGaussianV1 : public Psana::Camera::TwoDGaussianV1 {
public:
  typedef PsddlPds::Camera::TwoDGaussianV1 XtcType;
  typedef Psana::Camera::TwoDGaussianV1 PsanaType;
  TwoDGaussianV1(const boost::shared_ptr<const XtcType>& xtcPtr);
  virtual ~TwoDGaussianV1();
  virtual uint64_t integral() const;
  virtual double xmean() const;
  virtual double ymean() const;
  virtual double major_axis_width() const;
  virtual double minor_axis_width() const;
  virtual double major_axis_tilt() const;
  const XtcType& _xtcObj() const { return *m_xtcObj; }
private:
  boost::shared_ptr<const XtcType> m_xtcObj;
};

} // namespace Camera
} // namespace psddl_pds2psana
#endif // PSDDL_PDS2PSANA_CAMERA_DDL_H
