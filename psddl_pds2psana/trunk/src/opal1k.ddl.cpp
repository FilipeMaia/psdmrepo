
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/opal1k.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Opal1k {
Psana::Opal1k::ConfigV1::Depth pds_to_psana(PsddlPds::Opal1k::ConfigV1::Depth e)
{
  return Psana::Opal1k::ConfigV1::Depth(e);
}

Psana::Opal1k::ConfigV1::Binning pds_to_psana(PsddlPds::Opal1k::ConfigV1::Binning e)
{
  return Psana::Opal1k::ConfigV1::Binning(e);
}

Psana::Opal1k::ConfigV1::Mirroring pds_to_psana(PsddlPds::Opal1k::ConfigV1::Mirroring e)
{
  return Psana::Opal1k::ConfigV1::Mirroring(e);
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Opal1k::ConfigV1()
  , m_xtcObj(xtcPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->defect_pixel_coordinates_shape();
    _defectPixels.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      _defectPixels.push_back(psddl_pds2psana::Camera::pds_to_psana(xtcPtr->defect_pixel_coordinates(i0)));
    }
  }
}
ConfigV1::~ConfigV1()
{
}


uint16_t ConfigV1::black_level() const { return m_xtcObj->black_level(); }

uint16_t ConfigV1::gain_percent() const { return m_xtcObj->gain_percent(); }

Psana::Opal1k::ConfigV1::Depth ConfigV1::output_resolution() const { return pds_to_psana(m_xtcObj->output_resolution()); }

Psana::Opal1k::ConfigV1::Binning ConfigV1::vertical_binning() const { return pds_to_psana(m_xtcObj->vertical_binning()); }

Psana::Opal1k::ConfigV1::Mirroring ConfigV1::output_mirroring() const { return pds_to_psana(m_xtcObj->output_mirroring()); }

uint8_t ConfigV1::vertical_remapping() const { return m_xtcObj->vertical_remapping(); }

uint8_t ConfigV1::defect_pixel_correction_enabled() const { return m_xtcObj->defect_pixel_correction_enabled(); }

uint8_t ConfigV1::output_lookup_table_enabled() const { return m_xtcObj->output_lookup_table_enabled(); }

uint32_t ConfigV1::number_of_defect_pixels() const { return m_xtcObj->number_of_defect_pixels(); }

const uint16_t* ConfigV1::output_lookup_table() const { return m_xtcObj->output_lookup_table(); }

const Psana::Camera::FrameCoord& ConfigV1::defect_pixel_coordinates(uint32_t i0) const { return _defectPixels[i0]; }

uint16_t ConfigV1::output_offset() const { return m_xtcObj->output_offset(); }

uint32_t ConfigV1::output_resolution_bits() const { return m_xtcObj->output_resolution_bits(); }

std::vector<int> ConfigV1::output_lookup_table_shape() const { return m_xtcObj->output_lookup_table_shape(); }
std::vector<int> ConfigV1::defect_pixel_coordinates_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_defectPixels.size());
  return shape;
}

} // namespace Opal1k
} // namespace psddl_pds2psana
