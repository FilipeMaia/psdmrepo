
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/control.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace ControlData {
Psana::ControlData::PVControl pds_to_psana(PsddlPds::ControlData::PVControl pds)
{
  return Psana::ControlData::PVControl(pds.name(), pds.index(), pds.value());
}

Psana::ControlData::PVMonitor pds_to_psana(PsddlPds::ControlData::PVMonitor pds)
{
  return Psana::ControlData::PVMonitor(pds.name(), pds.index(), pds.loValue(), pds.hiValue());
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::ControlData::ConfigV1()
  , m_xtcObj(xtcPtr)
  , _duration(xtcPtr->duration())
{
  {
    const std::vector<int>& dims = xtcPtr->pvControls_shape();
    _pvControls.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      _pvControls.push_back(psddl_pds2psana::ControlData::pds_to_psana(xtcPtr->pvControls(i0)));
    }
  }
  {
    const std::vector<int>& dims = xtcPtr->pvMonitors_shape();
    _pvMonitors.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      _pvMonitors.push_back(psddl_pds2psana::ControlData::pds_to_psana(xtcPtr->pvMonitors(i0)));
    }
  }
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::events() const { return m_xtcObj->events(); }

uint8_t ConfigV1::uses_duration() const { return m_xtcObj->uses_duration(); }

uint8_t ConfigV1::uses_events() const { return m_xtcObj->uses_events(); }

const Pds::ClockTime& ConfigV1::duration() const { return _duration; }

uint32_t ConfigV1::npvControls() const { return m_xtcObj->npvControls(); }

uint32_t ConfigV1::npvMonitors() const { return m_xtcObj->npvMonitors(); }

const Psana::ControlData::PVControl& ConfigV1::pvControls(uint32_t i0) const { return _pvControls[i0]; }

const Psana::ControlData::PVMonitor& ConfigV1::pvMonitors(uint32_t i0) const { return _pvMonitors[i0]; }
std::vector<int> ConfigV1::pvControls_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_pvControls.size());
  return shape;
}

std::vector<int> ConfigV1::pvMonitors_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_pvMonitors.size());
  return shape;
}

} // namespace ControlData
} // namespace psddl_pds2psana
