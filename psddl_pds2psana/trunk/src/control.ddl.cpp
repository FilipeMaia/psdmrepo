
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/control.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace ControlData {
Psana::ControlData::PVControl pds_to_psana(PsddlPds::ControlData::PVControl pds)
{
  return Psana::ControlData::PVControl(pds.name(), pds.index(), pds.value());
}

Psana::ControlData::PVMonitor pds_to_psana(PsddlPds::ControlData::PVMonitor pds)
{
  return Psana::ControlData::PVMonitor(pds.name(), pds.index(), pds.loValue(), pds.hiValue());
}

ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::ControlData::ConfigV1()
  , m_xtcObj(xtcPtr)
  , _duration(xtcPtr->duration())
{
  {
    typedef ndarray<PsddlPds::ControlData::PVControl, 1> XtcNDArray;
    const XtcNDArray& xtc_ndarr = xtcPtr->pvControls();
    _pvControls_ndarray_storage_.reserve(xtc_ndarr.size());
    for (XtcNDArray::const_iterator it = xtc_ndarr.begin(); it != xtc_ndarr.end(); ++ it) {
      _pvControls_ndarray_storage_.push_back(psddl_pds2psana::ControlData::pds_to_psana(*it));
    }
    const unsigned* shape = xtc_ndarr.shape();
    std::copy(shape, shape+1, _pvControls_ndarray_shape_);
  }
  {
    typedef ndarray<PsddlPds::ControlData::PVMonitor, 1> XtcNDArray;
    const XtcNDArray& xtc_ndarr = xtcPtr->pvMonitors();
    _pvMonitors_ndarray_storage_.reserve(xtc_ndarr.size());
    for (XtcNDArray::const_iterator it = xtc_ndarr.begin(); it != xtc_ndarr.end(); ++ it) {
      _pvMonitors_ndarray_storage_.push_back(psddl_pds2psana::ControlData::pds_to_psana(*it));
    }
    const unsigned* shape = xtc_ndarr.shape();
    std::copy(shape, shape+1, _pvMonitors_ndarray_shape_);
  }
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::events() const { return m_xtcObj->events(); }

uint8_t ConfigV1::uses_duration() const { return m_xtcObj->uses_duration(); }

uint8_t ConfigV1::uses_events() const { return m_xtcObj->uses_events(); }

const Pds::ClockTime& ConfigV1::duration() const { return _duration; }

uint32_t ConfigV1::npvControls() const { return m_xtcObj->npvControls(); }

uint32_t ConfigV1::npvMonitors() const { return m_xtcObj->npvMonitors(); }

ndarray<Psana::ControlData::PVControl, 1> ConfigV1::pvControls() const { return ndarray<Psana::ControlData::PVControl, 1>(&_pvControls_ndarray_storage_[0], _pvControls_ndarray_shape_); }

ndarray<Psana::ControlData::PVMonitor, 1> ConfigV1::pvMonitors() const { return ndarray<Psana::ControlData::PVMonitor, 1>(&_pvMonitors_ndarray_storage_[0], _pvMonitors_ndarray_shape_); }
} // namespace ControlData
} // namespace psddl_pds2psana
