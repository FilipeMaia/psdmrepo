
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/bld.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Bld {
Psana::Bld::BldDataFEEGasDetEnergy pds_to_psana(PsddlPds::Bld::BldDataFEEGasDetEnergy pds)
{
  return Psana::Bld::BldDataFEEGasDetEnergy(pds.f_11_ENRC(), pds.f_12_ENRC(), pds.f_21_ENRC(), pds.f_22_ENRC());
}

Psana::Bld::BldDataEBeamV0 pds_to_psana(PsddlPds::Bld::BldDataEBeamV0 pds)
{
  return Psana::Bld::BldDataEBeamV0(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY());
}

Psana::Bld::BldDataEBeamV1 pds_to_psana(PsddlPds::Bld::BldDataEBeamV1 pds)
{
  return Psana::Bld::BldDataEBeamV1(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY(), pds.ebeamPkCurrBC2());
}

Psana::Bld::BldDataEBeamV2 pds_to_psana(PsddlPds::Bld::BldDataEBeamV2 pds)
{
  return Psana::Bld::BldDataEBeamV2(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY(), pds.ebeamPkCurrBC2(), pds.ebeamEnergyBC2());
}

Psana::Bld::BldDataEBeamV3 pds_to_psana(PsddlPds::Bld::BldDataEBeamV3 pds)
{
  return Psana::Bld::BldDataEBeamV3(pds.damageMask(), pds.ebeamCharge(), pds.ebeamL3Energy(), pds.ebeamLTUPosX(), pds.ebeamLTUPosY(), pds.ebeamLTUAngX(), pds.ebeamLTUAngY(), pds.ebeamPkCurrBC2(), pds.ebeamEnergyBC2(), pds.ebeamPkCurrBC1(), pds.ebeamEnergyBC1());
}

Psana::Bld::BldDataPhaseCavity pds_to_psana(PsddlPds::Bld::BldDataPhaseCavity pds)
{
  return Psana::Bld::BldDataPhaseCavity(pds.fitTime1(), pds.fitTime2(), pds.charge1(), pds.charge2());
}

BldDataIpimbV0::BldDataIpimbV0(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Bld::BldDataIpimbV0()
  , m_xtcObj(xtcPtr)
  , _ipimbData(boost::shared_ptr<const PsddlPds::Ipimb::DataV1>(xtcPtr, &xtcPtr->ipimbData()))
  , _ipimbConfig(boost::shared_ptr<const PsddlPds::Ipimb::ConfigV1>(xtcPtr, &xtcPtr->ipimbConfig()))
  , _ipmFexData(psddl_pds2psana::Lusi::pds_to_psana(xtcPtr->ipmFexData()))
{
}
BldDataIpimbV0::~BldDataIpimbV0()
{
}


const Psana::Ipimb::DataV1& BldDataIpimbV0::ipimbData() const { return _ipimbData; }

const Psana::Ipimb::ConfigV1& BldDataIpimbV0::ipimbConfig() const { return _ipimbConfig; }

const Psana::Lusi::IpmFexV1& BldDataIpimbV0::ipmFexData() const { return _ipmFexData; }
BldDataIpimbV1::BldDataIpimbV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Bld::BldDataIpimbV1()
  , m_xtcObj(xtcPtr)
  , _ipimbData(boost::shared_ptr<const PsddlPds::Ipimb::DataV2>(xtcPtr, &xtcPtr->ipimbData()))
  , _ipimbConfig(boost::shared_ptr<const PsddlPds::Ipimb::ConfigV2>(xtcPtr, &xtcPtr->ipimbConfig()))
  , _ipmFexData(psddl_pds2psana::Lusi::pds_to_psana(xtcPtr->ipmFexData()))
{
}
BldDataIpimbV1::~BldDataIpimbV1()
{
}


const Psana::Ipimb::DataV2& BldDataIpimbV1::ipimbData() const { return _ipimbData; }

const Psana::Ipimb::ConfigV2& BldDataIpimbV1::ipimbConfig() const { return _ipimbConfig; }

const Psana::Lusi::IpmFexV1& BldDataIpimbV1::ipmFexData() const { return _ipmFexData; }
BldDataPimV1::BldDataPimV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Bld::BldDataPimV1()
  , m_xtcObj(xtcPtr)
  , _camConfig(boost::shared_ptr<const PsddlPds::Pulnix::TM6740ConfigV2>(xtcPtr, &xtcPtr->camConfig()))
  , _pimConfig(psddl_pds2psana::Lusi::pds_to_psana(xtcPtr->pimConfig()))
  , _frame(boost::shared_ptr<const PsddlPds::Camera::FrameV1>(xtcPtr, &xtcPtr->frame()))
{
}
BldDataPimV1::~BldDataPimV1()
{
}


const Psana::Pulnix::TM6740ConfigV2& BldDataPimV1::camConfig() const { return _camConfig; }

const Psana::Lusi::PimImageConfigV1& BldDataPimV1::pimConfig() const { return _pimConfig; }

const Psana::Camera::FrameV1& BldDataPimV1::frame() const { return _frame; }
BldDataGMDV0::BldDataGMDV0(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Bld::BldDataGMDV0()
  , m_xtcObj(xtcPtr)
{
}
BldDataGMDV0::~BldDataGMDV0()
{
}


const char* BldDataGMDV0::gasType() const { return m_xtcObj->gasType(); }

double BldDataGMDV0::pressure() const { return m_xtcObj->pressure(); }

double BldDataGMDV0::temperature() const { return m_xtcObj->temperature(); }

double BldDataGMDV0::current() const { return m_xtcObj->current(); }

int32_t BldDataGMDV0::hvMeshElectron() const { return m_xtcObj->hvMeshElectron(); }

int32_t BldDataGMDV0::hvMeshIon() const { return m_xtcObj->hvMeshIon(); }

int32_t BldDataGMDV0::hvMultIon() const { return m_xtcObj->hvMultIon(); }

double BldDataGMDV0::chargeQ() const { return m_xtcObj->chargeQ(); }

double BldDataGMDV0::photonEnergy() const { return m_xtcObj->photonEnergy(); }

double BldDataGMDV0::photonsPerPulse() const { return m_xtcObj->photonsPerPulse(); }
} // namespace Bld
} // namespace psddl_pds2psana
