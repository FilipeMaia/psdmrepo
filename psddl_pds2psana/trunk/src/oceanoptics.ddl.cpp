
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/oceanoptics.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace OceanOptics {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::OceanOptics::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


float ConfigV1::exposureTime() const {
  return m_xtcObj->exposureTime();
}


ndarray<const double, 1> ConfigV1::waveLenCalib() const {
  return m_xtcObj->waveLenCalib(m_xtcObj);
}


ndarray<const double, 1> ConfigV1::nonlinCorrect() const {
  return m_xtcObj->nonlinCorrect(m_xtcObj);
}


double ConfigV1::strayLightConstant() const {
  return m_xtcObj->strayLightConstant();
}

Psana::OceanOptics::timespec64 pds_to_psana(PsddlPds::OceanOptics::timespec64 pds)
{
  return Psana::OceanOptics::timespec64(pds.tv_sec(), pds.tv_nsec());
}

template <typename Config>
DataV1<Config>::DataV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::OceanOptics::DataV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
  , _tsTimeFrameStart(psddl_pds2psana::OceanOptics::pds_to_psana(xtcPtr->timeFrameStart()))
  , _tsTimeFrameFirstData(psddl_pds2psana::OceanOptics::pds_to_psana(xtcPtr->timeFrameFirstData()))
  , _tsTimeFrameEnd(psddl_pds2psana::OceanOptics::pds_to_psana(xtcPtr->timeFrameEnd()))
{
}
template <typename Config>
DataV1<Config>::~DataV1()
{
}


template <typename Config>
ndarray<const uint16_t, 1> DataV1<Config>::data() const {
  return m_xtcObj->data(m_xtcObj);
}


template <typename Config>
uint64_t DataV1<Config>::frameCounter() const {
  return m_xtcObj->frameCounter();
}


template <typename Config>
uint64_t DataV1<Config>::numDelayedFrames() const {
  return m_xtcObj->numDelayedFrames();
}


template <typename Config>
uint64_t DataV1<Config>::numDiscardFrames() const {
  return m_xtcObj->numDiscardFrames();
}

template <typename Config>
const Psana::OceanOptics::timespec64& DataV1<Config>::timeFrameStart() const { return _tsTimeFrameStart; }
template <typename Config>
const Psana::OceanOptics::timespec64& DataV1<Config>::timeFrameFirstData() const { return _tsTimeFrameFirstData; }
template <typename Config>
const Psana::OceanOptics::timespec64& DataV1<Config>::timeFrameEnd() const { return _tsTimeFrameEnd; }

template <typename Config>
int8_t DataV1<Config>::numSpectraInData() const {
  return m_xtcObj->numSpectraInData();
}


template <typename Config>
int8_t DataV1<Config>::numSpectraInQueue() const {
  return m_xtcObj->numSpectraInQueue();
}


template <typename Config>
int8_t DataV1<Config>::numSpectraUnused() const {
  return m_xtcObj->numSpectraUnused();
}


template <typename Config>
double DataV1<Config>::durationOfFrame() const {
  return m_xtcObj->durationOfFrame();
}


template <typename Config>
double DataV1<Config>::nonlinerCorrected(uint32_t iPixel) const {
  return m_xtcObj->nonlinerCorrected(*m_cfgPtr, iPixel);
}

template class DataV1<PsddlPds::OceanOptics::ConfigV1>;
} // namespace OceanOptics
} // namespace psddl_pds2psana
