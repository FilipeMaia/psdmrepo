// *** Do not edit this file, it is auto-generated ***

#include "MsgLogger/MsgLogger.h"
#include "PSEvt/Exceptions.h"
#include "psddl_pds2psana/EvtProxy.h"
#include "psddl_pds2psana/EvtProxyCfg.h"

#include "psddl_pds2psana/dispatch.h"
#include "psddl_pds2psana/rayonix.ddl.h"
#include "psddl_pds2psana/fli.ddl.h"
#include "psddl_pds2psana/epics.ddl.h"
#include "psddl_pds2psana/pnccd.ddl.h"
#include "psddl_pds2psana/oceanoptics.ddl.h"
#include "psddl_pds2psana/gsc16ai.ddl.h"
#include "psddl_pds2psana/acqiris.ddl.h"
#include "psddl_pds2psana/lusi.ddl.h"
#include "psddl_pds2psana/timepix.ddl.h"
#include "psddl_pds2psana/cspad.ddl.h"
#include "psddl_pds2psana/epix.ddl.h"
#include "psddl_pds2psana/orca.ddl.h"
#include "psddl_pds2psana/control.ddl.h"
#include "psddl_pds2psana/l3t.ddl.h"
#include "psddl_pds2psana/pimax.ddl.h"
#include "psddl_pds2psana/andor.ddl.h"
#include "psddl_pds2psana/fccd.ddl.h"
#include "psddl_pds2psana/evr.ddl.h"
#include "psddl_pds2psana/bld.ddl.h"
#include "psddl_pds2psana/encoder.ddl.h"
#include "psddl_pds2psana/pulnix.ddl.h"
#include "psddl_pds2psana/princeton.ddl.h"
#include "psddl_pds2psana/quartz.ddl.h"
#include "psddl_pds2psana/camera.ddl.h"
#include "psddl_pds2psana/usdusb.ddl.h"
#include "psddl_pds2psana/timetool.ddl.h"
#include "psddl_pds2psana/alias.ddl.h"
#include "psddl_pds2psana/ipimb.ddl.h"
#include "psddl_pds2psana/opal1k.ddl.h"
#include "psddl_pds2psana/cspad2x2.ddl.h"
#include "psddl_pds2psana/arraychar.ddl.h"
#include "psddl_pds2psana/imp.ddl.h"
#include "psddl_pds2psana/partition.ddl.h"
#include "psddl_pds2psana/epixsampler.ddl.h"
#include "psddl_pds2psana/genericpgp.ddl.h"
#include "psddl_pds2psana/CsPadDataOrdered.h"
#include "psddl_pds2psana/PnccdFullFrameV1Proxy.h"
#include "psddl_pds2psana/TimepixDataV1ToV2.h"
namespace psddl_pds2psana {
void xtcConvert(const boost::shared_ptr<Pds::Xtc>& xtc, PSEvt::Event* evt, PSEnv::EnvObjectStore& cfgStore)
try {
  const Pds::TypeId& typeId = xtc->contains;

  int version = typeId.version();
  switch(typeId.id()) {
  case Pds::TypeId::Any:
  case Pds::TypeId::Id_Xtc:
  case Pds::TypeId::NumberOf:
  case Pds::TypeId::Id_Epics:
  case Pds::TypeId::Reserved1:
  case Pds::TypeId::Reserved2:
  case Pds::TypeId::Id_Index:
  case Pds::TypeId::Id_XampsConfig:
  case Pds::TypeId::Id_XampsElement:
  case Pds::TypeId::Id_FexampConfig:
  case Pds::TypeId::Id_FexampElement:
  case Pds::TypeId::Id_PhasicsConfig:
  case Pds::TypeId::Id_CspadCompressedElement:
    break;
  case Pds::TypeId::Id_AcqConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Acqiris::ConfigV1> xptr(xtc, (Pds::Acqiris::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Acqiris::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Acqiris::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AcqTdcConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Acqiris::TdcConfigV1> xptr(xtc, (Pds::Acqiris::TdcConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Acqiris::TdcConfigV1> obj = boost::make_shared<psddl_pds2psana::Acqiris::TdcConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AcqTdcData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Acqiris::TdcDataV1, psddl_pds2psana::Acqiris::TdcDataV1, Pds::Acqiris::TdcDataV1, true> ProxyType;
          if (evt) evt->putProxy<Psana::Acqiris::TdcDataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Acqiris::TdcDataV1, psddl_pds2psana::Acqiris::TdcDataV1, Pds::Acqiris::TdcDataV1, true> ProxyType;
          if (evt) evt->putProxy<Psana::Acqiris::TdcDataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AcqWaveform:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Acqiris::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Acqiris::DataDescV1, psddl_pds2psana::Acqiris::DataDescV1<Pds::Acqiris::ConfigV1>, Pds::Acqiris::DataDescV1, Pds::Acqiris::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Acqiris::DataDescV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Acqiris::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Acqiris::DataDescV1, psddl_pds2psana::Acqiris::DataDescV1<Pds::Acqiris::ConfigV1>, Pds::Acqiris::DataDescV1, Pds::Acqiris::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Acqiris::DataDescV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AliasConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Alias::ConfigV1> xptr(xtc, (Pds::Alias::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Alias::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Alias::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AndorConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Andor::ConfigV1> xptr(xtc, (Pds::Andor::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Andor::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Andor::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_AndorFrame:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Andor::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Andor::FrameV1, psddl_pds2psana::Andor::FrameV1<Pds::Andor::ConfigV1>, Pds::Andor::FrameV1, Pds::Andor::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Andor::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Andor::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Andor::FrameV1, psddl_pds2psana::Andor::FrameV1<Pds::Andor::ConfigV1>, Pds::Andor::FrameV1, Pds::Andor::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Andor::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Arraychar:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Arraychar::DataV1, psddl_pds2psana::Arraychar::DataV1, Pds::Arraychar::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Arraychar::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Arraychar::DataV1, psddl_pds2psana::Arraychar::DataV1, Pds::Arraychar::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Arraychar::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_ControlConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::ControlData::ConfigV1> xptr(xtc, (Pds::ControlData::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::ControlData::ConfigV1> obj = boost::make_shared<psddl_pds2psana::ControlData::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::ControlData::ConfigV2> xptr(xtc, (Pds::ControlData::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::ControlData::ConfigV2> obj = boost::make_shared<psddl_pds2psana::ControlData::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 3:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::ControlData::ConfigV3> xptr(xtc, (Pds::ControlData::ConfigV3*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::ControlData::ConfigV3> obj = boost::make_shared<psddl_pds2psana::ControlData::ConfigV3>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Cspad2x2Config:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad2x2::ConfigV1> xptr(xtc, (Pds::CsPad2x2::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad2x2::ConfigV1> obj = boost::make_shared<psddl_pds2psana::CsPad2x2::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad2x2::ConfigV2> xptr(xtc, (Pds::CsPad2x2::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad2x2::ConfigV2> obj = boost::make_shared<psddl_pds2psana::CsPad2x2::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Cspad2x2Element:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::CsPad2x2::ElementV1, psddl_pds2psana::CsPad2x2::ElementV1, Pds::CsPad2x2::ElementV1> ProxyType;
          if (evt) evt->putProxy<Psana::CsPad2x2::ElementV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::CsPad2x2::ElementV1, psddl_pds2psana::CsPad2x2::ElementV1, Pds::CsPad2x2::ElementV1> ProxyType;
          if (evt) evt->putProxy<Psana::CsPad2x2::ElementV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_CspadConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad::ConfigV1> xptr(xtc, (Pds::CsPad::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad::ConfigV1> obj = boost::make_shared<psddl_pds2psana::CsPad::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad::ConfigV2> xptr(xtc, (Pds::CsPad::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad::ConfigV2> obj = boost::make_shared<psddl_pds2psana::CsPad::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 3:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad::ConfigV3> xptr(xtc, (Pds::CsPad::ConfigV3*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad::ConfigV3> obj = boost::make_shared<psddl_pds2psana::CsPad::ConfigV3>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 4:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad::ConfigV4> xptr(xtc, (Pds::CsPad::ConfigV4*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad::ConfigV4> obj = boost::make_shared<psddl_pds2psana::CsPad::ConfigV4>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 5:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::CsPad::ConfigV5> xptr(xtc, (Pds::CsPad::ConfigV5*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::CsPad::ConfigV5> obj = boost::make_shared<psddl_pds2psana::CsPad::ConfigV5>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_CspadElement:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::CsPad::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV1>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV2>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV3>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV4>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV5>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 2:
        {
          if (boost::shared_ptr<Pds::CsPad::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV2>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV3>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV4>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV5>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::CsPad::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV1>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV2>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV3>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV4>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV1, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV1<Pds::CsPad::ConfigV5>, Psana::CsPad::ElementV1>, Pds::CsPad::DataV1, Pds::CsPad::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32770:
        {
          if (boost::shared_ptr<Pds::CsPad::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV2>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV3>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV4>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::CsPad::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::CsPad::DataV2, psddl_pds2psana::CsPadDataOrdered<psddl_pds2psana::CsPad::DataV2<Pds::CsPad::ConfigV5>, Psana::CsPad::ElementV2>, Pds::CsPad::DataV2, Pds::CsPad::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::CsPad::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_DiodeFex:
    {
      switch (version) {
      case 1:
        {
          // XTC data object
          const Pds::Lusi::DiodeFexV1& xdata = *(Pds::Lusi::DiodeFexV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Lusi::DiodeFexV1& data = psddl_pds2psana::Lusi::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Lusi::DiodeFexV1>(data), xtc->src);
        }
        break;
      case 32769:
        {
          // XTC data object
          const Pds::Lusi::DiodeFexV1& xdata = *(Pds::Lusi::DiodeFexV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Lusi::DiodeFexV1& data = psddl_pds2psana::Lusi::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Lusi::DiodeFexV1>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_DiodeFexConfig:
    {
      switch (version) {
      case 1:
        {
          // XTC data object
          Pds::Lusi::DiodeFexConfigV1* xdata = (Pds::Lusi::DiodeFexConfigV1*)(xtc->payload());
          // store XTC object in config store
          boost::shared_ptr<Pds::Lusi::DiodeFexConfigV1> xptr(xtc, xdata);
          cfgStore.put(xptr, xtc->src);
          //convert XtcType to Psana type
          const Psana::Lusi::DiodeFexConfigV1& data = psddl_pds2psana::Lusi::pds_to_psana(*xdata);
          // create and store psana object in config store
          cfgStore.put(boost::make_shared<Psana::Lusi::DiodeFexConfigV1>(data), xtc->src);
        }
        break;
      case 2:
        {
          // XTC data object
          Pds::Lusi::DiodeFexConfigV2* xdata = (Pds::Lusi::DiodeFexConfigV2*)(xtc->payload());
          // store XTC object in config store
          boost::shared_ptr<Pds::Lusi::DiodeFexConfigV2> xptr(xtc, xdata);
          cfgStore.put(xptr, xtc->src);
          //convert XtcType to Psana type
          const Psana::Lusi::DiodeFexConfigV2& data = psddl_pds2psana::Lusi::pds_to_psana(*xdata);
          // create and store psana object in config store
          cfgStore.put(boost::make_shared<Psana::Lusi::DiodeFexConfigV2>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EBeam:
    {
      switch (version) {
      case 0:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV0& xdata = *(Pds::Bld::BldDataEBeamV0*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV0& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV0>(data), xtc->src);
        }
        break;
      case 1:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV1& xdata = *(Pds::Bld::BldDataEBeamV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV1& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV1>(data), xtc->src);
        }
        break;
      case 2:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV2& xdata = *(Pds::Bld::BldDataEBeamV2*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV2& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV2>(data), xtc->src);
        }
        break;
      case 3:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV3& xdata = *(Pds::Bld::BldDataEBeamV3*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV3& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV3>(data), xtc->src);
        }
        break;
      case 4:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV4& xdata = *(Pds::Bld::BldDataEBeamV4*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV4& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV4>(data), xtc->src);
        }
        break;
      case 5:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV5& xdata = *(Pds::Bld::BldDataEBeamV5*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV5& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV5>(data), xtc->src);
        }
        break;
      case 6:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV6& xdata = *(Pds::Bld::BldDataEBeamV6*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV6& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV6>(data), xtc->src);
        }
        break;
      case 32768:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV0& xdata = *(Pds::Bld::BldDataEBeamV0*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV0& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV0>(data), xtc->src);
        }
        break;
      case 32769:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV1& xdata = *(Pds::Bld::BldDataEBeamV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV1& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV1>(data), xtc->src);
        }
        break;
      case 32770:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV2& xdata = *(Pds::Bld::BldDataEBeamV2*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV2& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV2>(data), xtc->src);
        }
        break;
      case 32771:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV3& xdata = *(Pds::Bld::BldDataEBeamV3*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV3& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV3>(data), xtc->src);
        }
        break;
      case 32772:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV4& xdata = *(Pds::Bld::BldDataEBeamV4*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV4& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV4>(data), xtc->src);
        }
        break;
      case 32773:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV5& xdata = *(Pds::Bld::BldDataEBeamV5*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV5& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV5>(data), xtc->src);
        }
        break;
      case 32774:
        {
          // XTC data object
          const Pds::Bld::BldDataEBeamV6& xdata = *(Pds::Bld::BldDataEBeamV6*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataEBeamV6& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataEBeamV6>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EncoderConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Encoder::ConfigV1> xptr(xtc, (Pds::Encoder::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Encoder::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Encoder::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Encoder::ConfigV2> xptr(xtc, (Pds::Encoder::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Encoder::ConfigV2> obj = boost::make_shared<psddl_pds2psana::Encoder::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EncoderData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Encoder::DataV1, psddl_pds2psana::Encoder::DataV1, Pds::Encoder::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Encoder::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 2:
        {
          // store proxy
          typedef EvtProxy<Psana::Encoder::DataV2, psddl_pds2psana::Encoder::DataV2, Pds::Encoder::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Encoder::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Encoder::DataV1, psddl_pds2psana::Encoder::DataV1, Pds::Encoder::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Encoder::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32770:
        {
          // store proxy
          typedef EvtProxy<Psana::Encoder::DataV2, psddl_pds2psana::Encoder::DataV2, Pds::Encoder::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Encoder::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EpicsConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Epics::ConfigV1> xptr(xtc, (Pds::Epics::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Epics::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Epics::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Epix10kConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Epix::Config10KV1> xptr(xtc, (Pds::Epix::Config10KV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Epix::Config10KV1> obj = boost::make_shared<psddl_pds2psana::Epix::Config10KV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EpixConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Epix::ConfigV1> xptr(xtc, (Pds::Epix::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Epix::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Epix::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EpixElement:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Epix::Config10KV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::Epix::Config10KV1>, Pds::Epix::ElementV1, Pds::Epix::Config10KV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Epix::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::Epix::ConfigV1>, Pds::Epix::ElementV1, Pds::Epix::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::GenericPgp::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::GenericPgp::ConfigV1>, Pds::Epix::ElementV1, Pds::GenericPgp::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Epix::Config10KV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::Epix::Config10KV1>, Pds::Epix::ElementV1, Pds::Epix::Config10KV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Epix::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::Epix::ConfigV1>, Pds::Epix::ElementV1, Pds::Epix::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::GenericPgp::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Epix::ElementV1, psddl_pds2psana::Epix::ElementV1<Pds::GenericPgp::ConfigV1>, Pds::Epix::ElementV1, Pds::GenericPgp::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Epix::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EpixSamplerConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EpixSampler::ConfigV1> xptr(xtc, (Pds::EpixSampler::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EpixSampler::ConfigV1> obj = boost::make_shared<psddl_pds2psana::EpixSampler::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EpixSamplerElement:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::EpixSampler::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::EpixSampler::ElementV1, psddl_pds2psana::EpixSampler::ElementV1<Pds::EpixSampler::ConfigV1>, Pds::EpixSampler::ElementV1, Pds::EpixSampler::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::EpixSampler::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::EpixSampler::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::EpixSampler::ElementV1, psddl_pds2psana::EpixSampler::ElementV1<Pds::EpixSampler::ConfigV1>, Pds::EpixSampler::ElementV1, Pds::EpixSampler::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::EpixSampler::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EvrConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV1> xptr(xtc, (Pds::EvrData::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV1> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV2> xptr(xtc, (Pds::EvrData::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV2> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 3:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV3> xptr(xtc, (Pds::EvrData::ConfigV3*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV3> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV3>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 4:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV4> xptr(xtc, (Pds::EvrData::ConfigV4*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV4> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV4>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 5:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV5> xptr(xtc, (Pds::EvrData::ConfigV5*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV5> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV5>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 6:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV6> xptr(xtc, (Pds::EvrData::ConfigV6*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV6> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV6>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 7:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::ConfigV7> xptr(xtc, (Pds::EvrData::ConfigV7*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::ConfigV7> obj = boost::make_shared<psddl_pds2psana::EvrData::ConfigV7>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EvrData:
    {
      switch (version) {
      case 3:
        {
          // store proxy
          typedef EvtProxy<Psana::EvrData::DataV3, psddl_pds2psana::EvrData::DataV3, Pds::EvrData::DataV3> ProxyType;
          if (evt) evt->putProxy<Psana::EvrData::DataV3>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32771:
        {
          // store proxy
          typedef EvtProxy<Psana::EvrData::DataV3, psddl_pds2psana::EvrData::DataV3, Pds::EvrData::DataV3> ProxyType;
          if (evt) evt->putProxy<Psana::EvrData::DataV3>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EvrIOConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::IOConfigV1> xptr(xtc, (Pds::EvrData::IOConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::IOConfigV1> obj = boost::make_shared<psddl_pds2psana::EvrData::IOConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::IOConfigV2> xptr(xtc, (Pds::EvrData::IOConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::IOConfigV2> obj = boost::make_shared<psddl_pds2psana::EvrData::IOConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_EvsConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::EvrData::SrcConfigV1> xptr(xtc, (Pds::EvrData::SrcConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::EvrData::SrcConfigV1> obj = boost::make_shared<psddl_pds2psana::EvrData::SrcConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FccdConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::FCCD::FccdConfigV1> xptr(xtc, (Pds::FCCD::FccdConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::FCCD::FccdConfigV1> obj = boost::make_shared<psddl_pds2psana::FCCD::FccdConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::FCCD::FccdConfigV2> xptr(xtc, (Pds::FCCD::FccdConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::FCCD::FccdConfigV2> obj = boost::make_shared<psddl_pds2psana::FCCD::FccdConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FEEGasDetEnergy:
    {
      switch (version) {
      case 0:
        {
          // XTC data object
          const Pds::Bld::BldDataFEEGasDetEnergy& xdata = *(Pds::Bld::BldDataFEEGasDetEnergy*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataFEEGasDetEnergy& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataFEEGasDetEnergy>(data), xtc->src);
        }
        break;
      case 1:
        {
          // XTC data object
          const Pds::Bld::BldDataFEEGasDetEnergyV1& xdata = *(Pds::Bld::BldDataFEEGasDetEnergyV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataFEEGasDetEnergyV1& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataFEEGasDetEnergyV1>(data), xtc->src);
        }
        break;
      case 32768:
        {
          // XTC data object
          const Pds::Bld::BldDataFEEGasDetEnergy& xdata = *(Pds::Bld::BldDataFEEGasDetEnergy*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataFEEGasDetEnergy& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataFEEGasDetEnergy>(data), xtc->src);
        }
        break;
      case 32769:
        {
          // XTC data object
          const Pds::Bld::BldDataFEEGasDetEnergyV1& xdata = *(Pds::Bld::BldDataFEEGasDetEnergyV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataFEEGasDetEnergyV1& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataFEEGasDetEnergyV1>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FliConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Fli::ConfigV1> xptr(xtc, (Pds::Fli::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Fli::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Fli::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FliFrame:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Fli::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Fli::FrameV1, psddl_pds2psana::Fli::FrameV1<Pds::Fli::ConfigV1>, Pds::Fli::FrameV1, Pds::Fli::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Fli::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Fli::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Fli::FrameV1, psddl_pds2psana::Fli::FrameV1<Pds::Fli::ConfigV1>, Pds::Fli::FrameV1, Pds::Fli::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Fli::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Frame:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Camera::FrameV1, psddl_pds2psana::Camera::FrameV1, Pds::Camera::FrameV1> ProxyType;
          if (evt) evt->putProxy<Psana::Camera::FrameV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Camera::FrameV1, psddl_pds2psana::Camera::FrameV1, Pds::Camera::FrameV1> ProxyType;
          if (evt) evt->putProxy<Psana::Camera::FrameV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FrameFccdConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Camera::FrameFccdConfigV1> xptr(xtc, (Pds::Camera::FrameFccdConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Camera::FrameFccdConfigV1> obj = boost::make_shared<psddl_pds2psana::Camera::FrameFccdConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_FrameFexConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Camera::FrameFexConfigV1> xptr(xtc, (Pds::Camera::FrameFexConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Camera::FrameFexConfigV1> obj = boost::make_shared<psddl_pds2psana::Camera::FrameFexConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_GenericPgpConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::GenericPgp::ConfigV1> xptr(xtc, (Pds::GenericPgp::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::GenericPgp::ConfigV1> obj = boost::make_shared<psddl_pds2psana::GenericPgp::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_GMD:
    {
      switch (version) {
      case 0:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV0, psddl_pds2psana::Bld::BldDataGMDV0, Pds::Bld::BldDataGMDV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV1, psddl_pds2psana::Bld::BldDataGMDV1, Pds::Bld::BldDataGMDV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 2:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV2, psddl_pds2psana::Bld::BldDataGMDV2, Pds::Bld::BldDataGMDV2> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32768:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV0, psddl_pds2psana::Bld::BldDataGMDV0, Pds::Bld::BldDataGMDV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV1, psddl_pds2psana::Bld::BldDataGMDV1, Pds::Bld::BldDataGMDV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32770:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataGMDV2, psddl_pds2psana::Bld::BldDataGMDV2, Pds::Bld::BldDataGMDV2> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataGMDV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Gsc16aiConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Gsc16ai::ConfigV1> xptr(xtc, (Pds::Gsc16ai::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Gsc16ai::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Gsc16ai::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Gsc16aiData:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Gsc16ai::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Gsc16ai::DataV1, psddl_pds2psana::Gsc16ai::DataV1<Pds::Gsc16ai::ConfigV1>, Pds::Gsc16ai::DataV1, Pds::Gsc16ai::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Gsc16ai::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Gsc16ai::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Gsc16ai::DataV1, psddl_pds2psana::Gsc16ai::DataV1<Pds::Gsc16ai::ConfigV1>, Pds::Gsc16ai::DataV1, Pds::Gsc16ai::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Gsc16ai::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_ImpConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Imp::ConfigV1> xptr(xtc, (Pds::Imp::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Imp::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Imp::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_ImpData:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Imp::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Imp::ElementV1, psddl_pds2psana::Imp::ElementV1<Pds::Imp::ConfigV1>, Pds::Imp::ElementV1, Pds::Imp::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Imp::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Imp::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Imp::ElementV1, psddl_pds2psana::Imp::ElementV1<Pds::Imp::ConfigV1>, Pds::Imp::ElementV1, Pds::Imp::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Imp::ElementV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_IpimbConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Ipimb::ConfigV1> xptr(xtc, (Pds::Ipimb::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Ipimb::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Ipimb::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Ipimb::ConfigV2> xptr(xtc, (Pds::Ipimb::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Ipimb::ConfigV2> obj = boost::make_shared<psddl_pds2psana::Ipimb::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_IpimbData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Ipimb::DataV1, psddl_pds2psana::Ipimb::DataV1, Pds::Ipimb::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Ipimb::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 2:
        {
          // store proxy
          typedef EvtProxy<Psana::Ipimb::DataV2, psddl_pds2psana::Ipimb::DataV2, Pds::Ipimb::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Ipimb::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Ipimb::DataV1, psddl_pds2psana::Ipimb::DataV1, Pds::Ipimb::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Ipimb::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32770:
        {
          // store proxy
          typedef EvtProxy<Psana::Ipimb::DataV2, psddl_pds2psana::Ipimb::DataV2, Pds::Ipimb::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Ipimb::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_IpmFex:
    {
      switch (version) {
      case 1:
        {
          // XTC data object
          const Pds::Lusi::IpmFexV1& xdata = *(Pds::Lusi::IpmFexV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Lusi::IpmFexV1& data = psddl_pds2psana::Lusi::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Lusi::IpmFexV1>(data), xtc->src);
        }
        break;
      case 32769:
        {
          // XTC data object
          const Pds::Lusi::IpmFexV1& xdata = *(Pds::Lusi::IpmFexV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Lusi::IpmFexV1& data = psddl_pds2psana::Lusi::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Lusi::IpmFexV1>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_IpmFexConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Lusi::IpmFexConfigV1> xptr(xtc, (Pds::Lusi::IpmFexConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Lusi::IpmFexConfigV1> obj = boost::make_shared<psddl_pds2psana::Lusi::IpmFexConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Lusi::IpmFexConfigV2> xptr(xtc, (Pds::Lusi::IpmFexConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Lusi::IpmFexConfigV2> obj = boost::make_shared<psddl_pds2psana::Lusi::IpmFexConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_L3TConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::L3T::ConfigV1> xptr(xtc, (Pds::L3T::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::L3T::ConfigV1> obj = boost::make_shared<psddl_pds2psana::L3T::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_L3TData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::L3T::DataV1, psddl_pds2psana::L3T::DataV1, Pds::L3T::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::L3T::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 2:
        {
          // store proxy
          typedef EvtProxy<Psana::L3T::DataV2, psddl_pds2psana::L3T::DataV2, Pds::L3T::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::L3T::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::L3T::DataV1, psddl_pds2psana::L3T::DataV1, Pds::L3T::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::L3T::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32770:
        {
          // store proxy
          typedef EvtProxy<Psana::L3T::DataV2, psddl_pds2psana::L3T::DataV2, Pds::L3T::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::L3T::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_OceanOpticsConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::OceanOptics::ConfigV1> xptr(xtc, (Pds::OceanOptics::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::OceanOptics::ConfigV1> obj = boost::make_shared<psddl_pds2psana::OceanOptics::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::OceanOptics::ConfigV2> xptr(xtc, (Pds::OceanOptics::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::OceanOptics::ConfigV2> obj = boost::make_shared<psddl_pds2psana::OceanOptics::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_OceanOpticsData:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::OceanOptics::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV1, psddl_pds2psana::OceanOptics::DataV1<Pds::OceanOptics::ConfigV1>, Pds::OceanOptics::DataV1, Pds::OceanOptics::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::OceanOptics::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV1, psddl_pds2psana::OceanOptics::DataV1<Pds::OceanOptics::ConfigV2>, Pds::OceanOptics::DataV1, Pds::OceanOptics::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 2:
        {
          if (boost::shared_ptr<Pds::OceanOptics::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV2, psddl_pds2psana::OceanOptics::DataV2<Pds::OceanOptics::ConfigV2>, Pds::OceanOptics::DataV2, Pds::OceanOptics::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::OceanOptics::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV1, psddl_pds2psana::OceanOptics::DataV1<Pds::OceanOptics::ConfigV1>, Pds::OceanOptics::DataV1, Pds::OceanOptics::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::OceanOptics::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV1, psddl_pds2psana::OceanOptics::DataV1<Pds::OceanOptics::ConfigV2>, Pds::OceanOptics::DataV1, Pds::OceanOptics::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32770:
        {
          if (boost::shared_ptr<Pds::OceanOptics::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::OceanOptics::DataV2, psddl_pds2psana::OceanOptics::DataV2<Pds::OceanOptics::ConfigV2>, Pds::OceanOptics::DataV2, Pds::OceanOptics::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::OceanOptics::DataV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Opal1kConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Opal1k::ConfigV1> xptr(xtc, (Pds::Opal1k::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Opal1k::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Opal1k::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_OrcaConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Orca::ConfigV1> xptr(xtc, (Pds::Orca::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Orca::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Orca::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PartitionConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Partition::ConfigV1> xptr(xtc, (Pds::Partition::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Partition::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Partition::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PhaseCavity:
    {
      switch (version) {
      case 0:
        {
          // XTC data object
          const Pds::Bld::BldDataPhaseCavity& xdata = *(Pds::Bld::BldDataPhaseCavity*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataPhaseCavity& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataPhaseCavity>(data), xtc->src);
        }
        break;
      case 32768:
        {
          // XTC data object
          const Pds::Bld::BldDataPhaseCavity& xdata = *(Pds::Bld::BldDataPhaseCavity*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Bld::BldDataPhaseCavity& data = psddl_pds2psana::Bld::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Bld::BldDataPhaseCavity>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PimaxConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Pimax::ConfigV1> xptr(xtc, (Pds::Pimax::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Pimax::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Pimax::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PimaxFrame:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Pimax::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Pimax::FrameV1, psddl_pds2psana::Pimax::FrameV1<Pds::Pimax::ConfigV1>, Pds::Pimax::FrameV1, Pds::Pimax::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Pimax::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Pimax::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Pimax::FrameV1, psddl_pds2psana::Pimax::FrameV1<Pds::Pimax::ConfigV1>, Pds::Pimax::FrameV1, Pds::Pimax::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Pimax::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PimImageConfig:
    {
      switch (version) {
      case 1:
        {
          // XTC data object
          Pds::Lusi::PimImageConfigV1* xdata = (Pds::Lusi::PimImageConfigV1*)(xtc->payload());
          // store XTC object in config store
          boost::shared_ptr<Pds::Lusi::PimImageConfigV1> xptr(xtc, xdata);
          cfgStore.put(xptr, xtc->src);
          //convert XtcType to Psana type
          const Psana::Lusi::PimImageConfigV1& data = psddl_pds2psana::Lusi::pds_to_psana(*xdata);
          // create and store psana object in config store
          cfgStore.put(boost::make_shared<Psana::Lusi::PimImageConfigV1>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_pnCCDconfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::PNCCD::ConfigV1> xptr(xtc, (Pds::PNCCD::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::PNCCD::ConfigV1> obj = boost::make_shared<psddl_pds2psana::PNCCD::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::PNCCD::ConfigV2> xptr(xtc, (Pds::PNCCD::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::PNCCD::ConfigV2> obj = boost::make_shared<psddl_pds2psana::PNCCD::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_pnCCDframe:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef PnccdFullFrameV1Proxy ProxyType;
          if (evt) evt->putProxy<Psana::PNCCD::FullFrameV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
          if (boost::shared_ptr<Pds::PNCCD::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::PNCCD::FramesV1, psddl_pds2psana::PNCCD::FramesV1<Pds::PNCCD::ConfigV1>, Pds::PNCCD::FramesV1, Pds::PNCCD::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::PNCCD::FramesV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::PNCCD::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::PNCCD::FramesV1, psddl_pds2psana::PNCCD::FramesV1<Pds::PNCCD::ConfigV2>, Pds::PNCCD::FramesV1, Pds::PNCCD::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::PNCCD::FramesV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          // store proxy
          typedef PnccdFullFrameV1Proxy ProxyType;
          if (evt) evt->putProxy<Psana::PNCCD::FullFrameV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
          if (boost::shared_ptr<Pds::PNCCD::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::PNCCD::FramesV1, psddl_pds2psana::PNCCD::FramesV1<Pds::PNCCD::ConfigV1>, Pds::PNCCD::FramesV1, Pds::PNCCD::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::PNCCD::FramesV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::PNCCD::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::PNCCD::FramesV1, psddl_pds2psana::PNCCD::FramesV1<Pds::PNCCD::ConfigV2>, Pds::PNCCD::FramesV1, Pds::PNCCD::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::PNCCD::FramesV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PrincetonConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Princeton::ConfigV1> xptr(xtc, (Pds::Princeton::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Princeton::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Princeton::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Princeton::ConfigV2> xptr(xtc, (Pds::Princeton::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Princeton::ConfigV2> obj = boost::make_shared<psddl_pds2psana::Princeton::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 3:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Princeton::ConfigV3> xptr(xtc, (Pds::Princeton::ConfigV3*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Princeton::ConfigV3> obj = boost::make_shared<psddl_pds2psana::Princeton::ConfigV3>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 4:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Princeton::ConfigV4> xptr(xtc, (Pds::Princeton::ConfigV4*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Princeton::ConfigV4> obj = boost::make_shared<psddl_pds2psana::Princeton::ConfigV4>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 5:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Princeton::ConfigV5> xptr(xtc, (Pds::Princeton::ConfigV5*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Princeton::ConfigV5> obj = boost::make_shared<psddl_pds2psana::Princeton::ConfigV5>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PrincetonFrame:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Princeton::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV1>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV2>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV3>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV4>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV5>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 2:
        {
          if (boost::shared_ptr<Pds::Princeton::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV1>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV2>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV3>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV4>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV5>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Princeton::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV1>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV2>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV3>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV4>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV1, psddl_pds2psana::Princeton::FrameV1<Pds::Princeton::ConfigV5>, Pds::Princeton::FrameV1, Pds::Princeton::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32770:
        {
          if (boost::shared_ptr<Pds::Princeton::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV1>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV2> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV2>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV2> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV3> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV3>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV3> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV4> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV4>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV4> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          } else if (boost::shared_ptr<Pds::Princeton::ConfigV5> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Princeton::FrameV2, psddl_pds2psana::Princeton::FrameV2<Pds::Princeton::ConfigV5>, Pds::Princeton::FrameV2, Pds::Princeton::ConfigV5> ProxyType;
            if (evt) evt->putProxy<Psana::Princeton::FrameV2>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_PrincetonInfo:
    {
      switch (version) {
      case 1:
        {
          // XTC data object
          const Pds::Princeton::InfoV1& xdata = *(Pds::Princeton::InfoV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Princeton::InfoV1& data = psddl_pds2psana::Princeton::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Princeton::InfoV1>(data), xtc->src);
        }
        break;
      case 32769:
        {
          // XTC data object
          const Pds::Princeton::InfoV1& xdata = *(Pds::Princeton::InfoV1*)(xtc->payload());
          //convert XtcType to Psana type
          const Psana::Princeton::InfoV1& data = psddl_pds2psana::Princeton::pds_to_psana(xdata);
          // store data
          if (evt) evt->put(boost::make_shared<Psana::Princeton::InfoV1>(data), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_QuartzConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Quartz::ConfigV1> xptr(xtc, (Pds::Quartz::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Quartz::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Quartz::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_RayonixConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Rayonix::ConfigV1> xptr(xtc, (Pds::Rayonix::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Rayonix::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Rayonix::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Rayonix::ConfigV2> xptr(xtc, (Pds::Rayonix::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Rayonix::ConfigV2> obj = boost::make_shared<psddl_pds2psana::Rayonix::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_SharedAcqADC:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::Acqiris::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Bld::BldDataAcqADCV1, psddl_pds2psana::Bld::BldDataAcqADCV1<Pds::Acqiris::ConfigV1>, Pds::Bld::BldDataAcqADCV1, Pds::Acqiris::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Bld::BldDataAcqADCV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::Acqiris::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::Bld::BldDataAcqADCV1, psddl_pds2psana::Bld::BldDataAcqADCV1<Pds::Acqiris::ConfigV1>, Pds::Bld::BldDataAcqADCV1, Pds::Acqiris::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::Bld::BldDataAcqADCV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_SharedIpimb:
    {
      switch (version) {
      case 0:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataIpimbV0, psddl_pds2psana::Bld::BldDataIpimbV0, Pds::Bld::BldDataIpimbV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataIpimbV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataIpimbV1, psddl_pds2psana::Bld::BldDataIpimbV1, Pds::Bld::BldDataIpimbV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataIpimbV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32768:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataIpimbV0, psddl_pds2psana::Bld::BldDataIpimbV0, Pds::Bld::BldDataIpimbV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataIpimbV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataIpimbV1, psddl_pds2psana::Bld::BldDataIpimbV1, Pds::Bld::BldDataIpimbV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataIpimbV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_SharedPim:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataPimV1, psddl_pds2psana::Bld::BldDataPimV1, Pds::Bld::BldDataPimV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataPimV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataPimV1, psddl_pds2psana::Bld::BldDataPimV1, Pds::Bld::BldDataPimV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataPimV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_Spectrometer:
    {
      switch (version) {
      case 0:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataSpectrometerV0, psddl_pds2psana::Bld::BldDataSpectrometerV0, Pds::Bld::BldDataSpectrometerV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataSpectrometerV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataSpectrometerV1, psddl_pds2psana::Bld::BldDataSpectrometerV1, Pds::Bld::BldDataSpectrometerV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataSpectrometerV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32768:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataSpectrometerV0, psddl_pds2psana::Bld::BldDataSpectrometerV0, Pds::Bld::BldDataSpectrometerV0> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataSpectrometerV0>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Bld::BldDataSpectrometerV1, psddl_pds2psana::Bld::BldDataSpectrometerV1, Pds::Bld::BldDataSpectrometerV1> ProxyType;
          if (evt) evt->putProxy<Psana::Bld::BldDataSpectrometerV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TimepixConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Timepix::ConfigV1> xptr(xtc, (Pds::Timepix::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Timepix::ConfigV1> obj = boost::make_shared<psddl_pds2psana::Timepix::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Timepix::ConfigV2> xptr(xtc, (Pds::Timepix::ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Timepix::ConfigV2> obj = boost::make_shared<psddl_pds2psana::Timepix::ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 3:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Timepix::ConfigV3> xptr(xtc, (Pds::Timepix::ConfigV3*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Timepix::ConfigV3> obj = boost::make_shared<psddl_pds2psana::Timepix::ConfigV3>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TimepixData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Timepix::DataV2, psddl_pds2psana::TimepixDataV1ToV2, Pds::Timepix::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Timepix::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 2:
        {
          // store proxy
          typedef EvtProxy<Psana::Timepix::DataV2, psddl_pds2psana::Timepix::DataV2, Pds::Timepix::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Timepix::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Timepix::DataV2, psddl_pds2psana::TimepixDataV1ToV2, Pds::Timepix::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::Timepix::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32770:
        {
          // store proxy
          typedef EvtProxy<Psana::Timepix::DataV2, psddl_pds2psana::Timepix::DataV2, Pds::Timepix::DataV2> ProxyType;
          if (evt) evt->putProxy<Psana::Timepix::DataV2>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TimeToolConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::TimeTool::ConfigV1> xptr(xtc, (Pds::TimeTool::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::TimeTool::ConfigV1> obj = boost::make_shared<psddl_pds2psana::TimeTool::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TimeToolData:
    {
      switch (version) {
      case 1:
        {
          if (boost::shared_ptr<Pds::TimeTool::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::TimeTool::DataV1, psddl_pds2psana::TimeTool::DataV1<Pds::TimeTool::ConfigV1>, Pds::TimeTool::DataV1, Pds::TimeTool::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::TimeTool::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      case 32769:
        {
          if (boost::shared_ptr<Pds::TimeTool::ConfigV1> cfgPtr = cfgStore.get(xtc->src)) {
            // store proxy
            typedef EvtProxyCfg<Psana::TimeTool::DataV1, psddl_pds2psana::TimeTool::DataV1<Pds::TimeTool::ConfigV1>, Pds::TimeTool::DataV1, Pds::TimeTool::ConfigV1> ProxyType;
            if (evt) evt->putProxy<Psana::TimeTool::DataV1>(boost::make_shared<ProxyType>(xtc, cfgPtr), xtc->src);
          }
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TM6740Config:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Pulnix::TM6740ConfigV1> xptr(xtc, (Pds::Pulnix::TM6740ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Pulnix::TM6740ConfigV1> obj = boost::make_shared<psddl_pds2psana::Pulnix::TM6740ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      case 2:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::Pulnix::TM6740ConfigV2> xptr(xtc, (Pds::Pulnix::TM6740ConfigV2*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::Pulnix::TM6740ConfigV2> obj = boost::make_shared<psddl_pds2psana::Pulnix::TM6740ConfigV2>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_TwoDGaussian:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::Camera::TwoDGaussianV1, psddl_pds2psana::Camera::TwoDGaussianV1, Pds::Camera::TwoDGaussianV1> ProxyType;
          if (evt) evt->putProxy<Psana::Camera::TwoDGaussianV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::Camera::TwoDGaussianV1, psddl_pds2psana::Camera::TwoDGaussianV1, Pds::Camera::TwoDGaussianV1> ProxyType;
          if (evt) evt->putProxy<Psana::Camera::TwoDGaussianV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_UsdUsbConfig:
    {
      switch (version) {
      case 1:
        {
          // store XTC object in config store
          boost::shared_ptr<Pds::UsdUsb::ConfigV1> xptr(xtc, (Pds::UsdUsb::ConfigV1*)(xtc->payload()));
          cfgStore.put(xptr, xtc->src);
          // create and store psana object in config store
          boost::shared_ptr<Psana::UsdUsb::ConfigV1> obj = boost::make_shared<psddl_pds2psana::UsdUsb::ConfigV1>(xptr);
          cfgStore.put(obj, xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  case Pds::TypeId::Id_UsdUsbData:
    {
      switch (version) {
      case 1:
        {
          // store proxy
          typedef EvtProxy<Psana::UsdUsb::DataV1, psddl_pds2psana::UsdUsb::DataV1, Pds::UsdUsb::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::UsdUsb::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      case 32769:
        {
          // store proxy
          typedef EvtProxy<Psana::UsdUsb::DataV1, psddl_pds2psana::UsdUsb::DataV1, Pds::UsdUsb::DataV1> ProxyType;
          if (evt) evt->putProxy<Psana::UsdUsb::DataV1>(boost::make_shared<ProxyType>(xtc), xtc->src);
        }
        break;
      } // end switch (version)
    }
    break;
  } // end switch

} catch (const PSEvt::ExceptionDuplicateKey& ex) {
  // catch exception for duplicated objects, ignore it
} // end xtcConvert(...)


std::vector<const std::type_info *> getXtcConvertTypeInfoPtrs(const Pds::TypeId &typeId) {
  std::vector<const std::type_info *> typeIdPtrs;
  switch (typeId.id()) {
  case Pds::TypeId::Any:
  case Pds::TypeId::Id_Xtc:
  case Pds::TypeId::NumberOf:
  case Pds::TypeId::Id_Epics:
  case Pds::TypeId::Reserved1:
  case Pds::TypeId::Reserved2:
  case Pds::TypeId::Id_Index:
  case Pds::TypeId::Id_XampsConfig:
  case Pds::TypeId::Id_XampsElement:
  case Pds::TypeId::Id_FexampConfig:
  case Pds::TypeId::Id_FexampElement:
  case Pds::TypeId::Id_PhasicsConfig:
  case Pds::TypeId::Id_CspadCompressedElement:
    break;
  case Pds::TypeId::Id_AcqConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AcqTdcConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::TdcConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AcqTdcData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::TdcDataV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::TdcDataV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AcqWaveform:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::DataDescV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Acqiris::DataDescV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AliasConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Alias::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AndorConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Andor::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_AndorFrame:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Andor::FrameV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Andor::FrameV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Arraychar:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Arraychar::DataV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Arraychar::DataV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_ControlConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::ControlData::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::ControlData::ConfigV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::ControlData::ConfigV3) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Cspad2x2Config:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::CsPad2x2::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::CsPad2x2::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Cspad2x2Element:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::CsPad2x2::ElementV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::CsPad2x2::ElementV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_CspadConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::ConfigV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::ConfigV3) );
      break;
    case 4:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::ConfigV4) );
      break;
    case 5:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::ConfigV5) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_CspadElement:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::DataV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::DataV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::CsPad::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_DiodeFex:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::DiodeFexV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::DiodeFexV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_DiodeFexConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::DiodeFexConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::DiodeFexConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EBeam:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV0) );
      break;
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV3) );
      break;
    case 4:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV4) );
      break;
    case 5:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV5) );
      break;
    case 6:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV6) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV0) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV2) );
      break;
    case 32771:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV3) );
      break;
    case 32772:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV4) );
      break;
    case 32773:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV5) );
      break;
    case 32774:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataEBeamV6) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EncoderConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EncoderData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::DataV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::DataV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Encoder::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EpicsConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Epics::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Epix10kConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Epix::Config10KV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EpixConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Epix::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EpixElement:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Epix::ElementV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Epix::ElementV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EpixSamplerConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::EpixSampler::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EpixSamplerElement:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::EpixSampler::ElementV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::EpixSampler::ElementV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EvrConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV3) );
      break;
    case 4:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV4) );
      break;
    case 5:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV5) );
      break;
    case 6:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV6) );
      break;
    case 7:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::ConfigV7) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EvrData:
    switch(typeId.version()) {
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::DataV3) );
      break;
    case 32771:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::DataV3) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EvrIOConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::IOConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::IOConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_EvsConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::EvrData::SrcConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FccdConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::FCCD::FccdConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::FCCD::FccdConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FEEGasDetEnergy:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataFEEGasDetEnergy) );
      break;
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataFEEGasDetEnergyV1) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataFEEGasDetEnergy) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataFEEGasDetEnergyV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FliConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Fli::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FliFrame:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Fli::FrameV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Fli::FrameV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Frame:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Camera::FrameV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Camera::FrameV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FrameFccdConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Camera::FrameFccdConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_FrameFexConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Camera::FrameFexConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_GenericPgpConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::GenericPgp::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_GMD:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV0) );
      break;
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV2) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV0) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataGMDV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Gsc16aiConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Gsc16ai::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Gsc16aiData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Gsc16ai::DataV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Gsc16ai::DataV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_ImpConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Imp::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_ImpData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Imp::ElementV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Imp::ElementV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_IpimbConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_IpimbData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::DataV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::DataV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Ipimb::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_IpmFex:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::IpmFexV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::IpmFexV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_IpmFexConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::IpmFexConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::IpmFexConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_L3TConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::L3T::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_L3TData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::L3T::DataV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::L3T::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::L3T::DataV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::L3T::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_OceanOpticsConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_OceanOpticsData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::DataV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::DataV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::OceanOptics::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Opal1kConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Opal1k::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_OrcaConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Orca::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PartitionConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Partition::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PhaseCavity:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataPhaseCavity) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataPhaseCavity) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PimaxConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Pimax::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PimaxFrame:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Pimax::FrameV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Pimax::FrameV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PimImageConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Lusi::PimImageConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_pnCCDconfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_pnCCDframe:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::FullFrameV1) );
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::FramesV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::FullFrameV1) );
      typeIdPtrs.push_back( &typeid(Psana::PNCCD::FramesV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PrincetonConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::ConfigV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::ConfigV3) );
      break;
    case 4:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::ConfigV4) );
      break;
    case 5:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::ConfigV5) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PrincetonFrame:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::FrameV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::FrameV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::FrameV1) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::FrameV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_PrincetonInfo:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::InfoV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Princeton::InfoV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_QuartzConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Quartz::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_RayonixConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Rayonix::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Rayonix::ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_SharedAcqADC:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataAcqADCV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataAcqADCV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_SharedIpimb:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataIpimbV0) );
      break;
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataIpimbV1) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataIpimbV0) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataIpimbV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_SharedPim:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataPimV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataPimV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_Spectrometer:
    switch(typeId.version()) {
    case 0:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataSpectrometerV0) );
      break;
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataSpectrometerV1) );
      break;
    case 32768:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataSpectrometerV0) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Bld::BldDataSpectrometerV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TimepixConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::ConfigV2) );
      break;
    case 3:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::ConfigV3) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TimepixData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::DataV2) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::DataV2) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::DataV2) );
      break;
    case 32770:
      typeIdPtrs.push_back( &typeid(Psana::Timepix::DataV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TimeToolConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::TimeTool::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TimeToolData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::TimeTool::DataV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::TimeTool::DataV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TM6740Config:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Pulnix::TM6740ConfigV1) );
      break;
    case 2:
      typeIdPtrs.push_back( &typeid(Psana::Pulnix::TM6740ConfigV2) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_TwoDGaussian:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::Camera::TwoDGaussianV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::Camera::TwoDGaussianV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_UsdUsbConfig:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::UsdUsb::ConfigV1) );
      break;
    } // end version switch
    break;
  case Pds::TypeId::Id_UsdUsbData:
    switch(typeId.version()) {
    case 1:
      typeIdPtrs.push_back( &typeid(Psana::UsdUsb::DataV1) );
      break;
    case 32769:
      typeIdPtrs.push_back( &typeid(Psana::UsdUsb::DataV1) );
      break;
    } // end version switch
    break;
  }  // typeId.id() switch statement
  return typeIdPtrs;
}



} // namespace psddl_pds2psana

