
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/pnccd.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace PNCCD {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::PNCCD::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::numLinks() const { return m_xtcObj->numLinks(); }

uint32_t ConfigV1::payloadSizePerLink() const { return m_xtcObj->payloadSizePerLink(); }
ConfigV2::ConfigV2(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::PNCCD::ConfigV2()
  , m_xtcObj(xtcPtr)
{
}
ConfigV2::~ConfigV2()
{
}


uint32_t ConfigV2::numLinks() const { return m_xtcObj->numLinks(); }

uint32_t ConfigV2::payloadSizePerLink() const { return m_xtcObj->payloadSizePerLink(); }

uint32_t ConfigV2::numChannels() const { return m_xtcObj->numChannels(); }

uint32_t ConfigV2::numRows() const { return m_xtcObj->numRows(); }

uint32_t ConfigV2::numSubmoduleChannels() const { return m_xtcObj->numSubmoduleChannels(); }

uint32_t ConfigV2::numSubmoduleRows() const { return m_xtcObj->numSubmoduleRows(); }

uint32_t ConfigV2::numSubmodules() const { return m_xtcObj->numSubmodules(); }

uint32_t ConfigV2::camexMagic() const { return m_xtcObj->camexMagic(); }

const char* ConfigV2::info() const { return m_xtcObj->info(); }

const char* ConfigV2::timingFName() const { return m_xtcObj->timingFName(); }

std::vector<int> ConfigV2::info_shape() const { return m_xtcObj->info_shape(); }

std::vector<int> ConfigV2::timingFName_shape() const { return m_xtcObj->timingFName_shape(); }
FrameV1::FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const PsddlPds::PNCCD::ConfigV1>& cfgPtr)
  : Psana::PNCCD::FrameV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr0(cfgPtr)
{
}
FrameV1::FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const PsddlPds::PNCCD::ConfigV2>& cfgPtr)
  : Psana::PNCCD::FrameV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr1(cfgPtr)
{
}
FrameV1::~FrameV1()
{
}


uint32_t FrameV1::specialWord() const { return m_xtcObj->specialWord(); }

uint32_t FrameV1::frameNumber() const { return m_xtcObj->frameNumber(); }

uint32_t FrameV1::timeStampHi() const { return m_xtcObj->timeStampHi(); }

uint32_t FrameV1::timeStampLo() const { return m_xtcObj->timeStampLo(); }

ndarray<uint16_t, 1> FrameV1::data() const {
  if (m_cfgPtr0.get()) return m_xtcObj->data(*m_cfgPtr0);
  if (m_cfgPtr1.get()) return m_xtcObj->data(*m_cfgPtr1);
  throw std::runtime_error("FrameV1::data: config object pointer is zero");
}

} // namespace PNCCD
} // namespace psddl_pds2psana
