
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/pnccd.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace PNCCD {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::PNCCD::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::numLinks() const { return m_xtcObj->numLinks(); }

uint32_t ConfigV1::payloadSizePerLink() const { return m_xtcObj->payloadSizePerLink(); }
ConfigV2::ConfigV2(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::PNCCD::ConfigV2()
  , m_xtcObj(xtcPtr)
{
}
ConfigV2::~ConfigV2()
{
}


uint32_t ConfigV2::numLinks() const { return m_xtcObj->numLinks(); }

uint32_t ConfigV2::payloadSizePerLink() const { return m_xtcObj->payloadSizePerLink(); }

uint32_t ConfigV2::numChannels() const { return m_xtcObj->numChannels(); }

uint32_t ConfigV2::numRows() const { return m_xtcObj->numRows(); }

uint32_t ConfigV2::numSubmoduleChannels() const { return m_xtcObj->numSubmoduleChannels(); }

uint32_t ConfigV2::numSubmoduleRows() const { return m_xtcObj->numSubmoduleRows(); }

uint32_t ConfigV2::numSubmodules() const { return m_xtcObj->numSubmodules(); }

uint32_t ConfigV2::camexMagic() const { return m_xtcObj->camexMagic(); }

const char* ConfigV2::info() const { return m_xtcObj->info(); }

const char* ConfigV2::timingFName() const { return m_xtcObj->timingFName(); }

std::vector<int> ConfigV2::info_shape() const { return m_xtcObj->info_shape(); }

std::vector<int> ConfigV2::timingFName_shape() const { return m_xtcObj->timingFName_shape(); }
template <typename Config>
FrameV1<Config>::FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::PNCCD::FrameV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
}
template <typename Config>
FrameV1<Config>::~FrameV1()
{
}


template <typename Config>
uint32_t FrameV1<Config>::specialWord() const { return m_xtcObj->specialWord(); }

template <typename Config>
uint32_t FrameV1<Config>::frameNumber() const { return m_xtcObj->frameNumber(); }

template <typename Config>
uint32_t FrameV1<Config>::timeStampHi() const { return m_xtcObj->timeStampHi(); }

template <typename Config>
uint32_t FrameV1<Config>::timeStampLo() const { return m_xtcObj->timeStampLo(); }

template <typename Config>
ndarray<const uint16_t, 1> FrameV1<Config>::_data() const {
  return m_xtcObj->_data(*m_cfgPtr);
}


template <typename Config>
ndarray<const uint16_t, 2> FrameV1<Config>::data() const {
  return m_xtcObj->data(*m_cfgPtr);
}

template class FrameV1<PsddlPds::PNCCD::ConfigV1>;
template class FrameV1<PsddlPds::PNCCD::ConfigV2>;
FullFrameV1::FullFrameV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::PNCCD::FullFrameV1()
  , m_xtcObj(xtcPtr)
{
}
FullFrameV1::~FullFrameV1()
{
}


uint32_t FullFrameV1::specialWord() const { return m_xtcObj->specialWord(); }

uint32_t FullFrameV1::frameNumber() const { return m_xtcObj->frameNumber(); }

uint32_t FullFrameV1::timeStampHi() const { return m_xtcObj->timeStampHi(); }

uint32_t FullFrameV1::timeStampLo() const { return m_xtcObj->timeStampLo(); }

ndarray<const uint16_t, 2> FullFrameV1::data() const { return m_xtcObj->data(); }
template <typename Config>
FramesV1<Config>::FramesV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const Config>& cfgPtr)
  : Psana::PNCCD::FramesV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr(cfgPtr)
{
  {
    const std::vector<int>& dims = xtcPtr->frame_shape(*cfgPtr);
    _frames.reserve(dims[0]);
    for (int i0=0; i0 != dims[0]; ++i0) {
      const PsddlPds::PNCCD::FrameV1& d = xtcPtr->frame(*cfgPtr, i0);
      boost::shared_ptr<const PsddlPds::PNCCD::FrameV1> dPtr(m_xtcObj, &d);
      _frames.push_back(psddl_pds2psana::PNCCD::FrameV1<Config>(dPtr, cfgPtr));
    }
  }
}
template <typename Config>
FramesV1<Config>::~FramesV1()
{
}

template <typename Config>
const Psana::PNCCD::FrameV1& FramesV1<Config>::frame(uint32_t i0) const { return _frames[i0]; }

template <typename Config>
uint32_t FramesV1<Config>::numLinks() const {
  return m_xtcObj->numLinks(*m_cfgPtr);
}

template <typename Config>
std::vector<int> FramesV1<Config>::frame_shape() const
{
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(_frames.size());
  return shape;
}

template class FramesV1<PsddlPds::PNCCD::ConfigV1>;
template class FramesV1<PsddlPds::PNCCD::ConfigV2>;
} // namespace PNCCD
} // namespace psddl_pds2psana
