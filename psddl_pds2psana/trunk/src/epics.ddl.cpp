
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/epics.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Epics {
Psana::Epics::epicsTimeStamp pds_to_psana(PsddlPds::Epics::epicsTimeStamp pds)
{
  return Psana::Epics::epicsTimeStamp(pds.sec(), pds.nsec());
}

Psana::Epics::dbr_time_string pds_to_psana(PsddlPds::Epics::dbr_time_string pds)
{
  return Psana::Epics::dbr_time_string(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_short pds_to_psana(PsddlPds::Epics::dbr_time_short pds)
{
  return Psana::Epics::dbr_time_short(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_float pds_to_psana(PsddlPds::Epics::dbr_time_float pds)
{
  return Psana::Epics::dbr_time_float(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_enum pds_to_psana(PsddlPds::Epics::dbr_time_enum pds)
{
  return Psana::Epics::dbr_time_enum(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_char pds_to_psana(PsddlPds::Epics::dbr_time_char pds)
{
  return Psana::Epics::dbr_time_char(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_long pds_to_psana(PsddlPds::Epics::dbr_time_long pds)
{
  return Psana::Epics::dbr_time_long(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_double pds_to_psana(PsddlPds::Epics::dbr_time_double pds)
{
  return Psana::Epics::dbr_time_double(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_sts_string pds_to_psana(PsddlPds::Epics::dbr_sts_string pds)
{
  return Psana::Epics::dbr_sts_string(pds.status(), pds.severity());
}

Psana::Epics::dbr_ctrl_short pds_to_psana(PsddlPds::Epics::dbr_ctrl_short pds)
{
  return Psana::Epics::dbr_ctrl_short(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_float pds_to_psana(PsddlPds::Epics::dbr_ctrl_float pds)
{
  return Psana::Epics::dbr_ctrl_float(pds.status(), pds.severity(), pds.precision(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_enum pds_to_psana(PsddlPds::Epics::dbr_ctrl_enum pds)
{
  return Psana::Epics::dbr_ctrl_enum(pds.status(), pds.severity(), pds.no_str(), pds.strings());
}

Psana::Epics::dbr_ctrl_char pds_to_psana(PsddlPds::Epics::dbr_ctrl_char pds)
{
  return Psana::Epics::dbr_ctrl_char(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_long pds_to_psana(PsddlPds::Epics::dbr_ctrl_long pds)
{
  return Psana::Epics::dbr_ctrl_long(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_double pds_to_psana(PsddlPds::Epics::dbr_ctrl_double pds)
{
  return Psana::Epics::dbr_ctrl_double(pds.status(), pds.severity(), pds.precision(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

EpicsPvHeader::EpicsPvHeader(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvHeader()
  , m_xtcObj(xtcPtr)
{
}
EpicsPvHeader::~EpicsPvHeader()
{
}


int16_t EpicsPvHeader::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvHeader::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvHeader::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvHeader::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvHeader::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvHeader::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvHeader::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvHeader::severity() const { return m_xtcObj->severity(); }
EpicsPvCtrlHeader::EpicsPvCtrlHeader(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlHeader()
  , m_xtcObj(xtcPtr)
{
}
EpicsPvCtrlHeader::~EpicsPvCtrlHeader()
{
}


int16_t EpicsPvCtrlHeader::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlHeader::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlHeader::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlHeader::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlHeader::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlHeader::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlHeader::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlHeader::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlHeader::pvName() const { return m_xtcObj->pvName(); }

std::vector<int> EpicsPvCtrlHeader::pvName_shape() const { return m_xtcObj->pvName_shape(); }
EpicsPvTimeHeader::EpicsPvTimeHeader(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeHeader()
  , m_xtcObj(xtcPtr)
{
}
EpicsPvTimeHeader::~EpicsPvTimeHeader()
{
}


int16_t EpicsPvTimeHeader::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeHeader::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeHeader::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeHeader::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeHeader::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeHeader::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeHeader::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeHeader::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeHeader::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }
EpicsPvCtrlString::EpicsPvCtrlString(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlString()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlString::~EpicsPvCtrlString()
{
}


int16_t EpicsPvCtrlString::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlString::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlString::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlString::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlString::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlString::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlString::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlString::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlString::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_sts_string& EpicsPvCtrlString::dbr() const { return _dbr; }

const char* EpicsPvCtrlString::data() const { return m_xtcObj->data(); }

const char* EpicsPvCtrlString::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlString::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlString::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlShort::EpicsPvCtrlShort(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlShort()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlShort::~EpicsPvCtrlShort()
{
}


int16_t EpicsPvCtrlShort::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlShort::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlShort::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlShort::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlShort::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlShort::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlShort::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlShort::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlShort::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_short& EpicsPvCtrlShort::dbr() const { return _dbr; }

const int16_t* EpicsPvCtrlShort::data() const { return m_xtcObj->data(); }

int16_t EpicsPvCtrlShort::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlShort::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlShort::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlFloat::EpicsPvCtrlFloat(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlFloat()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlFloat::~EpicsPvCtrlFloat()
{
}


int16_t EpicsPvCtrlFloat::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlFloat::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlFloat::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlFloat::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlFloat::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlFloat::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlFloat::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlFloat::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlFloat::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_float& EpicsPvCtrlFloat::dbr() const { return _dbr; }

const float* EpicsPvCtrlFloat::data() const { return m_xtcObj->data(); }

float EpicsPvCtrlFloat::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlFloat::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlFloat::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlEnum::EpicsPvCtrlEnum(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlEnum()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlEnum::~EpicsPvCtrlEnum()
{
}


int16_t EpicsPvCtrlEnum::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlEnum::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlEnum::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlEnum::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlEnum::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlEnum::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlEnum::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlEnum::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlEnum::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_enum& EpicsPvCtrlEnum::dbr() const { return _dbr; }

const uint16_t* EpicsPvCtrlEnum::data() const { return m_xtcObj->data(); }

uint16_t EpicsPvCtrlEnum::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlEnum::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlEnum::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlChar::EpicsPvCtrlChar(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlChar()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlChar::~EpicsPvCtrlChar()
{
}


int16_t EpicsPvCtrlChar::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlChar::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlChar::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlChar::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlChar::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlChar::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlChar::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlChar::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlChar::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_char& EpicsPvCtrlChar::dbr() const { return _dbr; }

const uint8_t* EpicsPvCtrlChar::data() const { return m_xtcObj->data(); }

uint8_t EpicsPvCtrlChar::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlChar::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlChar::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlLong::EpicsPvCtrlLong(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlLong()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlLong::~EpicsPvCtrlLong()
{
}


int16_t EpicsPvCtrlLong::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlLong::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlLong::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlLong::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlLong::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlLong::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlLong::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlLong::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlLong::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_long& EpicsPvCtrlLong::dbr() const { return _dbr; }

const int32_t* EpicsPvCtrlLong::data() const { return m_xtcObj->data(); }

int32_t EpicsPvCtrlLong::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlLong::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlLong::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvCtrlDouble::EpicsPvCtrlDouble(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlDouble()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlDouble::~EpicsPvCtrlDouble()
{
}


int16_t EpicsPvCtrlDouble::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvCtrlDouble::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvCtrlDouble::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvCtrlDouble::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvCtrlDouble::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvCtrlDouble::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvCtrlDouble::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvCtrlDouble::severity() const { return m_xtcObj->severity(); }

const char* EpicsPvCtrlDouble::pvName() const { return m_xtcObj->pvName(); }

const Psana::Epics::dbr_ctrl_double& EpicsPvCtrlDouble::dbr() const { return _dbr; }

const double* EpicsPvCtrlDouble::data() const { return m_xtcObj->data(); }

double EpicsPvCtrlDouble::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlDouble::pvName_shape() const { return m_xtcObj->pvName_shape(); }

std::vector<int> EpicsPvCtrlDouble::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeString::EpicsPvTimeString(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeString()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeString::~EpicsPvTimeString()
{
}


int16_t EpicsPvTimeString::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeString::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeString::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeString::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeString::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeString::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeString::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeString::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeString::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_string& EpicsPvTimeString::dbr() const { return _dbr; }

const char* EpicsPvTimeString::data() const { return m_xtcObj->data(); }

const char* EpicsPvTimeString::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeString::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeShort::EpicsPvTimeShort(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeShort()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeShort::~EpicsPvTimeShort()
{
}


int16_t EpicsPvTimeShort::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeShort::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeShort::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeShort::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeShort::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeShort::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeShort::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeShort::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeShort::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_short& EpicsPvTimeShort::dbr() const { return _dbr; }

const int16_t* EpicsPvTimeShort::data() const { return m_xtcObj->data(); }

int16_t EpicsPvTimeShort::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeShort::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeFloat::EpicsPvTimeFloat(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeFloat()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeFloat::~EpicsPvTimeFloat()
{
}


int16_t EpicsPvTimeFloat::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeFloat::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeFloat::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeFloat::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeFloat::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeFloat::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeFloat::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeFloat::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeFloat::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_float& EpicsPvTimeFloat::dbr() const { return _dbr; }

const float* EpicsPvTimeFloat::data() const { return m_xtcObj->data(); }

float EpicsPvTimeFloat::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeFloat::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeEnum::EpicsPvTimeEnum(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeEnum()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeEnum::~EpicsPvTimeEnum()
{
}


int16_t EpicsPvTimeEnum::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeEnum::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeEnum::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeEnum::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeEnum::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeEnum::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeEnum::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeEnum::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeEnum::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_enum& EpicsPvTimeEnum::dbr() const { return _dbr; }

const uint16_t* EpicsPvTimeEnum::data() const { return m_xtcObj->data(); }

uint16_t EpicsPvTimeEnum::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeEnum::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeChar::EpicsPvTimeChar(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeChar()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeChar::~EpicsPvTimeChar()
{
}


int16_t EpicsPvTimeChar::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeChar::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeChar::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeChar::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeChar::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeChar::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeChar::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeChar::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeChar::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_char& EpicsPvTimeChar::dbr() const { return _dbr; }

const uint8_t* EpicsPvTimeChar::data() const { return m_xtcObj->data(); }

uint8_t EpicsPvTimeChar::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeChar::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeLong::EpicsPvTimeLong(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeLong()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeLong::~EpicsPvTimeLong()
{
}


int16_t EpicsPvTimeLong::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeLong::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeLong::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeLong::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeLong::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeLong::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeLong::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeLong::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeLong::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_long& EpicsPvTimeLong::dbr() const { return _dbr; }

const int32_t* EpicsPvTimeLong::data() const { return m_xtcObj->data(); }

int32_t EpicsPvTimeLong::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeLong::data_shape() const { return m_xtcObj->data_shape(); }
EpicsPvTimeDouble::EpicsPvTimeDouble(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeDouble()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeDouble::~EpicsPvTimeDouble()
{
}


int16_t EpicsPvTimeDouble::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvTimeDouble::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvTimeDouble::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvTimeDouble::print() const { return m_xtcObj->print(); }

uint8_t EpicsPvTimeDouble::isCtrl() const { return m_xtcObj->isCtrl(); }

uint8_t EpicsPvTimeDouble::isTime() const { return m_xtcObj->isTime(); }

uint16_t EpicsPvTimeDouble::status() const { return m_xtcObj->status(); }

uint16_t EpicsPvTimeDouble::severity() const { return m_xtcObj->severity(); }

Psana::Epics::epicsTimeStamp EpicsPvTimeDouble::stamp() const { return pds_to_psana(m_xtcObj->stamp()); }

const Psana::Epics::dbr_time_double& EpicsPvTimeDouble::dbr() const { return _dbr; }

const double* EpicsPvTimeDouble::data() const { return m_xtcObj->data(); }

double EpicsPvTimeDouble::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeDouble::data_shape() const { return m_xtcObj->data_shape(); }
} // namespace Epics
} // namespace psddl_pds2psana
