
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/epics.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Epics {
Psana::Epics::epicsTimeStamp pds_to_psana(PsddlPds::Epics::epicsTimeStamp pds)
{
  return Psana::Epics::epicsTimeStamp(pds.sec(), pds.nsec());
}

Psana::Epics::dbr_time_string pds_to_psana(PsddlPds::Epics::dbr_time_string pds)
{
  return Psana::Epics::dbr_time_string(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_short pds_to_psana(PsddlPds::Epics::dbr_time_short pds)
{
  return Psana::Epics::dbr_time_short(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_float pds_to_psana(PsddlPds::Epics::dbr_time_float pds)
{
  return Psana::Epics::dbr_time_float(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_enum pds_to_psana(PsddlPds::Epics::dbr_time_enum pds)
{
  return Psana::Epics::dbr_time_enum(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_char pds_to_psana(PsddlPds::Epics::dbr_time_char pds)
{
  return Psana::Epics::dbr_time_char(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_long pds_to_psana(PsddlPds::Epics::dbr_time_long pds)
{
  return Psana::Epics::dbr_time_long(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_time_double pds_to_psana(PsddlPds::Epics::dbr_time_double pds)
{
  return Psana::Epics::dbr_time_double(pds.status(), pds.severity(), pds_to_psana(pds.stamp()));
}

Psana::Epics::dbr_sts_string pds_to_psana(PsddlPds::Epics::dbr_sts_string pds)
{
  return Psana::Epics::dbr_sts_string(pds.status(), pds.severity());
}

Psana::Epics::dbr_ctrl_short pds_to_psana(PsddlPds::Epics::dbr_ctrl_short pds)
{
  return Psana::Epics::dbr_ctrl_short(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_float pds_to_psana(PsddlPds::Epics::dbr_ctrl_float pds)
{
  return Psana::Epics::dbr_ctrl_float(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_enum pds_to_psana(PsddlPds::Epics::dbr_ctrl_enum pds)
{
  return Psana::Epics::dbr_ctrl_enum(pds.status(), pds.severity(), pds.no_str(), pds.strings());
}

Psana::Epics::dbr_ctrl_char pds_to_psana(PsddlPds::Epics::dbr_ctrl_char pds)
{
  return Psana::Epics::dbr_ctrl_char(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_long pds_to_psana(PsddlPds::Epics::dbr_ctrl_long pds)
{
  return Psana::Epics::dbr_ctrl_long(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

Psana::Epics::dbr_ctrl_double pds_to_psana(PsddlPds::Epics::dbr_ctrl_double pds)
{
  return Psana::Epics::dbr_ctrl_double(pds.status(), pds.severity(), pds.units(), pds.upper_disp_limit(), pds.lower_disp_limit(), pds.upper_alarm_limit(), pds.upper_warning_limit(), pds.lower_warning_limit(), pds.lower_alarm_limit(), pds.upper_ctrl_limit(), pds.lower_ctrl_limit());
}

EpicsPvHeader::EpicsPvHeader(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvHeader()
  , m_xtcObj(xtcPtr)
{
}
EpicsPvHeader::~EpicsPvHeader()
{
}


int16_t EpicsPvHeader::pvId() const { return m_xtcObj->pvId(); }

int16_t EpicsPvHeader::dbrType() const { return m_xtcObj->dbrType(); }

int16_t EpicsPvHeader::numElements() const { return m_xtcObj->numElements(); }

void EpicsPvHeader::print() const { return m_xtcObj->print(); }
EpicsPvCtrlHeader::EpicsPvCtrlHeader(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlHeader()
  , m_xtcObj(xtcPtr)
{
}
EpicsPvCtrlHeader::~EpicsPvCtrlHeader()
{
}


const char* EpicsPvCtrlHeader::pvName() const { return m_xtcObj->pvName(); }

std::vector<int> EpicsPvCtrlHeader::_sPvName_shape() const { return m_xtcObj->_sPvName_shape(); }
EpicsPvCtrlString::EpicsPvCtrlString(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlString()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlString::~EpicsPvCtrlString()
{
}


const Psana::Epics::dbr_sts_string& EpicsPvCtrlString::dbr() const { return _dbr; }

const char* EpicsPvCtrlString::data() const { return m_xtcObj->data(); }

const char* EpicsPvCtrlString::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlString::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlShort::EpicsPvCtrlShort(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlShort()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlShort::~EpicsPvCtrlShort()
{
}


const Psana::Epics::dbr_ctrl_short& EpicsPvCtrlShort::dbr() const { return _dbr; }

const int16_t* EpicsPvCtrlShort::data() const { return m_xtcObj->data(); }

int16_t EpicsPvCtrlShort::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlShort::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlFloat::EpicsPvCtrlFloat(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlFloat()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlFloat::~EpicsPvCtrlFloat()
{
}


const Psana::Epics::dbr_ctrl_float& EpicsPvCtrlFloat::dbr() const { return _dbr; }

const float* EpicsPvCtrlFloat::data() const { return m_xtcObj->data(); }

float EpicsPvCtrlFloat::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlFloat::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlEnum::EpicsPvCtrlEnum(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlEnum()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlEnum::~EpicsPvCtrlEnum()
{
}


const Psana::Epics::dbr_ctrl_enum& EpicsPvCtrlEnum::dbr() const { return _dbr; }

const uint16_t* EpicsPvCtrlEnum::data() const { return m_xtcObj->data(); }

uint16_t EpicsPvCtrlEnum::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlEnum::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlChar::EpicsPvCtrlChar(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlChar()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlChar::~EpicsPvCtrlChar()
{
}


const Psana::Epics::dbr_ctrl_char& EpicsPvCtrlChar::dbr() const { return _dbr; }

const uint8_t* EpicsPvCtrlChar::data() const { return m_xtcObj->data(); }

uint8_t EpicsPvCtrlChar::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlChar::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlLong::EpicsPvCtrlLong(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlLong()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlLong::~EpicsPvCtrlLong()
{
}


const Psana::Epics::dbr_ctrl_long& EpicsPvCtrlLong::dbr() const { return _dbr; }

const int32_t* EpicsPvCtrlLong::data() const { return m_xtcObj->data(); }

int32_t EpicsPvCtrlLong::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlLong::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvCtrlDouble::EpicsPvCtrlDouble(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvCtrlDouble()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvCtrlDouble::~EpicsPvCtrlDouble()
{
}


const Psana::Epics::dbr_ctrl_double& EpicsPvCtrlDouble::dbr() const { return _dbr; }

const double* EpicsPvCtrlDouble::data() const { return m_xtcObj->data(); }

double EpicsPvCtrlDouble::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvCtrlDouble::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeString::EpicsPvTimeString(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeString()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeString::~EpicsPvTimeString()
{
}


const Psana::Epics::dbr_time_string& EpicsPvTimeString::dbr() const { return _dbr; }

const char* EpicsPvTimeString::data() const { return m_xtcObj->data(); }

const char* EpicsPvTimeString::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeString::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeShort::EpicsPvTimeShort(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeShort()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeShort::~EpicsPvTimeShort()
{
}


const Psana::Epics::dbr_time_short& EpicsPvTimeShort::dbr() const { return _dbr; }

const int16_t* EpicsPvTimeShort::data() const { return m_xtcObj->data(); }

int16_t EpicsPvTimeShort::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeShort::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeFloat::EpicsPvTimeFloat(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeFloat()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeFloat::~EpicsPvTimeFloat()
{
}


const Psana::Epics::dbr_time_float& EpicsPvTimeFloat::dbr() const { return _dbr; }

const float* EpicsPvTimeFloat::data() const { return m_xtcObj->data(); }

float EpicsPvTimeFloat::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeFloat::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeEnum::EpicsPvTimeEnum(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeEnum()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeEnum::~EpicsPvTimeEnum()
{
}


const Psana::Epics::dbr_time_enum& EpicsPvTimeEnum::dbr() const { return _dbr; }

const uint16_t* EpicsPvTimeEnum::data() const { return m_xtcObj->data(); }

uint16_t EpicsPvTimeEnum::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeEnum::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeChar::EpicsPvTimeChar(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeChar()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeChar::~EpicsPvTimeChar()
{
}


const Psana::Epics::dbr_time_char& EpicsPvTimeChar::dbr() const { return _dbr; }

const uint8_t* EpicsPvTimeChar::data() const { return m_xtcObj->data(); }

uint8_t EpicsPvTimeChar::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeChar::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeLong::EpicsPvTimeLong(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeLong()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeLong::~EpicsPvTimeLong()
{
}


const Psana::Epics::dbr_time_long& EpicsPvTimeLong::dbr() const { return _dbr; }

const int32_t* EpicsPvTimeLong::data() const { return m_xtcObj->data(); }

int32_t EpicsPvTimeLong::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeLong::_data_shape() const { return m_xtcObj->_data_shape(); }
EpicsPvTimeDouble::EpicsPvTimeDouble(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Epics::EpicsPvTimeDouble()
  , m_xtcObj(xtcPtr)
  , _dbr(psddl_pds2psana::Epics::pds_to_psana(xtcPtr->dbr()))
{
}
EpicsPvTimeDouble::~EpicsPvTimeDouble()
{
}


const Psana::Epics::dbr_time_double& EpicsPvTimeDouble::dbr() const { return _dbr; }

const double* EpicsPvTimeDouble::data() const { return m_xtcObj->data(); }

double EpicsPvTimeDouble::value(uint32_t i) const { return m_xtcObj->value(i); }

std::vector<int> EpicsPvTimeDouble::_data_shape() const { return m_xtcObj->_data_shape(); }
} // namespace Epics
} // namespace psddl_pds2psana
