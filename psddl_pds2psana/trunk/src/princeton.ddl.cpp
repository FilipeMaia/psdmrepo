
// *** Do not edit this file, it is auto-generated ***

#include "psddl_pds2psana/princeton.ddl.h"

#include <cstddef>

#include <stdexcept>

namespace psddl_pds2psana {
namespace Princeton {
ConfigV1::ConfigV1(const boost::shared_ptr<const XtcType>& xtcPtr)
  : Psana::Princeton::ConfigV1()
  , m_xtcObj(xtcPtr)
{
}
ConfigV1::~ConfigV1()
{
}


uint32_t ConfigV1::width() const { return m_xtcObj->width(); }

uint32_t ConfigV1::height() const { return m_xtcObj->height(); }

uint32_t ConfigV1::orgX() const { return m_xtcObj->orgX(); }

uint32_t ConfigV1::orgY() const { return m_xtcObj->orgY(); }

uint32_t ConfigV1::binX() const { return m_xtcObj->binX(); }

uint32_t ConfigV1::binY() const { return m_xtcObj->binY(); }

float ConfigV1::exposureTime() const { return m_xtcObj->exposureTime(); }

float ConfigV1::coolingTemp() const { return m_xtcObj->coolingTemp(); }

uint32_t ConfigV1::readoutSpeedIndex() const { return m_xtcObj->readoutSpeedIndex(); }

uint16_t ConfigV1::readoutEventCode() const { return m_xtcObj->readoutEventCode(); }

uint16_t ConfigV1::delayMode() const { return m_xtcObj->delayMode(); }

uint32_t ConfigV1::frameSize() const { return m_xtcObj->frameSize(); }

uint32_t ConfigV1::numPixels() const { return m_xtcObj->numPixels(); }
FrameV1::FrameV1(const boost::shared_ptr<const XtcType>& xtcPtr, const boost::shared_ptr<const PsddlPds::Princeton::ConfigV1>& cfgPtr)
  : Psana::Princeton::FrameV1()
  , m_xtcObj(xtcPtr)
  , m_cfgPtr0(cfgPtr)
{
}
FrameV1::~FrameV1()
{
}


uint32_t FrameV1::shotIdStart() const { return m_xtcObj->shotIdStart(); }

float FrameV1::readoutTime() const { return m_xtcObj->readoutTime(); }

const uint16_t* FrameV1::data() const { return m_xtcObj->data(); }

std::vector<int> FrameV1::data_shape() const {
  if (m_cfgPtr0.get()) return m_xtcObj->data_shape(*m_cfgPtr0);
  throw std::runtime_error("FrameV1::data_shape: config object pointer is zero");
}

Psana::Princeton::InfoV1 pds_to_psana(PsddlPds::Princeton::InfoV1 pds)
{
  return Psana::Princeton::InfoV1(pds.temperature());
}

} // namespace Princeton
} // namespace psddl_pds2psana
