//--------------------------------------------------------------------------
// File and Version Information:
// 	$Id: AppCmdOptList.cc,v 1.5 2004/09/18 22:40:04 salnikov Exp $
//
// Description:
//	Implementation of methods for a Templated class.
//
// Environment:
//	Software developed for the BaBar Detector at the SLAC B-Factory.
//
// Author List:
//	Andy Salnikov		originator
//
// Copyright Information:
//	Copyright (C) 2003	SLAC
//
//------------------------------------------------------------------------
#include "Lusi/Lusi.h"

//-----------------------
// This Class's Header --
//-----------------------
#include "AppUtils/AppCmdOptList.h"

//-------------
// C Headers --
//-------------
extern "C" {
}

//---------------
// C++ Headers --
//---------------
#include <algorithm>

//-------------------------------
// Collaborating Class Headers --
//-------------------------------
#include "AppUtils/AppCmdTypeTraits.h"

//-----------------------------------------------------------------------
// Local Macros, Typedefs, Structures, Unions and Forward Declarations --
//-----------------------------------------------------------------------


//		----------------------------------------
// 		-- Public Function Member Definitions --
//		----------------------------------------

namespace AppUtils {

/**
 *  Ctor
 */
template <typename Type>
AppCmdOptList<Type>::AppCmdOptList ( char shortOpt,
			     const std::string& longOpt,
			     const std::string& name,
			     const std::string& descr,
                             char separator )
  : AppCmdOptBase()
  , _shortOpt(shortOpt)
  , _longOpt(longOpt)
  , _name(name)
  , _descr(descr)
  , _separator(separator)
  , _value()
  , _changed(false)
{
}

// Destructor
template <typename Type>
AppCmdOptList<Type>::~AppCmdOptList( )
{
}

/**
 *  Returns true if option requires argument. Does not make sense for
 *  positional arguments.
 */
template <typename Type>
bool
AppCmdOptList<Type>::hasArgument() const
{
  return true ;
}

/**
 *  Get the name of the paramater
 */
template <typename Type>
const std::string&
AppCmdOptList<Type>::name() const
{
  return _name ;
}

/**
 *  Get one-line description
 */
template <typename Type>
const std::string&
AppCmdOptList<Type>::description() const
{
  return _descr ;
}

/**
 *  Return short option symbol for -x option
 */
template <typename Type>
char
AppCmdOptList<Type>::shortOption() const
{
  return _shortOpt ;
}

/**
 *  Return long option symbol for --xxxxx option
 */
template <typename Type>
const std::string&
AppCmdOptList<Type>::longOption() const
{
  return _longOpt ;
}

/**
 *  Set the value of the argument.
 *
 *  @return The number of consumed words. If it is negative then error has occured.
 */
template <typename Type>
bool
AppCmdOptList<Type>::setValue ( const std::string& value )
{
  container localCont ;

  std::string::const_iterator pos = value.begin() ;
  do {

    // get next item from the string
    std::string::const_iterator pos1 = std::find ( pos, value.end(), _separator ) ;
    std::string item ( pos, pos1 ) ;
    std::pair<Type,bool> res = AppCmdTypeTraits<Type>::fromString ( item ) ;
    if ( ! res.second ) {
      return false ;
    }
    localCont.push_back( res.first ) ;

    // advance
    pos = pos1 ;
    if ( pos != value.end() ) ++ pos ;

  } while ( pos != value.end() ) ;

  // copy from local container to value
  std::copy ( localCont.begin(), localCont.end(), std::back_inserter(_value) ) ;
  _changed = true ;

  return true ;
}

/**
 *  True if the value of the option was changed from command line.
 */
template <typename Type>
bool
AppCmdOptList<Type>::valueChanged () const
{
  return _changed ;
}

/**
 *  Return iterator to the begin/end of sequence
 */
template <typename Type>
typename AppCmdOptList<Type>::const_iterator
AppCmdOptList<Type>::begin() const
{
  return _value.begin() ;
}

template <typename Type>
typename AppCmdOptList<Type>::const_iterator
AppCmdOptList<Type>::end() const
{
  return _value.end() ;
}

/**
 *  Clear the collected values
 */
template <typename Type>
void
AppCmdOptList<Type>::clear()
{
  _value.clear() ;
}

/**
 *  reset option to its default value
 */
template <typename Type>
void
AppCmdOptList<Type>::reset()
{
  _value.clear() ;
  _changed = false ;
}

} // namespace AppUtils
