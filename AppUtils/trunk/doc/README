#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  README file for package AppUtils
#------------------------------------------------------------------------

Package author: Andrei Salnikov

Brief description:
==================

AppUtils package contains a bunch of classes which should simplify writing
of the command-line applications. Much of this stuff was ported from BaBar 
(and somewhat improved).

There are two categories of classes in this package: AppBase (one C++ class 
and one Python module/class) and AppCmd* C++ classes. AppCmd* classes are 
for the command-line parsing, they are almost unchanged from BaBar.

Command line parser
===================

AppCmd* classes provide advanced facilities for parsing command-line 
options and options files. Main entity in the hierarchy is AppCmdLine
class which is used to register all acceptable options and arguments
and to parse the command line. Other classes represent different types 
of options and arguments that AppCmdLine can accept.

General remarks
---------------

This package assumes that the typical application accepts on a command 
line a list of options optionally followed by literal '--' (double-dash)
followed by positional arguments. The order of options is not defined, 
and every option is identified by the name. Options typically have a 
short 1-character name, or long name, or both. Options with arguments 
can be specified on command line as:

  -o <value>
  -o<value>
  --long-name=<value>
  
Options without argument can be specified similarly as:

  -o
  --long-name
  
Several short 1-character options can also be merger on command line 
in one word:

  -vvv  =  -v -v -v

In addition to the command line application can also read options from
a special options file using the same option names.

Meaning of positional parameters depends on their position (order). Some
positional parameters can be optional and have default values. Positional
parameter can accept either a single word or a list of words.

Class AppCmdLine
----------------

Typical usage of this class:

  1. instantiate an object of this class
  2. either call addOption() zero or more times to define options or
     provide AppCmdLine as argument to constructor of option classes
  3. either call addArgument() zero or more times to define positional 
     arguments or provide AppCmdLine as argument to constructor of 
     positional argument classes
  4. optionally call setOptionsFile() to define additional file with 
     optional parameters
  5. call parse() method to parse the command line and options file and 
     set the value of all parameters

       
Here is the brief description of every method of AppCmdLine.

Method AppCmdLine::addArgument
------------------------------

Declaration:

    void addArgument(AppCmdArgBase& arg)

Adds one more positional argument. The argument object supplied is not 
copied, only its address is remembered. The lifetime of the argument 
should extend to the parse() method of this class. The order of the 
positional arguments on the command line is determined by the order in 
which addArgument() is called. 

Instead of calling addArgument() method for each AppCmdArgBase instance 
it is easier (and preferred) to provide AppCmdLine instance as an argument
to the constructor of corresponding AppCmdArgBase subclass.

Method AppCmdLine::addOption
----------------------------

Declaration:

    void addOption(AppCmdOptBase& option)

Adds one more command option. The option object supplied is not copied,
only its address is remembered. The lifetime of the argument should 
extend to the parse() method of this class. 

Instead of calling addOption() method for each AppCmdOptBase instance 
it is easier (and preferred) to provide AppCmdLine instance as an argument
to the constructor of corresponding AppCmdOptBase subclass.

Method AppCmdLine::setOptionsFile
---------------------------------

Declaration:

    void setOptionsFile(AppCmdOpt<std::string>& option)

Defines an option which will specify the name of the options file.
Only one options file is allowed per parser, attempt to add one
more will result in exception. The lifetime of the argument should
extend to the parse() method of this class. When the option value 
is non empty, either as set on command line or through default value,
then parse() function in addition to parsing all command line parameters
will also read options file whose name is given by this option. See 
below for the description of the options file.
 
Method AppCmdLine::parse
------------------------

There are few overloaded parse() methods, their declarations:

    void parse(int argc, char* argv[]);
    void parse(int argc, const char* argv[]);
    template <typename Iter>
      void parse(Iter begin, Iter end);

Parse function examines command line and options file and sets 
corresponding arguments and options. There are few overloaded versions
of the method accepting different form of "command line". First two 
methods accept the same parameters as main() function, meaning that
argv[0] contains application name/path. parse() does not use argv[0]
and discards it. Last form of parse accepts pair of iterators, in
this case it is expected that begin iterator points to the first 
option or positional parameter, not to application name.

If parse() meets help option on command line (-h or --help) it will
stop parsing and return immediately. In this case helpWanted() method 
will return true if called after parse() and user should not expect
values of any options or arguments.

parse() will throw an exception in case of the parsing errors. 

Method AppCmdLine::helpWanted
-----------------------------

After calling parse() user should always call helpWanted() method.
This method will return true after parse() if the help option has 
appeared on the command line. It is user's responsibility to take 
corresponding action in this case. Usually something like this will
appear in your application:

   // parse command line, set all options and arguments
   try {
     cmdline.parse ( argc, argv ) ;
   } catch ( std::exception& exc ) {
     cerr << "Error parsing command line: " << exc.what() << endl ;
     exit(2) ; // exit() may not be good idea, for illustration only here
   }
   if ( cmdline.helpWanted() ) {
     cmdline.usage( cout ) ;
     exit(0) ; // exit() may not be good idea, for illustration only here
   }

If helpWanted() returns true all options/arguments on command line may be 
ignored, the only reasonable action to perform in this case is to print
help message and exit application.

Method AppCmdLine::usage
------------------------

This method produces a usage summary on the specified stream. Usually
used in the combination with the helpWanted() as in the example above. 

Class CmdArgBase
----------------

This is the abstract base class for all classes representing positional 
arguments. It cannot be used directly but it defines methods common 
for all inheriting classes. For users one method may be of the interest:

  bool valueChanged() ;
  
which returns true if the value of the argument was changed on the 
command line. This may be useful for optional arguments which provide 
default value, and changed in this context means that the argument 
appeared on the command line, even if its value on the command line 
was the same as default value.    

Class CmdArg<T>
--------------- 

This class represents a positional argument of a specific type. Type can 
be one of supported in AppCmdTypeTraits. Currently supported types are: 
std::string, int, long, unsigned int, unsigned long, bool, char, float, 
double. Integer types are converted from string using strto(u)l with zero 
base, this means you can specify it using decimal, octal or hex notation 
(0 or 0x prefixes). For bool type the words "true", "TRUE", "1", "yes, and 
"YES" all give true, the words "false", "FALSE", "0", "no", and "NO" all 
give false, anything else is an error.

The argument made with this class can be required or non-required 
depending on which constructor you use. Constructors

  AppCmdArg<T>(string name, string description)
  AppCmdArg<T>(AppCmdLine& parser, string name, string description)

is used to make required arguments, constructors

  AppCmdArg<T>(string name, string description, T defValue)
  AppCmdArg<T>(AppCmdLine& parser, string name, string description, T defValue)

is used to make optional arguments with a default value. Out of two pairs
of constructors the form which takes AppCmdLine& parameter automatically
adds argument to the parser, there is no need to call addArgument() if one
uses these constructors.

To get the current value of the argument use the 

  T value() const ;
  
member function.

Class CmdArgList<T>
-------------------

This class can take more than one word from the command line and make a 
list of values from them. It behaves more or less the same as the above 
class, but to get the results from it you should use begin() and end() 
member functions which return iterators for the list of values.

Constructor

  AppCmdArgList<T>(string name, string description)
  AppCmdArgList<T>(AppCmdLine& parser, string name, string description)

makes a required positional argument for which there must be at least
one argument on the command line. Constructor

  AppCmdArgList<T>(string name, string description, vector<T> defVal)
  AppCmdArgList<T>(AppCmdLine& parser, string name, string description, vector<T> defVal)

makes a non-required argument with some default value.

Class CmdOptBase
----------------

This is the abstract base class for all classes representing options.
It cannot be used directly but it defines methods common for all 
inheriting classes. For users one method may be of the interest:

  bool valueChanged() ;
  
which returns true if the option was set/changed on the command line
or in options file. Changed in this context means that the option 
appeared on the command line, even if its value on the command line 
was the same as default value.

Class AppCmdOptBool
-------------------

This class represents a command line option without argument. The option 
has boolean value which will change its value from its initial value
when the option appears on the command line. More than one occurrence 
of the option does not have any additional effect and is equivalent to
just single occurrence.

Current value of the option (true or false) after parse() can be 
obtained through the value() member function.

These constructors are defined for the class:

  AppCmdOptBool(string optionNames, string description, bool defValue=false)
  AppCmdOptBool(AppCmdLine& parser, string optionNames, string description, 
                bool defValue=false)

optionNames parameter is a comma-separated list of option names, for 
example "v,verbose". The form which takes AppCmdLine& parameter 
automatically adds option to the parser, there is no need to call 
addArgument() if one uses this constructor.

Class AppCmdOptToggle
---------------------

This class represents a command line option without argument. The option 
has boolean value which will change its value for every appearance of the 
option in the command line. Current value of the option (true or false) 
after parse() can be obtained through the value() member function.

These constructors are defined for the class:

  AppCmdOptToggle(string optionNames, string description, bool defValue=false)
  AppCmdOptToggle(AppCmdLine& parser, string optionNames, string description, 
                  bool defValue=false)

Class AppCmdOptIncr
-------------------

This class represents a command line option without argument. Every 
appearance of the option on the command line will increment the current 
value of the option, value has an int type, and you can set its starting 
value in constructor. Current value of the option after parse() can be 
obtained through the value() member function.

These constructors are defined for the class:

  AppCmdOptIncr(string optionNames, string description, int defValue=0)
  AppCmdOptIncr(AppCmdLine& parser, string optionNames, string description, 
                int defValue=0)

Class AptCmdOpt<T>
------------------

This class defines a command line option with argument. This is a 
template class parameterized by the type of the argument. See the 
description of the OptCmdArg class for information on which types can 
be used. Current value of the option after parse() can be obtained 
through the value() member function.

These constructors are defined for the class (parameter argName provides
a name for the argument, such as "path" or "number", used for displaying
usage information):

  AppCmdOpt<T>(string optionNames, string argName, string description, T defValue)
  AppCmdOpt<T>(AppCmdLine& parser, string optionNames, string argName, string description, 
               T defValue)

Class AptCmdOptList<T>
----------------------

This class makes a list of values from the command line options. Every 
appearance of the option on the command line adds its argument to the 
list of values in the option of this class. Additionally argument itself 
is split into the words using the separator defined in the constructor, 
default value of separator is ','. In this example:

  cmd -l a -l b -l c,d,e
  
if the option class for -l is AptCmdOptList<std::string> then its value
after parse() will contain 5 strings {"a","b","c","d","e"}. Set separator
to a NUL char to avoid splitting of individual arguments.   

Types supported are the same as in the previous class. Methods begin() 
and end() return results like in the AppCmdArgList class.

These constructors are defined for the class (parameter argName has the 
same meaning as in the previous class):

  AppCmdOptList<T>(string optionNames, string argName, string description, 
                   char separator=',')
  AppCmdOptList<T>(AppCmdLine& parser, string optionNames, string argName, 
                   string description, char separator=',')

Class AptCmdOptSize
-------------------

This class defines a command line option with argument. It accepts 
non-negative numbers optionally followed by single-character suffix: 
'k' or 'K' for 1024, 'M' for 1024*1024, 'G' for 1024*1024*1024. 
The value type for this option should be unsigned integer with at 
least 64 bits. Current value of the option after parse() can be 
obtained through the value() member function.

These constructors are defined for the class (parameter argName provides
a name for the argument, such as "size" or "bytes", used for displaying
usage information):

  AptCmdOptSize(string optionNames, string argName, string description, 
                uint64_t defValue)
  AptCmdOptSize(AppCmdLine& parser, string optionNames, string argName, 
                string description, uint64_t defValue)

Class AptCmdOptNamedValue<T>
----------------------------

This option class provides mapping from the names appearing on the 
command line to the values of some other type. Useful when the option
can accept a set of predefined strings but in the application needs
to transform them into a set of numbers for example. The mapping from
possible set of names to values of other type is defined through the 
method 

  void add(string name, T value)
  
which has to be called once for every acceptable name, like in this 
example:

  AptCmdOptNamedValue<unsigned int> colorOpt(...) ;
  option.add ( "black", 0x000000 ) ;
  option.add ( "red", 0xFF0000 ) ;
  option.add ( "green", 0x00FF00 ) ;
  option.add ( "blue", 0x0000FF ) ;

Current value of the option after parse() can be obtained through 
the value() member function.

These constructors are defined for the class (parameter argName has the 
same meaning as in the previous class):

  AppCmdOptNamedValue<T>(string optionNames, string argName, string description, 
                         T defValue ) ;
  AppCmdOptNamedValue<T>(AppCmdLine& parser, string optionNames, string argName, 
                         string description, T defValue ) ;


Option groups
-------------

If the number of options in applications becomes large the output produced
by usage() method of the parser class may become unwieldy. To improve this 
situation options could be organized into the option groups according to
their purpose or functionality (e.g. options controlling input, options
defining output) so that usage() can section the output which might help
users to navigate through the usage information.

This library defines special class which allows options grouping, class
name is AppCmdOptGroup. Instead of adding all options directly to parser 
one can instantiate one or few option groups and add options to those 
groups (and to parser which is considered a general group). Groups have to
be added to parser by either calling AppCmdLine::addGroup() method or by
passing parser instance as an argument to group constructor. Options are
added to groups by either using AppCmdOptGroup::addOption() method or by 
passing group instance to the constructor of the option class. The parser 
class AppCmdline is a subclass of AppCmdOptGroup so adding options to the 
parser directly just adds them to a general options group. Here is an 
example of splitting options into few groups:

    int main(int argc, char** argv)
	{
	  AppCmdLine parser(argv[0]);
	
	  // create two additional option groups
	  AppCmdOptGroup optgrpIn(parser, "Input options");
	  AppCmdOptGroup optgrpOut(parser, "Output options");
	
	  // make an option, add it to parser
	  AppCmdOptIncr optVerbose(parser, "v,verbose", "Produce more messages", 0);
	  // make an option, add it to input group
	  AppCmdOptSize optBufSize(optgrpIn, "b,buf-size", "size", "Input buffer size, def: 1M", 1024*1024);
	  // make an option, add it to output group
	  AppCmdOpt<std::string> optOutFile(optgrpOut, "o", "path", "Output file name", "");
	
	  parser.parse(argc, argv);
	  if (parser.helpWanted()) {
	    parser.usage(std::cout);
	    return 0;
	  }
	}

And here is the output produced by this program running with -h option:

	Usage: ./build/x86_64-rhel5-gcc41-opt/AppUtils/apptest1 [options]
	
	  General options:
	    {-h|-?|--help }         print help message
	    {-v|--verbose } (incr)  Produce more messages
	
	  Input options:
	    {-b|--buf-size} size    Input buffer size, def: 1M
	
	  Output options:
	    {-o           } path    Output file name

As you can see --verbose option was added to General options group 
(together with the pre-defined --help option) and two other options each
appear in their own groups.


Options file
------------

In addition to providing all the options on the command line the same 
options can be defined in the options file. This can be useful when 
the options list becomes very long or if you want to keep predefined 
set of options for standard situations. For option parser to read an
option files one has to call parser's method setOptionsFile() and
pass it an option which will be used to define the name of the 
options file. setOptionsFile() accepts option of type AppCmdOptList<std::string>
which means that one can specify multiple file names on the command 
line, they all will be read in the order they were given. If the option 
appears both in option files and explicitly on command line the command 
line value overrides value in option file. setOptionsFile() can be 
called alone or after addOption has been called() for the same option.

Here are examples:

  // provide options file, but do not set default name for it,
  // user will provide file name on the command line like
  // '-o myoptions.cfg' or '--options-file=myoptions.cfg' 
  AppCmdLine parser( argv[0] ) ;
  AppCmdOptList<std::string> optOptionsFile("o,options-file", "path",
                         "name of the options file") ;
  parser.setOptionsFile(optOptionsFile) ;

  
  // provide options file, and set default name for it (appoptions.cfg),
  // user can override file name on the command line like
  // '-o myoptions.cfg' or '--options-file=myoptions.cfg' 
  AppCmdLine parser( argv[0] ) ;
  std::vector<std::string> defOptionFile(1, "appoptions.cfg");
  AppCmdOptList<std::string> optOptionsFile("o,options-file", "path",
                         "name of the options file", defOptionFile) ;
  parser.setOptionsFile(optOptionsFile) ;

The options file consists of the series of lines, with one option per 
line. Empty lines and lines starting with '#' (comments) are ignored. 
Acceptable format for the option lines is:

  1. option-long-name = value
  2. option-long-name =
  3. option-long-name

Only the long names for the options can be accepted in the options file.
The value string can contain anything, everything from the first 
non-blank character to the last non-blank character is passed to the 
parser as the option's value. Formats 1 and 2 can be used for options 
with argument to set the argument to some value or empty string (or in 
case of AptCmdOptList to add value or empty string). Formats 2 and 3
can be used to set options without parameters.

The options file is read after all command line options are parsed 
already. The options that were set on the command line are not changed 
from the content of the options file (command line overrides options
file).

Application class (AppBase)
===========================

AppBase class is a base class for building command-line applications. It 
solves two standard problems which appear in almost every command-line 
application - command line parsing and logging/debugging.

The real applications built from this class needs to be customized, 
customization is performed through the inheritance and overriding of few 
methods of the base class. Most of the time only the single method called 
runApp() needs to be implemented, in addition to the setup code in the 
subclass' constructor. Additionally the code which runs the whole 
application needs to be added to the source file, so in general, the 
code will look like this:

#include "AppUtils/AppBase.h"

class RealApp : public AppUtils::AppBase {
public: 
  RealApp( const std::string& appname ) 
    : AppUtils::AppBase(appname)
  {
    // initialize app-specific things
  } 
  ~RealApp() {}
  
protected:

  int runApp() {
    // real application code goes in here
  }

private :
  // data members, etc.

};  

// this macro generates main() which runs above application
APPUTILS_MAIN(RealApp)

The AppBase class does two things before it calls subclass' runApp() method:

- command line parsing
- message logging setup

For the command line parsing it uses AppCmd* classes. The subclass can add 
more command line options and arguments using the methods addOption(), 
addArgument(), and setOptionsFile(), this should be done in the constructor 
of the subclass. The options and arguments themselves are the instances of 
the AppCmtOpt* and AppCmdArg* classes and they should be made data members 
of the application class. See example below for the use of the command-line 
options/arguments.

For the message logging (error reporting and debugging) the applications are 
supposed to use facilities (macros) from MsgLogger package. The base class 
provides two standard command-line options: "verbose" and "quiet". These are 
incremental options and can appear multiple times on the command line. 
Based on the number of -v and -q on the command line the base class sets the
logging level of the message logger. By default, if no options are given, the 
logging level is set to 'info'. Adding -v options increases level by one for 
every -v (first 'trace', then 'debug'). Adding -q options decreases logging 
level by one for every -q ('warning', then 'error'). Here are few examples of 
the different combinations of the options and resulting logging level:

  -v              trace
  -q              warning
  -q -q (or -qq)  error
  -vv (or -v -v)  debug
  -v -q           info

The exact formatting of the messages depends on the level of the message
itself. One can change formatting for all levels with the environment
variable MSGLOGFMT. See the README for MsgLogger for details. 

Note also that command-line parameters control parameters of only the "root"
message loggers, and that MSGLOGCONFIG variable can still be used for 
configuration of "child" loggers independently of the "root" logger.

Here is an example of the very simple echo-like application that uses 
the AppUtils classes:

// ==================================================
#include <string>
#include <iostream>

#include "AppUtils/AppBase.h"
#include "AppUtils/AppCmdOpt.h"
#include "AppUtils/AppCmdOptBool.h"
#include "AppUtils/AppCmdArgList.h"
#include "MsgLogger/MsgLogger.h"

class EchoApp : public AppUtils::AppBase {
public:
  EchoApp( const std::string& appname ) ;
  ~EchoApp() {}

protected:

  int runApp() ;

private :
  AppUtils::AppCmdOptBool m_noEcho ;
  AppUtils::AppCmdOpt<std::string> m_sep ;
  AppUtils::AppCmdArgList<std::string> m_args ;
};

EchoApp::EchoApp( const std::string& appname )
  : AppUtils::AppBase(appname)
  , m_noEcho(parser(), "n,no-new-line", "disable output of new line", false)
  , m_sep(parser(), "s,separator", "string", "output word separator", " ")
  , m_args(parser(), "strings", "the list of strings to print", std::list<std::string>())
{
}

int EchoApp::runApp()
{
  MsgLogRoot( debug, "Starting with noEcho=" << m_noEcho.value() <<
                     " and sep=\"" << m_sep.value() << "\"" );

  bool first = true ;
  typedef AppUtils::AppCmdArgList<std::string>::const_iterator Iter ;
  for ( Iter i = m_args.begin() ; i != m_args.end() ; ++i ) {
    if ( first ) {
      first = false ;
    } else {
      std::cout << m_sep.value() ;
    }
    std::cout << *i ;
  }
  if ( not m_noEcho.value() ) std::cout << '\n' ;

  return 0 ;
}

// this macro generates main() which runs above application
APPUTILS_MAIN(EchoApp)
// ==================================================

If you run it with -h option it will produce this help message:

Usage: EchoApp [options] [strings ...]

  Available options:
    {-h|-?|--help    }         print help message
    {-v|--verbose    } (incr)  verbose output, multiple allowed
    {-q|--quiet      } (incr)  quieter output, multiple allowed
    {-n|--no-new-line} (incr)  disable output of new line
    {-s|--separator  } string  output word separator

  Positional parameters:
    strings  the list of strings to print



AppBase Python module
=====================

AppBase module provides an application class (called AppBase too) 
which simplifies building of the standard command-line applications. 
It solves two standard problems which appear in almost every 
command-line application - command line parsing and logging/debugging.

The real applications built from this class needs to be customized, 
customization is performed through the inheritance and override of few 
methods of the base class. Most of the time only the single method 
called _run() needs to be implemented, in addition to the setup code 
in the subclass' constructor. Additionally the code which runs the 
whole application needs to be added to the script, so in general,
the script will look like this:

#
#  Example code for AppBase
#
import sys
from AppUtils.AppBase import AppBase

class ExampleApp ( AppBase ) :
    def __init__ ( self ) :
        # super init
        AppBase.__init__ ( self, ... )
        # more init code
        # ....

    def _run ( self ) :
        # app code
        # ...

#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    app = ExampleApp()
    rc = app.run()
    sys.exit(rc)


The "main" code above calls the application's run() method which does 
few standard tasks - command line parsing, logging initialization - 
and calls the _run() method which is implemented in the user's code.

For the command line parsing the base classes uses Python's optparse 
module (http://www.python.org/doc/lib/module-optparse.html) which 
supports variety of option types. Base class instantiates the 
OptionParser object which is accessible to the subclass via the 
self._parser member. Additionally base class adds one option to the 
parser, '-v' or "--verbose" of type "count" and default value 0, so 
all applications will receive this option and can change their 
"verbosity" based on this option. Additional options are added to the 
parser in the subclass constructor using the standard methods of the 
OptionParser class:

    def __init__ ( self ) :
        # super init
        AppBase.__init__ ( self, usage = "usage: %prog [options] package tag" )
        # add more options
        self._parser.add_option ( '-b', "--bug-fix", default=False, action="store_true", 
                                  help="publish bug fix, def: new feature" )
        self._parser.add_option ( '-f', "--input-file", default=None, 
                                  help="name of the file with the tags" )

All applications will also have option -h or --help (which is standard 
to OptionParser itself) which prints usage summary and help for all 
defined options. The usage summary can be also changed by user using 
the 'usage' parameter of the AppBase's constructor as in the example 
above. Other constructor keyword arguments which are passed to 
OptionParser constructor include: version, description, and prog;
check OptionParser documentation for their meaning.

The run() method calls parser's parse_args() methods and stores its 
result in two members:

  self._options - object with the parsed options
  self._args    - rest of the command line as sequence of strings

Second task performed by the run() method is instantiation of the 
logger. If you do not plan to use logging at all, or do your own 
logging you can turn the instantiation off by providing 'installLogger 
= False' parameter to the constructor of the base class. If you do not 
do this then the default logger will be installed for use in your 
application. For more information about what is logger and what it can 
do check the docs (http://www.python.org/doc/lib/module-logging.html).

The class installs the logger object accessible to the user code 
through the self._log member. The name of the logger will be the same 
as the name of the application, and the name of the application is 
determined by the appName() method of the class. Default 
implementation of the method in the base class uses the "basename" of 
the script, but subclasses can override the metod to return something 
else. If you choose not to install logger at all then self._log will 
point to a "root" logger. The base class also defines one additional 
logging level called 'TRACE' which is between standard DEBUG and INFO 
levels. 

The format of the messages printed by the logger is controlled by the 
format string with the default value '%(asctime)s %(levelname)-8s 
%(message)s'. Clients can change the format string by either providing 
the 'logfmt' kwargument to the constructor of the base class, or 
changing the value of the self._logfmt member before the run() method 
is called (e.g. in constructor)

There are several convenience methods defined in the base class to use 
for logging instead of directly calling self._log methods. These are:

    debug(...)
    trace(...)
    info(...)
    warning(...)
    error(...)
    critical(...)

They all call corresponding methods of the self._log object. 

The default logging level for the self._log logger depends on the 
verbosity level of the application specified with the -v (--verbose) 
option on the command line. Here is the correspondence between 
verbosity level and logging level:

        Verbosity       Logging level
        ---------------------------
        0 (default)     WARNING
        1 (-v)          INFO
        2 (-vv)         TRACE
        3+ (-vvv...)    DEBUG


Here is the brief reference of the members and methods:

self._parser      - OptionParser object for command-line parsing, user 
                    is supposed to add more options to it
self._options     - result of the command line parsing, object with 
                    all options
self._args        - rest of the command line, positional arguments
self._log         - logger object
self._logfmt      - logger format string, initialized by 'logfmt' 
                    argument to constructor, can be changed before run()
self.run(argv)    - method called from "main", usually should not be 
                    overridden
self.appName()    - returns application name, used for the name of the 
                    logger, can be overridden
self._run()       - the method to be implemented by user, contains all
                    application's logic, can access all other members
                    and methods from this method
self.debug(...)   - convenience method for message logging
self.trace(...)   - convenience method for message logging
self.info(...)    - convenience method for message logging
self.warning(...) - convenience method for message logging
self.error(...)   - convenience method for message logging
self.critical(...)- convenience method for message logging


And last working (but not exceptionally useful:) example:

#!@PYTHON@
#
#  Example 'echo' application
#
import sys
from AppUtils.AppBase import AppBase

class Echo ( AppBase ) :
    def __init__ ( self ) :
        # super init
        AppBase.__init__ ( self, usage="usage: %prog [options] ...", 
                            logfmt = '%(levelname)s: %(message)s' )
        # add more command options
        self._parser.add_option ( '-n', "--no-newline", default=False, action="store_true",
                                  help="do not output the trailing newline" )

    def _run ( self ) :
        self.trace("starting this super-echo app")
        self.debug("arguments: %s", (self._args,) )

        sys.stdout.write ( ' '.join(self._args) )
        if not self._options.no_echo :
            self.debug("will terminate with newline")
            sys.stdout.write('\n')

#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    app = Echo()
    rc = app.run()
    sys.exit(rc)
