/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_IPIMB_DDL_WRAPPER_H
#define PSDDL_PYTHON_IPIMB_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/ipimb.ddl.h" // inc_psana

namespace psddl_python {
namespace Ipimb {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Ipimb::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_IpimbConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Ipimb::ConfigV1>& obj) : m_obj(obj) {}
  uint64_t triggerCounter() const { return m_obj->triggerCounter(); }
  uint64_t serialID() const { return m_obj->serialID(); }
  uint16_t chargeAmpRange() const { return m_obj->chargeAmpRange(); }
  uint16_t calibrationRange() const { return m_obj->calibrationRange(); }
  uint32_t resetLength() const { return m_obj->resetLength(); }
  uint32_t resetDelay() const { return m_obj->resetDelay(); }
  float chargeAmpRefVoltage() const { return m_obj->chargeAmpRefVoltage(); }
  float calibrationVoltage() const { return m_obj->calibrationVoltage(); }
  float diodeBias() const { return m_obj->diodeBias(); }
  uint16_t status() const { return m_obj->status(); }
  uint16_t errors() const { return m_obj->errors(); }
  uint16_t calStrobeLength() const { return m_obj->calStrobeLength(); }
  uint32_t trigDelay() const { return m_obj->trigDelay(); }
  Psana::Ipimb::ConfigV1::CapacitorValue capacitorValue(uint32_t ch) const { return m_obj->capacitorValue(ch); }
};

class ConfigV2_Wrapper {
  shared_ptr<const Psana::Ipimb::ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_IpimbConfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(const shared_ptr<const Psana::Ipimb::ConfigV2>& obj) : m_obj(obj) {}
  uint64_t triggerCounter() const { return m_obj->triggerCounter(); }
  uint64_t serialID() const { return m_obj->serialID(); }
  uint16_t chargeAmpRange() const { return m_obj->chargeAmpRange(); }
  uint16_t calibrationRange() const { return m_obj->calibrationRange(); }
  uint32_t resetLength() const { return m_obj->resetLength(); }
  uint32_t resetDelay() const { return m_obj->resetDelay(); }
  float chargeAmpRefVoltage() const { return m_obj->chargeAmpRefVoltage(); }
  float calibrationVoltage() const { return m_obj->calibrationVoltage(); }
  float diodeBias() const { return m_obj->diodeBias(); }
  uint16_t status() const { return m_obj->status(); }
  uint16_t errors() const { return m_obj->errors(); }
  uint16_t calStrobeLength() const { return m_obj->calStrobeLength(); }
  uint32_t trigDelay() const { return m_obj->trigDelay(); }
  uint32_t trigPsDelay() const { return m_obj->trigPsDelay(); }
  uint32_t adcDelay() const { return m_obj->adcDelay(); }
  Psana::Ipimb::ConfigV2::CapacitorValue capacitorValue(uint32_t ch) const { return m_obj->capacitorValue(ch); }
};

class DataV1_Wrapper {
  shared_ptr<const Psana::Ipimb::DataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_IpimbData };
  enum { Version = 1 };
  DataV1_Wrapper(const shared_ptr<const Psana::Ipimb::DataV1>& obj) : m_obj(obj) {}
  uint64_t triggerCounter() const { return m_obj->triggerCounter(); }
  uint16_t config0() const { return m_obj->config0(); }
  uint16_t config1() const { return m_obj->config1(); }
  uint16_t config2() const { return m_obj->config2(); }
  uint16_t channel0() const { return m_obj->channel0(); }
  uint16_t channel1() const { return m_obj->channel1(); }
  uint16_t channel2() const { return m_obj->channel2(); }
  uint16_t channel3() const { return m_obj->channel3(); }
  uint16_t checksum() const { return m_obj->checksum(); }
  float channel0Volts() const { return m_obj->channel0Volts(); }
  float channel1Volts() const { return m_obj->channel1Volts(); }
  float channel2Volts() const { return m_obj->channel2Volts(); }
  float channel3Volts() const { return m_obj->channel3Volts(); }
};

class DataV2_Wrapper {
  shared_ptr<const Psana::Ipimb::DataV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_IpimbData };
  enum { Version = 2 };
  DataV2_Wrapper(const shared_ptr<const Psana::Ipimb::DataV2>& obj) : m_obj(obj) {}
  uint16_t config0() const { return m_obj->config0(); }
  uint16_t config1() const { return m_obj->config1(); }
  uint16_t config2() const { return m_obj->config2(); }
  uint16_t channel0() const { return m_obj->channel0(); }
  uint16_t channel1() const { return m_obj->channel1(); }
  uint16_t channel2() const { return m_obj->channel2(); }
  uint16_t channel3() const { return m_obj->channel3(); }
  uint16_t channel0ps() const { return m_obj->channel0ps(); }
  uint16_t channel1ps() const { return m_obj->channel1ps(); }
  uint16_t channel2ps() const { return m_obj->channel2ps(); }
  uint16_t channel3ps() const { return m_obj->channel3ps(); }
  uint16_t checksum() const { return m_obj->checksum(); }
  float channel0Volts() const { return m_obj->channel0Volts(); }
  float channel1Volts() const { return m_obj->channel1Volts(); }
  float channel2Volts() const { return m_obj->channel2Volts(); }
  float channel3Volts() const { return m_obj->channel3Volts(); }
  float channel0psVolts() const { return m_obj->channel0psVolts(); }
  float channel1psVolts() const { return m_obj->channel1psVolts(); }
  float channel2psVolts() const { return m_obj->channel2psVolts(); }
  float channel3psVolts() const { return m_obj->channel3psVolts(); }
  uint64_t triggerCounter() const { return m_obj->triggerCounter(); }
};
} // namespace Ipimb
} // namespace psddl_python
#endif // PSDDL_PYTHON_IPIMB_DDL_WRAPPER_H
