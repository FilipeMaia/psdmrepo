/* Do not edit this file, as it is auto-generated */

#ifndef PSANA_LUSI_DDL_WRAPPER_H
#define PSANA_LUSI_DDL_WRAPPER_H 1

#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_python/DdlWrapper.h>

namespace Psana {
namespace Lusi {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class DiodeFexConfigV1_Wrapper {
  shared_ptr<DiodeFexConfigV1> _o;
  DiodeFexConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_DiodeFexConfig };
  enum { Version = 1 };
  DiodeFexConfigV1_Wrapper(shared_ptr<DiodeFexConfigV1> obj) : _o(obj), o(_o.get()) {}
  DiodeFexConfigV1_Wrapper(DiodeFexConfigV1* obj) : o(obj) {}
  vector<float> base() const { VEC_CONVERT(o->base(), float); }
  vector<float> scale() const { VEC_CONVERT(o->scale(), float); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class DiodeFexConfigV2_Wrapper {
  shared_ptr<DiodeFexConfigV2> _o;
  DiodeFexConfigV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_DiodeFexConfig };
  enum { Version = 2 };
  DiodeFexConfigV2_Wrapper(shared_ptr<DiodeFexConfigV2> obj) : _o(obj), o(_o.get()) {}
  DiodeFexConfigV2_Wrapper(DiodeFexConfigV2* obj) : o(obj) {}
  vector<float> base() const { VEC_CONVERT(o->base(), float); }
  vector<float> scale() const { VEC_CONVERT(o->scale(), float); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class DiodeFexV1_Wrapper {
  shared_ptr<DiodeFexV1> _o;
  DiodeFexV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_DiodeFex };
  enum { Version = 1 };
  DiodeFexV1_Wrapper(shared_ptr<DiodeFexV1> obj) : _o(obj), o(_o.get()) {}
  DiodeFexV1_Wrapper(DiodeFexV1* obj) : o(obj) {}
  float value() const { return o->value(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class IpmFexConfigV1_Wrapper {
  shared_ptr<IpmFexConfigV1> _o;
  IpmFexConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_IpmFexConfig };
  enum { Version = 1 };
  IpmFexConfigV1_Wrapper(shared_ptr<IpmFexConfigV1> obj) : _o(obj), o(_o.get()) {}
  IpmFexConfigV1_Wrapper(IpmFexConfigV1* obj) : o(obj) {}
  vector<Lusi::DiodeFexConfigV1> diode() const { VEC_CONVERT(o->diode(), Lusi::DiodeFexConfigV1); }
  float xscale() const { return o->xscale(); }
  float yscale() const { return o->yscale(); }
};

class IpmFexConfigV2_Wrapper {
  shared_ptr<IpmFexConfigV2> _o;
  IpmFexConfigV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_IpmFexConfig };
  enum { Version = 2 };
  IpmFexConfigV2_Wrapper(shared_ptr<IpmFexConfigV2> obj) : _o(obj), o(_o.get()) {}
  IpmFexConfigV2_Wrapper(IpmFexConfigV2* obj) : o(obj) {}
  vector<Lusi::DiodeFexConfigV2> diode() const { VEC_CONVERT(o->diode(), Lusi::DiodeFexConfigV2); }
  float xscale() const { return o->xscale(); }
  float yscale() const { return o->yscale(); }
};

class IpmFexV1_Wrapper {
  shared_ptr<IpmFexV1> _o;
  IpmFexV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_IpmFex };
  enum { Version = 1 };
  IpmFexV1_Wrapper(shared_ptr<IpmFexV1> obj) : _o(obj), o(_o.get()) {}
  IpmFexV1_Wrapper(IpmFexV1* obj) : o(obj) {}
  vector<float> channel() const { VEC_CONVERT(o->channel(), float); }
  float sum() const { return o->sum(); }
  float xpos() const { return o->xpos(); }
  float ypos() const { return o->ypos(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class PimImageConfigV1_Wrapper {
  shared_ptr<PimImageConfigV1> _o;
  PimImageConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_PimImageConfig };
  enum { Version = 1 };
  PimImageConfigV1_Wrapper(shared_ptr<PimImageConfigV1> obj) : _o(obj), o(_o.get()) {}
  PimImageConfigV1_Wrapper(PimImageConfigV1* obj) : o(obj) {}
  float xscale() const { return o->xscale(); }
  float yscale() const { return o->yscale(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

  class DiodeFexConfigV1_Getter : public Psana::EnvGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::DiodeFexConfigV1";
    }
    int getVersion() {
      return DiodeFexConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<DiodeFexConfigV1> result = store.get(src, 0);
      return result.get() ? object(DiodeFexConfigV1_Wrapper(result)) : object();
    }
  };

  class DiodeFexConfigV2_Getter : public Psana::EnvGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::DiodeFexConfigV2";
    }
    int getVersion() {
      return DiodeFexConfigV2::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<DiodeFexConfigV2> result = store.get(src, 0);
      return result.get() ? object(DiodeFexConfigV2_Wrapper(result)) : object();
    }
  };

  class DiodeFexV1_Getter : public Psana::EvtGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::DiodeFexV1";
    }
    int getVersion() {
      return DiodeFexV1::Version;
    }
    object get(PSEvt::Event& evt, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<DiodeFexV1> result = evt.get(key, foundSrc);
      return result.get() ? object(DiodeFexV1_Wrapper(result)) : object();
    }
    object get(PSEvt::Event& evt, Pds::Src& src, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<DiodeFexV1> result = evt.get(src, key, foundSrc);
      return result.get() ? object(DiodeFexV1_Wrapper(result)) : object();
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<DiodeFexV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(DiodeFexV1_Wrapper(result)) : object();
    }
  };

  class IpmFexConfigV1_Getter : public Psana::EnvGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::IpmFexConfigV1";
    }
    int getVersion() {
      return IpmFexConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<IpmFexConfigV1> result = store.get(src, 0);
      return result.get() ? object(IpmFexConfigV1_Wrapper(result)) : object();
    }
  };

  class IpmFexConfigV2_Getter : public Psana::EnvGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::IpmFexConfigV2";
    }
    int getVersion() {
      return IpmFexConfigV2::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<IpmFexConfigV2> result = store.get(src, 0);
      return result.get() ? object(IpmFexConfigV2_Wrapper(result)) : object();
    }
  };

  class IpmFexV1_Getter : public Psana::EvtGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::IpmFexV1";
    }
    int getVersion() {
      return IpmFexV1::Version;
    }
    object get(PSEvt::Event& evt, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<IpmFexV1> result = evt.get(key, foundSrc);
      return result.get() ? object(IpmFexV1_Wrapper(result)) : object();
    }
    object get(PSEvt::Event& evt, Pds::Src& src, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<IpmFexV1> result = evt.get(src, key, foundSrc);
      return result.get() ? object(IpmFexV1_Wrapper(result)) : object();
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key=std::string(), Pds::Src* foundSrc=0) {
      shared_ptr<IpmFexV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(IpmFexV1_Wrapper(result)) : object();
    }
  };

  class PimImageConfigV1_Getter : public Psana::EnvGetter {
  public:
    const char* getTypeName() {
      return "Psana::Lusi::PimImageConfigV1";
    }
    int getVersion() {
      return PimImageConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<PimImageConfigV1> result = store.get(src, 0);
      return result.get() ? object(PimImageConfigV1_Wrapper(result)) : object();
    }
  };
} // namespace Lusi
} // namespace Psana
#endif // PSANA_LUSI_DDL_WRAPPER_H
