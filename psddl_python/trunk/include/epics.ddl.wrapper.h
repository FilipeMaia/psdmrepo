/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_EPICS_DDL_WRAPPER_H
#define PSDDL_PYTHON_EPICS_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/epics.ddl.h" // inc_psana

namespace psddl_python {
namespace Epics {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class EpicsPvHeader_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvHeader> m_obj;
public:
  EpicsPvHeader_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvHeader>& obj) : m_obj(obj) {}
  int16_t pvId() const { return m_obj->pvId(); }
  int16_t dbrType() const { return m_obj->dbrType(); }
  int16_t numElements() const { return m_obj->numElements(); }
  void print() const { m_obj->print(); }
  uint8_t isCtrl() const { return m_obj->isCtrl(); }
  uint8_t isTime() const { return m_obj->isTime(); }
  uint16_t status() const { return m_obj->status(); }
  uint16_t severity() const { return m_obj->severity(); }
};

class EpicsPvCtrlHeader_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlHeader> m_obj;
public:
  EpicsPvCtrlHeader_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlHeader>& obj) : m_obj(obj) {}
  const char* pvName() const { return m_obj->pvName(); }
  boost::python::list pvName_shape() const { boost::python::list res; const vector<int>& sh=m_obj->pvName_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
};

class EpicsPvTimeHeader_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeHeader> m_obj;
public:
  EpicsPvTimeHeader_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeHeader>& obj) : m_obj(obj) {}
  Psana::Epics::epicsTimeStamp stamp() const { return m_obj->stamp(); }
};

class EpicsPvCtrlString_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlString> m_obj;
public:
  EpicsPvCtrlString_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlString>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_sts_string& dbr() const { return m_obj->dbr(); }
  const char* data(uint32_t i0) const { return m_obj->data(i0); }
  const char* value(uint32_t i) const { return m_obj->value(i); }
  boost::python::list data_shape() const { boost::python::list res; const vector<int>& sh=m_obj->data_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list data_list() { boost::python::list l; const int n = m_obj->data_shape()[0]; for (int i = 0; i < n; i++) l.append(data(i)); return l; }
};

class EpicsPvCtrlShort_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlShort> m_obj;
public:
  EpicsPvCtrlShort_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlShort>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_short& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  int16_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvCtrlFloat_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlFloat> m_obj;
public:
  EpicsPvCtrlFloat_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlFloat>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_float& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  float value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvCtrlEnum_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlEnum> m_obj;
public:
  EpicsPvCtrlEnum_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlEnum>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_enum& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  uint16_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvCtrlChar_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlChar> m_obj;
public:
  EpicsPvCtrlChar_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlChar>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_char& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  uint8_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvCtrlLong_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlLong> m_obj;
public:
  EpicsPvCtrlLong_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlLong>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_long& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  int32_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvCtrlDouble_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvCtrlDouble> m_obj;
public:
  EpicsPvCtrlDouble_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvCtrlDouble>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_ctrl_double& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  double value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeString_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeString> m_obj;
public:
  EpicsPvTimeString_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeString>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_string& dbr() const { return m_obj->dbr(); }
  const char* data(uint32_t i0) const { return m_obj->data(i0); }
  const char* value(uint32_t i) const { return m_obj->value(i); }
  boost::python::list data_shape() const { boost::python::list res; const vector<int>& sh=m_obj->data_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list data_list() { boost::python::list l; const int n = m_obj->data_shape()[0]; for (int i = 0; i < n; i++) l.append(data(i)); return l; }
};

class EpicsPvTimeShort_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeShort> m_obj;
public:
  EpicsPvTimeShort_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeShort>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_short& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  int16_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeFloat_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeFloat> m_obj;
public:
  EpicsPvTimeFloat_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeFloat>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_float& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  float value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeEnum_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeEnum> m_obj;
public:
  EpicsPvTimeEnum_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeEnum>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_enum& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  uint16_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeChar_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeChar> m_obj;
public:
  EpicsPvTimeChar_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeChar>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_char& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  uint8_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeLong_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeLong> m_obj;
public:
  EpicsPvTimeLong_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeLong>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_long& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  int32_t value(uint32_t i) const { return m_obj->value(i); }
};

class EpicsPvTimeDouble_Wrapper {
  shared_ptr<const Psana::Epics::EpicsPvTimeDouble> m_obj;
public:
  EpicsPvTimeDouble_Wrapper(const shared_ptr<const Psana::Epics::EpicsPvTimeDouble>& obj) : m_obj(obj) {}
  const Psana::Epics::dbr_time_double& dbr() const { return m_obj->dbr(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  double value(uint32_t i) const { return m_obj->value(i); }
};

class PvConfigV1_Wrapper {
  shared_ptr<const Psana::Epics::PvConfigV1> m_obj;
public:
  PvConfigV1_Wrapper(const shared_ptr<const Psana::Epics::PvConfigV1>& obj) : m_obj(obj) {}
  int16_t pvId() const { return m_obj->pvId(); }
  const char* description() const { return m_obj->description(); }
  float interval() const { return m_obj->interval(); }
};

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Epics::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EpicsConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Epics::ConfigV1>& obj) : m_obj(obj) {}
  int32_t numPv() const { return m_obj->numPv(); }
  Epics::PvConfigV1_Wrapper pvControls(uint32_t i0) const { return Epics::PvConfigV1_Wrapper(boost::shared_ptr<const Psana::Epics::PvConfigV1>(m_obj, &m_obj->pvControls(i0))); }
  boost::python::list pvControls_shape() const { boost::python::list res; const vector<int>& sh=m_obj->pvControls_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list pvControls_list() { boost::python::list l; const int n = m_obj->pvControls_shape()[0]; for (int i = 0; i < n; i++) l.append(pvControls(i)); return l; }
};
} // namespace Epics
} // namespace psddl_python
#endif // PSDDL_PYTHON_EPICS_DDL_WRAPPER_H
