/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_EVR_DDL_WRAPPER_H
#define PSDDL_PYTHON_EVR_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/evr.ddl.h" // inc_psana

#include <pdsdata/xtc/DetInfo.hh>
namespace psddl_python {
namespace EvrData {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
};

class ConfigV2_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV2>& obj) : m_obj(obj) {}
  uint32_t opcode() const { return m_obj->opcode(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
  Psana::EvrData::ConfigV2::BeamCode beam() const { return m_obj->beam(); }
  Psana::EvrData::ConfigV2::RateCode rate() const { return m_obj->rate(); }
};

class ConfigV3_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV3> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 3 };
  ConfigV3_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV3>& obj) : m_obj(obj) {}
  uint32_t neventcodes() const { return m_obj->neventcodes(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list eventcodes() const { return detail::ndToList(m_obj->eventcodes()); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
};

class ConfigV4_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV4> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 4 };
  ConfigV4_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV4>& obj) : m_obj(obj) {}
  uint32_t neventcodes() const { return m_obj->neventcodes(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list eventcodes() const { return detail::ndToList(m_obj->eventcodes()); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
};

class SequencerConfigV1_Wrapper {
  shared_ptr<const Psana::EvrData::SequencerConfigV1> m_obj;
public:
  SequencerConfigV1_Wrapper(const shared_ptr<const Psana::EvrData::SequencerConfigV1>& obj) : m_obj(obj) {}
  Psana::EvrData::SequencerConfigV1::Source sync_source() const { return m_obj->sync_source(); }
  Psana::EvrData::SequencerConfigV1::Source beam_source() const { return m_obj->beam_source(); }
  uint32_t length() const { return m_obj->length(); }
  uint32_t cycles() const { return m_obj->cycles(); }
  boost::python::list entries() const { return detail::ndToList(m_obj->entries()); }
};

class ConfigV5_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV5> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 5 };
  ConfigV5_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV5>& obj) : m_obj(obj) {}
  uint32_t neventcodes() const { return m_obj->neventcodes(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list eventcodes() const { return detail::ndToList(m_obj->eventcodes()); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
  const Psana::EvrData::SequencerConfigV1& seq_config() const { return m_obj->seq_config(); }
};

class ConfigV6_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV6> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 6 };
  ConfigV6_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV6>& obj) : m_obj(obj) {}
  uint32_t neventcodes() const { return m_obj->neventcodes(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list eventcodes() const { return detail::ndToList(m_obj->eventcodes()); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
  const Psana::EvrData::SequencerConfigV1& seq_config() const { return m_obj->seq_config(); }
};

class ConfigV7_Wrapper {
  shared_ptr<const Psana::EvrData::ConfigV7> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrConfig };
  enum { Version = 7 };
  ConfigV7_Wrapper(const shared_ptr<const Psana::EvrData::ConfigV7>& obj) : m_obj(obj) {}
  uint32_t neventcodes() const { return m_obj->neventcodes(); }
  uint32_t npulses() const { return m_obj->npulses(); }
  uint32_t noutputs() const { return m_obj->noutputs(); }
  boost::python::list eventcodes() const { return detail::ndToList(m_obj->eventcodes()); }
  boost::python::list pulses() const { return detail::ndToList(m_obj->pulses()); }
  boost::python::list output_maps() const { return detail::ndToList(m_obj->output_maps()); }
  const Psana::EvrData::SequencerConfigV1& seq_config() const { return m_obj->seq_config(); }
};

class DataV3_Wrapper {
  shared_ptr<const Psana::EvrData::DataV3> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrData };
  enum { Version = 3 };
  DataV3_Wrapper(const shared_ptr<const Psana::EvrData::DataV3>& obj) : m_obj(obj) {}
  uint32_t numFifoEvents() const { return m_obj->numFifoEvents(); }
  boost::python::list fifoEvents() const { return detail::ndToList(m_obj->fifoEvents()); }
};

class IOConfigV1_Wrapper {
  shared_ptr<const Psana::EvrData::IOConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EvrIOConfig };
  enum { Version = 1 };
  IOConfigV1_Wrapper(const shared_ptr<const Psana::EvrData::IOConfigV1>& obj) : m_obj(obj) {}
  uint16_t nchannels() const { return m_obj->nchannels(); }
  boost::python::list channels() const { return detail::ndToList(m_obj->channels()); }
  Psana::EvrData::OutputMap::Conn conn() const { return m_obj->conn(); }
};
} // namespace EvrData
} // namespace psddl_python
#endif // PSDDL_PYTHON_EVR_DDL_WRAPPER_H
