/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ORCA_DDL_WRAPPER_H
#define PSDDL_PYTHON_ORCA_DDL_WRAPPER_H 1

#include <psddl_python/DdlWrapper.h>
#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_psana/orca.ddl.h> // inc_psana

namespace psddl_python {
namespace Orca {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<Psana::Orca::ConfigV1> _o;
  Psana::Orca::ConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_OrcaConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(shared_ptr<Psana::Orca::ConfigV1> obj) : _o(obj), o(_o.get()) {}
  ConfigV1_Wrapper(Psana::Orca::ConfigV1* obj) : o(obj) {}
  Psana::Orca::ConfigV1::ReadoutMode mode() const { return o->mode(); }
  Psana::Orca::ConfigV1::Cooling cooling() const { return o->cooling(); }
  int8_t defect_pixel_correction_enabled() const { return o->defect_pixel_correction_enabled(); }
  uint32_t rows() const { return o->rows(); }
};

  class ConfigV1_Getter : public psddl_python::Getter {
  public:
    const std::type_info& typeinfo() const { return typeid(Psana::Orca::ConfigV1);}
    const char* getTypeName() const { return "Psana::Orca::ConfigV1";}
    int getVersion() const { return Psana::Orca::ConfigV1::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Orca::ConfigV1> result = boost::static_pointer_cast<Psana::Orca::ConfigV1>(vdata);
      return result.get() ? object(ConfigV1_Wrapper(result)) : object();
    }
  };
} // namespace Orca
} // namespace psddl_python
#endif // PSDDL_PYTHON_ORCA_DDL_WRAPPER_H
