/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ORCA_DDL_WRAPPER_H
#define PSDDL_PYTHON_ORCA_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/orca.ddl.h" // inc_psana

namespace psddl_python {
namespace Orca {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Orca::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_OrcaConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Orca::ConfigV1>& obj) : m_obj(obj) {}
  Psana::Orca::ConfigV1::ReadoutMode mode() const { return m_obj->mode(); }
  Psana::Orca::ConfigV1::Cooling cooling() const { return m_obj->cooling(); }
  int8_t defect_pixel_correction_enabled() const { return m_obj->defect_pixel_correction_enabled(); }
  uint32_t rows() const { return m_obj->rows(); }
};
} // namespace Orca
} // namespace psddl_python
#endif // PSDDL_PYTHON_ORCA_DDL_WRAPPER_H
