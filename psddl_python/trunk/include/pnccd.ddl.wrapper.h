/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H
#define PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H 1

#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_python/DdlWrapper.h>

namespace psddl_python {
namespace PNCCD {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class ConfigV1_Wrapper {
  shared_ptr<Psana::PNCCD::ConfigV1> _o;
  Psana::PNCCD::ConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDconfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(shared_ptr<Psana::PNCCD::ConfigV1> obj) : _o(obj), o(_o.get()) {}
  ConfigV1_Wrapper(Psana::PNCCD::ConfigV1* obj) : o(obj) {}
  uint32_t numLinks() const { return o->numLinks(); }
  uint32_t payloadSizePerLink() const { return o->payloadSizePerLink(); }
};

class ConfigV2_Wrapper {
  shared_ptr<Psana::PNCCD::ConfigV2> _o;
  Psana::PNCCD::ConfigV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDconfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(shared_ptr<Psana::PNCCD::ConfigV2> obj) : _o(obj), o(_o.get()) {}
  ConfigV2_Wrapper(Psana::PNCCD::ConfigV2* obj) : o(obj) {}
  uint32_t numLinks() const { return o->numLinks(); }
  uint32_t payloadSizePerLink() const { return o->payloadSizePerLink(); }
  uint32_t numChannels() const { return o->numChannels(); }
  uint32_t numRows() const { return o->numRows(); }
  uint32_t numSubmoduleChannels() const { return o->numSubmoduleChannels(); }
  uint32_t numSubmoduleRows() const { return o->numSubmoduleRows(); }
  uint32_t numSubmodules() const { return o->numSubmodules(); }
  uint32_t camexMagic() const { return o->camexMagic(); }
  const char* info() const { return o->info(); }
  const char* timingFName() const { return o->timingFName(); }
  vector<int> info_shape() const { return o->info_shape(); }
  vector<int> timingFName_shape() const { return o->timingFName_shape(); }
};
class ConfigV1;
class ConfigV2;

class FrameV1_Wrapper {
  shared_ptr<Psana::PNCCD::FrameV1> _o;
  Psana::PNCCD::FrameV1* o;
public:
  FrameV1_Wrapper(shared_ptr<Psana::PNCCD::FrameV1> obj) : _o(obj), o(_o.get()) {}
  FrameV1_Wrapper(Psana::PNCCD::FrameV1* obj) : o(obj) {}
  uint32_t specialWord() const { return o->specialWord(); }
  uint32_t frameNumber() const { return o->frameNumber(); }
  uint32_t timeStampHi() const { return o->timeStampHi(); }
  uint32_t timeStampLo() const { return o->timeStampLo(); }
  PyObject* _data() const { ND_CONVERT(o->_data(), uint16_t, 1); }
  PyObject* data() const { ND_CONVERT(o->data(), uint16_t, 2); }
};
class ConfigV1;
class ConfigV2;

class FramesV1_Wrapper {
  shared_ptr<Psana::PNCCD::FramesV1> _o;
  Psana::PNCCD::FramesV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDframe };
  enum { Version = 1 };
  FramesV1_Wrapper(shared_ptr<Psana::PNCCD::FramesV1> obj) : _o(obj), o(_o.get()) {}
  FramesV1_Wrapper(Psana::PNCCD::FramesV1* obj) : o(obj) {}
  const FrameV1_Wrapper frame(uint32_t i0) const { return FrameV1_Wrapper(const_cast<Psana::PNCCD::FrameV1*>(&o->frame(i0))); }
  uint32_t numLinks() const { return o->numLinks(); }
  vector<int> frame_shape() const { return o->frame_shape(); }
  boost::python::list frame_list() { boost::python::list l; const int n = frame_shape()[0]; for (int i = 0; i < n; i++) l.append(frame(i)); return l; }
};

class FullFrameV1_Wrapper {
  shared_ptr<Psana::PNCCD::FullFrameV1> _o;
  Psana::PNCCD::FullFrameV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDframe };
  enum { Version = 1 };
  FullFrameV1_Wrapper(shared_ptr<Psana::PNCCD::FullFrameV1> obj) : _o(obj), o(_o.get()) {}
  FullFrameV1_Wrapper(Psana::PNCCD::FullFrameV1* obj) : o(obj) {}
  uint32_t specialWord() const { return o->specialWord(); }
  uint32_t frameNumber() const { return o->frameNumber(); }
  uint32_t timeStampHi() const { return o->timeStampHi(); }
  uint32_t timeStampLo() const { return o->timeStampLo(); }
  PyObject* data() const { ND_CONVERT(o->data(), uint16_t, 2); }
};

  class ConfigV1_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::PNCCD::ConfigV1";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::PNCCD::ConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::PNCCD::ConfigV1> result = store.get(source, foundSrc);
      return result.get() ? object(ConfigV1_Wrapper(result)) : object();
    }
  };

  class ConfigV2_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::PNCCD::ConfigV2";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::PNCCD::ConfigV2::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::PNCCD::ConfigV2> result = store.get(source, foundSrc);
      return result.get() ? object(ConfigV2_Wrapper(result)) : object();
    }
  };

  class FrameV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::PNCCD::FrameV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::PNCCD::FrameV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(FrameV1_Wrapper(result)) : object();
    }
  };

  class FramesV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::PNCCD::FramesV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::PNCCD::FramesV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::PNCCD::FramesV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(FramesV1_Wrapper(result)) : object();
    }
  };

  class FullFrameV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::PNCCD::FullFrameV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::PNCCD::FullFrameV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::PNCCD::FullFrameV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(FullFrameV1_Wrapper(result)) : object();
    }
  };
} // namespace PNCCD
} // namespace psddl_python
#endif // PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H
