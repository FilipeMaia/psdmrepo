/* Do not edit this file, as it is auto-generated */

#ifndef PSANA_FCCD_DDL_WRAPPER_H
#define PSANA_FCCD_DDL_WRAPPER_H 1

#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_python/DdlWrapper.h>

namespace Psana {
namespace FCCD {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class FccdConfigV1_Wrapper {
  shared_ptr<FccdConfigV1> _o;
  FccdConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig };
  enum { Version = 1 };
  FccdConfigV1_Wrapper(shared_ptr<FccdConfigV1> obj) : _o(obj), o(_o.get()) {}
  FccdConfigV1_Wrapper(FccdConfigV1* obj) : o(obj) {}
  uint16_t outputMode() const { return o->outputMode(); }
  uint32_t width() const { return o->width(); }
  uint32_t height() const { return o->height(); }
  uint32_t trimmedWidth() const { return o->trimmedWidth(); }
  uint32_t trimmedHeight() const { return o->trimmedHeight(); }
};

class FccdConfigV2_Wrapper {
  shared_ptr<FccdConfigV2> _o;
  FccdConfigV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig };
  enum { Version = 2 };
  FccdConfigV2_Wrapper(shared_ptr<FccdConfigV2> obj) : _o(obj), o(_o.get()) {}
  FccdConfigV2_Wrapper(FccdConfigV2* obj) : o(obj) {}
  uint16_t outputMode() const { return o->outputMode(); }
  uint8_t ccdEnable() const { return o->ccdEnable(); }
  uint8_t focusMode() const { return o->focusMode(); }
  uint32_t exposureTime() const { return o->exposureTime(); }
  vector<float> dacVoltages() const { VEC_CONVERT(o->dacVoltages(), float); }
  vector<uint16_t> waveforms() const { VEC_CONVERT(o->waveforms(), uint16_t); }
  uint32_t width() const { return o->width(); }
  uint32_t height() const { return o->height(); }
  uint32_t trimmedWidth() const { return o->trimmedWidth(); }
  uint32_t trimmedHeight() const { return o->trimmedHeight(); }
};

  class FccdConfigV1_Getter : public Psana::EnvGetter {
  public:
    const std::type_info& getTypeInfo() {
      return typeid(Psana::FCCD::FccdConfigV1);
    }
    const char* getTypeName() {
      return "Psana::FCCD::FccdConfigV1";
    }
    int getTypeId() {
      return FccdConfigV1::TypeId;
    }
    int getVersion() {
      return FccdConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<FccdConfigV1> result = store.get(src, 0);
      return result.get() ? object(FccdConfigV1_Wrapper(result)) : object();
    }
  };

  class FccdConfigV2_Getter : public Psana::EnvGetter {
  public:
    const std::type_info& getTypeInfo() {
      return typeid(Psana::FCCD::FccdConfigV2);
    }
    const char* getTypeName() {
      return "Psana::FCCD::FccdConfigV2";
    }
    int getTypeId() {
      return FccdConfigV2::TypeId;
    }
    int getVersion() {
      return FccdConfigV2::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& src, Pds::Src* foundSrc=0) {
      boost::shared_ptr<FccdConfigV2> result = store.get(src, 0);
      return result.get() ? object(FccdConfigV2_Wrapper(result)) : object();
    }
  };
} // namespace FCCD
} // namespace Psana
#endif // PSANA_FCCD_DDL_WRAPPER_H
