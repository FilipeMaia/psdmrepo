/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
#define PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/acqiris.ddl.h" // inc_psana

namespace psddl_python {
namespace Acqiris {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Acqiris::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Acqiris::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t nbrConvertersPerChannel() const { return m_obj->nbrConvertersPerChannel(); }
  uint32_t channelMask() const { return m_obj->channelMask(); }
  uint32_t nbrBanks() const { return m_obj->nbrBanks(); }
  const Psana::Acqiris::TrigV1& trig() const { return m_obj->trig(); }
  const Psana::Acqiris::HorizV1& horiz() const { return m_obj->horiz(); }
  boost::python::list vert() const { return detail::ndToList(m_obj->vert()); }
  uint32_t nbrChannels() const { return m_obj->nbrChannels(); }
};
class ConfigV1;

class DataDescV1Elem_Wrapper {
  shared_ptr<const Psana::Acqiris::DataDescV1Elem> m_obj;
public:
  enum { Version = 1 };
  DataDescV1Elem_Wrapper(const shared_ptr<const Psana::Acqiris::DataDescV1Elem>& obj) : m_obj(obj) {}
  uint32_t nbrSamplesInSeg() const { return m_obj->nbrSamplesInSeg(); }
  uint32_t indexFirstPoint() const { return m_obj->indexFirstPoint(); }
  uint32_t nbrSegments() const { return m_obj->nbrSegments(); }
  boost::python::list timestamp() const { return detail::ndToList(m_obj->timestamp()); }
  PyObject* waveforms() const { return detail::ndToNumpy(m_obj->waveforms(), m_obj); }
};
class ConfigV1;

class DataDescV1_Wrapper {
  shared_ptr<const Psana::Acqiris::DataDescV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqWaveform };
  enum { Version = 1 };
  DataDescV1_Wrapper(const shared_ptr<const Psana::Acqiris::DataDescV1>& obj) : m_obj(obj) {}
  Acqiris::DataDescV1Elem_Wrapper data(uint32_t i0) const { return Acqiris::DataDescV1Elem_Wrapper(boost::shared_ptr<const Psana::Acqiris::DataDescV1Elem>(m_obj, &m_obj->data(i0))); }
  boost::python::list data_shape() const { boost::python::list res; const vector<int>& sh=m_obj->data_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list data_list() { boost::python::list l; const int n = m_obj->data_shape()[0]; for (int i = 0; i < n; i++) l.append(data(i)); return l; }
};

class TdcConfigV1_Wrapper {
  shared_ptr<const Psana::Acqiris::TdcConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcConfig };
  enum { Version = 1 };
  TdcConfigV1_Wrapper(const shared_ptr<const Psana::Acqiris::TdcConfigV1>& obj) : m_obj(obj) {}
  boost::python::list channels() const { return detail::ndToList(m_obj->channels()); }
  boost::python::list auxio() const { return detail::ndToList(m_obj->auxio()); }
  const Psana::Acqiris::TdcVetoIO& veto() const { return m_obj->veto(); }
};

class TdcDataV1_Wrapper {
  shared_ptr<const Psana::Acqiris::TdcDataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcData };
  enum { Version = 1 };
  TdcDataV1_Wrapper(const shared_ptr<const Psana::Acqiris::TdcDataV1>& obj) : m_obj(obj) {}
  boost::python::list data() const { return detail::ndToList(m_obj->data()); }
};
} // namespace Acqiris
} // namespace psddl_python
#endif // PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
