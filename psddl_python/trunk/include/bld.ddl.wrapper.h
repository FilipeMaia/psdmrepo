/* Do not edit this file, as it is auto-generated */

#ifndef PSANA_BLD_DDL_WRAPPER_H
#define PSANA_BLD_DDL_WRAPPER_H 1

#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_python/DdlWrapper.h>

#include <psddl_psana/camera.ddl.h> // other included packages
#include <psddl_psana/ipimb.ddl.h> // other included packages
#include <psddl_psana/lusi.ddl.h> // other included packages
#include <psddl_psana/pulnix.ddl.h> // other included packages
namespace Psana {
namespace Bld {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class BldDataFEEGasDetEnergy_Wrapper {
  shared_ptr<BldDataFEEGasDetEnergy> _o;
  BldDataFEEGasDetEnergy* o;
public:
  enum { TypeId = Pds::TypeId::Id_FEEGasDetEnergy };
  enum { Version = 0 };
  BldDataFEEGasDetEnergy_Wrapper(shared_ptr<BldDataFEEGasDetEnergy> obj) : _o(obj), o(_o.get()) {}
  BldDataFEEGasDetEnergy_Wrapper(BldDataFEEGasDetEnergy* obj) : o(obj) {}
  double f_11_ENRC() const { return o->f_11_ENRC(); }
  double f_12_ENRC() const { return o->f_12_ENRC(); }
  double f_21_ENRC() const { return o->f_21_ENRC(); }
  double f_22_ENRC() const { return o->f_22_ENRC(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV0_Wrapper {
  shared_ptr<BldDataEBeamV0> _o;
  BldDataEBeamV0* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 0 };
  BldDataEBeamV0_Wrapper(shared_ptr<BldDataEBeamV0> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV0_Wrapper(BldDataEBeamV0* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV1_Wrapper {
  shared_ptr<BldDataEBeamV1> _o;
  BldDataEBeamV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 1 };
  BldDataEBeamV1_Wrapper(shared_ptr<BldDataEBeamV1> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV1_Wrapper(BldDataEBeamV1* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV2_Wrapper {
  shared_ptr<BldDataEBeamV2> _o;
  BldDataEBeamV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 2 };
  BldDataEBeamV2_Wrapper(shared_ptr<BldDataEBeamV2> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV2_Wrapper(BldDataEBeamV2* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  double ebeamEnergyBC2() const { return o->ebeamEnergyBC2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV3_Wrapper {
  shared_ptr<BldDataEBeamV3> _o;
  BldDataEBeamV3* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 3 };
  BldDataEBeamV3_Wrapper(shared_ptr<BldDataEBeamV3> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV3_Wrapper(BldDataEBeamV3* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  double ebeamEnergyBC2() const { return o->ebeamEnergyBC2(); }
  double ebeamPkCurrBC1() const { return o->ebeamPkCurrBC1(); }
  double ebeamEnergyBC1() const { return o->ebeamEnergyBC1(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataPhaseCavity_Wrapper {
  shared_ptr<BldDataPhaseCavity> _o;
  BldDataPhaseCavity* o;
public:
  enum { TypeId = Pds::TypeId::Id_PhaseCavity };
  enum { Version = 0 };
  BldDataPhaseCavity_Wrapper(shared_ptr<BldDataPhaseCavity> obj) : _o(obj), o(_o.get()) {}
  BldDataPhaseCavity_Wrapper(BldDataPhaseCavity* obj) : o(obj) {}
  double fitTime1() const { return o->fitTime1(); }
  double fitTime2() const { return o->fitTime2(); }
  double charge1() const { return o->charge1(); }
  double charge2() const { return o->charge2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataIpimbV0_Wrapper {
  shared_ptr<BldDataIpimbV0> _o;
  BldDataIpimbV0* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 0 };
  BldDataIpimbV0_Wrapper(shared_ptr<BldDataIpimbV0> obj) : _o(obj), o(_o.get()) {}
  BldDataIpimbV0_Wrapper(BldDataIpimbV0* obj) : o(obj) {}
  const Ipimb::DataV1& ipimbData() const { return o->ipimbData(); }
  const Ipimb::ConfigV1& ipimbConfig() const { return o->ipimbConfig(); }
  const Lusi::IpmFexV1& ipmFexData() const { return o->ipmFexData(); }
};

class BldDataIpimbV1_Wrapper {
  shared_ptr<BldDataIpimbV1> _o;
  BldDataIpimbV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 1 };
  BldDataIpimbV1_Wrapper(shared_ptr<BldDataIpimbV1> obj) : _o(obj), o(_o.get()) {}
  BldDataIpimbV1_Wrapper(BldDataIpimbV1* obj) : o(obj) {}
  const Ipimb::DataV2& ipimbData() const { return o->ipimbData(); }
  const Ipimb::ConfigV2& ipimbConfig() const { return o->ipimbConfig(); }
  const Lusi::IpmFexV1& ipmFexData() const { return o->ipmFexData(); }
};

class BldDataPimV1_Wrapper {
  shared_ptr<BldDataPimV1> _o;
  BldDataPimV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedPim };
  enum { Version = 1 };
  BldDataPimV1_Wrapper(shared_ptr<BldDataPimV1> obj) : _o(obj), o(_o.get()) {}
  BldDataPimV1_Wrapper(BldDataPimV1* obj) : o(obj) {}
  const Pulnix::TM6740ConfigV2& camConfig() const { return o->camConfig(); }
  const Lusi::PimImageConfigV1& pimConfig() const { return o->pimConfig(); }
  const Camera::FrameV1& frame() const { return o->frame(); }
};
} // namespace Bld
} // namespace Psana
#endif // PSANA_BLD_DDL_WRAPPER_H
