/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_BLD_DDL_WRAPPER_H
#define PSDDL_PYTHON_BLD_DDL_WRAPPER_H 1

#include <psddl_python/DdlWrapper.h>
#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_psana/bld.ddl.h> // inc_psana

#include <psddl_psana/camera.ddl.h>
#include <psddl_python/camera.ddl.wrapper.h>
#include <psddl_psana/ipimb.ddl.h>
#include <psddl_python/ipimb.ddl.wrapper.h>
#include <psddl_psana/lusi.ddl.h>
#include <psddl_python/lusi.ddl.wrapper.h>
#include <psddl_psana/pulnix.ddl.h>
#include <psddl_python/pulnix.ddl.wrapper.h>
namespace psddl_python {
namespace Bld {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class BldDataFEEGasDetEnergy_Wrapper {
  shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy> _o;
  Psana::Bld::BldDataFEEGasDetEnergy* o;
public:
  enum { TypeId = Pds::TypeId::Id_FEEGasDetEnergy };
  enum { Version = 0 };
  BldDataFEEGasDetEnergy_Wrapper(shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy> obj) : _o(obj), o(_o.get()) {}
  BldDataFEEGasDetEnergy_Wrapper(Psana::Bld::BldDataFEEGasDetEnergy* obj) : o(obj) {}
  double f_11_ENRC() const { return o->f_11_ENRC(); }
  double f_12_ENRC() const { return o->f_12_ENRC(); }
  double f_21_ENRC() const { return o->f_21_ENRC(); }
  double f_22_ENRC() const { return o->f_22_ENRC(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV0_Wrapper {
  shared_ptr<Psana::Bld::BldDataEBeamV0> _o;
  Psana::Bld::BldDataEBeamV0* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 0 };
  BldDataEBeamV0_Wrapper(shared_ptr<Psana::Bld::BldDataEBeamV0> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV0_Wrapper(Psana::Bld::BldDataEBeamV0* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV1_Wrapper {
  shared_ptr<Psana::Bld::BldDataEBeamV1> _o;
  Psana::Bld::BldDataEBeamV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 1 };
  BldDataEBeamV1_Wrapper(shared_ptr<Psana::Bld::BldDataEBeamV1> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV1_Wrapper(Psana::Bld::BldDataEBeamV1* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV2_Wrapper {
  shared_ptr<Psana::Bld::BldDataEBeamV2> _o;
  Psana::Bld::BldDataEBeamV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 2 };
  BldDataEBeamV2_Wrapper(shared_ptr<Psana::Bld::BldDataEBeamV2> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV2_Wrapper(Psana::Bld::BldDataEBeamV2* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  double ebeamEnergyBC2() const { return o->ebeamEnergyBC2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataEBeamV3_Wrapper {
  shared_ptr<Psana::Bld::BldDataEBeamV3> _o;
  Psana::Bld::BldDataEBeamV3* o;
public:
  enum { TypeId = Pds::TypeId::Id_EBeam };
  enum { Version = 3 };
  BldDataEBeamV3_Wrapper(shared_ptr<Psana::Bld::BldDataEBeamV3> obj) : _o(obj), o(_o.get()) {}
  BldDataEBeamV3_Wrapper(Psana::Bld::BldDataEBeamV3* obj) : o(obj) {}
  uint32_t damageMask() const { return o->damageMask(); }
  double ebeamCharge() const { return o->ebeamCharge(); }
  double ebeamL3Energy() const { return o->ebeamL3Energy(); }
  double ebeamLTUPosX() const { return o->ebeamLTUPosX(); }
  double ebeamLTUPosY() const { return o->ebeamLTUPosY(); }
  double ebeamLTUAngX() const { return o->ebeamLTUAngX(); }
  double ebeamLTUAngY() const { return o->ebeamLTUAngY(); }
  double ebeamPkCurrBC2() const { return o->ebeamPkCurrBC2(); }
  double ebeamEnergyBC2() const { return o->ebeamEnergyBC2(); }
  double ebeamPkCurrBC1() const { return o->ebeamPkCurrBC1(); }
  double ebeamEnergyBC1() const { return o->ebeamEnergyBC1(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataPhaseCavity_Wrapper {
  shared_ptr<Psana::Bld::BldDataPhaseCavity> _o;
  Psana::Bld::BldDataPhaseCavity* o;
public:
  enum { TypeId = Pds::TypeId::Id_PhaseCavity };
  enum { Version = 0 };
  BldDataPhaseCavity_Wrapper(shared_ptr<Psana::Bld::BldDataPhaseCavity> obj) : _o(obj), o(_o.get()) {}
  BldDataPhaseCavity_Wrapper(Psana::Bld::BldDataPhaseCavity* obj) : o(obj) {}
  double fitTime1() const { return o->fitTime1(); }
  double fitTime2() const { return o->fitTime2(); }
  double charge1() const { return o->charge1(); }
  double charge2() const { return o->charge2(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class BldDataIpimbV0_Wrapper {
  shared_ptr<Psana::Bld::BldDataIpimbV0> _o;
  Psana::Bld::BldDataIpimbV0* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 0 };
  BldDataIpimbV0_Wrapper(shared_ptr<Psana::Bld::BldDataIpimbV0> obj) : _o(obj), o(_o.get()) {}
  BldDataIpimbV0_Wrapper(Psana::Bld::BldDataIpimbV0* obj) : o(obj) {}
  const Ipimb::DataV1_Wrapper ipimbData() const { return Ipimb::DataV1_Wrapper(const_cast<Psana::Ipimb::DataV1*>(&o->ipimbData())); }
  const Ipimb::ConfigV1_Wrapper ipimbConfig() const { return Ipimb::ConfigV1_Wrapper(const_cast<Psana::Ipimb::ConfigV1*>(&o->ipimbConfig())); }
  const Lusi::IpmFexV1_Wrapper ipmFexData() const { return Lusi::IpmFexV1_Wrapper(const_cast<Psana::Lusi::IpmFexV1*>(&o->ipmFexData())); }
};

class BldDataIpimbV1_Wrapper {
  shared_ptr<Psana::Bld::BldDataIpimbV1> _o;
  Psana::Bld::BldDataIpimbV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 1 };
  BldDataIpimbV1_Wrapper(shared_ptr<Psana::Bld::BldDataIpimbV1> obj) : _o(obj), o(_o.get()) {}
  BldDataIpimbV1_Wrapper(Psana::Bld::BldDataIpimbV1* obj) : o(obj) {}
  const Ipimb::DataV2_Wrapper ipimbData() const { return Ipimb::DataV2_Wrapper(const_cast<Psana::Ipimb::DataV2*>(&o->ipimbData())); }
  const Ipimb::ConfigV2_Wrapper ipimbConfig() const { return Ipimb::ConfigV2_Wrapper(const_cast<Psana::Ipimb::ConfigV2*>(&o->ipimbConfig())); }
  const Lusi::IpmFexV1_Wrapper ipmFexData() const { return Lusi::IpmFexV1_Wrapper(const_cast<Psana::Lusi::IpmFexV1*>(&o->ipmFexData())); }
};

class BldDataPimV1_Wrapper {
  shared_ptr<Psana::Bld::BldDataPimV1> _o;
  Psana::Bld::BldDataPimV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_SharedPim };
  enum { Version = 1 };
  BldDataPimV1_Wrapper(shared_ptr<Psana::Bld::BldDataPimV1> obj) : _o(obj), o(_o.get()) {}
  BldDataPimV1_Wrapper(Psana::Bld::BldDataPimV1* obj) : o(obj) {}
  const Pulnix::TM6740ConfigV2_Wrapper camConfig() const { return Pulnix::TM6740ConfigV2_Wrapper(const_cast<Psana::Pulnix::TM6740ConfigV2*>(&o->camConfig())); }
  const Lusi::PimImageConfigV1_Wrapper pimConfig() const { return Lusi::PimImageConfigV1_Wrapper(const_cast<Psana::Lusi::PimImageConfigV1*>(&o->pimConfig())); }
  const Camera::FrameV1_Wrapper frame() const { return Camera::FrameV1_Wrapper(const_cast<Psana::Camera::FrameV1*>(&o->frame())); }
};

class BldDataGMDV0_Wrapper {
  shared_ptr<Psana::Bld::BldDataGMDV0> _o;
  Psana::Bld::BldDataGMDV0* o;
public:
  enum { TypeId = Pds::TypeId::Id_GMD };
  enum { Version = 1 };
  BldDataGMDV0_Wrapper(shared_ptr<Psana::Bld::BldDataGMDV0> obj) : _o(obj), o(_o.get()) {}
  BldDataGMDV0_Wrapper(Psana::Bld::BldDataGMDV0* obj) : o(obj) {}
  const char* gasType() const { return o->gasType(); }
  double pressure() const { return o->pressure(); }
  double temperature() const { return o->temperature(); }
  double current() const { return o->current(); }
  int32_t hvMeshElectron() const { return o->hvMeshElectron(); }
  int32_t hvMeshIon() const { return o->hvMeshIon(); }
  int32_t hvMultIon() const { return o->hvMultIon(); }
  double chargeQ() const { return o->chargeQ(); }
  double photonEnergy() const { return o->photonEnergy(); }
  double photonsPerPulse() const { return o->photonsPerPulse(); }
};

  class BldDataFEEGasDetEnergy_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataFEEGasDetEnergy";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataFEEGasDetEnergy::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataFEEGasDetEnergy_Wrapper(result)) : object();
    }
  };

  class BldDataEBeamV0_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataEBeamV0";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataEBeamV0::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataEBeamV0> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataEBeamV0_Wrapper(result)) : object();
    }
  };

  class BldDataEBeamV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataEBeamV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataEBeamV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataEBeamV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataEBeamV1_Wrapper(result)) : object();
    }
  };

  class BldDataEBeamV2_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataEBeamV2";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataEBeamV2::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataEBeamV2> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataEBeamV2_Wrapper(result)) : object();
    }
  };

  class BldDataEBeamV3_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataEBeamV3";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataEBeamV3::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataEBeamV3> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataEBeamV3_Wrapper(result)) : object();
    }
  };

  class BldDataPhaseCavity_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataPhaseCavity";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataPhaseCavity::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataPhaseCavity> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataPhaseCavity_Wrapper(result)) : object();
    }
  };

  class BldDataIpimbV0_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataIpimbV0";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataIpimbV0::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataIpimbV0> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataIpimbV0_Wrapper(result)) : object();
    }
  };

  class BldDataIpimbV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataIpimbV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataIpimbV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataIpimbV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataIpimbV1_Wrapper(result)) : object();
    }
  };

  class BldDataPimV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataPimV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataPimV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataPimV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataPimV1_Wrapper(result)) : object();
    }
  };

  class BldDataGMDV0_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Bld::BldDataGMDV0";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Bld::BldDataGMDV0::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Bld::BldDataGMDV0> result = evt.get(source, key, foundSrc);
      return result.get() ? object(BldDataGMDV0_Wrapper(result)) : object();
    }
  };
} // namespace Bld
} // namespace psddl_python
#endif // PSDDL_PYTHON_BLD_DDL_WRAPPER_H
