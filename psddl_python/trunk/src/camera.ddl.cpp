/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/camera.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Camera {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Camera", 0, "The Python wrapper module for Camera types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Camera", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Camera::FrameCoord >("FrameCoord", no_init)
    .def("column", &Psana::Camera::FrameCoord::column)
    .def("row", &Psana::Camera::FrameCoord::row)
    .def("__typeid__", &method_typeid<Psana::Camera::FrameCoord>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Camera::FrameCoord> >(-1, -1));

  class_<Psana::Camera::FrameFccdConfigV1, boost::shared_ptr<Psana::Camera::FrameFccdConfigV1>, boost::noncopyable >("FrameFccdConfigV1", no_init)
    .def("__typeid__", &method_typeid<Psana::Camera::FrameFccdConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameFccdConfigV1> >(Pds::TypeId::Id_FrameFccdConfig, 1));

  class_<Psana::Camera::FrameFexConfigV1, boost::shared_ptr<Psana::Camera::FrameFexConfigV1>, boost::noncopyable >("FrameFexConfigV1", no_init)
    .def("forwarding", &Psana::Camera::FrameFexConfigV1::forwarding)
    .def("forward_prescale", &Psana::Camera::FrameFexConfigV1::forward_prescale)
    .def("processing", &Psana::Camera::FrameFexConfigV1::processing)
    .def("roiBegin", &Psana::Camera::FrameFexConfigV1::roiBegin, return_value_policy<copy_const_reference>())
    .def("roiEnd", &Psana::Camera::FrameFexConfigV1::roiEnd, return_value_policy<copy_const_reference>())
    .def("threshold", &Psana::Camera::FrameFexConfigV1::threshold)
    .def("number_of_masked_pixels", &Psana::Camera::FrameFexConfigV1::number_of_masked_pixels)
    .def("masked_pixel_coordinates", &Psana::Camera::FrameFexConfigV1::masked_pixel_coordinates)
    .def("__typeid__", &method_typeid<Psana::Camera::FrameFexConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameFexConfigV1> >(Pds::TypeId::Id_FrameFexConfig, 1));

  class_<Psana::Camera::FrameV1, boost::shared_ptr<Psana::Camera::FrameV1>, boost::noncopyable >("FrameV1", no_init)
    .def("width", &Psana::Camera::FrameV1::width)
    .def("height", &Psana::Camera::FrameV1::height)
    .def("depth", &Psana::Camera::FrameV1::depth)
    .def("offset", &Psana::Camera::FrameV1::offset)
    .def("_int_pixel_data", &Psana::Camera::FrameV1::_int_pixel_data)
    .def("data8", &Psana::Camera::FrameV1::data8)
    .def("data16", &Psana::Camera::FrameV1::data16)
    .def("__typeid__", &method_typeid<Psana::Camera::FrameV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameV1> >(Pds::TypeId::Id_Frame, 1));

  class_<Psana::Camera::TwoDGaussianV1, boost::shared_ptr<Psana::Camera::TwoDGaussianV1>, boost::noncopyable >("TwoDGaussianV1", no_init)
    .def("integral", &Psana::Camera::TwoDGaussianV1::integral)
    .def("xmean", &Psana::Camera::TwoDGaussianV1::xmean)
    .def("ymean", &Psana::Camera::TwoDGaussianV1::ymean)
    .def("major_axis_width", &Psana::Camera::TwoDGaussianV1::major_axis_width)
    .def("minor_axis_width", &Psana::Camera::TwoDGaussianV1::minor_axis_width)
    .def("major_axis_tilt", &Psana::Camera::TwoDGaussianV1::major_axis_tilt)
    .def("__typeid__", &method_typeid<Psana::Camera::TwoDGaussianV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::TwoDGaussianV1> >(Pds::TypeId::Id_TwoDGaussian, 1));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameFexConfigV1"));
    PyObject_SetAttrString(submodule, "FrameFexConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameV1"));
    PyObject_SetAttrString(submodule, "Frame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameFccdConfigV1"));
    PyObject_SetAttrString(submodule, "FrameFccdConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TwoDGaussianV1"));
    PyObject_SetAttrString(submodule, "TwoDGaussian", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::Camera::FrameCoord>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 2>();

} // createWrappers()
} // namespace Camera
} // namespace psddl_python
