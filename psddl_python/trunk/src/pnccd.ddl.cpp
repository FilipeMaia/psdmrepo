/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/pnccd.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace PNCCD {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.PNCCD", 0, "The Python wrapper module for PNCCD types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "PNCCD", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::PNCCD::ConfigV1, boost::shared_ptr<Psana::PNCCD::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("numLinks", &Psana::PNCCD::ConfigV1::numLinks)
    .def("payloadSizePerLink", &Psana::PNCCD::ConfigV1::payloadSizePerLink)
    .def("__typeid__", &method_typeid<Psana::PNCCD::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::PNCCD::ConfigV1> >(Pds::TypeId::Id_pnCCDconfig, 1));

  class_<Psana::PNCCD::ConfigV2, boost::shared_ptr<Psana::PNCCD::ConfigV2>, boost::noncopyable >("ConfigV2", no_init)
    .def("numLinks", &Psana::PNCCD::ConfigV2::numLinks)
    .def("payloadSizePerLink", &Psana::PNCCD::ConfigV2::payloadSizePerLink)
    .def("numChannels", &Psana::PNCCD::ConfigV2::numChannels)
    .def("numRows", &Psana::PNCCD::ConfigV2::numRows)
    .def("numSubmoduleChannels", &Psana::PNCCD::ConfigV2::numSubmoduleChannels)
    .def("numSubmoduleRows", &Psana::PNCCD::ConfigV2::numSubmoduleRows)
    .def("numSubmodules", &Psana::PNCCD::ConfigV2::numSubmodules)
    .def("camexMagic", &Psana::PNCCD::ConfigV2::camexMagic)
    .def("info", &Psana::PNCCD::ConfigV2::info)
    .def("timingFName", &Psana::PNCCD::ConfigV2::timingFName)
    .def("info_shape", &method_shape<Psana::PNCCD::ConfigV2, &Psana::PNCCD::ConfigV2::info_shape>)
    .def("timingFName_shape", &method_shape<Psana::PNCCD::ConfigV2, &Psana::PNCCD::ConfigV2::timingFName_shape>)
    .def("__typeid__", &method_typeid<Psana::PNCCD::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::PNCCD::ConfigV2> >(Pds::TypeId::Id_pnCCDconfig, 2));

  class_<Psana::PNCCD::FrameV1, boost::shared_ptr<Psana::PNCCD::FrameV1>, boost::noncopyable >("FrameV1", no_init)
    .def("specialWord", &Psana::PNCCD::FrameV1::specialWord)
    .def("frameNumber", &Psana::PNCCD::FrameV1::frameNumber)
    .def("timeStampHi", &Psana::PNCCD::FrameV1::timeStampHi)
    .def("timeStampLo", &Psana::PNCCD::FrameV1::timeStampLo)
    .def("_data", &Psana::PNCCD::FrameV1::_data)
    .def("data", &Psana::PNCCD::FrameV1::data)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FrameV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::PNCCD::FrameV1> >(-1, -1));

  class_<Psana::PNCCD::FullFrameV1, boost::shared_ptr<Psana::PNCCD::FullFrameV1>, boost::noncopyable >("FullFrameV1", no_init)
    .def("specialWord", &Psana::PNCCD::FullFrameV1::specialWord)
    .def("frameNumber", &Psana::PNCCD::FullFrameV1::frameNumber)
    .def("timeStampHi", &Psana::PNCCD::FullFrameV1::timeStampHi)
    .def("timeStampLo", &Psana::PNCCD::FullFrameV1::timeStampLo)
    .def("data", &Psana::PNCCD::FullFrameV1::data)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FullFrameV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::PNCCD::FullFrameV1> >(Pds::TypeId::Id_pnCCDframe, 1));

  class_<Psana::PNCCD::FramesV1, boost::shared_ptr<Psana::PNCCD::FramesV1>, boost::noncopyable >("FramesV1", no_init)
    .def("frame", &Psana::PNCCD::FramesV1::frame, return_internal_reference<>())
    .def("numLinks", &Psana::PNCCD::FramesV1::numLinks)
    .def("frame_shape", &method_shape<Psana::PNCCD::FramesV1, &Psana::PNCCD::FramesV1::frame_shape>)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FramesV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::PNCCD::FramesV1> >(Pds::TypeId::Id_pnCCDframe, 1));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FramesV1"));
    PyObject_SetAttrString(submodule, "Frames", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FullFrameV1"));
    PyObject_SetAttrString(submodule, "FullFrame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace PNCCD
} // namespace psddl_python
