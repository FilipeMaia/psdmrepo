/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/encoder.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Encoder {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Encoder", 0, "The Python wrapper module for Encoder types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Encoder", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Encoder::ConfigV1, boost::shared_ptr<Psana::Encoder::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("chan_num", &Psana::Encoder::ConfigV1::chan_num)
    .def("count_mode", &Psana::Encoder::ConfigV1::count_mode)
    .def("quadrature_mode", &Psana::Encoder::ConfigV1::quadrature_mode)
    .def("input_num", &Psana::Encoder::ConfigV1::input_num)
    .def("input_rising", &Psana::Encoder::ConfigV1::input_rising)
    .def("ticks_per_sec", &Psana::Encoder::ConfigV1::ticks_per_sec)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Encoder::ConfigV1> >(Pds::TypeId::Id_EncoderConfig));

  class_<Psana::Encoder::ConfigV2, boost::shared_ptr<Psana::Encoder::ConfigV2>, boost::noncopyable >("ConfigV2", no_init)
    .def("chan_mask", &Psana::Encoder::ConfigV2::chan_mask)
    .def("count_mode", &Psana::Encoder::ConfigV2::count_mode)
    .def("quadrature_mode", &Psana::Encoder::ConfigV2::quadrature_mode)
    .def("input_num", &Psana::Encoder::ConfigV2::input_num)
    .def("input_rising", &Psana::Encoder::ConfigV2::input_rising)
    .def("ticks_per_sec", &Psana::Encoder::ConfigV2::ticks_per_sec)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Encoder::ConfigV2> >(Pds::TypeId::Id_EncoderConfig));

  class_<Psana::Encoder::DataV1, boost::shared_ptr<Psana::Encoder::DataV1>, boost::noncopyable >("DataV1", no_init)
    .def("timestamp", &Psana::Encoder::DataV1::timestamp)
    .def("encoder_count", &Psana::Encoder::DataV1::encoder_count)
    .def("value", &Psana::Encoder::DataV1::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Encoder::DataV1> >(Pds::TypeId::Id_EncoderData));

  class_<Psana::Encoder::DataV2, boost::shared_ptr<Psana::Encoder::DataV2>, boost::noncopyable >("DataV2", no_init)
    .def("timestamp", &Psana::Encoder::DataV2::timestamp)
    .def("encoder_count", &Psana::Encoder::DataV2::encoder_count)
    .def("value", &Psana::Encoder::DataV2::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Encoder::DataV2> >(Pds::TypeId::Id_EncoderData));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "DataV2"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 1>();

} // createWrappers()
} // namespace Encoder
} // namespace psddl_python
