/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/gsc16ai.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Gsc16ai {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Gsc16ai", 0, "The Python wrapper module for Gsc16ai types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Gsc16ai", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Gsc16ai::ConfigV1, boost::shared_ptr<Psana::Gsc16ai::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("voltageRange", &Psana::Gsc16ai::ConfigV1::voltageRange)
    .def("firstChan", &Psana::Gsc16ai::ConfigV1::firstChan)
    .def("lastChan", &Psana::Gsc16ai::ConfigV1::lastChan)
    .def("inputMode", &Psana::Gsc16ai::ConfigV1::inputMode)
    .def("triggerMode", &Psana::Gsc16ai::ConfigV1::triggerMode)
    .def("dataFormat", &Psana::Gsc16ai::ConfigV1::dataFormat)
    .def("fps", &Psana::Gsc16ai::ConfigV1::fps)
    .def("autocalibEnable", &Psana::Gsc16ai::ConfigV1::autocalibEnable)
    .def("timeTagEnable", &Psana::Gsc16ai::ConfigV1::timeTagEnable)
    .def("numChannels", &Psana::Gsc16ai::ConfigV1::numChannels)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Gsc16ai::ConfigV1> >(Pds::TypeId::Id_Gsc16aiConfig));

  class_<Psana::Gsc16ai::DataV1, boost::shared_ptr<Psana::Gsc16ai::DataV1>, boost::noncopyable >("DataV1", no_init)
    .def("timestamp", &Psana::Gsc16ai::DataV1::timestamp)
    .def("channelValue", &Psana::Gsc16ai::DataV1::channelValue)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Gsc16ai::DataV1> >(Pds::TypeId::Id_Gsc16aiData));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace Gsc16ai
} // namespace psddl_python
