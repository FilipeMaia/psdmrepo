/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/control.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace ControlData {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.ControlData", 0, "The Python wrapper module for ControlData types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "ControlData", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::ControlData::PVControl>("PVControl", no_init)
    .def("name", &Psana::ControlData::PVControl::name)
    .def("index", &Psana::ControlData::PVControl::index)
    .def("value", &Psana::ControlData::PVControl::value)
    .def("array", &Psana::ControlData::PVControl::array)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVControl>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVControl> >(-1, -1));

  class_<Psana::ControlData::PVMonitor>("PVMonitor", no_init)
    .def("name", &Psana::ControlData::PVMonitor::name)
    .def("index", &Psana::ControlData::PVMonitor::index)
    .def("loValue", &Psana::ControlData::PVMonitor::loValue)
    .def("hiValue", &Psana::ControlData::PVMonitor::hiValue)
    .def("array", &Psana::ControlData::PVMonitor::array)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVMonitor>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVMonitor> >(-1, -1));

  class_<Psana::ControlData::PVLabel>("PVLabel", no_init)
    .def("name", &Psana::ControlData::PVLabel::name)
    .def("value", &Psana::ControlData::PVLabel::value)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVLabel>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVLabel> >(-1, -1));

  class_<psddl_python::ControlData::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("events", &psddl_python::ControlData::ConfigV1_Wrapper::events)
    .def("uses_duration", &psddl_python::ControlData::ConfigV1_Wrapper::uses_duration)
    .def("uses_events", &psddl_python::ControlData::ConfigV1_Wrapper::uses_events)
    .def("duration", &psddl_python::ControlData::ConfigV1_Wrapper::duration, return_value_policy<copy_const_reference>())
    .def("npvControls", &psddl_python::ControlData::ConfigV1_Wrapper::npvControls)
    .def("npvMonitors", &psddl_python::ControlData::ConfigV1_Wrapper::npvMonitors)
    .def("pvControls", &psddl_python::ControlData::ConfigV1_Wrapper::pvControls)
    .def("pvMonitors", &psddl_python::ControlData::ConfigV1_Wrapper::pvMonitors)
    .def("__typeid__", &method_typeid<Psana::ControlData::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::ControlData::ConfigV1, psddl_python::ControlData::ConfigV1_Wrapper> >(Pds::TypeId::Id_ControlConfig, 1));

  class_<psddl_python::ControlData::ConfigV2_Wrapper>("ConfigV2", no_init)
    .def("events", &psddl_python::ControlData::ConfigV2_Wrapper::events)
    .def("uses_duration", &psddl_python::ControlData::ConfigV2_Wrapper::uses_duration)
    .def("uses_events", &psddl_python::ControlData::ConfigV2_Wrapper::uses_events)
    .def("duration", &psddl_python::ControlData::ConfigV2_Wrapper::duration, return_value_policy<copy_const_reference>())
    .def("npvControls", &psddl_python::ControlData::ConfigV2_Wrapper::npvControls)
    .def("npvMonitors", &psddl_python::ControlData::ConfigV2_Wrapper::npvMonitors)
    .def("npvLabels", &psddl_python::ControlData::ConfigV2_Wrapper::npvLabels)
    .def("pvControls", &psddl_python::ControlData::ConfigV2_Wrapper::pvControls)
    .def("pvMonitors", &psddl_python::ControlData::ConfigV2_Wrapper::pvMonitors)
    .def("pvLabels", &psddl_python::ControlData::ConfigV2_Wrapper::pvLabels)
    .def("__typeid__", &method_typeid<Psana::ControlData::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::ControlData::ConfigV2, psddl_python::ControlData::ConfigV2_Wrapper> >(Pds::TypeId::Id_ControlConfig, 2));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace ControlData
} // namespace psddl_python
