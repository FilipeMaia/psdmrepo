/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/rayonix.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Rayonix {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Rayonix", 0, "The Python wrapper module for Rayonix types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Rayonix", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Rayonix::ConfigV1, boost::shared_ptr<Psana::Rayonix::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("binning_f", &Psana::Rayonix::ConfigV1::binning_f)
    .def("binning_s", &Psana::Rayonix::ConfigV1::binning_s)
    .def("exposure", &Psana::Rayonix::ConfigV1::exposure)
    .def("trigger", &Psana::Rayonix::ConfigV1::trigger)
    .def("rawMode", &Psana::Rayonix::ConfigV1::rawMode)
    .def("darkFlag", &Psana::Rayonix::ConfigV1::darkFlag)
    .def("readoutMode", &Psana::Rayonix::ConfigV1::readoutMode)
    .def("deviceID", &Psana::Rayonix::ConfigV1::deviceID)
  ;

  enum_<Psana::Rayonix::ConfigV1::ReadoutMode>("ReadoutMode")
    .value("Standard",Psana::Rayonix::ConfigV1::Standard)
    .value("HighGain",Psana::Rayonix::ConfigV1::HighGain)
    .value("LowNoise",Psana::Rayonix::ConfigV1::LowNoise)
    .value("EDR",Psana::Rayonix::ConfigV1::EDR)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_RayonixConfig);
  scope().attr("DeviceIDMax")=40;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Rayonix::ConfigV1> >(Pds::TypeId::Id_RayonixConfig));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Rayonix
} // namespace psddl_python
