/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/cspad.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace CsPad {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.CsPad", 0, "The Python wrapper module for CsPad types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "CsPad", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::CsPad::CsPadDigitalPotsCfg, boost::shared_ptr<Psana::CsPad::CsPadDigitalPotsCfg>, boost::noncopyable >("CsPadDigitalPotsCfg", no_init)
    .def("pots", &Psana::CsPad::CsPadDigitalPotsCfg::pots)
    .def("__typeid__", &method_typeid<Psana::CsPad::CsPadDigitalPotsCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::CsPadDigitalPotsCfg> >(-1, -1));

  class_<Psana::CsPad::CsPadReadOnlyCfg >("CsPadReadOnlyCfg", no_init)
    .def("shiftTest", &Psana::CsPad::CsPadReadOnlyCfg::shiftTest)
    .def("version", &Psana::CsPad::CsPadReadOnlyCfg::version)
    .def("__typeid__", &method_typeid<Psana::CsPad::CsPadReadOnlyCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::CsPad::CsPadReadOnlyCfg> >(-1, -1));

  class_<Psana::CsPad::ProtectionSystemThreshold >("ProtectionSystemThreshold", no_init)
    .def("adcThreshold", &Psana::CsPad::ProtectionSystemThreshold::adcThreshold)
    .def("pixelCountThreshold", &Psana::CsPad::ProtectionSystemThreshold::pixelCountThreshold)
    .def("__typeid__", &method_typeid<Psana::CsPad::ProtectionSystemThreshold>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::CsPad::ProtectionSystemThreshold> >(-1, -1));

  class_<Psana::CsPad::CsPadGainMapCfg, boost::shared_ptr<Psana::CsPad::CsPadGainMapCfg>, boost::noncopyable >("CsPadGainMapCfg", no_init)
    .def("gainMap", &Psana::CsPad::CsPadGainMapCfg::gainMap)
    .def("__typeid__", &method_typeid<Psana::CsPad::CsPadGainMapCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::CsPadGainMapCfg> >(-1, -1));

  class_<Psana::CsPad::ConfigV1QuadReg, boost::shared_ptr<Psana::CsPad::ConfigV1QuadReg>, boost::noncopyable >("ConfigV1QuadReg", no_init)
    .def("shiftSelect", &Psana::CsPad::ConfigV1QuadReg::shiftSelect)
    .def("edgeSelect", &Psana::CsPad::ConfigV1QuadReg::edgeSelect)
    .def("readClkSet", &Psana::CsPad::ConfigV1QuadReg::readClkSet)
    .def("readClkHold", &Psana::CsPad::ConfigV1QuadReg::readClkHold)
    .def("dataMode", &Psana::CsPad::ConfigV1QuadReg::dataMode)
    .def("prstSel", &Psana::CsPad::ConfigV1QuadReg::prstSel)
    .def("acqDelay", &Psana::CsPad::ConfigV1QuadReg::acqDelay)
    .def("intTime", &Psana::CsPad::ConfigV1QuadReg::intTime)
    .def("digDelay", &Psana::CsPad::ConfigV1QuadReg::digDelay)
    .def("ampIdle", &Psana::CsPad::ConfigV1QuadReg::ampIdle)
    .def("injTotal", &Psana::CsPad::ConfigV1QuadReg::injTotal)
    .def("rowColShiftPer", &Psana::CsPad::ConfigV1QuadReg::rowColShiftPer)
    .def("ro", &Psana::CsPad::ConfigV1QuadReg::ro, return_value_policy<copy_const_reference>())
    .def("dp", &Psana::CsPad::ConfigV1QuadReg::dp, return_value_policy<copy_const_reference>())
    .def("gm", &Psana::CsPad::ConfigV1QuadReg::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV1QuadReg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV1QuadReg> >(-1, -1));

  class_<Psana::CsPad::ConfigV2QuadReg, boost::shared_ptr<Psana::CsPad::ConfigV2QuadReg>, boost::noncopyable >("ConfigV2QuadReg", no_init)
    .def("shiftSelect", &Psana::CsPad::ConfigV2QuadReg::shiftSelect)
    .def("edgeSelect", &Psana::CsPad::ConfigV2QuadReg::edgeSelect)
    .def("readClkSet", &Psana::CsPad::ConfigV2QuadReg::readClkSet)
    .def("readClkHold", &Psana::CsPad::ConfigV2QuadReg::readClkHold)
    .def("dataMode", &Psana::CsPad::ConfigV2QuadReg::dataMode)
    .def("prstSel", &Psana::CsPad::ConfigV2QuadReg::prstSel)
    .def("acqDelay", &Psana::CsPad::ConfigV2QuadReg::acqDelay)
    .def("intTime", &Psana::CsPad::ConfigV2QuadReg::intTime)
    .def("digDelay", &Psana::CsPad::ConfigV2QuadReg::digDelay)
    .def("ampIdle", &Psana::CsPad::ConfigV2QuadReg::ampIdle)
    .def("injTotal", &Psana::CsPad::ConfigV2QuadReg::injTotal)
    .def("rowColShiftPer", &Psana::CsPad::ConfigV2QuadReg::rowColShiftPer)
    .def("ampReset", &Psana::CsPad::ConfigV2QuadReg::ampReset)
    .def("digCount", &Psana::CsPad::ConfigV2QuadReg::digCount)
    .def("digPeriod", &Psana::CsPad::ConfigV2QuadReg::digPeriod)
    .def("ro", &Psana::CsPad::ConfigV2QuadReg::ro, return_value_policy<copy_const_reference>())
    .def("dp", &Psana::CsPad::ConfigV2QuadReg::dp, return_value_policy<copy_const_reference>())
    .def("gm", &Psana::CsPad::ConfigV2QuadReg::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV2QuadReg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV2QuadReg> >(-1, -1));

  class_<Psana::CsPad::ConfigV1, boost::shared_ptr<Psana::CsPad::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("concentratorVersion", &Psana::CsPad::ConfigV1::concentratorVersion)
    .def("runDelay", &Psana::CsPad::ConfigV1::runDelay)
    .def("eventCode", &Psana::CsPad::ConfigV1::eventCode)
    .def("inactiveRunMode", &Psana::CsPad::ConfigV1::inactiveRunMode)
    .def("activeRunMode", &Psana::CsPad::ConfigV1::activeRunMode)
    .def("tdi", &Psana::CsPad::ConfigV1::tdi)
    .def("payloadSize", &Psana::CsPad::ConfigV1::payloadSize)
    .def("badAsicMask0", &Psana::CsPad::ConfigV1::badAsicMask0)
    .def("badAsicMask1", &Psana::CsPad::ConfigV1::badAsicMask1)
    .def("asicMask", &Psana::CsPad::ConfigV1::asicMask)
    .def("quadMask", &Psana::CsPad::ConfigV1::quadMask)
    .def("quads", &Psana::CsPad::ConfigV1::quads, return_internal_reference<>())
    .def("numAsicsRead", &Psana::CsPad::ConfigV1::numAsicsRead)
    .def("numQuads", &Psana::CsPad::ConfigV1::numQuads)
    .def("numSect", &Psana::CsPad::ConfigV1::numSect)
    .def("quads_shape", &method_shape<Psana::CsPad::ConfigV1, &Psana::CsPad::ConfigV1::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV1> >(Pds::TypeId::Id_CspadConfig, 1));

  class_<Psana::CsPad::ConfigV2, boost::shared_ptr<Psana::CsPad::ConfigV2>, boost::noncopyable >("ConfigV2", no_init)
    .def("concentratorVersion", &Psana::CsPad::ConfigV2::concentratorVersion)
    .def("runDelay", &Psana::CsPad::ConfigV2::runDelay)
    .def("eventCode", &Psana::CsPad::ConfigV2::eventCode)
    .def("inactiveRunMode", &Psana::CsPad::ConfigV2::inactiveRunMode)
    .def("activeRunMode", &Psana::CsPad::ConfigV2::activeRunMode)
    .def("tdi", &Psana::CsPad::ConfigV2::tdi)
    .def("payloadSize", &Psana::CsPad::ConfigV2::payloadSize)
    .def("badAsicMask0", &Psana::CsPad::ConfigV2::badAsicMask0)
    .def("badAsicMask1", &Psana::CsPad::ConfigV2::badAsicMask1)
    .def("asicMask", &Psana::CsPad::ConfigV2::asicMask)
    .def("quadMask", &Psana::CsPad::ConfigV2::quadMask)
    .def("quads", &Psana::CsPad::ConfigV2::quads, return_internal_reference<>())
    .def("numAsicsRead", &Psana::CsPad::ConfigV2::numAsicsRead)
    .def("roiMask", &Psana::CsPad::ConfigV2::roiMask)
    .def("numAsicsStored", &Psana::CsPad::ConfigV2::numAsicsStored)
    .def("numQuads", &Psana::CsPad::ConfigV2::numQuads)
    .def("numSect", &Psana::CsPad::ConfigV2::numSect)
    .def("quads_shape", &method_shape<Psana::CsPad::ConfigV2, &Psana::CsPad::ConfigV2::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV2> >(Pds::TypeId::Id_CspadConfig, 2));

  class_<Psana::CsPad::ConfigV3, boost::shared_ptr<Psana::CsPad::ConfigV3>, boost::noncopyable >("ConfigV3", no_init)
    .def("concentratorVersion", &Psana::CsPad::ConfigV3::concentratorVersion)
    .def("runDelay", &Psana::CsPad::ConfigV3::runDelay)
    .def("eventCode", &Psana::CsPad::ConfigV3::eventCode)
    .def("protectionThresholds", &Psana::CsPad::ConfigV3::protectionThresholds)
    .def("protectionEnable", &Psana::CsPad::ConfigV3::protectionEnable)
    .def("inactiveRunMode", &Psana::CsPad::ConfigV3::inactiveRunMode)
    .def("activeRunMode", &Psana::CsPad::ConfigV3::activeRunMode)
    .def("tdi", &Psana::CsPad::ConfigV3::tdi)
    .def("payloadSize", &Psana::CsPad::ConfigV3::payloadSize)
    .def("badAsicMask0", &Psana::CsPad::ConfigV3::badAsicMask0)
    .def("badAsicMask1", &Psana::CsPad::ConfigV3::badAsicMask1)
    .def("asicMask", &Psana::CsPad::ConfigV3::asicMask)
    .def("quadMask", &Psana::CsPad::ConfigV3::quadMask)
    .def("quads", &Psana::CsPad::ConfigV3::quads, return_internal_reference<>())
    .def("numAsicsRead", &Psana::CsPad::ConfigV3::numAsicsRead)
    .def("roiMask", &Psana::CsPad::ConfigV3::roiMask)
    .def("numAsicsStored", &Psana::CsPad::ConfigV3::numAsicsStored)
    .def("numQuads", &Psana::CsPad::ConfigV3::numQuads)
    .def("numSect", &Psana::CsPad::ConfigV3::numSect)
    .def("quads_shape", &method_shape<Psana::CsPad::ConfigV3, &Psana::CsPad::ConfigV3::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV3>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV3> >(Pds::TypeId::Id_CspadConfig, 3));

  class_<Psana::CsPad::ConfigV4, boost::shared_ptr<Psana::CsPad::ConfigV4>, boost::noncopyable >("ConfigV4", no_init)
    .def("concentratorVersion", &Psana::CsPad::ConfigV4::concentratorVersion)
    .def("runDelay", &Psana::CsPad::ConfigV4::runDelay)
    .def("eventCode", &Psana::CsPad::ConfigV4::eventCode)
    .def("protectionThresholds", &Psana::CsPad::ConfigV4::protectionThresholds)
    .def("protectionEnable", &Psana::CsPad::ConfigV4::protectionEnable)
    .def("inactiveRunMode", &Psana::CsPad::ConfigV4::inactiveRunMode)
    .def("activeRunMode", &Psana::CsPad::ConfigV4::activeRunMode)
    .def("tdi", &Psana::CsPad::ConfigV4::tdi)
    .def("payloadSize", &Psana::CsPad::ConfigV4::payloadSize)
    .def("badAsicMask0", &Psana::CsPad::ConfigV4::badAsicMask0)
    .def("badAsicMask1", &Psana::CsPad::ConfigV4::badAsicMask1)
    .def("asicMask", &Psana::CsPad::ConfigV4::asicMask)
    .def("quadMask", &Psana::CsPad::ConfigV4::quadMask)
    .def("quads", &Psana::CsPad::ConfigV4::quads, return_internal_reference<>())
    .def("numAsicsRead", &Psana::CsPad::ConfigV4::numAsicsRead)
    .def("roiMask", &Psana::CsPad::ConfigV4::roiMask)
    .def("numAsicsStored", &Psana::CsPad::ConfigV4::numAsicsStored)
    .def("numQuads", &Psana::CsPad::ConfigV4::numQuads)
    .def("numSect", &Psana::CsPad::ConfigV4::numSect)
    .def("quads_shape", &method_shape<Psana::CsPad::ConfigV4, &Psana::CsPad::ConfigV4::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::ConfigV4>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ConfigV4> >(Pds::TypeId::Id_CspadConfig, 4));

  class_<Psana::CsPad::ElementV1, boost::shared_ptr<Psana::CsPad::ElementV1>, boost::noncopyable >("ElementV1", no_init)
    .def("virtual_channel", &Psana::CsPad::ElementV1::virtual_channel)
    .def("lane", &Psana::CsPad::ElementV1::lane)
    .def("tid", &Psana::CsPad::ElementV1::tid)
    .def("acq_count", &Psana::CsPad::ElementV1::acq_count)
    .def("op_code", &Psana::CsPad::ElementV1::op_code)
    .def("quad", &Psana::CsPad::ElementV1::quad)
    .def("seq_count", &Psana::CsPad::ElementV1::seq_count)
    .def("ticks", &Psana::CsPad::ElementV1::ticks)
    .def("fiducials", &Psana::CsPad::ElementV1::fiducials)
    .def("sb_temp", &Psana::CsPad::ElementV1::sb_temp)
    .def("frame_type", &Psana::CsPad::ElementV1::frame_type)
    .def("data", &Psana::CsPad::ElementV1::data)
    .def("sectionMask", &Psana::CsPad::ElementV1::sectionMask)
    .def("common_mode", &Psana::CsPad::ElementV1::common_mode)
    .def("__typeid__", &method_typeid<Psana::CsPad::ElementV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ElementV1> >(-1, -1));

  class_<Psana::CsPad::DataV1, boost::shared_ptr<Psana::CsPad::DataV1>, boost::noncopyable >("DataV1", no_init)
    .def("quads", &Psana::CsPad::DataV1::quads, return_internal_reference<>())
    .def("quads_shape", &method_shape<Psana::CsPad::DataV1, &Psana::CsPad::DataV1::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::DataV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::DataV1> >(Pds::TypeId::Id_CspadElement, 1));

  class_<Psana::CsPad::ElementV2, boost::shared_ptr<Psana::CsPad::ElementV2>, boost::noncopyable >("ElementV2", no_init)
    .def("virtual_channel", &Psana::CsPad::ElementV2::virtual_channel)
    .def("lane", &Psana::CsPad::ElementV2::lane)
    .def("tid", &Psana::CsPad::ElementV2::tid)
    .def("acq_count", &Psana::CsPad::ElementV2::acq_count)
    .def("op_code", &Psana::CsPad::ElementV2::op_code)
    .def("quad", &Psana::CsPad::ElementV2::quad)
    .def("seq_count", &Psana::CsPad::ElementV2::seq_count)
    .def("ticks", &Psana::CsPad::ElementV2::ticks)
    .def("fiducials", &Psana::CsPad::ElementV2::fiducials)
    .def("sb_temp", &Psana::CsPad::ElementV2::sb_temp)
    .def("frame_type", &Psana::CsPad::ElementV2::frame_type)
    .def("data", &Psana::CsPad::ElementV2::data)
    .def("sectionMask", &Psana::CsPad::ElementV2::sectionMask)
    .def("common_mode", &Psana::CsPad::ElementV2::common_mode)
    .def("__typeid__", &method_typeid<Psana::CsPad::ElementV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::ElementV2> >(-1, -1));

  class_<Psana::CsPad::DataV2, boost::shared_ptr<Psana::CsPad::DataV2>, boost::noncopyable >("DataV2", no_init)
    .def("quads", &Psana::CsPad::DataV2::quads, return_internal_reference<>())
    .def("quads_shape", &method_shape<Psana::CsPad::DataV2, &Psana::CsPad::DataV2::quads_shape>)
    .def("__typeid__", &method_typeid<Psana::CsPad::DataV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::CsPad::DataV2> >(Pds::TypeId::Id_CspadElement, 2));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "DataV2"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(4);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "ConfigV3"));
    PyList_SET_ITEM(unvlist, 3, PyObject_GetAttrString(submodule, "ConfigV4"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const int16_t, 3>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 1>();
  detail::register_ndarray_to_list_cvt<const Psana::CsPad::ProtectionSystemThreshold>();

} // createWrappers()
} // namespace CsPad
} // namespace psddl_python
