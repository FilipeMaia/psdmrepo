/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/cspad.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"

namespace psddl_python {
namespace CsPad {

namespace {
PyObject* method_typeid_CsPadDigitalPotsCfg() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::CsPadDigitalPotsCfg), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_CsPadReadOnlyCfg() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::CsPadReadOnlyCfg), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ProtectionSystemThreshold() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ProtectionSystemThreshold), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_CsPadGainMapCfg() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::CsPadGainMapCfg), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV1QuadReg() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV1QuadReg), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV2QuadReg() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV2QuadReg), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV2() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV2), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV3() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV3), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ConfigV4() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ConfigV4), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ElementV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ElementV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_DataV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::DataV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_ElementV2() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::ElementV2), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_DataV2() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::CsPad::DataV2), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

} // namespace
void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.CsPad", 0, "The Python wrapper module for CsPad types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "CsPad", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::CsPad::CsPadDigitalPotsCfg_Wrapper>("CsPadDigitalPotsCfg", no_init)
    .def("pots", &psddl_python::CsPad::CsPadDigitalPotsCfg_Wrapper::pots)
    .def("__typeid__", &method_typeid_CsPadDigitalPotsCfg)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<CsPadDigitalPotsCfg_Converter>());

  class_<psddl_python::CsPad::CsPadReadOnlyCfg_Wrapper>("CsPadReadOnlyCfg", no_init)
    .def("shiftTest", &psddl_python::CsPad::CsPadReadOnlyCfg_Wrapper::shiftTest)
    .def("version", &psddl_python::CsPad::CsPadReadOnlyCfg_Wrapper::version)
    .def("__typeid__", &method_typeid_CsPadReadOnlyCfg)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<CsPadReadOnlyCfg_Converter>());

  class_<psddl_python::CsPad::ProtectionSystemThreshold_Wrapper>("ProtectionSystemThreshold", no_init)
    .def("adcThreshold", &psddl_python::CsPad::ProtectionSystemThreshold_Wrapper::adcThreshold)
    .def("pixelCountThreshold", &psddl_python::CsPad::ProtectionSystemThreshold_Wrapper::pixelCountThreshold)
    .def("__typeid__", &method_typeid_ProtectionSystemThreshold)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ProtectionSystemThreshold_Converter>());

  class_<psddl_python::CsPad::CsPadGainMapCfg_Wrapper>("CsPadGainMapCfg", no_init)
    .def("gainMap", &psddl_python::CsPad::CsPadGainMapCfg_Wrapper::gainMap)
    .def("__typeid__", &method_typeid_CsPadGainMapCfg)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<CsPadGainMapCfg_Converter>());

  class_<psddl_python::CsPad::ConfigV1QuadReg_Wrapper>("ConfigV1QuadReg", no_init)
    .def("shiftSelect", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::shiftSelect)
    .def("edgeSelect", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::edgeSelect)
    .def("readClkSet", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::readClkSet)
    .def("readClkHold", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::readClkHold)
    .def("dataMode", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::dataMode)
    .def("prstSel", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::prstSel)
    .def("acqDelay", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::acqDelay)
    .def("intTime", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::intTime)
    .def("digDelay", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::digDelay)
    .def("ampIdle", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::ampIdle)
    .def("injTotal", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::injTotal)
    .def("rowColShiftPer", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::rowColShiftPer)
    .def("ro", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::ro, return_value_policy<copy_const_reference>())
    .def("dp", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::dp, return_value_policy<copy_const_reference>())
    .def("gm", &psddl_python::CsPad::ConfigV1QuadReg_Wrapper::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid_ConfigV1QuadReg)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV1QuadReg_Converter>());

  class_<psddl_python::CsPad::ConfigV2QuadReg_Wrapper>("ConfigV2QuadReg", no_init)
    .def("shiftSelect", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::shiftSelect)
    .def("edgeSelect", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::edgeSelect)
    .def("readClkSet", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::readClkSet)
    .def("readClkHold", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::readClkHold)
    .def("dataMode", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::dataMode)
    .def("prstSel", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::prstSel)
    .def("acqDelay", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::acqDelay)
    .def("intTime", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::intTime)
    .def("digDelay", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::digDelay)
    .def("ampIdle", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::ampIdle)
    .def("injTotal", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::injTotal)
    .def("rowColShiftPer", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::rowColShiftPer)
    .def("ampReset", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::ampReset)
    .def("digCount", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::digCount)
    .def("digPeriod", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::digPeriod)
    .def("ro", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::ro, return_value_policy<copy_const_reference>())
    .def("dp", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::dp, return_value_policy<copy_const_reference>())
    .def("gm", &psddl_python::CsPad::ConfigV2QuadReg_Wrapper::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid_ConfigV2QuadReg)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV2QuadReg_Converter>());

  class_<psddl_python::CsPad::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("concentratorVersion", &psddl_python::CsPad::ConfigV1_Wrapper::concentratorVersion)
    .def("runDelay", &psddl_python::CsPad::ConfigV1_Wrapper::runDelay)
    .def("eventCode", &psddl_python::CsPad::ConfigV1_Wrapper::eventCode)
    .def("inactiveRunMode", &psddl_python::CsPad::ConfigV1_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad::ConfigV1_Wrapper::activeRunMode)
    .def("tdi", &psddl_python::CsPad::ConfigV1_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad::ConfigV1_Wrapper::payloadSize)
    .def("badAsicMask0", &psddl_python::CsPad::ConfigV1_Wrapper::badAsicMask0)
    .def("badAsicMask1", &psddl_python::CsPad::ConfigV1_Wrapper::badAsicMask1)
    .def("asicMask", &psddl_python::CsPad::ConfigV1_Wrapper::asicMask)
    .def("quadMask", &psddl_python::CsPad::ConfigV1_Wrapper::quadMask)
    .def("quads", &psddl_python::CsPad::ConfigV1_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("numAsicsRead", &psddl_python::CsPad::ConfigV1_Wrapper::numAsicsRead)
    .def("numQuads", &psddl_python::CsPad::ConfigV1_Wrapper::numQuads)
    .def("numSect", &psddl_python::CsPad::ConfigV1_Wrapper::numSect)
    .def("quads_shape", &psddl_python::CsPad::ConfigV1_Wrapper::quads_shape)
    .def("__typeid__", &method_typeid_ConfigV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV1_Converter>());

  class_<psddl_python::CsPad::ConfigV2_Wrapper>("ConfigV2", no_init)
    .def("concentratorVersion", &psddl_python::CsPad::ConfigV2_Wrapper::concentratorVersion)
    .def("runDelay", &psddl_python::CsPad::ConfigV2_Wrapper::runDelay)
    .def("eventCode", &psddl_python::CsPad::ConfigV2_Wrapper::eventCode)
    .def("inactiveRunMode", &psddl_python::CsPad::ConfigV2_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad::ConfigV2_Wrapper::activeRunMode)
    .def("tdi", &psddl_python::CsPad::ConfigV2_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad::ConfigV2_Wrapper::payloadSize)
    .def("badAsicMask0", &psddl_python::CsPad::ConfigV2_Wrapper::badAsicMask0)
    .def("badAsicMask1", &psddl_python::CsPad::ConfigV2_Wrapper::badAsicMask1)
    .def("asicMask", &psddl_python::CsPad::ConfigV2_Wrapper::asicMask)
    .def("quadMask", &psddl_python::CsPad::ConfigV2_Wrapper::quadMask)
    .def("quads", &psddl_python::CsPad::ConfigV2_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("numAsicsRead", &psddl_python::CsPad::ConfigV2_Wrapper::numAsicsRead)
    .def("roiMask", &psddl_python::CsPad::ConfigV2_Wrapper::roiMask)
    .def("numAsicsStored", &psddl_python::CsPad::ConfigV2_Wrapper::numAsicsStored)
    .def("numQuads", &psddl_python::CsPad::ConfigV2_Wrapper::numQuads)
    .def("numSect", &psddl_python::CsPad::ConfigV2_Wrapper::numSect)
    .def("quads_shape", &psddl_python::CsPad::ConfigV2_Wrapper::quads_shape)
    .def("__typeid__", &method_typeid_ConfigV2)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV2_Converter>());

  class_<psddl_python::CsPad::ConfigV3_Wrapper>("ConfigV3", no_init)
    .def("concentratorVersion", &psddl_python::CsPad::ConfigV3_Wrapper::concentratorVersion)
    .def("runDelay", &psddl_python::CsPad::ConfigV3_Wrapper::runDelay)
    .def("eventCode", &psddl_python::CsPad::ConfigV3_Wrapper::eventCode)
    .def("protectionThresholds", &psddl_python::CsPad::ConfigV3_Wrapper::protectionThresholds, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("protectionEnable", &psddl_python::CsPad::ConfigV3_Wrapper::protectionEnable)
    .def("inactiveRunMode", &psddl_python::CsPad::ConfigV3_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad::ConfigV3_Wrapper::activeRunMode)
    .def("tdi", &psddl_python::CsPad::ConfigV3_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad::ConfigV3_Wrapper::payloadSize)
    .def("badAsicMask0", &psddl_python::CsPad::ConfigV3_Wrapper::badAsicMask0)
    .def("badAsicMask1", &psddl_python::CsPad::ConfigV3_Wrapper::badAsicMask1)
    .def("asicMask", &psddl_python::CsPad::ConfigV3_Wrapper::asicMask)
    .def("quadMask", &psddl_python::CsPad::ConfigV3_Wrapper::quadMask)
    .def("quads", &psddl_python::CsPad::ConfigV3_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("numAsicsRead", &psddl_python::CsPad::ConfigV3_Wrapper::numAsicsRead)
    .def("roiMask", &psddl_python::CsPad::ConfigV3_Wrapper::roiMask)
    .def("numAsicsStored", &psddl_python::CsPad::ConfigV3_Wrapper::numAsicsStored)
    .def("numQuads", &psddl_python::CsPad::ConfigV3_Wrapper::numQuads)
    .def("numSect", &psddl_python::CsPad::ConfigV3_Wrapper::numSect)
    .def("protectionThresholds_shape", &psddl_python::CsPad::ConfigV3_Wrapper::protectionThresholds_shape)
    .def("quads_shape", &psddl_python::CsPad::ConfigV3_Wrapper::quads_shape)
    .def("__typeid__", &method_typeid_ConfigV3)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV3_Converter>());

  class_<psddl_python::CsPad::ConfigV4_Wrapper>("ConfigV4", no_init)
    .def("concentratorVersion", &psddl_python::CsPad::ConfigV4_Wrapper::concentratorVersion)
    .def("runDelay", &psddl_python::CsPad::ConfigV4_Wrapper::runDelay)
    .def("eventCode", &psddl_python::CsPad::ConfigV4_Wrapper::eventCode)
    .def("protectionThresholds", &psddl_python::CsPad::ConfigV4_Wrapper::protectionThresholds, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("protectionEnable", &psddl_python::CsPad::ConfigV4_Wrapper::protectionEnable)
    .def("inactiveRunMode", &psddl_python::CsPad::ConfigV4_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad::ConfigV4_Wrapper::activeRunMode)
    .def("tdi", &psddl_python::CsPad::ConfigV4_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad::ConfigV4_Wrapper::payloadSize)
    .def("badAsicMask0", &psddl_python::CsPad::ConfigV4_Wrapper::badAsicMask0)
    .def("badAsicMask1", &psddl_python::CsPad::ConfigV4_Wrapper::badAsicMask1)
    .def("asicMask", &psddl_python::CsPad::ConfigV4_Wrapper::asicMask)
    .def("quadMask", &psddl_python::CsPad::ConfigV4_Wrapper::quadMask)
    .def("quads", &psddl_python::CsPad::ConfigV4_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("numAsicsRead", &psddl_python::CsPad::ConfigV4_Wrapper::numAsicsRead)
    .def("roiMask", &psddl_python::CsPad::ConfigV4_Wrapper::roiMask)
    .def("numAsicsStored", &psddl_python::CsPad::ConfigV4_Wrapper::numAsicsStored)
    .def("numQuads", &psddl_python::CsPad::ConfigV4_Wrapper::numQuads)
    .def("numSect", &psddl_python::CsPad::ConfigV4_Wrapper::numSect)
    .def("protectionThresholds_shape", &psddl_python::CsPad::ConfigV4_Wrapper::protectionThresholds_shape)
    .def("quads_shape", &psddl_python::CsPad::ConfigV4_Wrapper::quads_shape)
    .def("__typeid__", &method_typeid_ConfigV4)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV4_Converter>());

  class_<psddl_python::CsPad::ElementV1_Wrapper>("ElementV1", no_init)
    .def("virtual_channel", &psddl_python::CsPad::ElementV1_Wrapper::virtual_channel)
    .def("lane", &psddl_python::CsPad::ElementV1_Wrapper::lane)
    .def("tid", &psddl_python::CsPad::ElementV1_Wrapper::tid)
    .def("acq_count", &psddl_python::CsPad::ElementV1_Wrapper::acq_count)
    .def("op_code", &psddl_python::CsPad::ElementV1_Wrapper::op_code)
    .def("quad", &psddl_python::CsPad::ElementV1_Wrapper::quad)
    .def("seq_count", &psddl_python::CsPad::ElementV1_Wrapper::seq_count)
    .def("ticks", &psddl_python::CsPad::ElementV1_Wrapper::ticks)
    .def("fiducials", &psddl_python::CsPad::ElementV1_Wrapper::fiducials)
    .def("sb_temp", &psddl_python::CsPad::ElementV1_Wrapper::sb_temp)
    .def("frame_type", &psddl_python::CsPad::ElementV1_Wrapper::frame_type)
    .def("data", &psddl_python::CsPad::ElementV1_Wrapper::data)
    .def("sectionMask", &psddl_python::CsPad::ElementV1_Wrapper::sectionMask)
    .def("common_mode", &psddl_python::CsPad::ElementV1_Wrapper::common_mode)
    .def("__typeid__", &method_typeid_ElementV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ElementV1_Converter>());

  class_<psddl_python::CsPad::DataV1_Wrapper>("DataV1", no_init)
    .def("quads", &psddl_python::CsPad::DataV1_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("quads_shape", &psddl_python::CsPad::DataV1_Wrapper::quads_shape)
    .def("quads_list", &psddl_python::CsPad::DataV1_Wrapper::quads_list)
    .def("__typeid__", &method_typeid_DataV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<DataV1_Converter>());

  class_<psddl_python::CsPad::ElementV2_Wrapper>("ElementV2", no_init)
    .def("virtual_channel", &psddl_python::CsPad::ElementV2_Wrapper::virtual_channel)
    .def("lane", &psddl_python::CsPad::ElementV2_Wrapper::lane)
    .def("tid", &psddl_python::CsPad::ElementV2_Wrapper::tid)
    .def("acq_count", &psddl_python::CsPad::ElementV2_Wrapper::acq_count)
    .def("op_code", &psddl_python::CsPad::ElementV2_Wrapper::op_code)
    .def("quad", &psddl_python::CsPad::ElementV2_Wrapper::quad)
    .def("seq_count", &psddl_python::CsPad::ElementV2_Wrapper::seq_count)
    .def("ticks", &psddl_python::CsPad::ElementV2_Wrapper::ticks)
    .def("fiducials", &psddl_python::CsPad::ElementV2_Wrapper::fiducials)
    .def("sb_temp", &psddl_python::CsPad::ElementV2_Wrapper::sb_temp)
    .def("frame_type", &psddl_python::CsPad::ElementV2_Wrapper::frame_type)
    .def("data", &psddl_python::CsPad::ElementV2_Wrapper::data)
    .def("sectionMask", &psddl_python::CsPad::ElementV2_Wrapper::sectionMask)
    .def("common_mode", &psddl_python::CsPad::ElementV2_Wrapper::common_mode)
    .def("__typeid__", &method_typeid_ElementV2)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ElementV2_Converter>());

  class_<psddl_python::CsPad::DataV2_Wrapper>("DataV2", no_init)
    .def("quads", &psddl_python::CsPad::DataV2_Wrapper::quads, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("quads_shape", &psddl_python::CsPad::DataV2_Wrapper::quads_shape)
    .def("quads_list", &psddl_python::CsPad::DataV2_Wrapper::quads_list)
    .def("__typeid__", &method_typeid_DataV2)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<DataV2_Converter>());

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "DataV2"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(4);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "ConfigV3"));
    PyList_SET_ITEM(unvlist, 3, PyObject_GetAttrString(submodule, "ConfigV4"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint32_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const int16_t, 3>();

} // createWrappers()
} // namespace CsPad
} // namespace psddl_python
