/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/bld.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"

namespace psddl_python {
namespace Bld {

namespace {
PyObject* method_typeid_BldDataFEEGasDetEnergy() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataFEEGasDetEnergy), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataEBeamV0() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataEBeamV0), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataEBeamV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataEBeamV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataEBeamV2() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataEBeamV2), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataEBeamV3() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataEBeamV3), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataPhaseCavity() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataPhaseCavity), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataIpimbV0() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataIpimbV0), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataIpimbV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataIpimbV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataPimV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataPimV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataGMDV0() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataGMDV0), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_BldDataGMDV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Bld::BldDataGMDV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

} // namespace
void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Bld", 0, "The Python wrapper module for Bld types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Bld", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Bld::BldDataFEEGasDetEnergy>("BldDataFEEGasDetEnergy", no_init)
    .def("f_11_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_11_ENRC)
    .def("f_12_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_12_ENRC)
    .def("f_21_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_21_ENRC)
    .def("f_22_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_22_ENRC)
    .def("__typeid__", &method_typeid_BldDataFEEGasDetEnergy)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataFEEGasDetEnergy_Converter>());

  class_<Psana::Bld::BldDataEBeamV0>("BldDataEBeamV0", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV0::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV0::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV0::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV0::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV0::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV0::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV0::ebeamLTUAngY)
    .def("__typeid__", &method_typeid_BldDataEBeamV0)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataEBeamV0_Converter>());

  class_<Psana::Bld::BldDataEBeamV1>("BldDataEBeamV1", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV1::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV1::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV1::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV1::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV1::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV1::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV1::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV1::ebeamPkCurrBC2)
    .def("__typeid__", &method_typeid_BldDataEBeamV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataEBeamV1_Converter>());

  class_<Psana::Bld::BldDataEBeamV2>("BldDataEBeamV2", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV2::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV2::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV2::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV2::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV2::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV2::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV2::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV2::ebeamPkCurrBC2)
    .def("ebeamEnergyBC2", &Psana::Bld::BldDataEBeamV2::ebeamEnergyBC2)
    .def("__typeid__", &method_typeid_BldDataEBeamV2)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataEBeamV2_Converter>());

  class_<Psana::Bld::BldDataEBeamV3>("BldDataEBeamV3", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV3::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV3::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV3::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV3::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV3::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV3::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV3::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV3::ebeamPkCurrBC2)
    .def("ebeamEnergyBC2", &Psana::Bld::BldDataEBeamV3::ebeamEnergyBC2)
    .def("ebeamPkCurrBC1", &Psana::Bld::BldDataEBeamV3::ebeamPkCurrBC1)
    .def("ebeamEnergyBC1", &Psana::Bld::BldDataEBeamV3::ebeamEnergyBC1)
    .def("__typeid__", &method_typeid_BldDataEBeamV3)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataEBeamV3_Converter>());

  class_<Psana::Bld::BldDataPhaseCavity>("BldDataPhaseCavity", no_init)
    .def("fitTime1", &Psana::Bld::BldDataPhaseCavity::fitTime1)
    .def("fitTime2", &Psana::Bld::BldDataPhaseCavity::fitTime2)
    .def("charge1", &Psana::Bld::BldDataPhaseCavity::charge1)
    .def("charge2", &Psana::Bld::BldDataPhaseCavity::charge2)
    .def("__typeid__", &method_typeid_BldDataPhaseCavity)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataPhaseCavity_Converter>());

  class_<psddl_python::Bld::BldDataIpimbV0_Wrapper>("BldDataIpimbV0", no_init)
    .def("ipimbData", &psddl_python::Bld::BldDataIpimbV0_Wrapper::ipimbData, return_value_policy<copy_const_reference>())
    .def("ipimbConfig", &psddl_python::Bld::BldDataIpimbV0_Wrapper::ipimbConfig, return_value_policy<copy_const_reference>())
    .def("ipmFexData", &psddl_python::Bld::BldDataIpimbV0_Wrapper::ipmFexData, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid_BldDataIpimbV0)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataIpimbV0_Converter>());

  class_<psddl_python::Bld::BldDataIpimbV1_Wrapper>("BldDataIpimbV1", no_init)
    .def("ipimbData", &psddl_python::Bld::BldDataIpimbV1_Wrapper::ipimbData, return_value_policy<copy_const_reference>())
    .def("ipimbConfig", &psddl_python::Bld::BldDataIpimbV1_Wrapper::ipimbConfig, return_value_policy<copy_const_reference>())
    .def("ipmFexData", &psddl_python::Bld::BldDataIpimbV1_Wrapper::ipmFexData, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid_BldDataIpimbV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataIpimbV1_Converter>());

  class_<psddl_python::Bld::BldDataPimV1_Wrapper>("BldDataPimV1", no_init)
    .def("camConfig", &psddl_python::Bld::BldDataPimV1_Wrapper::camConfig, return_value_policy<copy_const_reference>())
    .def("pimConfig", &psddl_python::Bld::BldDataPimV1_Wrapper::pimConfig, return_value_policy<copy_const_reference>())
    .def("frame", &psddl_python::Bld::BldDataPimV1_Wrapper::frame, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid_BldDataPimV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataPimV1_Converter>());

  class_<psddl_python::Bld::BldDataGMDV0_Wrapper>("BldDataGMDV0", no_init)
    .def("gasType", &psddl_python::Bld::BldDataGMDV0_Wrapper::gasType)
    .def("pressure", &psddl_python::Bld::BldDataGMDV0_Wrapper::pressure)
    .def("temperature", &psddl_python::Bld::BldDataGMDV0_Wrapper::temperature)
    .def("current", &psddl_python::Bld::BldDataGMDV0_Wrapper::current)
    .def("hvMeshElectron", &psddl_python::Bld::BldDataGMDV0_Wrapper::hvMeshElectron)
    .def("hvMeshIon", &psddl_python::Bld::BldDataGMDV0_Wrapper::hvMeshIon)
    .def("hvMultIon", &psddl_python::Bld::BldDataGMDV0_Wrapper::hvMultIon)
    .def("chargeQ", &psddl_python::Bld::BldDataGMDV0_Wrapper::chargeQ)
    .def("photonEnergy", &psddl_python::Bld::BldDataGMDV0_Wrapper::photonEnergy)
    .def("multPulseIntensity", &psddl_python::Bld::BldDataGMDV0_Wrapper::multPulseIntensity)
    .def("keithleyPulseIntensity", &psddl_python::Bld::BldDataGMDV0_Wrapper::keithleyPulseIntensity)
    .def("pulseEnergy", &psddl_python::Bld::BldDataGMDV0_Wrapper::pulseEnergy)
    .def("pulseEnergyFEE", &psddl_python::Bld::BldDataGMDV0_Wrapper::pulseEnergyFEE)
    .def("transmission", &psddl_python::Bld::BldDataGMDV0_Wrapper::transmission)
    .def("transmissionFEE", &psddl_python::Bld::BldDataGMDV0_Wrapper::transmissionFEE)
    .def("__typeid__", &method_typeid_BldDataGMDV0)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataGMDV0_Converter>());

  class_<psddl_python::Bld::BldDataGMDV1_Wrapper>("BldDataGMDV1", no_init)
    .def("milliJoulesPerPulse", &psddl_python::Bld::BldDataGMDV1_Wrapper::milliJoulesPerPulse)
    .def("milliJoulesAverage", &psddl_python::Bld::BldDataGMDV1_Wrapper::milliJoulesAverage)
    .def("correctedSumPerPulse", &psddl_python::Bld::BldDataGMDV1_Wrapper::correctedSumPerPulse)
    .def("bgValuePerSample", &psddl_python::Bld::BldDataGMDV1_Wrapper::bgValuePerSample)
    .def("relativeEnergyPerPulse", &psddl_python::Bld::BldDataGMDV1_Wrapper::relativeEnergyPerPulse)
    .def("__typeid__", &method_typeid_BldDataGMDV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<BldDataGMDV1_Converter>());

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataIpimbV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataIpimbV1"));
    PyObject_SetAttrString(submodule, "BldDataIpimb", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataGMDV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataGMDV1"));
    PyObject_SetAttrString(submodule, "BldDataGMD", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataPimV1"));
    PyObject_SetAttrString(submodule, "BldDataPim", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(4);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataEBeamV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataEBeamV1"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "BldDataEBeamV2"));
    PyList_SET_ITEM(unvlist, 3, PyObject_GetAttrString(submodule, "BldDataEBeamV3"));
    PyObject_SetAttrString(submodule, "BldDataEBeam", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Bld
} // namespace psddl_python
