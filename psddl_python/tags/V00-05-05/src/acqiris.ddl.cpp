/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/acqiris.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Acqiris {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Acqiris", 0, "The Python wrapper module for Acqiris types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Acqiris", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Acqiris::VertV1 >("VertV1", no_init)
    .def("fullScale", &Psana::Acqiris::VertV1::fullScale)
    .def("offset", &Psana::Acqiris::VertV1::offset)
    .def("coupling", &Psana::Acqiris::VertV1::coupling)
    .def("bandwidth", &Psana::Acqiris::VertV1::bandwidth)
    .def("slope", &Psana::Acqiris::VertV1::slope)
  ;

  enum_<Psana::Acqiris::VertV1::Coupling>("Coupling")
    .value("GND",Psana::Acqiris::VertV1::GND)
    .value("DC",Psana::Acqiris::VertV1::DC)
    .value("AC",Psana::Acqiris::VertV1::AC)
    .value("DC50ohm",Psana::Acqiris::VertV1::DC50ohm)
    .value("AC50ohm",Psana::Acqiris::VertV1::AC50ohm)
  ;

  enum_<Psana::Acqiris::VertV1::Bandwidth>("Bandwidth")
    .value("None",Psana::Acqiris::VertV1::None)
    .value("MHz25",Psana::Acqiris::VertV1::MHz25)
    .value("MHz700",Psana::Acqiris::VertV1::MHz700)
    .value("MHz200",Psana::Acqiris::VertV1::MHz200)
    .value("MHz20",Psana::Acqiris::VertV1::MHz20)
    .value("MHz35",Psana::Acqiris::VertV1::MHz35)
  ;
  scope().attr("Version")=1;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::VertV1> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::HorizV1 >("HorizV1", no_init)
    .def("sampInterval", &Psana::Acqiris::HorizV1::sampInterval)
    .def("delayTime", &Psana::Acqiris::HorizV1::delayTime)
    .def("nbrSamples", &Psana::Acqiris::HorizV1::nbrSamples)
    .def("nbrSegments", &Psana::Acqiris::HorizV1::nbrSegments)
  ;
  scope().attr("Version")=1;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::HorizV1> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TrigV1 >("TrigV1", no_init)
    .def("coupling", &Psana::Acqiris::TrigV1::coupling)
    .def("input", &Psana::Acqiris::TrigV1::input)
    .def("slope", &Psana::Acqiris::TrigV1::slope)
    .def("level", &Psana::Acqiris::TrigV1::level)
  ;

  enum_<Psana::Acqiris::TrigV1::Source>("Source")
    .value("Internal",Psana::Acqiris::TrigV1::Internal)
    .value("External",Psana::Acqiris::TrigV1::External)
  ;

  enum_<Psana::Acqiris::TrigV1::Coupling>("Coupling")
    .value("DC",Psana::Acqiris::TrigV1::DC)
    .value("AC",Psana::Acqiris::TrigV1::AC)
    .value("HFreject",Psana::Acqiris::TrigV1::HFreject)
    .value("DC50ohm",Psana::Acqiris::TrigV1::DC50ohm)
    .value("AC50ohm",Psana::Acqiris::TrigV1::AC50ohm)
  ;

  enum_<Psana::Acqiris::TrigV1::Slope>("Slope")
    .value("Positive",Psana::Acqiris::TrigV1::Positive)
    .value("Negative",Psana::Acqiris::TrigV1::Negative)
    .value("OutOfWindow",Psana::Acqiris::TrigV1::OutOfWindow)
    .value("IntoWindow",Psana::Acqiris::TrigV1::IntoWindow)
    .value("HFDivide",Psana::Acqiris::TrigV1::HFDivide)
    .value("SpikeStretcher",Psana::Acqiris::TrigV1::SpikeStretcher)
  ;
  scope().attr("Version")=1;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TrigV1> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::ConfigV1, boost::shared_ptr<Psana::Acqiris::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("nbrConvertersPerChannel", &Psana::Acqiris::ConfigV1::nbrConvertersPerChannel)
    .def("channelMask", &Psana::Acqiris::ConfigV1::channelMask)
    .def("nbrBanks", &Psana::Acqiris::ConfigV1::nbrBanks)
    .def("trig", &Psana::Acqiris::ConfigV1::trig, return_value_policy<copy_const_reference>())
    .def("horiz", &Psana::Acqiris::ConfigV1::horiz, return_value_policy<copy_const_reference>())
    .def("vert", &Psana::Acqiris::ConfigV1::vert)
    .def("nbrChannels", &Psana::Acqiris::ConfigV1::nbrChannels)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_AcqConfig);
  scope().attr("MaxChan")=20;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Acqiris::ConfigV1> >(Pds::TypeId::Id_AcqConfig));

  {
  scope outer = 
  class_<Psana::Acqiris::TimestampV1 >("TimestampV1", no_init)
    .def("pos", &Psana::Acqiris::TimestampV1::pos)
    .def("timeStampLo", &Psana::Acqiris::TimestampV1::timeStampLo)
    .def("timeStampHi", &Psana::Acqiris::TimestampV1::timeStampHi)
    .def("value", &Psana::Acqiris::TimestampV1::value)
  ;
  scope().attr("Version")=1;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TimestampV1> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::DataDescV1Elem, boost::shared_ptr<Psana::Acqiris::DataDescV1Elem>, boost::noncopyable >("DataDescV1Elem", no_init)
    .def("nbrSamplesInSeg", &Psana::Acqiris::DataDescV1Elem::nbrSamplesInSeg)
    .def("indexFirstPoint", &Psana::Acqiris::DataDescV1Elem::indexFirstPoint)
    .def("nbrSegments", &Psana::Acqiris::DataDescV1Elem::nbrSegments)
    .def("timestamp", &Psana::Acqiris::DataDescV1Elem::timestamp)
    .def("waveforms", &Psana::Acqiris::DataDescV1Elem::waveforms)
  ;
  scope().attr("Version")=1;
  scope().attr("NumberOfBits")=10;
  scope().attr("BitShift")=6;
  scope().attr("_extraSize")=32;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Acqiris::DataDescV1Elem> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::DataDescV1, boost::shared_ptr<Psana::Acqiris::DataDescV1>, boost::noncopyable >("DataDescV1", no_init)
    .def("data", &Psana::Acqiris::DataDescV1::data, return_internal_reference<>())
    .def("data_shape", &method_shape<Psana::Acqiris::DataDescV1, &Psana::Acqiris::DataDescV1::data_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_AcqWaveform);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Acqiris::DataDescV1> >(Pds::TypeId::Id_AcqWaveform));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcChannel >("TdcChannel", no_init)
    .def("channel", &Psana::Acqiris::TdcChannel::channel)
    .def("_mode_int", &Psana::Acqiris::TdcChannel::_mode_int)
    .def("slope", &Psana::Acqiris::TdcChannel::slope)
    .def("mode", &Psana::Acqiris::TdcChannel::mode)
    .def("level", &Psana::Acqiris::TdcChannel::level)
  ;

  enum_<Psana::Acqiris::TdcChannel::Channel>("Channel")
    .value("Veto",Psana::Acqiris::TdcChannel::Veto)
    .value("Common",Psana::Acqiris::TdcChannel::Common)
    .value("Input1",Psana::Acqiris::TdcChannel::Input1)
    .value("Input2",Psana::Acqiris::TdcChannel::Input2)
    .value("Input3",Psana::Acqiris::TdcChannel::Input3)
    .value("Input4",Psana::Acqiris::TdcChannel::Input4)
    .value("Input5",Psana::Acqiris::TdcChannel::Input5)
    .value("Input6",Psana::Acqiris::TdcChannel::Input6)
  ;

  enum_<Psana::Acqiris::TdcChannel::Mode>("Mode")
    .value("Active",Psana::Acqiris::TdcChannel::Active)
    .value("Inactive",Psana::Acqiris::TdcChannel::Inactive)
  ;

  enum_<Psana::Acqiris::TdcChannel::Slope>("Slope")
    .value("Positive",Psana::Acqiris::TdcChannel::Positive)
    .value("Negative",Psana::Acqiris::TdcChannel::Negative)
  ;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcChannel> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcAuxIO >("TdcAuxIO", no_init)
    .def("channel", &Psana::Acqiris::TdcAuxIO::channel)
    .def("mode", &Psana::Acqiris::TdcAuxIO::mode)
    .def("term", &Psana::Acqiris::TdcAuxIO::term)
  ;

  enum_<Psana::Acqiris::TdcAuxIO::Channel>("Channel")
    .value("IOAux1",Psana::Acqiris::TdcAuxIO::IOAux1)
    .value("IOAux2",Psana::Acqiris::TdcAuxIO::IOAux2)
  ;

  enum_<Psana::Acqiris::TdcAuxIO::Mode>("Mode")
    .value("BankSwitch",Psana::Acqiris::TdcAuxIO::BankSwitch)
    .value("Marker",Psana::Acqiris::TdcAuxIO::Marker)
    .value("OutputLo",Psana::Acqiris::TdcAuxIO::OutputLo)
    .value("OutputHi",Psana::Acqiris::TdcAuxIO::OutputHi)
  ;

  enum_<Psana::Acqiris::TdcAuxIO::Termination>("Termination")
    .value("ZHigh",Psana::Acqiris::TdcAuxIO::ZHigh)
    .value("Z50",Psana::Acqiris::TdcAuxIO::Z50)
  ;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcAuxIO> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcVetoIO >("TdcVetoIO", no_init)
    .def("channel", &Psana::Acqiris::TdcVetoIO::channel)
    .def("mode", &Psana::Acqiris::TdcVetoIO::mode)
    .def("term", &Psana::Acqiris::TdcVetoIO::term)
  ;

  enum_<Psana::Acqiris::TdcVetoIO::Channel>("Channel")
    .value("ChVeto",Psana::Acqiris::TdcVetoIO::ChVeto)
  ;

  enum_<Psana::Acqiris::TdcVetoIO::Mode>("Mode")
    .value("Veto",Psana::Acqiris::TdcVetoIO::Veto)
    .value("SwitchVeto",Psana::Acqiris::TdcVetoIO::SwitchVeto)
    .value("InvertedVeto",Psana::Acqiris::TdcVetoIO::InvertedVeto)
    .value("InvertedSwitchVeto",Psana::Acqiris::TdcVetoIO::InvertedSwitchVeto)
  ;

  enum_<Psana::Acqiris::TdcVetoIO::Termination>("Termination")
    .value("ZHigh",Psana::Acqiris::TdcVetoIO::ZHigh)
    .value("Z50",Psana::Acqiris::TdcVetoIO::Z50)
  ;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcVetoIO> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcConfigV1, boost::shared_ptr<Psana::Acqiris::TdcConfigV1>, boost::noncopyable >("TdcConfigV1", no_init)
    .def("channels", &Psana::Acqiris::TdcConfigV1::channels)
    .def("auxio", &Psana::Acqiris::TdcConfigV1::auxio)
    .def("veto", &Psana::Acqiris::TdcConfigV1::veto, return_value_policy<copy_const_reference>())
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_AcqTdcConfig);
  scope().attr("NChannels")=8;
  scope().attr("NAuxIO")=2;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Acqiris::TdcConfigV1> >(Pds::TypeId::Id_AcqTdcConfig));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcDataV1_Item >("TdcDataV1_Item", no_init)
    .def("value", &Psana::Acqiris::TdcDataV1_Item::value)
    .def("bf_val_", &Psana::Acqiris::TdcDataV1_Item::bf_val_)
    .def("source", &Psana::Acqiris::TdcDataV1_Item::source)
    .def("bf_ofv_", &Psana::Acqiris::TdcDataV1_Item::bf_ofv_)
  ;

  enum_<Psana::Acqiris::TdcDataV1_Item::Source>("Source")
    .value("Comm",Psana::Acqiris::TdcDataV1_Item::Comm)
    .value("Chan1",Psana::Acqiris::TdcDataV1_Item::Chan1)
    .value("Chan2",Psana::Acqiris::TdcDataV1_Item::Chan2)
    .value("Chan3",Psana::Acqiris::TdcDataV1_Item::Chan3)
    .value("Chan4",Psana::Acqiris::TdcDataV1_Item::Chan4)
    .value("Chan5",Psana::Acqiris::TdcDataV1_Item::Chan5)
    .value("Chan6",Psana::Acqiris::TdcDataV1_Item::Chan6)
    .value("AuxIO",Psana::Acqiris::TdcDataV1_Item::AuxIO)
  ;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcDataV1_Item> >(-1));

  class_<Psana::Acqiris::TdcDataV1Common, boost::python::bases<Psana::Acqiris::TdcDataV1_Item> >("TdcDataV1Common", no_init)
    .def("nhits", &Psana::Acqiris::TdcDataV1Common::nhits)
    .def("overflow", &Psana::Acqiris::TdcDataV1Common::overflow)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcDataV1Common> >(-1));

  class_<Psana::Acqiris::TdcDataV1Channel, boost::python::bases<Psana::Acqiris::TdcDataV1_Item> >("TdcDataV1Channel", no_init)
    .def("ticks", &Psana::Acqiris::TdcDataV1Channel::ticks)
    .def("overflow", &Psana::Acqiris::TdcDataV1Channel::overflow)
    .def("time", &Psana::Acqiris::TdcDataV1Channel::time)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcDataV1Channel> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcDataV1Marker, boost::python::bases<Psana::Acqiris::TdcDataV1_Item> >("TdcDataV1Marker", no_init)
    .def("type", &Psana::Acqiris::TdcDataV1Marker::type)
  ;

  enum_<Psana::Acqiris::TdcDataV1Marker::Type>("Type")
    .value("AuxIOSwitch",Psana::Acqiris::TdcDataV1Marker::AuxIOSwitch)
    .value("EventCntSwitch",Psana::Acqiris::TdcDataV1Marker::EventCntSwitch)
    .value("MemFullSwitch",Psana::Acqiris::TdcDataV1Marker::MemFullSwitch)
    .value("AuxIOMarker",Psana::Acqiris::TdcDataV1Marker::AuxIOMarker)
  ;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Acqiris::TdcDataV1Marker> >(-1));

  {
  scope outer = 
  class_<Psana::Acqiris::TdcDataV1, boost::shared_ptr<Psana::Acqiris::TdcDataV1>, boost::noncopyable >("TdcDataV1", no_init)
    .def("data", &Psana::Acqiris::TdcDataV1::data)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_AcqTdcData);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Acqiris::TdcDataV1> >(Pds::TypeId::Id_AcqTdcData));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataDescV1"));
    PyObject_SetAttrString(submodule, "DataDesc", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "VertV1"));
    PyObject_SetAttrString(submodule, "Vert", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TdcDataV1"));
    PyObject_SetAttrString(submodule, "TdcData", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TdcConfigV1"));
    PyObject_SetAttrString(submodule, "TdcConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TimestampV1"));
    PyObject_SetAttrString(submodule, "Timestamp", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TrigV1"));
    PyObject_SetAttrString(submodule, "Trig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "HorizV1"));
    PyObject_SetAttrString(submodule, "Horiz", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::Acqiris::TdcChannel>();
  detail::register_ndarray_to_list_cvt<const Psana::Acqiris::TimestampV1>();
  detail::register_ndarray_to_numpy_cvt<const int16_t, 2>();
  detail::register_ndarray_to_list_cvt<const Psana::Acqiris::TdcAuxIO>();
  detail::register_ndarray_to_list_cvt<const Psana::Acqiris::TdcDataV1_Item>();
  detail::register_ndarray_to_list_cvt<const Psana::Acqiris::VertV1>();

} // createWrappers()
} // namespace Acqiris
} // namespace psddl_python
