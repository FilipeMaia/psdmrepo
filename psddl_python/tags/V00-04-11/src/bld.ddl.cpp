/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/bld.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Bld {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Bld", 0, "The Python wrapper module for Bld types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Bld", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Bld::BldDataFEEGasDetEnergy >("BldDataFEEGasDetEnergy", no_init)
    .def("f_11_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_11_ENRC)
    .def("f_12_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_12_ENRC)
    .def("f_21_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_21_ENRC)
    .def("f_22_ENRC", &Psana::Bld::BldDataFEEGasDetEnergy::f_22_ENRC)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataFEEGasDetEnergy>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataFEEGasDetEnergy> >(Pds::TypeId::Id_FEEGasDetEnergy, 0));

  class_<Psana::Bld::BldDataEBeamV0 >("BldDataEBeamV0", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV0::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV0::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV0::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV0::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV0::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV0::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV0::ebeamLTUAngY)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataEBeamV0>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataEBeamV0> >(Pds::TypeId::Id_EBeam, 0));

  class_<Psana::Bld::BldDataEBeamV1 >("BldDataEBeamV1", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV1::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV1::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV1::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV1::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV1::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV1::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV1::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV1::ebeamPkCurrBC2)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataEBeamV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataEBeamV1> >(Pds::TypeId::Id_EBeam, 1));

  class_<Psana::Bld::BldDataEBeamV2 >("BldDataEBeamV2", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV2::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV2::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV2::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV2::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV2::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV2::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV2::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV2::ebeamPkCurrBC2)
    .def("ebeamEnergyBC2", &Psana::Bld::BldDataEBeamV2::ebeamEnergyBC2)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataEBeamV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataEBeamV2> >(Pds::TypeId::Id_EBeam, 2));

  class_<Psana::Bld::BldDataEBeamV3 >("BldDataEBeamV3", no_init)
    .def("damageMask", &Psana::Bld::BldDataEBeamV3::damageMask)
    .def("ebeamCharge", &Psana::Bld::BldDataEBeamV3::ebeamCharge)
    .def("ebeamL3Energy", &Psana::Bld::BldDataEBeamV3::ebeamL3Energy)
    .def("ebeamLTUPosX", &Psana::Bld::BldDataEBeamV3::ebeamLTUPosX)
    .def("ebeamLTUPosY", &Psana::Bld::BldDataEBeamV3::ebeamLTUPosY)
    .def("ebeamLTUAngX", &Psana::Bld::BldDataEBeamV3::ebeamLTUAngX)
    .def("ebeamLTUAngY", &Psana::Bld::BldDataEBeamV3::ebeamLTUAngY)
    .def("ebeamPkCurrBC2", &Psana::Bld::BldDataEBeamV3::ebeamPkCurrBC2)
    .def("ebeamEnergyBC2", &Psana::Bld::BldDataEBeamV3::ebeamEnergyBC2)
    .def("ebeamPkCurrBC1", &Psana::Bld::BldDataEBeamV3::ebeamPkCurrBC1)
    .def("ebeamEnergyBC1", &Psana::Bld::BldDataEBeamV3::ebeamEnergyBC1)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataEBeamV3>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataEBeamV3> >(Pds::TypeId::Id_EBeam, 3));

  class_<Psana::Bld::BldDataPhaseCavity >("BldDataPhaseCavity", no_init)
    .def("fitTime1", &Psana::Bld::BldDataPhaseCavity::fitTime1)
    .def("fitTime2", &Psana::Bld::BldDataPhaseCavity::fitTime2)
    .def("charge1", &Psana::Bld::BldDataPhaseCavity::charge1)
    .def("charge2", &Psana::Bld::BldDataPhaseCavity::charge2)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataPhaseCavity>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Bld::BldDataPhaseCavity> >(Pds::TypeId::Id_PhaseCavity, 0));

  class_<Psana::Bld::BldDataIpimbV0, boost::shared_ptr<Psana::Bld::BldDataIpimbV0>, boost::noncopyable >("BldDataIpimbV0", no_init)
    .def("ipimbData", &Psana::Bld::BldDataIpimbV0::ipimbData, return_value_policy<copy_const_reference>())
    .def("ipimbConfig", &Psana::Bld::BldDataIpimbV0::ipimbConfig, return_value_policy<copy_const_reference>())
    .def("ipmFexData", &Psana::Bld::BldDataIpimbV0::ipmFexData, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataIpimbV0>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Bld::BldDataIpimbV0> >(Pds::TypeId::Id_SharedIpimb, 0));

  class_<Psana::Bld::BldDataIpimbV1, boost::shared_ptr<Psana::Bld::BldDataIpimbV1>, boost::noncopyable >("BldDataIpimbV1", no_init)
    .def("ipimbData", &Psana::Bld::BldDataIpimbV1::ipimbData, return_value_policy<copy_const_reference>())
    .def("ipimbConfig", &Psana::Bld::BldDataIpimbV1::ipimbConfig, return_value_policy<copy_const_reference>())
    .def("ipmFexData", &Psana::Bld::BldDataIpimbV1::ipmFexData, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataIpimbV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Bld::BldDataIpimbV1> >(Pds::TypeId::Id_SharedIpimb, 1));

  class_<Psana::Bld::BldDataPimV1, boost::shared_ptr<Psana::Bld::BldDataPimV1>, boost::noncopyable >("BldDataPimV1", no_init)
    .def("camConfig", &Psana::Bld::BldDataPimV1::camConfig, return_value_policy<copy_const_reference>())
    .def("pimConfig", &Psana::Bld::BldDataPimV1::pimConfig, return_value_policy<copy_const_reference>())
    .def("frame", &Psana::Bld::BldDataPimV1::frame, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataPimV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Bld::BldDataPimV1> >(Pds::TypeId::Id_SharedPim, 1));

  class_<Psana::Bld::BldDataGMDV0, boost::shared_ptr<Psana::Bld::BldDataGMDV0>, boost::noncopyable >("BldDataGMDV0", no_init)
    .def("gasType", &Psana::Bld::BldDataGMDV0::gasType)
    .def("pressure", &Psana::Bld::BldDataGMDV0::pressure)
    .def("temperature", &Psana::Bld::BldDataGMDV0::temperature)
    .def("current", &Psana::Bld::BldDataGMDV0::current)
    .def("hvMeshElectron", &Psana::Bld::BldDataGMDV0::hvMeshElectron)
    .def("hvMeshIon", &Psana::Bld::BldDataGMDV0::hvMeshIon)
    .def("hvMultIon", &Psana::Bld::BldDataGMDV0::hvMultIon)
    .def("chargeQ", &Psana::Bld::BldDataGMDV0::chargeQ)
    .def("photonEnergy", &Psana::Bld::BldDataGMDV0::photonEnergy)
    .def("multPulseIntensity", &Psana::Bld::BldDataGMDV0::multPulseIntensity)
    .def("keithleyPulseIntensity", &Psana::Bld::BldDataGMDV0::keithleyPulseIntensity)
    .def("pulseEnergy", &Psana::Bld::BldDataGMDV0::pulseEnergy)
    .def("pulseEnergyFEE", &Psana::Bld::BldDataGMDV0::pulseEnergyFEE)
    .def("transmission", &Psana::Bld::BldDataGMDV0::transmission)
    .def("transmissionFEE", &Psana::Bld::BldDataGMDV0::transmissionFEE)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataGMDV0>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Bld::BldDataGMDV0> >(Pds::TypeId::Id_GMD, 0));

  class_<Psana::Bld::BldDataGMDV1, boost::shared_ptr<Psana::Bld::BldDataGMDV1>, boost::noncopyable >("BldDataGMDV1", no_init)
    .def("milliJoulesPerPulse", &Psana::Bld::BldDataGMDV1::milliJoulesPerPulse)
    .def("milliJoulesAverage", &Psana::Bld::BldDataGMDV1::milliJoulesAverage)
    .def("correctedSumPerPulse", &Psana::Bld::BldDataGMDV1::correctedSumPerPulse)
    .def("bgValuePerSample", &Psana::Bld::BldDataGMDV1::bgValuePerSample)
    .def("relativeEnergyPerPulse", &Psana::Bld::BldDataGMDV1::relativeEnergyPerPulse)
    .def("__typeid__", &method_typeid<Psana::Bld::BldDataGMDV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Bld::BldDataGMDV1> >(Pds::TypeId::Id_GMD, 1));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataIpimbV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataIpimbV1"));
    PyObject_SetAttrString(submodule, "BldDataIpimb", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataGMDV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataGMDV1"));
    PyObject_SetAttrString(submodule, "BldDataGMD", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataPimV1"));
    PyObject_SetAttrString(submodule, "BldDataPim", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(4);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "BldDataEBeamV0"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "BldDataEBeamV1"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "BldDataEBeamV2"));
    PyList_SET_ITEM(unvlist, 3, PyObject_GetAttrString(submodule, "BldDataEBeamV3"));
    PyObject_SetAttrString(submodule, "BldDataEBeam", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Bld
} // namespace psddl_python
