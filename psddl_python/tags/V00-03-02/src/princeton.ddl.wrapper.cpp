/* Do not edit this file, as it is auto-generated */

#include <psddl_python/princeton.ddl.wrapper.h> // inc_python
#include <cstddef>

namespace psddl_python {
namespace Princeton {

void createWrappers(PyObject* module) {
  _import_array();
  PyObject* submodule = Py_InitModule3( "psana.Princeton", 0, "The Python wrapper module for Princeton types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Princeton", submodule);
  scope mod = object(handle<>(borrowed(submodule)));

#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("readoutEventCode", &n::readoutEventCode)\
    .def("delayMode", &n::delayMode)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(psddl_python::Princeton::ConfigV1_Wrapper, "ConfigV1", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("readoutEventCode", &n::readoutEventCode)\
    .def("delayMode", &n::delayMode)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(psddl_python::Princeton::ConfigV2_Wrapper, "ConfigV2", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV2_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV2);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("exposureEventCode", &n::exposureEventCode)\
    .def("numDelayShots", &n::numDelayShots)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(psddl_python::Princeton::ConfigV3_Wrapper, "ConfigV3", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV3_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV3);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("maskedHeight", &n::maskedHeight)\
    .def("kineticHeight", &n::kineticHeight)\
    .def("vsSpeed", &n::vsSpeed)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("exposureEventCode", &n::exposureEventCode)\
    .def("numDelayShots", &n::numDelayShots)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(psddl_python::Princeton::ConfigV4_Wrapper, "ConfigV4", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV4_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV4);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("orgX", &n::orgX)\
    .def("orgY", &n::orgY)\
    .def("binX", &n::binX)\
    .def("binY", &n::binY)\
    .def("exposureTime", &n::exposureTime)\
    .def("coolingTemp", &n::coolingTemp)\
    .def("gainIndex", &n::gainIndex)\
    .def("readoutSpeedIndex", &n::readoutSpeedIndex)\
    .def("maskedHeight", &n::maskedHeight)\
    .def("kineticHeight", &n::kineticHeight)\
    .def("vsSpeed", &n::vsSpeed)\
    .def("infoReportInterval", &n::infoReportInterval)\
    .def("exposureEventCode", &n::exposureEventCode)\
    .def("numDelayShots", &n::numDelayShots)\
    .def("frameSize", &n::frameSize)\
    .def("numPixelsX", &n::numPixelsX)\
    .def("numPixelsY", &n::numPixelsY)\
    .def("numPixels", &n::numPixels)\

  _CLASS(psddl_python::Princeton::ConfigV5_Wrapper, "ConfigV5", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV5_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV5);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("shotIdStart", &n::shotIdStart)\
    .def("readoutTime", &n::readoutTime)\
    .def("data", &n::data)\

  _CLASS(psddl_python::Princeton::FrameV1_Wrapper, "FrameV1", return_value_policy<return_by_value>());
  std_vector_class_(FrameV1_Wrapper);
#undef _CLASS
  ADD_GETTER(FrameV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("shotIdStart", &n::shotIdStart)\
    .def("readoutTime", &n::readoutTime)\
    .def("temperature", &n::temperature)\
    .def("data", &n::data)\

  _CLASS(psddl_python::Princeton::FrameV2_Wrapper, "FrameV2", return_value_policy<return_by_value>());
  std_vector_class_(FrameV2_Wrapper);
#undef _CLASS
  ADD_GETTER(FrameV2);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("temperature", &n::temperature)\
    .def("_sizeof", &n::_sizeof)\

  _CLASS(Psana::Princeton::InfoV1, "InfoV1", return_value_policy<copy_const_reference>());
  _CLASS(psddl_python::Princeton::InfoV1_Wrapper, "InfoV1", return_value_policy<return_by_value>());
  std_vector_class_(Psana::Princeton::InfoV1);
  std_vector_class_(InfoV1_Wrapper);
#undef _CLASS
  ADD_GETTER(InfoV1);


} // createWrappers()
} // namespace Princeton
} // namespace psddl_python
