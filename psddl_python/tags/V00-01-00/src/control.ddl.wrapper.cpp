/* Do not edit this file, as it is auto-generated */

#include <cstddef>
#include <psddl_psana/control.ddl.h> // inc_psana
#include <psddl_python/control.ddl.wrapper.h> // inc_python

namespace psddl_python {
namespace ControlData {

void createWrappers() {
  _import_array();

#define _CLASS(n, policy) class_<n>(#n, no_init)\
    .def("name", &n::name)\
    .def("index", &n::index)\
    .def("value", &n::value)\
    .def("array", &n::array)\
    .def("_sizeof", &n::_sizeof)\

  _CLASS(Psana::ControlData::PVControl, return_value_policy<copy_const_reference>());
  _CLASS(psddl_python::ControlData::PVControl_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(Psana::ControlData::PVControl);
  std_vector_class_(PVControl_Wrapper);
#undef _CLASS
  ADD_EVENT_GETTER(PVControl);


#define _CLASS(n, policy) class_<n>(#n, no_init)\
    .def("name", &n::name)\
    .def("index", &n::index)\
    .def("loValue", &n::loValue)\
    .def("hiValue", &n::hiValue)\
    .def("array", &n::array)\
    .def("_sizeof", &n::_sizeof)\

  _CLASS(Psana::ControlData::PVMonitor, return_value_policy<copy_const_reference>());
  _CLASS(psddl_python::ControlData::PVMonitor_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(Psana::ControlData::PVMonitor);
  std_vector_class_(PVMonitor_Wrapper);
#undef _CLASS
  ADD_EVENT_GETTER(PVMonitor);


#define _CLASS(n, policy) class_<n>(#n, no_init)\
    .def("events", &n::events)\
    .def("uses_duration", &n::uses_duration)\
    .def("uses_events", &n::uses_events)\
    .def("duration", &n::duration, policy)\
    .def("npvControls", &n::npvControls)\
    .def("npvMonitors", &n::npvMonitors)\
    .def("pvControls", &n::pvControls)\
    .def("pvMonitors", &n::pvMonitors)\

  _CLASS(psddl_python::ControlData::ConfigV1_Wrapper, return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1_Wrapper);
#undef _CLASS
  ADD_ENV_OBJECT_STORE_GETTER(ConfigV1);


} // createWrappers()
} // namespace ControlData
} // namespace psddl_python
