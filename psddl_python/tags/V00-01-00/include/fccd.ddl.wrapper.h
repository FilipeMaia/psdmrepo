/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_FCCD_DDL_WRAPPER_H
#define PSDDL_PYTHON_FCCD_DDL_WRAPPER_H 1

#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_python/DdlWrapper.h>

namespace psddl_python {
namespace FCCD {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class FccdConfigV1_Wrapper {
  shared_ptr<Psana::FCCD::FccdConfigV1> _o;
  Psana::FCCD::FccdConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig };
  enum { Version = 1 };
  FccdConfigV1_Wrapper(shared_ptr<Psana::FCCD::FccdConfigV1> obj) : _o(obj), o(_o.get()) {}
  FccdConfigV1_Wrapper(Psana::FCCD::FccdConfigV1* obj) : o(obj) {}
  uint16_t outputMode() const { return o->outputMode(); }
  uint32_t width() const { return o->width(); }
  uint32_t height() const { return o->height(); }
  uint32_t trimmedWidth() const { return o->trimmedWidth(); }
  uint32_t trimmedHeight() const { return o->trimmedHeight(); }
};

class FccdConfigV2_Wrapper {
  shared_ptr<Psana::FCCD::FccdConfigV2> _o;
  Psana::FCCD::FccdConfigV2* o;
public:
  enum { TypeId = Pds::TypeId::Id_FccdConfig };
  enum { Version = 2 };
  FccdConfigV2_Wrapper(shared_ptr<Psana::FCCD::FccdConfigV2> obj) : _o(obj), o(_o.get()) {}
  FccdConfigV2_Wrapper(Psana::FCCD::FccdConfigV2* obj) : o(obj) {}
  uint16_t outputMode() const { return o->outputMode(); }
  uint8_t ccdEnable() const { return o->ccdEnable(); }
  uint8_t focusMode() const { return o->focusMode(); }
  uint32_t exposureTime() const { return o->exposureTime(); }
  PyObject* dacVoltages() const { ND_CONVERT(o->dacVoltages(), float, 1); }
  PyObject* waveforms() const { ND_CONVERT(o->waveforms(), uint16_t, 1); }
  uint32_t width() const { return o->width(); }
  uint32_t height() const { return o->height(); }
  uint32_t trimmedWidth() const { return o->trimmedWidth(); }
  uint32_t trimmedHeight() const { return o->trimmedHeight(); }
};

  class FccdConfigV1_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::FCCD::FccdConfigV1";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::FCCD::FccdConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::FCCD::FccdConfigV1> result = store.get(source, foundSrc);
      return result.get() ? object(FccdConfigV1_Wrapper(result)) : object();
    }
  };

  class FccdConfigV2_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::FCCD::FccdConfigV2";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::FCCD::FccdConfigV2::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::FCCD::FccdConfigV2> result = store.get(source, foundSrc);
      return result.get() ? object(FccdConfigV2_Wrapper(result)) : object();
    }
  };
} // namespace FCCD
} // namespace psddl_python
#endif // PSDDL_PYTHON_FCCD_DDL_WRAPPER_H
