/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/epics.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Epics {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Epics", 0, "The Python wrapper module for Epics types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Epics", submodule);
  scope mod = object(handle<>(borrowed(submodule)));

  mod.attr("iXtcVersion")=1;
  mod.attr("iMaxPvNameLength")=64;
  mod.attr("MAX_STRING_SIZE")=40;
  mod.attr("MAX_UNITS_SIZE")=8;
  mod.attr("MAX_ENUM_STRING_SIZE")=26;
  mod.attr("MAX_ENUM_STATES")=16;

  enum_<Psana::Epics::DbrTypes>("DbrTypes")
    .value("DBR_STRING",Psana::Epics::DBR_STRING)
    .value("DBR_SHORT",Psana::Epics::DBR_SHORT)
    .value("DBR_FLOAT",Psana::Epics::DBR_FLOAT)
    .value("DBR_ENUM",Psana::Epics::DBR_ENUM)
    .value("DBR_CHAR",Psana::Epics::DBR_CHAR)
    .value("DBR_LONG",Psana::Epics::DBR_LONG)
    .value("DBR_DOUBLE",Psana::Epics::DBR_DOUBLE)
    .value("DBR_STS_STRING",Psana::Epics::DBR_STS_STRING)
    .value("DBR_STS_SHORT",Psana::Epics::DBR_STS_SHORT)
    .value("DBR_STS_FLOAT",Psana::Epics::DBR_STS_FLOAT)
    .value("DBR_STS_ENUM",Psana::Epics::DBR_STS_ENUM)
    .value("DBR_STS_CHAR",Psana::Epics::DBR_STS_CHAR)
    .value("DBR_STS_LONG",Psana::Epics::DBR_STS_LONG)
    .value("DBR_STS_DOUBLE",Psana::Epics::DBR_STS_DOUBLE)
    .value("DBR_TIME_STRING",Psana::Epics::DBR_TIME_STRING)
    .value("DBR_TIME_INT",Psana::Epics::DBR_TIME_INT)
    .value("DBR_TIME_SHORT",Psana::Epics::DBR_TIME_SHORT)
    .value("DBR_TIME_FLOAT",Psana::Epics::DBR_TIME_FLOAT)
    .value("DBR_TIME_ENUM",Psana::Epics::DBR_TIME_ENUM)
    .value("DBR_TIME_CHAR",Psana::Epics::DBR_TIME_CHAR)
    .value("DBR_TIME_LONG",Psana::Epics::DBR_TIME_LONG)
    .value("DBR_TIME_DOUBLE",Psana::Epics::DBR_TIME_DOUBLE)
    .value("DBR_GR_STRING",Psana::Epics::DBR_GR_STRING)
    .value("DBR_GR_SHORT",Psana::Epics::DBR_GR_SHORT)
    .value("DBR_GR_FLOAT",Psana::Epics::DBR_GR_FLOAT)
    .value("DBR_GR_ENUM",Psana::Epics::DBR_GR_ENUM)
    .value("DBR_GR_CHAR",Psana::Epics::DBR_GR_CHAR)
    .value("DBR_GR_LONG",Psana::Epics::DBR_GR_LONG)
    .value("DBR_GR_DOUBLE",Psana::Epics::DBR_GR_DOUBLE)
    .value("DBR_CTRL_STRING",Psana::Epics::DBR_CTRL_STRING)
    .value("DBR_CTRL_SHORT",Psana::Epics::DBR_CTRL_SHORT)
    .value("DBR_CTRL_FLOAT",Psana::Epics::DBR_CTRL_FLOAT)
    .value("DBR_CTRL_ENUM",Psana::Epics::DBR_CTRL_ENUM)
    .value("DBR_CTRL_CHAR",Psana::Epics::DBR_CTRL_CHAR)
    .value("DBR_CTRL_LONG",Psana::Epics::DBR_CTRL_LONG)
    .value("DBR_CTRL_DOUBLE",Psana::Epics::DBR_CTRL_DOUBLE)
  ;
  class_<Psana::Epics::epicsTimeStamp >("epicsTimeStamp", no_init)
    .def("sec", &Psana::Epics::epicsTimeStamp::sec)
    .def("nsec", &Psana::Epics::epicsTimeStamp::nsec)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::epicsTimeStamp> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_string >("dbr_time_string", no_init)
    .def("status", &Psana::Epics::dbr_time_string::status)
    .def("severity", &Psana::Epics::dbr_time_string::severity)
    .def("stamp", &Psana::Epics::dbr_time_string::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_STRING;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_string> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_short >("dbr_time_short", no_init)
    .def("status", &Psana::Epics::dbr_time_short::status)
    .def("severity", &Psana::Epics::dbr_time_short::severity)
    .def("stamp", &Psana::Epics::dbr_time_short::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_SHORT;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_short> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_float >("dbr_time_float", no_init)
    .def("status", &Psana::Epics::dbr_time_float::status)
    .def("severity", &Psana::Epics::dbr_time_float::severity)
    .def("stamp", &Psana::Epics::dbr_time_float::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_FLOAT;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_float> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_enum >("dbr_time_enum", no_init)
    .def("status", &Psana::Epics::dbr_time_enum::status)
    .def("severity", &Psana::Epics::dbr_time_enum::severity)
    .def("stamp", &Psana::Epics::dbr_time_enum::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_ENUM;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_enum> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_char >("dbr_time_char", no_init)
    .def("status", &Psana::Epics::dbr_time_char::status)
    .def("severity", &Psana::Epics::dbr_time_char::severity)
    .def("stamp", &Psana::Epics::dbr_time_char::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_CHAR;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_char> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_long >("dbr_time_long", no_init)
    .def("status", &Psana::Epics::dbr_time_long::status)
    .def("severity", &Psana::Epics::dbr_time_long::severity)
    .def("stamp", &Psana::Epics::dbr_time_long::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_LONG;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_long> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_time_double >("dbr_time_double", no_init)
    .def("status", &Psana::Epics::dbr_time_double::status)
    .def("severity", &Psana::Epics::dbr_time_double::severity)
    .def("stamp", &Psana::Epics::dbr_time_double::stamp, return_value_policy<copy_const_reference>())
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_TIME_DOUBLE;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_time_double> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_sts_string >("dbr_sts_string", no_init)
    .def("status", &Psana::Epics::dbr_sts_string::status)
    .def("severity", &Psana::Epics::dbr_sts_string::severity)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_STRING;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_sts_string> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_short >("dbr_ctrl_short", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_short::status)
    .def("severity", &Psana::Epics::dbr_ctrl_short::severity)
    .def("units", &Psana::Epics::dbr_ctrl_short::units)
    .def("upper_disp_limit", &Psana::Epics::dbr_ctrl_short::upper_disp_limit)
    .def("lower_disp_limit", &Psana::Epics::dbr_ctrl_short::lower_disp_limit)
    .def("upper_alarm_limit", &Psana::Epics::dbr_ctrl_short::upper_alarm_limit)
    .def("upper_warning_limit", &Psana::Epics::dbr_ctrl_short::upper_warning_limit)
    .def("lower_warning_limit", &Psana::Epics::dbr_ctrl_short::lower_warning_limit)
    .def("lower_alarm_limit", &Psana::Epics::dbr_ctrl_short::lower_alarm_limit)
    .def("upper_ctrl_limit", &Psana::Epics::dbr_ctrl_short::upper_ctrl_limit)
    .def("lower_ctrl_limit", &Psana::Epics::dbr_ctrl_short::lower_ctrl_limit)
    .def("units_shape", &method_shape<Psana::Epics::dbr_ctrl_short, &Psana::Epics::dbr_ctrl_short::units_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_SHORT;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_short> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_float >("dbr_ctrl_float", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_float::status)
    .def("severity", &Psana::Epics::dbr_ctrl_float::severity)
    .def("precision", &Psana::Epics::dbr_ctrl_float::precision)
    .def("units", &Psana::Epics::dbr_ctrl_float::units)
    .def("upper_disp_limit", &Psana::Epics::dbr_ctrl_float::upper_disp_limit)
    .def("lower_disp_limit", &Psana::Epics::dbr_ctrl_float::lower_disp_limit)
    .def("upper_alarm_limit", &Psana::Epics::dbr_ctrl_float::upper_alarm_limit)
    .def("upper_warning_limit", &Psana::Epics::dbr_ctrl_float::upper_warning_limit)
    .def("lower_warning_limit", &Psana::Epics::dbr_ctrl_float::lower_warning_limit)
    .def("lower_alarm_limit", &Psana::Epics::dbr_ctrl_float::lower_alarm_limit)
    .def("upper_ctrl_limit", &Psana::Epics::dbr_ctrl_float::upper_ctrl_limit)
    .def("lower_ctrl_limit", &Psana::Epics::dbr_ctrl_float::lower_ctrl_limit)
    .def("units_shape", &method_shape<Psana::Epics::dbr_ctrl_float, &Psana::Epics::dbr_ctrl_float::units_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_FLOAT;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_float> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_enum >("dbr_ctrl_enum", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_enum::status)
    .def("severity", &Psana::Epics::dbr_ctrl_enum::severity)
    .def("no_str", &Psana::Epics::dbr_ctrl_enum::no_str)
    .def("strings", &Psana::Epics::dbr_ctrl_enum::strings)
    .def("strings_shape", &method_shape<Psana::Epics::dbr_ctrl_enum, &Psana::Epics::dbr_ctrl_enum::strings_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_ENUM;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_enum> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_char >("dbr_ctrl_char", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_char::status)
    .def("severity", &Psana::Epics::dbr_ctrl_char::severity)
    .def("units", &Psana::Epics::dbr_ctrl_char::units)
    .def("upper_disp_limit", &Psana::Epics::dbr_ctrl_char::upper_disp_limit)
    .def("lower_disp_limit", &Psana::Epics::dbr_ctrl_char::lower_disp_limit)
    .def("upper_alarm_limit", &Psana::Epics::dbr_ctrl_char::upper_alarm_limit)
    .def("upper_warning_limit", &Psana::Epics::dbr_ctrl_char::upper_warning_limit)
    .def("lower_warning_limit", &Psana::Epics::dbr_ctrl_char::lower_warning_limit)
    .def("lower_alarm_limit", &Psana::Epics::dbr_ctrl_char::lower_alarm_limit)
    .def("upper_ctrl_limit", &Psana::Epics::dbr_ctrl_char::upper_ctrl_limit)
    .def("lower_ctrl_limit", &Psana::Epics::dbr_ctrl_char::lower_ctrl_limit)
    .def("units_shape", &method_shape<Psana::Epics::dbr_ctrl_char, &Psana::Epics::dbr_ctrl_char::units_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_CHAR;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_char> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_long >("dbr_ctrl_long", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_long::status)
    .def("severity", &Psana::Epics::dbr_ctrl_long::severity)
    .def("units", &Psana::Epics::dbr_ctrl_long::units)
    .def("upper_disp_limit", &Psana::Epics::dbr_ctrl_long::upper_disp_limit)
    .def("lower_disp_limit", &Psana::Epics::dbr_ctrl_long::lower_disp_limit)
    .def("upper_alarm_limit", &Psana::Epics::dbr_ctrl_long::upper_alarm_limit)
    .def("upper_warning_limit", &Psana::Epics::dbr_ctrl_long::upper_warning_limit)
    .def("lower_warning_limit", &Psana::Epics::dbr_ctrl_long::lower_warning_limit)
    .def("lower_alarm_limit", &Psana::Epics::dbr_ctrl_long::lower_alarm_limit)
    .def("upper_ctrl_limit", &Psana::Epics::dbr_ctrl_long::upper_ctrl_limit)
    .def("lower_ctrl_limit", &Psana::Epics::dbr_ctrl_long::lower_ctrl_limit)
    .def("units_shape", &method_shape<Psana::Epics::dbr_ctrl_long, &Psana::Epics::dbr_ctrl_long::units_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_LONG;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_long> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::dbr_ctrl_double >("dbr_ctrl_double", no_init)
    .def("status", &Psana::Epics::dbr_ctrl_double::status)
    .def("severity", &Psana::Epics::dbr_ctrl_double::severity)
    .def("precision", &Psana::Epics::dbr_ctrl_double::precision)
    .def("units", &Psana::Epics::dbr_ctrl_double::units)
    .def("upper_disp_limit", &Psana::Epics::dbr_ctrl_double::upper_disp_limit)
    .def("lower_disp_limit", &Psana::Epics::dbr_ctrl_double::lower_disp_limit)
    .def("upper_alarm_limit", &Psana::Epics::dbr_ctrl_double::upper_alarm_limit)
    .def("upper_warning_limit", &Psana::Epics::dbr_ctrl_double::upper_warning_limit)
    .def("lower_warning_limit", &Psana::Epics::dbr_ctrl_double::lower_warning_limit)
    .def("lower_alarm_limit", &Psana::Epics::dbr_ctrl_double::lower_alarm_limit)
    .def("upper_ctrl_limit", &Psana::Epics::dbr_ctrl_double::upper_ctrl_limit)
    .def("lower_ctrl_limit", &Psana::Epics::dbr_ctrl_double::lower_ctrl_limit)
    .def("units_shape", &method_shape<Psana::Epics::dbr_ctrl_double, &Psana::Epics::dbr_ctrl_double::units_shape>)
  ;

  scope().attr("DBR_TYPE_ID")=Psana::Epics::DBR_CTRL_DOUBLE;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::dbr_ctrl_double> >(-1));

  class_<Psana::Epics::EpicsPvHeader, boost::shared_ptr<Psana::Epics::EpicsPvHeader>, boost::noncopyable >("EpicsPvHeader", no_init)
    .def("pvId", &Psana::Epics::EpicsPvHeader::pvId)
    .def("dbrType", &Psana::Epics::EpicsPvHeader::dbrType)
    .def("numElements", &Psana::Epics::EpicsPvHeader::numElements)
    .def("isCtrl", &Psana::Epics::EpicsPvHeader::isCtrl)
    .def("isTime", &Psana::Epics::EpicsPvHeader::isTime)
    .def("status", &Psana::Epics::EpicsPvHeader::status)
    .def("severity", &Psana::Epics::EpicsPvHeader::severity)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvHeader> >(-1));

  class_<Psana::Epics::EpicsPvCtrlHeader, boost::python::bases<Psana::Epics::EpicsPvHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlHeader>, boost::noncopyable >("EpicsPvCtrlHeader", no_init)
    .def("pvName", &Psana::Epics::EpicsPvCtrlHeader::pvName)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlHeader> >(-1));

  class_<Psana::Epics::EpicsPvTimeHeader, boost::python::bases<Psana::Epics::EpicsPvHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeHeader>, boost::noncopyable >("EpicsPvTimeHeader", no_init)
    .def("stamp", &Psana::Epics::EpicsPvTimeHeader::stamp)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeHeader> >(-1));

  class_<Psana::Epics::EpicsPvCtrlString, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlString>, boost::noncopyable >("EpicsPvCtrlString", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlString::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlString::data)
    .def("value", &Psana::Epics::EpicsPvCtrlString::value)
    .def("data_shape", &method_shape<Psana::Epics::EpicsPvCtrlString, &Psana::Epics::EpicsPvCtrlString::data_shape>)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlString> >(-1));

  class_<Psana::Epics::EpicsPvCtrlShort, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlShort>, boost::noncopyable >("EpicsPvCtrlShort", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlShort::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlShort::data)
    .def("value", &Psana::Epics::EpicsPvCtrlShort::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlShort> >(-1));

  class_<Psana::Epics::EpicsPvCtrlFloat, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlFloat>, boost::noncopyable >("EpicsPvCtrlFloat", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlFloat::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlFloat::data)
    .def("value", &Psana::Epics::EpicsPvCtrlFloat::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlFloat> >(-1));

  class_<Psana::Epics::EpicsPvCtrlEnum, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlEnum>, boost::noncopyable >("EpicsPvCtrlEnum", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlEnum::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlEnum::data)
    .def("value", &Psana::Epics::EpicsPvCtrlEnum::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlEnum> >(-1));

  class_<Psana::Epics::EpicsPvCtrlChar, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlChar>, boost::noncopyable >("EpicsPvCtrlChar", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlChar::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlChar::data)
    .def("value", &Psana::Epics::EpicsPvCtrlChar::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlChar> >(-1));

  class_<Psana::Epics::EpicsPvCtrlLong, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlLong>, boost::noncopyable >("EpicsPvCtrlLong", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlLong::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlLong::data)
    .def("value", &Psana::Epics::EpicsPvCtrlLong::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlLong> >(-1));

  class_<Psana::Epics::EpicsPvCtrlDouble, boost::python::bases<Psana::Epics::EpicsPvCtrlHeader>, boost::shared_ptr<Psana::Epics::EpicsPvCtrlDouble>, boost::noncopyable >("EpicsPvCtrlDouble", no_init)
    .def("dbr", &Psana::Epics::EpicsPvCtrlDouble::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvCtrlDouble::data)
    .def("value", &Psana::Epics::EpicsPvCtrlDouble::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvCtrlDouble> >(-1));

  class_<Psana::Epics::EpicsPvTimeString, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeString>, boost::noncopyable >("EpicsPvTimeString", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeString::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeString::data)
    .def("value", &Psana::Epics::EpicsPvTimeString::value)
    .def("data_shape", &method_shape<Psana::Epics::EpicsPvTimeString, &Psana::Epics::EpicsPvTimeString::data_shape>)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeString> >(-1));

  class_<Psana::Epics::EpicsPvTimeShort, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeShort>, boost::noncopyable >("EpicsPvTimeShort", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeShort::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeShort::data)
    .def("value", &Psana::Epics::EpicsPvTimeShort::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeShort> >(-1));

  class_<Psana::Epics::EpicsPvTimeFloat, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeFloat>, boost::noncopyable >("EpicsPvTimeFloat", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeFloat::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeFloat::data)
    .def("value", &Psana::Epics::EpicsPvTimeFloat::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeFloat> >(-1));

  class_<Psana::Epics::EpicsPvTimeEnum, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeEnum>, boost::noncopyable >("EpicsPvTimeEnum", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeEnum::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeEnum::data)
    .def("value", &Psana::Epics::EpicsPvTimeEnum::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeEnum> >(-1));

  class_<Psana::Epics::EpicsPvTimeChar, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeChar>, boost::noncopyable >("EpicsPvTimeChar", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeChar::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeChar::data)
    .def("value", &Psana::Epics::EpicsPvTimeChar::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeChar> >(-1));

  class_<Psana::Epics::EpicsPvTimeLong, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeLong>, boost::noncopyable >("EpicsPvTimeLong", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeLong::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeLong::data)
    .def("value", &Psana::Epics::EpicsPvTimeLong::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeLong> >(-1));

  class_<Psana::Epics::EpicsPvTimeDouble, boost::python::bases<Psana::Epics::EpicsPvTimeHeader>, boost::shared_ptr<Psana::Epics::EpicsPvTimeDouble>, boost::noncopyable >("EpicsPvTimeDouble", no_init)
    .def("dbr", &Psana::Epics::EpicsPvTimeDouble::dbr, return_value_policy<copy_const_reference>())
    .def("data", &Psana::Epics::EpicsPvTimeDouble::data)
    .def("value", &Psana::Epics::EpicsPvTimeDouble::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::EpicsPvTimeDouble> >(-1));

  {
  scope outer = 
  class_<Psana::Epics::PvConfigV1 >("PvConfigV1", no_init)
    .def("pvId", &Psana::Epics::PvConfigV1::pvId)
    .def("description", &Psana::Epics::PvConfigV1::description)
    .def("interval", &Psana::Epics::PvConfigV1::interval)
  ;

  scope().attr("iMaxPvDescLength")=64;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Epics::PvConfigV1> >(-1));

  class_<Psana::Epics::ConfigV1, boost::shared_ptr<Psana::Epics::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("numPv", &Psana::Epics::ConfigV1::numPv)
    .def("pvControls", &Psana::Epics::ConfigV1::pvControls)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Epics::ConfigV1> >(Pds::TypeId::Id_EpicsConfig));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const double, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const int16_t, 1>();
  detail::register_ndarray_to_list_cvt<const Psana::Epics::PvConfigV1>();
  detail::register_ndarray_to_numpy_cvt<const float, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const int32_t, 1>();

} // createWrappers()
} // namespace Epics
} // namespace psddl_python
