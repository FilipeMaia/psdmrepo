/* Do not edit this file, as it is auto-generated */

#include <psddl_python/fccd.ddl.wrapper.h> // inc_python
#include <cstddef>

namespace psddl_python {
namespace FCCD {

void createWrappers(PyObject* module) {
  _import_array();
  PyObject* submodule = Py_InitModule3( "psana.FCCD", 0, "The Python wrapper module for FCCD types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "FCCD", submodule);
  scope mod = object(handle<>(borrowed(submodule)));

#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("outputMode", &n::outputMode)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("trimmedWidth", &n::trimmedWidth)\
    .def("trimmedHeight", &n::trimmedHeight)\

  _CLASS(psddl_python::FCCD::FccdConfigV1_Wrapper, "FccdConfigV1", return_value_policy<return_by_value>());
  std_vector_class_(FccdConfigV1_Wrapper);
#undef _CLASS
  ADD_GETTER(FccdConfigV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("outputMode", &n::outputMode)\
    .def("ccdEnable", &n::ccdEnable)\
    .def("focusMode", &n::focusMode)\
    .def("exposureTime", &n::exposureTime)\
    .def("dacVoltages", &n::dacVoltages)\
    .def("waveforms", &n::waveforms)\
    .def("width", &n::width)\
    .def("height", &n::height)\
    .def("trimmedWidth", &n::trimmedWidth)\
    .def("trimmedHeight", &n::trimmedHeight)\

  _CLASS(psddl_python::FCCD::FccdConfigV2_Wrapper, "FccdConfigV2", return_value_policy<return_by_value>());
  std_vector_class_(FccdConfigV2_Wrapper);
#undef _CLASS
  ADD_GETTER(FccdConfigV2);


} // createWrappers()
} // namespace FCCD
} // namespace psddl_python
