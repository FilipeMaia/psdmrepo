/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/control.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace ControlData {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.ControlData", 0, "The Python wrapper module for ControlData types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "ControlData", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::ControlData::PVControl >("PVControl", no_init)
    .def("name", &Psana::ControlData::PVControl::name)
    .def("index", &Psana::ControlData::PVControl::index)
    .def("value", &Psana::ControlData::PVControl::value)
    .def("array", &Psana::ControlData::PVControl::array)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVControl>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVControl> >(-1, -1));

  class_<Psana::ControlData::PVMonitor >("PVMonitor", no_init)
    .def("name", &Psana::ControlData::PVMonitor::name)
    .def("index", &Psana::ControlData::PVMonitor::index)
    .def("loValue", &Psana::ControlData::PVMonitor::loValue)
    .def("hiValue", &Psana::ControlData::PVMonitor::hiValue)
    .def("array", &Psana::ControlData::PVMonitor::array)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVMonitor>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVMonitor> >(-1, -1));

  class_<Psana::ControlData::PVLabel >("PVLabel", no_init)
    .def("name", &Psana::ControlData::PVLabel::name)
    .def("value", &Psana::ControlData::PVLabel::value)
    .def("__typeid__", &method_typeid<Psana::ControlData::PVLabel>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVLabel> >(-1, -1));

  class_<Psana::ControlData::ConfigV1, boost::shared_ptr<Psana::ControlData::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("events", &Psana::ControlData::ConfigV1::events)
    .def("uses_duration", &Psana::ControlData::ConfigV1::uses_duration)
    .def("uses_events", &Psana::ControlData::ConfigV1::uses_events)
    .def("duration", &Psana::ControlData::ConfigV1::duration, return_value_policy<copy_const_reference>())
    .def("npvControls", &Psana::ControlData::ConfigV1::npvControls)
    .def("npvMonitors", &Psana::ControlData::ConfigV1::npvMonitors)
    .def("pvControls", &Psana::ControlData::ConfigV1::pvControls)
    .def("pvMonitors", &Psana::ControlData::ConfigV1::pvMonitors)
    .def("__typeid__", &method_typeid<Psana::ControlData::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::ControlData::ConfigV1> >(Pds::TypeId::Id_ControlConfig, 1));

  class_<Psana::ControlData::ConfigV2, boost::shared_ptr<Psana::ControlData::ConfigV2>, boost::noncopyable >("ConfigV2", no_init)
    .def("events", &Psana::ControlData::ConfigV2::events)
    .def("uses_duration", &Psana::ControlData::ConfigV2::uses_duration)
    .def("uses_events", &Psana::ControlData::ConfigV2::uses_events)
    .def("duration", &Psana::ControlData::ConfigV2::duration, return_value_policy<copy_const_reference>())
    .def("npvControls", &Psana::ControlData::ConfigV2::npvControls)
    .def("npvMonitors", &Psana::ControlData::ConfigV2::npvMonitors)
    .def("npvLabels", &Psana::ControlData::ConfigV2::npvLabels)
    .def("pvControls", &Psana::ControlData::ConfigV2::pvControls)
    .def("pvMonitors", &Psana::ControlData::ConfigV2::pvMonitors)
    .def("pvLabels", &Psana::ControlData::ConfigV2::pvLabels)
    .def("__typeid__", &method_typeid<Psana::ControlData::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::ControlData::ConfigV2> >(Pds::TypeId::Id_ControlConfig, 2));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVLabel>();
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVMonitor>();
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVControl>();

} // createWrappers()
} // namespace ControlData
} // namespace psddl_python
