/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_PULNIX_DDL_WRAPPER_H
#define PSDDL_PYTHON_PULNIX_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/pulnix.ddl.h" // inc_psana

namespace psddl_python {
namespace Pulnix {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class TM6740ConfigV1_Wrapper {
  shared_ptr<const Psana::Pulnix::TM6740ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_TM6740Config };
  enum { Version = 1 };
  TM6740ConfigV1_Wrapper(const shared_ptr<const Psana::Pulnix::TM6740ConfigV1>& obj) : m_obj(obj) {}
  uint16_t gain_a() const { return m_obj->gain_a(); }
  uint16_t gain_b() const { return m_obj->gain_b(); }
  uint16_t vref() const { return m_obj->vref(); }
  uint16_t shutter_width() const { return m_obj->shutter_width(); }
  uint8_t gain_balance() const { return m_obj->gain_balance(); }
  Psana::Pulnix::TM6740ConfigV1::Depth output_resolution() const { return m_obj->output_resolution(); }
  Psana::Pulnix::TM6740ConfigV1::Binning horizontal_binning() const { return m_obj->horizontal_binning(); }
  Psana::Pulnix::TM6740ConfigV1::Binning vertical_binning() const { return m_obj->vertical_binning(); }
  Psana::Pulnix::TM6740ConfigV1::LookupTable lookuptable_mode() const { return m_obj->lookuptable_mode(); }
  uint8_t output_resolution_bits() const { return m_obj->output_resolution_bits(); }
};

class TM6740ConfigV2_Wrapper {
  shared_ptr<const Psana::Pulnix::TM6740ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_TM6740Config };
  enum { Version = 2 };
  TM6740ConfigV2_Wrapper(const shared_ptr<const Psana::Pulnix::TM6740ConfigV2>& obj) : m_obj(obj) {}
  uint16_t gain_a() const { return m_obj->gain_a(); }
  uint16_t gain_b() const { return m_obj->gain_b(); }
  uint16_t vref_a() const { return m_obj->vref_a(); }
  uint16_t vref_b() const { return m_obj->vref_b(); }
  uint8_t gain_balance() const { return m_obj->gain_balance(); }
  Psana::Pulnix::TM6740ConfigV2::Depth output_resolution() const { return m_obj->output_resolution(); }
  Psana::Pulnix::TM6740ConfigV2::Binning horizontal_binning() const { return m_obj->horizontal_binning(); }
  Psana::Pulnix::TM6740ConfigV2::Binning vertical_binning() const { return m_obj->vertical_binning(); }
  Psana::Pulnix::TM6740ConfigV2::LookupTable lookuptable_mode() const { return m_obj->lookuptable_mode(); }
  uint8_t output_resolution_bits() const { return m_obj->output_resolution_bits(); }
};

  class TM6740ConfigV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Pulnix::TM6740ConfigV1);}
    const char* getTypeName() const { return "Psana::Pulnix::TM6740ConfigV1";}
    int getVersion() const { return Psana::Pulnix::TM6740ConfigV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_TM6740Config; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Pulnix::TM6740ConfigV1> result = boost::static_pointer_cast<Psana::Pulnix::TM6740ConfigV1>(vdata);
      return result.get() ? object(TM6740ConfigV1_Wrapper(result)) : object();
    }
  };

  class TM6740ConfigV2_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Pulnix::TM6740ConfigV2);}
    const char* getTypeName() const { return "Psana::Pulnix::TM6740ConfigV2";}
    int getVersion() const { return Psana::Pulnix::TM6740ConfigV2::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_TM6740Config; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Pulnix::TM6740ConfigV2> result = boost::static_pointer_cast<Psana::Pulnix::TM6740ConfigV2>(vdata);
      return result.get() ? object(TM6740ConfigV2_Wrapper(result)) : object();
    }
  };
} // namespace Pulnix
} // namespace psddl_python
#endif // PSDDL_PYTHON_PULNIX_DDL_WRAPPER_H
