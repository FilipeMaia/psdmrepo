/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ENCODER_DDL_WRAPPER_H
#define PSDDL_PYTHON_ENCODER_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/encoder.ddl.h" // inc_psana

namespace psddl_python {
namespace Encoder {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Encoder::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EncoderConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Encoder::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t chan_num() const { return m_obj->chan_num(); }
  uint32_t count_mode() const { return m_obj->count_mode(); }
  uint32_t quadrature_mode() const { return m_obj->quadrature_mode(); }
  uint32_t input_num() const { return m_obj->input_num(); }
  uint32_t input_rising() const { return m_obj->input_rising(); }
  uint32_t ticks_per_sec() const { return m_obj->ticks_per_sec(); }
};

class ConfigV2_Wrapper {
  shared_ptr<const Psana::Encoder::ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EncoderConfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(const shared_ptr<const Psana::Encoder::ConfigV2>& obj) : m_obj(obj) {}
  uint32_t chan_mask() const { return m_obj->chan_mask(); }
  uint32_t count_mode() const { return m_obj->count_mode(); }
  uint32_t quadrature_mode() const { return m_obj->quadrature_mode(); }
  uint32_t input_num() const { return m_obj->input_num(); }
  uint32_t input_rising() const { return m_obj->input_rising(); }
  uint32_t ticks_per_sec() const { return m_obj->ticks_per_sec(); }
};

class DataV1_Wrapper {
  shared_ptr<const Psana::Encoder::DataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EncoderData };
  enum { Version = 1 };
  DataV1_Wrapper(const shared_ptr<const Psana::Encoder::DataV1>& obj) : m_obj(obj) {}
  uint32_t timestamp() const { return m_obj->timestamp(); }
  uint32_t encoder_count() const { return m_obj->encoder_count(); }
  int32_t value() const { return m_obj->value(); }
};

class DataV2_Wrapper {
  shared_ptr<const Psana::Encoder::DataV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_EncoderData };
  enum { Version = 2 };
  DataV2_Wrapper(const shared_ptr<const Psana::Encoder::DataV2>& obj) : m_obj(obj) {}
  uint32_t timestamp() const { return m_obj->timestamp(); }
  PyObject* encoder_count() const { return detail::ndToNumpy(m_obj->encoder_count(), m_obj); }
  int32_t value(uint32_t i) const { return m_obj->value(i); }
};

  class ConfigV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Encoder::ConfigV1);}
    const char* getTypeName() const { return "Psana::Encoder::ConfigV1";}
    int getVersion() const { return Psana::Encoder::ConfigV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EncoderConfig; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Encoder::ConfigV1> result = boost::static_pointer_cast<Psana::Encoder::ConfigV1>(vdata);
      return result.get() ? object(ConfigV1_Wrapper(result)) : object();
    }
  };

  class ConfigV2_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Encoder::ConfigV2);}
    const char* getTypeName() const { return "Psana::Encoder::ConfigV2";}
    int getVersion() const { return Psana::Encoder::ConfigV2::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EncoderConfig; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Encoder::ConfigV2> result = boost::static_pointer_cast<Psana::Encoder::ConfigV2>(vdata);
      return result.get() ? object(ConfigV2_Wrapper(result)) : object();
    }
  };

  class DataV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Encoder::DataV1);}
    const char* getTypeName() const { return "Psana::Encoder::DataV1";}
    int getVersion() const { return Psana::Encoder::DataV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EncoderData; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Encoder::DataV1> result = boost::static_pointer_cast<Psana::Encoder::DataV1>(vdata);
      return result.get() ? object(DataV1_Wrapper(result)) : object();
    }
  };

  class DataV2_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Encoder::DataV2);}
    const char* getTypeName() const { return "Psana::Encoder::DataV2";}
    int getVersion() const { return Psana::Encoder::DataV2::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EncoderData; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Encoder::DataV2> result = boost::static_pointer_cast<Psana::Encoder::DataV2>(vdata);
      return result.get() ? object(DataV2_Wrapper(result)) : object();
    }
  };
} // namespace Encoder
} // namespace psddl_python
#endif // PSDDL_PYTHON_ENCODER_DDL_WRAPPER_H
