/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_BLD_DDL_WRAPPER_H
#define PSDDL_PYTHON_BLD_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/bld.ddl.h" // inc_psana

#include <psddl_psana/camera.ddl.h>
#include <psddl_python/camera.ddl.wrapper.h>
#include <psddl_psana/ipimb.ddl.h>
#include <psddl_python/ipimb.ddl.wrapper.h>
#include <psddl_psana/lusi.ddl.h>
#include <psddl_python/lusi.ddl.wrapper.h>
#include <psddl_psana/pulnix.ddl.h>
#include <psddl_python/pulnix.ddl.wrapper.h>
namespace psddl_python {
namespace Bld {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class BldDataIpimbV0_Wrapper {
  shared_ptr<const Psana::Bld::BldDataIpimbV0> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 0 };
  BldDataIpimbV0_Wrapper(const shared_ptr<const Psana::Bld::BldDataIpimbV0>& obj) : m_obj(obj) {}
  const Psana::Ipimb::DataV1& ipimbData() const { return m_obj->ipimbData(); }
  const Psana::Ipimb::ConfigV1& ipimbConfig() const { return m_obj->ipimbConfig(); }
  const Psana::Lusi::IpmFexV1& ipmFexData() const { return m_obj->ipmFexData(); }
};

class BldDataIpimbV1_Wrapper {
  shared_ptr<const Psana::Bld::BldDataIpimbV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_SharedIpimb };
  enum { Version = 1 };
  BldDataIpimbV1_Wrapper(const shared_ptr<const Psana::Bld::BldDataIpimbV1>& obj) : m_obj(obj) {}
  const Psana::Ipimb::DataV2& ipimbData() const { return m_obj->ipimbData(); }
  const Psana::Ipimb::ConfigV2& ipimbConfig() const { return m_obj->ipimbConfig(); }
  const Psana::Lusi::IpmFexV1& ipmFexData() const { return m_obj->ipmFexData(); }
};

class BldDataPimV1_Wrapper {
  shared_ptr<const Psana::Bld::BldDataPimV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_SharedPim };
  enum { Version = 1 };
  BldDataPimV1_Wrapper(const shared_ptr<const Psana::Bld::BldDataPimV1>& obj) : m_obj(obj) {}
  const Psana::Pulnix::TM6740ConfigV2& camConfig() const { return m_obj->camConfig(); }
  const Psana::Lusi::PimImageConfigV1& pimConfig() const { return m_obj->pimConfig(); }
  const Psana::Camera::FrameV1& frame() const { return m_obj->frame(); }
};

class BldDataGMDV0_Wrapper {
  shared_ptr<const Psana::Bld::BldDataGMDV0> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_GMD };
  enum { Version = 0 };
  BldDataGMDV0_Wrapper(const shared_ptr<const Psana::Bld::BldDataGMDV0>& obj) : m_obj(obj) {}
  const char* gasType() const { return m_obj->gasType(); }
  double pressure() const { return m_obj->pressure(); }
  double temperature() const { return m_obj->temperature(); }
  double current() const { return m_obj->current(); }
  double hvMeshElectron() const { return m_obj->hvMeshElectron(); }
  double hvMeshIon() const { return m_obj->hvMeshIon(); }
  double hvMultIon() const { return m_obj->hvMultIon(); }
  double chargeQ() const { return m_obj->chargeQ(); }
  double photonEnergy() const { return m_obj->photonEnergy(); }
  double multPulseIntensity() const { return m_obj->multPulseIntensity(); }
  double keithleyPulseIntensity() const { return m_obj->keithleyPulseIntensity(); }
  double pulseEnergy() const { return m_obj->pulseEnergy(); }
  double pulseEnergyFEE() const { return m_obj->pulseEnergyFEE(); }
  double transmission() const { return m_obj->transmission(); }
  double transmissionFEE() const { return m_obj->transmissionFEE(); }
};

class BldDataGMDV1_Wrapper {
  shared_ptr<const Psana::Bld::BldDataGMDV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_GMD };
  enum { Version = 1 };
  BldDataGMDV1_Wrapper(const shared_ptr<const Psana::Bld::BldDataGMDV1>& obj) : m_obj(obj) {}
  double milliJoulesPerPulse() const { return m_obj->milliJoulesPerPulse(); }
  double milliJoulesAverage() const { return m_obj->milliJoulesAverage(); }
  double correctedSumPerPulse() const { return m_obj->correctedSumPerPulse(); }
  double bgValuePerSample() const { return m_obj->bgValuePerSample(); }
  double relativeEnergyPerPulse() const { return m_obj->relativeEnergyPerPulse(); }
};

  class BldDataFEEGasDetEnergy_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataFEEGasDetEnergy);}
    const char* getTypeName() const { return "Psana::Bld::BldDataFEEGasDetEnergy";}
    int getVersion() const { return Psana::Bld::BldDataFEEGasDetEnergy::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_FEEGasDetEnergy; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataFEEGasDetEnergy> result = boost::static_pointer_cast<Psana::Bld::BldDataFEEGasDetEnergy>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataEBeamV0_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataEBeamV0);}
    const char* getTypeName() const { return "Psana::Bld::BldDataEBeamV0";}
    int getVersion() const { return Psana::Bld::BldDataEBeamV0::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EBeam; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataEBeamV0> result = boost::static_pointer_cast<Psana::Bld::BldDataEBeamV0>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataEBeamV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataEBeamV1);}
    const char* getTypeName() const { return "Psana::Bld::BldDataEBeamV1";}
    int getVersion() const { return Psana::Bld::BldDataEBeamV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EBeam; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataEBeamV1> result = boost::static_pointer_cast<Psana::Bld::BldDataEBeamV1>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataEBeamV2_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataEBeamV2);}
    const char* getTypeName() const { return "Psana::Bld::BldDataEBeamV2";}
    int getVersion() const { return Psana::Bld::BldDataEBeamV2::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EBeam; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataEBeamV2> result = boost::static_pointer_cast<Psana::Bld::BldDataEBeamV2>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataEBeamV3_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataEBeamV3);}
    const char* getTypeName() const { return "Psana::Bld::BldDataEBeamV3";}
    int getVersion() const { return Psana::Bld::BldDataEBeamV3::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_EBeam; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataEBeamV3> result = boost::static_pointer_cast<Psana::Bld::BldDataEBeamV3>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataPhaseCavity_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataPhaseCavity);}
    const char* getTypeName() const { return "Psana::Bld::BldDataPhaseCavity";}
    int getVersion() const { return Psana::Bld::BldDataPhaseCavity::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_PhaseCavity; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataPhaseCavity> result = boost::static_pointer_cast<Psana::Bld::BldDataPhaseCavity>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class BldDataIpimbV0_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataIpimbV0);}
    const char* getTypeName() const { return "Psana::Bld::BldDataIpimbV0";}
    int getVersion() const { return Psana::Bld::BldDataIpimbV0::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_SharedIpimb; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataIpimbV0> result = boost::static_pointer_cast<Psana::Bld::BldDataIpimbV0>(vdata);
      return result.get() ? object(BldDataIpimbV0_Wrapper(result)) : object();
    }
  };

  class BldDataIpimbV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataIpimbV1);}
    const char* getTypeName() const { return "Psana::Bld::BldDataIpimbV1";}
    int getVersion() const { return Psana::Bld::BldDataIpimbV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_SharedIpimb; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataIpimbV1> result = boost::static_pointer_cast<Psana::Bld::BldDataIpimbV1>(vdata);
      return result.get() ? object(BldDataIpimbV1_Wrapper(result)) : object();
    }
  };

  class BldDataPimV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataPimV1);}
    const char* getTypeName() const { return "Psana::Bld::BldDataPimV1";}
    int getVersion() const { return Psana::Bld::BldDataPimV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_SharedPim; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataPimV1> result = boost::static_pointer_cast<Psana::Bld::BldDataPimV1>(vdata);
      return result.get() ? object(BldDataPimV1_Wrapper(result)) : object();
    }
  };

  class BldDataGMDV0_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataGMDV0);}
    const char* getTypeName() const { return "Psana::Bld::BldDataGMDV0";}
    int getVersion() const { return Psana::Bld::BldDataGMDV0::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_GMD; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataGMDV0> result = boost::static_pointer_cast<Psana::Bld::BldDataGMDV0>(vdata);
      return result.get() ? object(BldDataGMDV0_Wrapper(result)) : object();
    }
  };

  class BldDataGMDV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Bld::BldDataGMDV1);}
    const char* getTypeName() const { return "Psana::Bld::BldDataGMDV1";}
    int getVersion() const { return Psana::Bld::BldDataGMDV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_GMD; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Bld::BldDataGMDV1> result = boost::static_pointer_cast<Psana::Bld::BldDataGMDV1>(vdata);
      return result.get() ? object(BldDataGMDV1_Wrapper(result)) : object();
    }
  };
} // namespace Bld
} // namespace psddl_python
#endif // PSDDL_PYTHON_BLD_DDL_WRAPPER_H
