/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
#define PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/acqiris.ddl.h" // inc_psana

namespace psddl_python {
namespace Acqiris {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Acqiris::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Acqiris::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t nbrConvertersPerChannel() const { return m_obj->nbrConvertersPerChannel(); }
  uint32_t channelMask() const { return m_obj->channelMask(); }
  uint32_t nbrBanks() const { return m_obj->nbrBanks(); }
  const Psana::Acqiris::TrigV1& trig() const { return m_obj->trig(); }
  const Psana::Acqiris::HorizV1& horiz() const { return m_obj->horiz(); }
  boost::python::list vert() const { return detail::ndToList(m_obj->vert()); }
  uint32_t nbrChannels() const { return m_obj->nbrChannels(); }
};
class ConfigV1;

class DataDescV1Elem_Wrapper {
  shared_ptr<const Psana::Acqiris::DataDescV1Elem> m_obj;
public:
  enum { Version = 1 };
  DataDescV1Elem_Wrapper(const shared_ptr<const Psana::Acqiris::DataDescV1Elem>& obj) : m_obj(obj) {}
  uint32_t nbrSamplesInSeg() const { return m_obj->nbrSamplesInSeg(); }
  uint32_t indexFirstPoint() const { return m_obj->indexFirstPoint(); }
  uint32_t nbrSegments() const { return m_obj->nbrSegments(); }
  boost::python::list timestamp() const { return detail::ndToList(m_obj->timestamp()); }
  PyObject* waveforms() const { return detail::ndToNumpy(m_obj->waveforms(), m_obj); }
};
class ConfigV1;

class DataDescV1_Wrapper {
  shared_ptr<const Psana::Acqiris::DataDescV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqWaveform };
  enum { Version = 1 };
  DataDescV1_Wrapper(const shared_ptr<const Psana::Acqiris::DataDescV1>& obj) : m_obj(obj) {}
  Acqiris::DataDescV1Elem_Wrapper data(uint32_t i0) const { return Acqiris::DataDescV1Elem_Wrapper(boost::shared_ptr<const Psana::Acqiris::DataDescV1Elem>(m_obj, &m_obj->data(i0))); }
  boost::python::list data_shape() const { boost::python::list res; const vector<int>& sh=m_obj->data_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list data_list() { boost::python::list l; const int n = m_obj->data_shape()[0]; for (int i = 0; i < n; i++) l.append(data(i)); return l; }
};

class TdcConfigV1_Wrapper {
  shared_ptr<const Psana::Acqiris::TdcConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcConfig };
  enum { Version = 1 };
  TdcConfigV1_Wrapper(const shared_ptr<const Psana::Acqiris::TdcConfigV1>& obj) : m_obj(obj) {}
  boost::python::list channels() const { return detail::ndToList(m_obj->channels()); }
  boost::python::list auxio() const { return detail::ndToList(m_obj->auxio()); }
  const Psana::Acqiris::TdcVetoIO& veto() const { return m_obj->veto(); }
};

class TdcDataV1_Wrapper {
  shared_ptr<const Psana::Acqiris::TdcDataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcData };
  enum { Version = 1 };
  TdcDataV1_Wrapper(const shared_ptr<const Psana::Acqiris::TdcDataV1>& obj) : m_obj(obj) {}
  boost::python::list data() const { return detail::ndToList(m_obj->data()); }
};

  class VertV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::VertV1);}
    const char* getTypeName() const { return "Psana::Acqiris::VertV1";}
    int getVersion() const { return Psana::Acqiris::VertV1::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::VertV1> result = boost::static_pointer_cast<Psana::Acqiris::VertV1>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class HorizV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::HorizV1);}
    const char* getTypeName() const { return "Psana::Acqiris::HorizV1";}
    int getVersion() const { return Psana::Acqiris::HorizV1::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::HorizV1> result = boost::static_pointer_cast<Psana::Acqiris::HorizV1>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TrigV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TrigV1);}
    const char* getTypeName() const { return "Psana::Acqiris::TrigV1";}
    int getVersion() const { return Psana::Acqiris::TrigV1::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TrigV1> result = boost::static_pointer_cast<Psana::Acqiris::TrigV1>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class ConfigV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::ConfigV1);}
    const char* getTypeName() const { return "Psana::Acqiris::ConfigV1";}
    int getVersion() const { return Psana::Acqiris::ConfigV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_AcqConfig; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::ConfigV1> result = boost::static_pointer_cast<Psana::Acqiris::ConfigV1>(vdata);
      return result.get() ? object(ConfigV1_Wrapper(result)) : object();
    }
  };

  class TimestampV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TimestampV1);}
    const char* getTypeName() const { return "Psana::Acqiris::TimestampV1";}
    int getVersion() const { return Psana::Acqiris::TimestampV1::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TimestampV1> result = boost::static_pointer_cast<Psana::Acqiris::TimestampV1>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class DataDescV1Elem_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::DataDescV1Elem);}
    const char* getTypeName() const { return "Psana::Acqiris::DataDescV1Elem";}
    int getVersion() const { return Psana::Acqiris::DataDescV1Elem::Version; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::DataDescV1Elem> result = boost::static_pointer_cast<Psana::Acqiris::DataDescV1Elem>(vdata);
      return result.get() ? object(DataDescV1Elem_Wrapper(result)) : object();
    }
  };

  class DataDescV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::DataDescV1);}
    const char* getTypeName() const { return "Psana::Acqiris::DataDescV1";}
    int getVersion() const { return Psana::Acqiris::DataDescV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_AcqWaveform; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::DataDescV1> result = boost::static_pointer_cast<Psana::Acqiris::DataDescV1>(vdata);
      return result.get() ? object(DataDescV1_Wrapper(result)) : object();
    }
  };

  class TdcChannel_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcChannel);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcChannel";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcChannel> result = boost::static_pointer_cast<Psana::Acqiris::TdcChannel>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcAuxIO_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcAuxIO);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcAuxIO";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcAuxIO> result = boost::static_pointer_cast<Psana::Acqiris::TdcAuxIO>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcVetoIO_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcVetoIO);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcVetoIO";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcVetoIO> result = boost::static_pointer_cast<Psana::Acqiris::TdcVetoIO>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcConfigV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcConfigV1);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcConfigV1";}
    int getVersion() const { return Psana::Acqiris::TdcConfigV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_AcqTdcConfig; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcConfigV1> result = boost::static_pointer_cast<Psana::Acqiris::TdcConfigV1>(vdata);
      return result.get() ? object(TdcConfigV1_Wrapper(result)) : object();
    }
  };

  class TdcDataV1_Item_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcDataV1_Item);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcDataV1_Item";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcDataV1_Item> result = boost::static_pointer_cast<Psana::Acqiris::TdcDataV1_Item>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcDataV1Common_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcDataV1Common);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcDataV1Common";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcDataV1Common> result = boost::static_pointer_cast<Psana::Acqiris::TdcDataV1Common>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcDataV1Channel_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcDataV1Channel);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcDataV1Channel";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcDataV1Channel> result = boost::static_pointer_cast<Psana::Acqiris::TdcDataV1Channel>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcDataV1Marker_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcDataV1Marker);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcDataV1Marker";}
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcDataV1Marker> result = boost::static_pointer_cast<Psana::Acqiris::TdcDataV1Marker>(vdata);
      return result.get() ? object(*result) : object();
    }
  };

  class TdcDataV1_Converter : public psddl_python::Converter {
  public:
    const std::type_info* typeinfo() const { return &typeid(Psana::Acqiris::TdcDataV1);}
    const char* getTypeName() const { return "Psana::Acqiris::TdcDataV1";}
    int getVersion() const { return Psana::Acqiris::TdcDataV1::Version; }
    int pdsTypeId() const { return Pds::TypeId::Id_AcqTdcData; }
    object convert(const boost::shared_ptr<void>& vdata) const {
      shared_ptr<Psana::Acqiris::TdcDataV1> result = boost::static_pointer_cast<Psana::Acqiris::TdcDataV1>(vdata);
      return result.get() ? object(TdcDataV1_Wrapper(result)) : object();
    }
  };
} // namespace Acqiris
} // namespace psddl_python
#endif // PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
