/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/gsc16ai.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"

namespace psddl_python {
namespace Gsc16ai {

namespace {
PyObject* method_typeid_ConfigV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Gsc16ai::ConfigV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

PyObject* method_typeid_DataV1() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(Psana::Gsc16ai::DataV1), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}

} // namespace
void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Gsc16ai", 0, "The Python wrapper module for Gsc16ai types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Gsc16ai", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::Gsc16ai::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("voltageRange", &psddl_python::Gsc16ai::ConfigV1_Wrapper::voltageRange)
    .def("firstChan", &psddl_python::Gsc16ai::ConfigV1_Wrapper::firstChan)
    .def("lastChan", &psddl_python::Gsc16ai::ConfigV1_Wrapper::lastChan)
    .def("inputMode", &psddl_python::Gsc16ai::ConfigV1_Wrapper::inputMode)
    .def("triggerMode", &psddl_python::Gsc16ai::ConfigV1_Wrapper::triggerMode)
    .def("dataFormat", &psddl_python::Gsc16ai::ConfigV1_Wrapper::dataFormat)
    .def("fps", &psddl_python::Gsc16ai::ConfigV1_Wrapper::fps)
    .def("autocalibEnable", &psddl_python::Gsc16ai::ConfigV1_Wrapper::autocalibEnable)
    .def("timeTagEnable", &psddl_python::Gsc16ai::ConfigV1_Wrapper::timeTagEnable)
    .def("numChannels", &psddl_python::Gsc16ai::ConfigV1_Wrapper::numChannels)
    .def("__typeid__", &method_typeid_ConfigV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<ConfigV1_Converter>());

  class_<psddl_python::Gsc16ai::DataV1_Wrapper>("DataV1", no_init)
    .def("timestamp", &psddl_python::Gsc16ai::DataV1_Wrapper::timestamp)
    .def("channelValue", &psddl_python::Gsc16ai::DataV1_Wrapper::channelValue)
    .def("__typeid__", &method_typeid_DataV1)
    .staticmethod("__typeid__")
  ;
  psddl_python::ConverterMap::instance().addConverter(boost::make_shared<DataV1_Converter>());

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace Gsc16ai
} // namespace psddl_python
