/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
#define PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H 1

#include <psddl_python/DdlWrapper.h>
#include <vector>
#include <ndarray/ndarray.h>
#include <pdsdata/xtc/TypeId.hh>
#include <psddl_psana/acqiris.ddl.h> // inc_psana

namespace psddl_python {
namespace Acqiris {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

extern void createWrappers();

class VertV1_Wrapper {
  shared_ptr<Psana::Acqiris::VertV1> _o;
  Psana::Acqiris::VertV1* o;
public:
  enum { Version = 1 };
  VertV1_Wrapper(shared_ptr<Psana::Acqiris::VertV1> obj) : _o(obj), o(_o.get()) {}
  VertV1_Wrapper(Psana::Acqiris::VertV1* obj) : o(obj) {}
  double fullScale() const { return o->fullScale(); }
  double offset() const { return o->offset(); }
  uint32_t coupling() const { return o->coupling(); }
  uint32_t bandwidth() const { return o->bandwidth(); }
  double slope() const { return o->slope(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class HorizV1_Wrapper {
  shared_ptr<Psana::Acqiris::HorizV1> _o;
  Psana::Acqiris::HorizV1* o;
public:
  enum { Version = 1 };
  HorizV1_Wrapper(shared_ptr<Psana::Acqiris::HorizV1> obj) : _o(obj), o(_o.get()) {}
  HorizV1_Wrapper(Psana::Acqiris::HorizV1* obj) : o(obj) {}
  double sampInterval() const { return o->sampInterval(); }
  double delayTime() const { return o->delayTime(); }
  uint32_t nbrSamples() const { return o->nbrSamples(); }
  uint32_t nbrSegments() const { return o->nbrSegments(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TrigV1_Wrapper {
  shared_ptr<Psana::Acqiris::TrigV1> _o;
  Psana::Acqiris::TrigV1* o;
public:
  enum { Version = 1 };
  TrigV1_Wrapper(shared_ptr<Psana::Acqiris::TrigV1> obj) : _o(obj), o(_o.get()) {}
  TrigV1_Wrapper(Psana::Acqiris::TrigV1* obj) : o(obj) {}
  uint32_t coupling() const { return o->coupling(); }
  uint32_t input() const { return o->input(); }
  uint32_t slope() const { return o->slope(); }
  double level() const { return o->level(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class ConfigV1_Wrapper {
  shared_ptr<Psana::Acqiris::ConfigV1> _o;
  Psana::Acqiris::ConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_AcqConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(shared_ptr<Psana::Acqiris::ConfigV1> obj) : _o(obj), o(_o.get()) {}
  ConfigV1_Wrapper(Psana::Acqiris::ConfigV1* obj) : o(obj) {}
  uint32_t nbrConvertersPerChannel() const { return o->nbrConvertersPerChannel(); }
  uint32_t channelMask() const { return o->channelMask(); }
  uint32_t nbrBanks() const { return o->nbrBanks(); }
  const TrigV1_Wrapper trig() const { return TrigV1_Wrapper(const_cast<Psana::Acqiris::TrigV1*>(&o->trig())); }
  const HorizV1_Wrapper horiz() const { return HorizV1_Wrapper(const_cast<Psana::Acqiris::HorizV1*>(&o->horiz())); }
  vector<Psana::Acqiris::VertV1> vert() const { VEC_CONVERT(o->vert(), Psana::Acqiris::VertV1); }
  uint32_t nbrChannels() const { return o->nbrChannels(); }
};

class TimestampV1_Wrapper {
  shared_ptr<Psana::Acqiris::TimestampV1> _o;
  Psana::Acqiris::TimestampV1* o;
public:
  enum { Version = 1 };
  TimestampV1_Wrapper(shared_ptr<Psana::Acqiris::TimestampV1> obj) : _o(obj), o(_o.get()) {}
  TimestampV1_Wrapper(Psana::Acqiris::TimestampV1* obj) : o(obj) {}
  double pos() const { return o->pos(); }
  uint32_t timeStampLo() const { return o->timeStampLo(); }
  uint32_t timeStampHi() const { return o->timeStampHi(); }
  uint64_t value() const { return o->value(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};
class ConfigV1;

class DataDescV1Elem_Wrapper {
  shared_ptr<Psana::Acqiris::DataDescV1Elem> _o;
  Psana::Acqiris::DataDescV1Elem* o;
public:
  enum { Version = 1 };
  DataDescV1Elem_Wrapper(shared_ptr<Psana::Acqiris::DataDescV1Elem> obj) : _o(obj), o(_o.get()) {}
  DataDescV1Elem_Wrapper(Psana::Acqiris::DataDescV1Elem* obj) : o(obj) {}
  uint32_t nbrSamplesInSeg() const { return o->nbrSamplesInSeg(); }
  uint32_t indexFirstPoint() const { return o->indexFirstPoint(); }
  uint32_t nbrSegments() const { return o->nbrSegments(); }
  vector<Psana::Acqiris::TimestampV1> timestamp() const { VEC_CONVERT(o->timestamp(), Psana::Acqiris::TimestampV1); }
  PyObject* waveforms() const { ND_CONVERT(o->waveforms(), int16_t, 2); }
};
class ConfigV1;

class DataDescV1_Wrapper {
  shared_ptr<Psana::Acqiris::DataDescV1> _o;
  Psana::Acqiris::DataDescV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_AcqWaveform };
  enum { Version = 1 };
  DataDescV1_Wrapper(shared_ptr<Psana::Acqiris::DataDescV1> obj) : _o(obj), o(_o.get()) {}
  DataDescV1_Wrapper(Psana::Acqiris::DataDescV1* obj) : o(obj) {}
  const DataDescV1Elem_Wrapper data(uint32_t i0) const { return DataDescV1Elem_Wrapper(const_cast<Psana::Acqiris::DataDescV1Elem*>(&o->data(i0))); }
  vector<int> data_shape() const { return o->data_shape(); }
  boost::python::list data_list() { boost::python::list l; const int n = data_shape()[0]; for (int i = 0; i < n; i++) l.append(data(i)); return l; }
};

class TdcChannel_Wrapper {
  shared_ptr<Psana::Acqiris::TdcChannel> _o;
  Psana::Acqiris::TdcChannel* o;
public:
  TdcChannel_Wrapper(shared_ptr<Psana::Acqiris::TdcChannel> obj) : _o(obj), o(_o.get()) {}
  TdcChannel_Wrapper(Psana::Acqiris::TdcChannel* obj) : o(obj) {}
  uint32_t _channel_int() const { return o->_channel_int(); }
  uint32_t _mode_int() const { return o->_mode_int(); }
  Psana::Acqiris::TdcChannel::Slope slope() const { return o->slope(); }
  Psana::Acqiris::TdcChannel::Mode mode() const { return o->mode(); }
  double level() const { return o->level(); }
  Psana::Acqiris::TdcChannel::Channel channel() const { return o->channel(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcAuxIO_Wrapper {
  shared_ptr<Psana::Acqiris::TdcAuxIO> _o;
  Psana::Acqiris::TdcAuxIO* o;
public:
  TdcAuxIO_Wrapper(shared_ptr<Psana::Acqiris::TdcAuxIO> obj) : _o(obj), o(_o.get()) {}
  TdcAuxIO_Wrapper(Psana::Acqiris::TdcAuxIO* obj) : o(obj) {}
  uint32_t channel_int() const { return o->channel_int(); }
  uint32_t signal_int() const { return o->signal_int(); }
  uint32_t qualifier_int() const { return o->qualifier_int(); }
  Psana::Acqiris::TdcAuxIO::Channel channel() const { return o->channel(); }
  Psana::Acqiris::TdcAuxIO::Mode mode() const { return o->mode(); }
  Psana::Acqiris::TdcAuxIO::Termination term() const { return o->term(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcVetoIO_Wrapper {
  shared_ptr<Psana::Acqiris::TdcVetoIO> _o;
  Psana::Acqiris::TdcVetoIO* o;
public:
  TdcVetoIO_Wrapper(shared_ptr<Psana::Acqiris::TdcVetoIO> obj) : _o(obj), o(_o.get()) {}
  TdcVetoIO_Wrapper(Psana::Acqiris::TdcVetoIO* obj) : o(obj) {}
  uint32_t signal_int() const { return o->signal_int(); }
  uint32_t qualifier_int() const { return o->qualifier_int(); }
  Psana::Acqiris::TdcVetoIO::Channel channel() const { return o->channel(); }
  Psana::Acqiris::TdcVetoIO::Mode mode() const { return o->mode(); }
  Psana::Acqiris::TdcVetoIO::Termination term() const { return o->term(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcConfigV1_Wrapper {
  shared_ptr<Psana::Acqiris::TdcConfigV1> _o;
  Psana::Acqiris::TdcConfigV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcConfig };
  enum { Version = 1 };
  TdcConfigV1_Wrapper(shared_ptr<Psana::Acqiris::TdcConfigV1> obj) : _o(obj), o(_o.get()) {}
  TdcConfigV1_Wrapper(Psana::Acqiris::TdcConfigV1* obj) : o(obj) {}
  vector<Psana::Acqiris::TdcChannel> channels() const { VEC_CONVERT(o->channels(), Psana::Acqiris::TdcChannel); }
  vector<Psana::Acqiris::TdcAuxIO> auxio() const { VEC_CONVERT(o->auxio(), Psana::Acqiris::TdcAuxIO); }
  const TdcVetoIO_Wrapper veto() const { return TdcVetoIO_Wrapper(const_cast<Psana::Acqiris::TdcVetoIO*>(&o->veto())); }
};

class TdcDataV1_Item_Wrapper {
  shared_ptr<Psana::Acqiris::TdcDataV1_Item> _o;
  Psana::Acqiris::TdcDataV1_Item* o;
public:
  TdcDataV1_Item_Wrapper(shared_ptr<Psana::Acqiris::TdcDataV1_Item> obj) : _o(obj), o(_o.get()) {}
  TdcDataV1_Item_Wrapper(Psana::Acqiris::TdcDataV1_Item* obj) : o(obj) {}
  uint32_t value() const { return o->value(); }
  uint32_t bf_val_() const { return o->bf_val_(); }
  Psana::Acqiris::TdcDataV1_Item::Source source() const { return o->source(); }
  uint8_t bf_ofv_() const { return o->bf_ofv_(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcDataV1Common_Wrapper {
  shared_ptr<Psana::Acqiris::TdcDataV1Common> _o;
  Psana::Acqiris::TdcDataV1Common* o;
public:
  TdcDataV1Common_Wrapper(shared_ptr<Psana::Acqiris::TdcDataV1Common> obj) : _o(obj), o(_o.get()) {}
  TdcDataV1Common_Wrapper(Psana::Acqiris::TdcDataV1Common* obj) : o(obj) {}
  uint32_t nhits() const { return o->nhits(); }
  uint8_t overflow() const { return o->overflow(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcDataV1Channel_Wrapper {
  shared_ptr<Psana::Acqiris::TdcDataV1Channel> _o;
  Psana::Acqiris::TdcDataV1Channel* o;
public:
  TdcDataV1Channel_Wrapper(shared_ptr<Psana::Acqiris::TdcDataV1Channel> obj) : _o(obj), o(_o.get()) {}
  TdcDataV1Channel_Wrapper(Psana::Acqiris::TdcDataV1Channel* obj) : o(obj) {}
  uint32_t ticks() const { return o->ticks(); }
  uint8_t overflow() const { return o->overflow(); }
  double time() const { return o->time(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcDataV1Marker_Wrapper {
  shared_ptr<Psana::Acqiris::TdcDataV1Marker> _o;
  Psana::Acqiris::TdcDataV1Marker* o;
public:
  TdcDataV1Marker_Wrapper(shared_ptr<Psana::Acqiris::TdcDataV1Marker> obj) : _o(obj), o(_o.get()) {}
  TdcDataV1Marker_Wrapper(Psana::Acqiris::TdcDataV1Marker* obj) : o(obj) {}
  Psana::Acqiris::TdcDataV1Marker::Type type() const { return o->type(); }
  uint32_t _sizeof() const { return o->_sizeof(); }
};

class TdcDataV1_Wrapper {
  shared_ptr<Psana::Acqiris::TdcDataV1> _o;
  Psana::Acqiris::TdcDataV1* o;
public:
  enum { TypeId = Pds::TypeId::Id_AcqTdcData };
  enum { Version = 1 };
  TdcDataV1_Wrapper(shared_ptr<Psana::Acqiris::TdcDataV1> obj) : _o(obj), o(_o.get()) {}
  TdcDataV1_Wrapper(Psana::Acqiris::TdcDataV1* obj) : o(obj) {}
  vector<Psana::Acqiris::TdcDataV1_Item> data() const { VEC_CONVERT(o->data(), Psana::Acqiris::TdcDataV1_Item); }
};

  class VertV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::VertV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::VertV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::VertV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(VertV1_Wrapper(result)) : object();
    }
  };

  class HorizV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::HorizV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::HorizV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::HorizV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(HorizV1_Wrapper(result)) : object();
    }
  };

  class TrigV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TrigV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::TrigV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TrigV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TrigV1_Wrapper(result)) : object();
    }
  };

  class ConfigV1_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::ConfigV1";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::Acqiris::ConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::Acqiris::ConfigV1> result = store.get(source, foundSrc);
      return result.get() ? object(ConfigV1_Wrapper(result)) : object();
    }
  };

  class TimestampV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TimestampV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::TimestampV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TimestampV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TimestampV1_Wrapper(result)) : object();
    }
  };

  class DataDescV1Elem_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::DataDescV1Elem";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::DataDescV1Elem::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::DataDescV1Elem> result = evt.get(source, key, foundSrc);
      return result.get() ? object(DataDescV1Elem_Wrapper(result)) : object();
    }
  };

  class DataDescV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::DataDescV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::DataDescV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::DataDescV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(DataDescV1_Wrapper(result)) : object();
    }
  };

  class TdcChannel_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcChannel";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcChannel> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcChannel_Wrapper(result)) : object();
    }
  };

  class TdcAuxIO_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcAuxIO";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcAuxIO> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcAuxIO_Wrapper(result)) : object();
    }
  };

  class TdcVetoIO_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcVetoIO";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcVetoIO> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcVetoIO_Wrapper(result)) : object();
    }
  };

  class TdcConfigV1_Getter : public psddl_python::EnvObjectStoreGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcConfigV1";}
  const char* getGetterClassName() { return "psddl_python::EnvObjectStoreGetter";}
    int getVersion() {
      return Psana::Acqiris::TdcConfigV1::Version;
    }
    object get(PSEnv::EnvObjectStore& store, const PSEvt::Source& source, Pds::Src* foundSrc) {
      boost::shared_ptr<Psana::Acqiris::TdcConfigV1> result = store.get(source, foundSrc);
      return result.get() ? object(TdcConfigV1_Wrapper(result)) : object();
    }
  };

  class TdcDataV1_Item_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcDataV1_Item";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcDataV1_Item> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcDataV1_Item_Wrapper(result)) : object();
    }
  };

  class TdcDataV1Common_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcDataV1Common";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcDataV1Common> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcDataV1Common_Wrapper(result)) : object();
    }
  };

  class TdcDataV1Channel_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcDataV1Channel";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcDataV1Channel> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcDataV1Channel_Wrapper(result)) : object();
    }
  };

  class TdcDataV1Marker_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcDataV1Marker";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcDataV1Marker> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcDataV1Marker_Wrapper(result)) : object();
    }
  };

  class TdcDataV1_Getter : public psddl_python::EventGetter {
  public:
  const char* getTypeName() { return "Psana::Acqiris::TdcDataV1";}
  const char* getGetterClassName() { return "psddl_python::EventGetter";}
    int getVersion() {
      return Psana::Acqiris::TdcDataV1::Version;
    }
    object get(PSEvt::Event& evt, PSEvt::Source& source, const std::string& key, Pds::Src* foundSrc) {
      shared_ptr<Psana::Acqiris::TdcDataV1> result = evt.get(source, key, foundSrc);
      return result.get() ? object(TdcDataV1_Wrapper(result)) : object();
    }
  };
} // namespace Acqiris
} // namespace psddl_python
#endif // PSDDL_PYTHON_ACQIRIS_DDL_WRAPPER_H
