/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/fccd.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace FCCD {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.FCCD", 0, "The Python wrapper module for FCCD types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "FCCD", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::FCCD::FccdConfigV1_Wrapper>("FccdConfigV1", no_init)
    .def("outputMode", &psddl_python::FCCD::FccdConfigV1_Wrapper::outputMode)
    .def("width", &psddl_python::FCCD::FccdConfigV1_Wrapper::width)
    .def("height", &psddl_python::FCCD::FccdConfigV1_Wrapper::height)
    .def("trimmedWidth", &psddl_python::FCCD::FccdConfigV1_Wrapper::trimmedWidth)
    .def("trimmedHeight", &psddl_python::FCCD::FccdConfigV1_Wrapper::trimmedHeight)
    .def("__typeid__", &method_typeid<Psana::FCCD::FccdConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::FCCD::FccdConfigV1, psddl_python::FCCD::FccdConfigV1_Wrapper> >(Pds::TypeId::Id_FccdConfig, 1));

  class_<psddl_python::FCCD::FccdConfigV2_Wrapper>("FccdConfigV2", no_init)
    .def("outputMode", &psddl_python::FCCD::FccdConfigV2_Wrapper::outputMode)
    .def("ccdEnable", &psddl_python::FCCD::FccdConfigV2_Wrapper::ccdEnable)
    .def("focusMode", &psddl_python::FCCD::FccdConfigV2_Wrapper::focusMode)
    .def("exposureTime", &psddl_python::FCCD::FccdConfigV2_Wrapper::exposureTime)
    .def("dacVoltages", &psddl_python::FCCD::FccdConfigV2_Wrapper::dacVoltages)
    .def("waveforms", &psddl_python::FCCD::FccdConfigV2_Wrapper::waveforms)
    .def("width", &psddl_python::FCCD::FccdConfigV2_Wrapper::width)
    .def("height", &psddl_python::FCCD::FccdConfigV2_Wrapper::height)
    .def("trimmedWidth", &psddl_python::FCCD::FccdConfigV2_Wrapper::trimmedWidth)
    .def("trimmedHeight", &psddl_python::FCCD::FccdConfigV2_Wrapper::trimmedHeight)
    .def("__typeid__", &method_typeid<Psana::FCCD::FccdConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::FCCD::FccdConfigV2, psddl_python::FCCD::FccdConfigV2_Wrapper> >(Pds::TypeId::Id_FccdConfig, 2));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FccdConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "FccdConfigV2"));
    PyObject_SetAttrString(submodule, "FccdConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const float, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace FCCD
} // namespace psddl_python
