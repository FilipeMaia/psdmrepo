/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/pnccd.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace PNCCD {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.PNCCD", 0, "The Python wrapper module for PNCCD types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "PNCCD", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::PNCCD::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("numLinks", &psddl_python::PNCCD::ConfigV1_Wrapper::numLinks)
    .def("payloadSizePerLink", &psddl_python::PNCCD::ConfigV1_Wrapper::payloadSizePerLink)
    .def("__typeid__", &method_typeid<Psana::PNCCD::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::PNCCD::ConfigV1, psddl_python::PNCCD::ConfigV1_Wrapper> >(Pds::TypeId::Id_pnCCDconfig, 1));

  class_<psddl_python::PNCCD::ConfigV2_Wrapper>("ConfigV2", no_init)
    .def("numLinks", &psddl_python::PNCCD::ConfigV2_Wrapper::numLinks)
    .def("payloadSizePerLink", &psddl_python::PNCCD::ConfigV2_Wrapper::payloadSizePerLink)
    .def("numChannels", &psddl_python::PNCCD::ConfigV2_Wrapper::numChannels)
    .def("numRows", &psddl_python::PNCCD::ConfigV2_Wrapper::numRows)
    .def("numSubmoduleChannels", &psddl_python::PNCCD::ConfigV2_Wrapper::numSubmoduleChannels)
    .def("numSubmoduleRows", &psddl_python::PNCCD::ConfigV2_Wrapper::numSubmoduleRows)
    .def("numSubmodules", &psddl_python::PNCCD::ConfigV2_Wrapper::numSubmodules)
    .def("camexMagic", &psddl_python::PNCCD::ConfigV2_Wrapper::camexMagic)
    .def("info", &psddl_python::PNCCD::ConfigV2_Wrapper::info)
    .def("timingFName", &psddl_python::PNCCD::ConfigV2_Wrapper::timingFName)
    .def("info_shape", &psddl_python::PNCCD::ConfigV2_Wrapper::info_shape)
    .def("timingFName_shape", &psddl_python::PNCCD::ConfigV2_Wrapper::timingFName_shape)
    .def("__typeid__", &method_typeid<Psana::PNCCD::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::PNCCD::ConfigV2, psddl_python::PNCCD::ConfigV2_Wrapper> >(Pds::TypeId::Id_pnCCDconfig, 2));

  class_<psddl_python::PNCCD::FrameV1_Wrapper>("FrameV1", no_init)
    .def("specialWord", &psddl_python::PNCCD::FrameV1_Wrapper::specialWord)
    .def("frameNumber", &psddl_python::PNCCD::FrameV1_Wrapper::frameNumber)
    .def("timeStampHi", &psddl_python::PNCCD::FrameV1_Wrapper::timeStampHi)
    .def("timeStampLo", &psddl_python::PNCCD::FrameV1_Wrapper::timeStampLo)
    .def("_data", &psddl_python::PNCCD::FrameV1_Wrapper::_data)
    .def("data", &psddl_python::PNCCD::FrameV1_Wrapper::data)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FrameV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::PNCCD::FrameV1, psddl_python::PNCCD::FrameV1_Wrapper> >(-1, -1));

  class_<psddl_python::PNCCD::FullFrameV1_Wrapper>("FullFrameV1", no_init)
    .def("specialWord", &psddl_python::PNCCD::FullFrameV1_Wrapper::specialWord)
    .def("frameNumber", &psddl_python::PNCCD::FullFrameV1_Wrapper::frameNumber)
    .def("timeStampHi", &psddl_python::PNCCD::FullFrameV1_Wrapper::timeStampHi)
    .def("timeStampLo", &psddl_python::PNCCD::FullFrameV1_Wrapper::timeStampLo)
    .def("data", &psddl_python::PNCCD::FullFrameV1_Wrapper::data)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FullFrameV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::PNCCD::FullFrameV1, psddl_python::PNCCD::FullFrameV1_Wrapper> >(Pds::TypeId::Id_pnCCDframe, 1));

  class_<psddl_python::PNCCD::FramesV1_Wrapper>("FramesV1", no_init)
    .def("frame", &psddl_python::PNCCD::FramesV1_Wrapper::frame, return_value_policy<return_by_value, return_internal_reference<> >())
    .def("numLinks", &psddl_python::PNCCD::FramesV1_Wrapper::numLinks)
    .def("frame_shape", &psddl_python::PNCCD::FramesV1_Wrapper::frame_shape)
    .def("frame_list", &psddl_python::PNCCD::FramesV1_Wrapper::frame_list)
    .def("__typeid__", &method_typeid<Psana::PNCCD::FramesV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::PNCCD::FramesV1, psddl_python::PNCCD::FramesV1_Wrapper> >(Pds::TypeId::Id_pnCCDframe, 1));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FramesV1"));
    PyObject_SetAttrString(submodule, "Frames", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FullFrameV1"));
    PyObject_SetAttrString(submodule, "FullFrame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace PNCCD
} // namespace psddl_python
