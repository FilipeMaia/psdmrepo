/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/oceanoptics.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace OceanOptics {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.OceanOptics", 0, "The Python wrapper module for OceanOptics types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "OceanOptics", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::OceanOptics::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("exposureTime", &psddl_python::OceanOptics::ConfigV1_Wrapper::exposureTime)
    .def("waveLenCalib", &psddl_python::OceanOptics::ConfigV1_Wrapper::waveLenCalib)
    .def("nonlinCorrect", &psddl_python::OceanOptics::ConfigV1_Wrapper::nonlinCorrect)
    .def("strayLightConstant", &psddl_python::OceanOptics::ConfigV1_Wrapper::strayLightConstant)
    .def("__typeid__", &method_typeid<Psana::OceanOptics::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::OceanOptics::ConfigV1, psddl_python::OceanOptics::ConfigV1_Wrapper> >(Pds::TypeId::Id_OceanOpticsConfig, 1));

  class_<Psana::OceanOptics::timespec64>("timespec64", no_init)
    .def("tv_sec", &Psana::OceanOptics::timespec64::tv_sec)
    .def("tv_nsec", &Psana::OceanOptics::timespec64::tv_nsec)
    .def("__typeid__", &method_typeid<Psana::OceanOptics::timespec64>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::OceanOptics::timespec64> >(-1, -1));

  class_<psddl_python::OceanOptics::DataV1_Wrapper>("DataV1", no_init)
    .def("data", &psddl_python::OceanOptics::DataV1_Wrapper::data)
    .def("frameCounter", &psddl_python::OceanOptics::DataV1_Wrapper::frameCounter)
    .def("numDelayedFrames", &psddl_python::OceanOptics::DataV1_Wrapper::numDelayedFrames)
    .def("numDiscardFrames", &psddl_python::OceanOptics::DataV1_Wrapper::numDiscardFrames)
    .def("timeFrameStart", &psddl_python::OceanOptics::DataV1_Wrapper::timeFrameStart, return_value_policy<copy_const_reference>())
    .def("timeFrameFirstData", &psddl_python::OceanOptics::DataV1_Wrapper::timeFrameFirstData, return_value_policy<copy_const_reference>())
    .def("timeFrameEnd", &psddl_python::OceanOptics::DataV1_Wrapper::timeFrameEnd, return_value_policy<copy_const_reference>())
    .def("version", &psddl_python::OceanOptics::DataV1_Wrapper::version)
    .def("numSpectraInData", &psddl_python::OceanOptics::DataV1_Wrapper::numSpectraInData)
    .def("numSpectraInQueue", &psddl_python::OceanOptics::DataV1_Wrapper::numSpectraInQueue)
    .def("numSpectraUnused", &psddl_python::OceanOptics::DataV1_Wrapper::numSpectraUnused)
    .def("durationOfFrame", &psddl_python::OceanOptics::DataV1_Wrapper::durationOfFrame)
    .def("nonlinerCorrected", &psddl_python::OceanOptics::DataV1_Wrapper::nonlinerCorrected)
    .def("__typeid__", &method_typeid<Psana::OceanOptics::DataV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::OceanOptics::DataV1, psddl_python::OceanOptics::DataV1_Wrapper> >(Pds::TypeId::Id_OceanOpticsData, 1));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const double, 1>();

} // createWrappers()
} // namespace OceanOptics
} // namespace psddl_python
