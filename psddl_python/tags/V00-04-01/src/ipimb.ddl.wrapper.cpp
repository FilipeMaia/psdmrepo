/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/ipimb.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace Ipimb {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Ipimb", 0, "The Python wrapper module for Ipimb types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Ipimb", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::Ipimb::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("triggerCounter", &psddl_python::Ipimb::ConfigV1_Wrapper::triggerCounter)
    .def("serialID", &psddl_python::Ipimb::ConfigV1_Wrapper::serialID)
    .def("chargeAmpRange", &psddl_python::Ipimb::ConfigV1_Wrapper::chargeAmpRange)
    .def("calibrationRange", &psddl_python::Ipimb::ConfigV1_Wrapper::calibrationRange)
    .def("resetLength", &psddl_python::Ipimb::ConfigV1_Wrapper::resetLength)
    .def("resetDelay", &psddl_python::Ipimb::ConfigV1_Wrapper::resetDelay)
    .def("chargeAmpRefVoltage", &psddl_python::Ipimb::ConfigV1_Wrapper::chargeAmpRefVoltage)
    .def("calibrationVoltage", &psddl_python::Ipimb::ConfigV1_Wrapper::calibrationVoltage)
    .def("diodeBias", &psddl_python::Ipimb::ConfigV1_Wrapper::diodeBias)
    .def("status", &psddl_python::Ipimb::ConfigV1_Wrapper::status)
    .def("errors", &psddl_python::Ipimb::ConfigV1_Wrapper::errors)
    .def("calStrobeLength", &psddl_python::Ipimb::ConfigV1_Wrapper::calStrobeLength)
    .def("trigDelay", &psddl_python::Ipimb::ConfigV1_Wrapper::trigDelay)
    .def("capacitorValue", &psddl_python::Ipimb::ConfigV1_Wrapper::capacitorValue)
    .def("__typeid__", &method_typeid<Psana::Ipimb::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::Ipimb::ConfigV1, psddl_python::Ipimb::ConfigV1_Wrapper> >(Pds::TypeId::Id_IpimbConfig, 1));

  class_<psddl_python::Ipimb::ConfigV2_Wrapper>("ConfigV2", no_init)
    .def("triggerCounter", &psddl_python::Ipimb::ConfigV2_Wrapper::triggerCounter)
    .def("serialID", &psddl_python::Ipimb::ConfigV2_Wrapper::serialID)
    .def("chargeAmpRange", &psddl_python::Ipimb::ConfigV2_Wrapper::chargeAmpRange)
    .def("calibrationRange", &psddl_python::Ipimb::ConfigV2_Wrapper::calibrationRange)
    .def("resetLength", &psddl_python::Ipimb::ConfigV2_Wrapper::resetLength)
    .def("resetDelay", &psddl_python::Ipimb::ConfigV2_Wrapper::resetDelay)
    .def("chargeAmpRefVoltage", &psddl_python::Ipimb::ConfigV2_Wrapper::chargeAmpRefVoltage)
    .def("calibrationVoltage", &psddl_python::Ipimb::ConfigV2_Wrapper::calibrationVoltage)
    .def("diodeBias", &psddl_python::Ipimb::ConfigV2_Wrapper::diodeBias)
    .def("status", &psddl_python::Ipimb::ConfigV2_Wrapper::status)
    .def("errors", &psddl_python::Ipimb::ConfigV2_Wrapper::errors)
    .def("calStrobeLength", &psddl_python::Ipimb::ConfigV2_Wrapper::calStrobeLength)
    .def("trigDelay", &psddl_python::Ipimb::ConfigV2_Wrapper::trigDelay)
    .def("trigPsDelay", &psddl_python::Ipimb::ConfigV2_Wrapper::trigPsDelay)
    .def("adcDelay", &psddl_python::Ipimb::ConfigV2_Wrapper::adcDelay)
    .def("capacitorValue", &psddl_python::Ipimb::ConfigV2_Wrapper::capacitorValue)
    .def("__typeid__", &method_typeid<Psana::Ipimb::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::Ipimb::ConfigV2, psddl_python::Ipimb::ConfigV2_Wrapper> >(Pds::TypeId::Id_IpimbConfig, 2));

  class_<psddl_python::Ipimb::DataV1_Wrapper>("DataV1", no_init)
    .def("triggerCounter", &psddl_python::Ipimb::DataV1_Wrapper::triggerCounter)
    .def("config0", &psddl_python::Ipimb::DataV1_Wrapper::config0)
    .def("config1", &psddl_python::Ipimb::DataV1_Wrapper::config1)
    .def("config2", &psddl_python::Ipimb::DataV1_Wrapper::config2)
    .def("channel0", &psddl_python::Ipimb::DataV1_Wrapper::channel0)
    .def("channel1", &psddl_python::Ipimb::DataV1_Wrapper::channel1)
    .def("channel2", &psddl_python::Ipimb::DataV1_Wrapper::channel2)
    .def("channel3", &psddl_python::Ipimb::DataV1_Wrapper::channel3)
    .def("checksum", &psddl_python::Ipimb::DataV1_Wrapper::checksum)
    .def("channel0Volts", &psddl_python::Ipimb::DataV1_Wrapper::channel0Volts)
    .def("channel1Volts", &psddl_python::Ipimb::DataV1_Wrapper::channel1Volts)
    .def("channel2Volts", &psddl_python::Ipimb::DataV1_Wrapper::channel2Volts)
    .def("channel3Volts", &psddl_python::Ipimb::DataV1_Wrapper::channel3Volts)
    .def("__typeid__", &method_typeid<Psana::Ipimb::DataV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::Ipimb::DataV1, psddl_python::Ipimb::DataV1_Wrapper> >(Pds::TypeId::Id_IpimbData, 1));

  class_<psddl_python::Ipimb::DataV2_Wrapper>("DataV2", no_init)
    .def("config0", &psddl_python::Ipimb::DataV2_Wrapper::config0)
    .def("config1", &psddl_python::Ipimb::DataV2_Wrapper::config1)
    .def("config2", &psddl_python::Ipimb::DataV2_Wrapper::config2)
    .def("channel0", &psddl_python::Ipimb::DataV2_Wrapper::channel0)
    .def("channel1", &psddl_python::Ipimb::DataV2_Wrapper::channel1)
    .def("channel2", &psddl_python::Ipimb::DataV2_Wrapper::channel2)
    .def("channel3", &psddl_python::Ipimb::DataV2_Wrapper::channel3)
    .def("channel0ps", &psddl_python::Ipimb::DataV2_Wrapper::channel0ps)
    .def("channel1ps", &psddl_python::Ipimb::DataV2_Wrapper::channel1ps)
    .def("channel2ps", &psddl_python::Ipimb::DataV2_Wrapper::channel2ps)
    .def("channel3ps", &psddl_python::Ipimb::DataV2_Wrapper::channel3ps)
    .def("checksum", &psddl_python::Ipimb::DataV2_Wrapper::checksum)
    .def("channel0Volts", &psddl_python::Ipimb::DataV2_Wrapper::channel0Volts)
    .def("channel1Volts", &psddl_python::Ipimb::DataV2_Wrapper::channel1Volts)
    .def("channel2Volts", &psddl_python::Ipimb::DataV2_Wrapper::channel2Volts)
    .def("channel3Volts", &psddl_python::Ipimb::DataV2_Wrapper::channel3Volts)
    .def("channel0psVolts", &psddl_python::Ipimb::DataV2_Wrapper::channel0psVolts)
    .def("channel1psVolts", &psddl_python::Ipimb::DataV2_Wrapper::channel1psVolts)
    .def("channel2psVolts", &psddl_python::Ipimb::DataV2_Wrapper::channel2psVolts)
    .def("channel3psVolts", &psddl_python::Ipimb::DataV2_Wrapper::channel3psVolts)
    .def("triggerCounter", &psddl_python::Ipimb::DataV2_Wrapper::triggerCounter)
    .def("__typeid__", &method_typeid<Psana::Ipimb::DataV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::Ipimb::DataV2, psddl_python::Ipimb::DataV2_Wrapper> >(Pds::TypeId::Id_IpimbData, 2));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "DataV2"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace Ipimb
} // namespace psddl_python
