/* Do not edit this file, as it is auto-generated */

#include <boost/make_shared.hpp>
#include "psddl_python/cspad2x2.ddl.wrapper.h" // inc_python
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefWrap.h"

namespace psddl_python {
namespace CsPad2x2 {

namespace {
template <typename T>
PyObject* method_typeid() {
  static PyObject* ptypeid = PyCObject_FromVoidPtr((void*)&typeid(T), 0);
  Py_INCREF(ptypeid);
  return ptypeid;
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.CsPad2x2", 0, "The Python wrapper module for CsPad2x2 types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "CsPad2x2", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<psddl_python::CsPad2x2::CsPad2x2DigitalPotsCfg_Wrapper>("CsPad2x2DigitalPotsCfg", no_init)
    .def("pots", &psddl_python::CsPad2x2::CsPad2x2DigitalPotsCfg_Wrapper::pots)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::CsPad2x2DigitalPotsCfg, psddl_python::CsPad2x2::CsPad2x2DigitalPotsCfg_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::CsPad2x2ReadOnlyCfg_Wrapper>("CsPad2x2ReadOnlyCfg", no_init)
    .def("shiftTest", &psddl_python::CsPad2x2::CsPad2x2ReadOnlyCfg_Wrapper::shiftTest)
    .def("version", &psddl_python::CsPad2x2::CsPad2x2ReadOnlyCfg_Wrapper::version)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::CsPad2x2ReadOnlyCfg, psddl_python::CsPad2x2::CsPad2x2ReadOnlyCfg_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::ProtectionSystemThreshold_Wrapper>("ProtectionSystemThreshold", no_init)
    .def("adcThreshold", &psddl_python::CsPad2x2::ProtectionSystemThreshold_Wrapper::adcThreshold)
    .def("pixelCountThreshold", &psddl_python::CsPad2x2::ProtectionSystemThreshold_Wrapper::pixelCountThreshold)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ProtectionSystemThreshold>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ProtectionSystemThreshold, psddl_python::CsPad2x2::ProtectionSystemThreshold_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::CsPad2x2GainMapCfg_Wrapper>("CsPad2x2GainMapCfg", no_init)
    .def("gainMap", &psddl_python::CsPad2x2::CsPad2x2GainMapCfg_Wrapper::gainMap)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::CsPad2x2GainMapCfg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::CsPad2x2GainMapCfg, psddl_python::CsPad2x2::CsPad2x2GainMapCfg_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper>("ConfigV1QuadReg", no_init)
    .def("shiftSelect", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::shiftSelect)
    .def("edgeSelect", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::edgeSelect)
    .def("readClkSet", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::readClkSet)
    .def("readClkHold", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::readClkHold)
    .def("dataMode", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::dataMode)
    .def("prstSel", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::prstSel)
    .def("acqDelay", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::acqDelay)
    .def("intTime", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::intTime)
    .def("digDelay", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::digDelay)
    .def("ampIdle", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::ampIdle)
    .def("injTotal", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::injTotal)
    .def("rowColShiftPer", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::rowColShiftPer)
    .def("ampReset", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::ampReset)
    .def("digCount", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::digCount)
    .def("digPeriod", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::digPeriod)
    .def("PeltierEnable", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::PeltierEnable)
    .def("kpConstant", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::kpConstant)
    .def("kiConstant", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::kiConstant)
    .def("kdConstant", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::kdConstant)
    .def("humidThold", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::humidThold)
    .def("setPoint", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::setPoint)
    .def("ro", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::ro, return_value_policy<copy_const_reference>())
    .def("dp", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::dp, return_value_policy<copy_const_reference>())
    .def("gm", &psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ConfigV1QuadReg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ConfigV1QuadReg, psddl_python::CsPad2x2::ConfigV1QuadReg_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::ConfigV1_Wrapper>("ConfigV1", no_init)
    .def("concentratorVersion", &psddl_python::CsPad2x2::ConfigV1_Wrapper::concentratorVersion)
    .def("protectionThreshold", &psddl_python::CsPad2x2::ConfigV1_Wrapper::protectionThreshold, return_value_policy<copy_const_reference>())
    .def("protectionEnable", &psddl_python::CsPad2x2::ConfigV1_Wrapper::protectionEnable)
    .def("inactiveRunMode", &psddl_python::CsPad2x2::ConfigV1_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad2x2::ConfigV1_Wrapper::activeRunMode)
    .def("tdi", &psddl_python::CsPad2x2::ConfigV1_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad2x2::ConfigV1_Wrapper::payloadSize)
    .def("badAsicMask", &psddl_python::CsPad2x2::ConfigV1_Wrapper::badAsicMask)
    .def("asicMask", &psddl_python::CsPad2x2::ConfigV1_Wrapper::asicMask)
    .def("roiMask", &psddl_python::CsPad2x2::ConfigV1_Wrapper::roiMask)
    .def("quad", &psddl_python::CsPad2x2::ConfigV1_Wrapper::quad, return_value_policy<copy_const_reference>())
    .def("numAsicsRead", &psddl_python::CsPad2x2::ConfigV1_Wrapper::numAsicsRead)
    .def("numAsicsStored", &psddl_python::CsPad2x2::ConfigV1_Wrapper::numAsicsStored)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ConfigV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ConfigV1, psddl_python::CsPad2x2::ConfigV1_Wrapper> >(Pds::TypeId::Id_Cspad2x2Config, 1));

  class_<psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper>("ConfigV2QuadReg", no_init)
    .def("shiftSelect", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::shiftSelect)
    .def("edgeSelect", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::edgeSelect)
    .def("readClkSet", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::readClkSet)
    .def("readClkHold", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::readClkHold)
    .def("dataMode", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::dataMode)
    .def("prstSel", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::prstSel)
    .def("acqDelay", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::acqDelay)
    .def("intTime", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::intTime)
    .def("digDelay", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::digDelay)
    .def("ampIdle", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::ampIdle)
    .def("injTotal", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::injTotal)
    .def("rowColShiftPer", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::rowColShiftPer)
    .def("ampReset", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::ampReset)
    .def("digCount", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::digCount)
    .def("digPeriod", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::digPeriod)
    .def("PeltierEnable", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::PeltierEnable)
    .def("kpConstant", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::kpConstant)
    .def("kiConstant", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::kiConstant)
    .def("kdConstant", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::kdConstant)
    .def("humidThold", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::humidThold)
    .def("setPoint", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::setPoint)
    .def("biasTuning", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::biasTuning)
    .def("pdpmndnmBalance", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::pdpmndnmBalance)
    .def("ro", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::ro, return_value_policy<copy_const_reference>())
    .def("dp", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::dp, return_value_policy<copy_const_reference>())
    .def("gm", &psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper::gm, return_value_policy<copy_const_reference>())
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ConfigV2QuadReg>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ConfigV2QuadReg, psddl_python::CsPad2x2::ConfigV2QuadReg_Wrapper> >(-1, -1));

  class_<psddl_python::CsPad2x2::ConfigV2_Wrapper>("ConfigV2", no_init)
    .def("concentratorVersion", &psddl_python::CsPad2x2::ConfigV2_Wrapper::concentratorVersion)
    .def("protectionThreshold", &psddl_python::CsPad2x2::ConfigV2_Wrapper::protectionThreshold, return_value_policy<copy_const_reference>())
    .def("protectionEnable", &psddl_python::CsPad2x2::ConfigV2_Wrapper::protectionEnable)
    .def("inactiveRunMode", &psddl_python::CsPad2x2::ConfigV2_Wrapper::inactiveRunMode)
    .def("activeRunMode", &psddl_python::CsPad2x2::ConfigV2_Wrapper::activeRunMode)
    .def("runTriggerDelay", &psddl_python::CsPad2x2::ConfigV2_Wrapper::runTriggerDelay)
    .def("tdi", &psddl_python::CsPad2x2::ConfigV2_Wrapper::tdi)
    .def("payloadSize", &psddl_python::CsPad2x2::ConfigV2_Wrapper::payloadSize)
    .def("badAsicMask", &psddl_python::CsPad2x2::ConfigV2_Wrapper::badAsicMask)
    .def("asicMask", &psddl_python::CsPad2x2::ConfigV2_Wrapper::asicMask)
    .def("roiMask", &psddl_python::CsPad2x2::ConfigV2_Wrapper::roiMask)
    .def("quad", &psddl_python::CsPad2x2::ConfigV2_Wrapper::quad, return_value_policy<copy_const_reference>())
    .def("numAsicsRead", &psddl_python::CsPad2x2::ConfigV2_Wrapper::numAsicsRead)
    .def("numAsicsStored", &psddl_python::CsPad2x2::ConfigV2_Wrapper::numAsicsStored)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ConfigV2>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ConfigV2, psddl_python::CsPad2x2::ConfigV2_Wrapper> >(Pds::TypeId::Id_Cspad2x2Config, 2));

  class_<psddl_python::CsPad2x2::ElementV1_Wrapper>("ElementV1", no_init)
    .def("virtual_channel", &psddl_python::CsPad2x2::ElementV1_Wrapper::virtual_channel)
    .def("lane", &psddl_python::CsPad2x2::ElementV1_Wrapper::lane)
    .def("tid", &psddl_python::CsPad2x2::ElementV1_Wrapper::tid)
    .def("acq_count", &psddl_python::CsPad2x2::ElementV1_Wrapper::acq_count)
    .def("op_code", &psddl_python::CsPad2x2::ElementV1_Wrapper::op_code)
    .def("quad", &psddl_python::CsPad2x2::ElementV1_Wrapper::quad)
    .def("seq_count", &psddl_python::CsPad2x2::ElementV1_Wrapper::seq_count)
    .def("ticks", &psddl_python::CsPad2x2::ElementV1_Wrapper::ticks)
    .def("fiducials", &psddl_python::CsPad2x2::ElementV1_Wrapper::fiducials)
    .def("sb_temp", &psddl_python::CsPad2x2::ElementV1_Wrapper::sb_temp)
    .def("frame_type", &psddl_python::CsPad2x2::ElementV1_Wrapper::frame_type)
    .def("data", &psddl_python::CsPad2x2::ElementV1_Wrapper::data)
    .def("common_mode", &psddl_python::CsPad2x2::ElementV1_Wrapper::common_mode)
    .def("__typeid__", &method_typeid<Psana::CsPad2x2::ElementV1>)
    .staticmethod("__typeid__")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefWrap<Psana::CsPad2x2::ElementV1, psddl_python::CsPad2x2::ElementV1_Wrapper> >(Pds::TypeId::Id_Cspad2x2Element, 1));

  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ElementV1"));
    PyObject_SetAttrString(submodule, "Element", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const int16_t, 3>();

} // createWrappers()
} // namespace CsPad2x2
} // namespace psddl_python
