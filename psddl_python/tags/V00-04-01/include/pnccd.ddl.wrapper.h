/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H
#define PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/pnccd.ddl.h" // inc_psana

namespace psddl_python {
namespace PNCCD {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::PNCCD::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDconfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::PNCCD::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t numLinks() const { return m_obj->numLinks(); }
  uint32_t payloadSizePerLink() const { return m_obj->payloadSizePerLink(); }
};

class ConfigV2_Wrapper {
  shared_ptr<const Psana::PNCCD::ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDconfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(const shared_ptr<const Psana::PNCCD::ConfigV2>& obj) : m_obj(obj) {}
  uint32_t numLinks() const { return m_obj->numLinks(); }
  uint32_t payloadSizePerLink() const { return m_obj->payloadSizePerLink(); }
  uint32_t numChannels() const { return m_obj->numChannels(); }
  uint32_t numRows() const { return m_obj->numRows(); }
  uint32_t numSubmoduleChannels() const { return m_obj->numSubmoduleChannels(); }
  uint32_t numSubmoduleRows() const { return m_obj->numSubmoduleRows(); }
  uint32_t numSubmodules() const { return m_obj->numSubmodules(); }
  uint32_t camexMagic() const { return m_obj->camexMagic(); }
  const char* info() const { return m_obj->info(); }
  const char* timingFName() const { return m_obj->timingFName(); }
  boost::python::list info_shape() const { boost::python::list res; const vector<int>& sh=m_obj->info_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list timingFName_shape() const { boost::python::list res; const vector<int>& sh=m_obj->timingFName_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
};
class ConfigV1;
class ConfigV2;

class FrameV1_Wrapper {
  shared_ptr<const Psana::PNCCD::FrameV1> m_obj;
public:
  FrameV1_Wrapper(const shared_ptr<const Psana::PNCCD::FrameV1>& obj) : m_obj(obj) {}
  uint32_t specialWord() const { return m_obj->specialWord(); }
  uint32_t frameNumber() const { return m_obj->frameNumber(); }
  uint32_t timeStampHi() const { return m_obj->timeStampHi(); }
  uint32_t timeStampLo() const { return m_obj->timeStampLo(); }
  PyObject* _data() const { return detail::ndToNumpy(m_obj->_data(), m_obj); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
};

class FullFrameV1_Wrapper {
  shared_ptr<const Psana::PNCCD::FullFrameV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDframe };
  enum { Version = 1 };
  FullFrameV1_Wrapper(const shared_ptr<const Psana::PNCCD::FullFrameV1>& obj) : m_obj(obj) {}
  uint32_t specialWord() const { return m_obj->specialWord(); }
  uint32_t frameNumber() const { return m_obj->frameNumber(); }
  uint32_t timeStampHi() const { return m_obj->timeStampHi(); }
  uint32_t timeStampLo() const { return m_obj->timeStampLo(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
};
class ConfigV1;
class ConfigV2;

class FramesV1_Wrapper {
  shared_ptr<const Psana::PNCCD::FramesV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_pnCCDframe };
  enum { Version = 1 };
  FramesV1_Wrapper(const shared_ptr<const Psana::PNCCD::FramesV1>& obj) : m_obj(obj) {}
  PNCCD::FrameV1_Wrapper frame(uint32_t i0) const { return PNCCD::FrameV1_Wrapper(boost::shared_ptr<const Psana::PNCCD::FrameV1>(m_obj, &m_obj->frame(i0))); }
  uint32_t numLinks() const { return m_obj->numLinks(); }
  boost::python::list frame_shape() const { boost::python::list res; const vector<int>& sh=m_obj->frame_shape(); for (vector<int>::const_iterator i = sh.begin(); i != sh.end(); ++ i) res.append(*i); return res; }
  boost::python::list frame_list() { boost::python::list l; const int n = m_obj->frame_shape()[0]; for (int i = 0; i < n; i++) l.append(frame(i)); return l; }
};
} // namespace PNCCD
} // namespace psddl_python
#endif // PSDDL_PYTHON_PNCCD_DDL_WRAPPER_H
