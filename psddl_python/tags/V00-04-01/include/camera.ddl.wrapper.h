/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_CAMERA_DDL_WRAPPER_H
#define PSDDL_PYTHON_CAMERA_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/camera.ddl.h" // inc_psana

namespace psddl_python {
namespace Camera {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class FrameFccdConfigV1_Wrapper {
  shared_ptr<const Psana::Camera::FrameFccdConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_FrameFccdConfig };
  enum { Version = 1 };
  FrameFccdConfigV1_Wrapper(const shared_ptr<const Psana::Camera::FrameFccdConfigV1>& obj) : m_obj(obj) {}
};

class FrameFexConfigV1_Wrapper {
  shared_ptr<const Psana::Camera::FrameFexConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_FrameFexConfig };
  enum { Version = 1 };
  FrameFexConfigV1_Wrapper(const shared_ptr<const Psana::Camera::FrameFexConfigV1>& obj) : m_obj(obj) {}
  Psana::Camera::FrameFexConfigV1::Forwarding forwarding() const { return m_obj->forwarding(); }
  uint32_t forward_prescale() const { return m_obj->forward_prescale(); }
  Psana::Camera::FrameFexConfigV1::Processing processing() const { return m_obj->processing(); }
  const Psana::Camera::FrameCoord& roiBegin() const { return m_obj->roiBegin(); }
  const Psana::Camera::FrameCoord& roiEnd() const { return m_obj->roiEnd(); }
  uint32_t threshold() const { return m_obj->threshold(); }
  uint32_t number_of_masked_pixels() const { return m_obj->number_of_masked_pixels(); }
  boost::python::list masked_pixel_coordinates() const { return detail::ndToList(m_obj->masked_pixel_coordinates()); }
};

class FrameV1_Wrapper {
  shared_ptr<const Psana::Camera::FrameV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_Frame };
  enum { Version = 1 };
  FrameV1_Wrapper(const shared_ptr<const Psana::Camera::FrameV1>& obj) : m_obj(obj) {}
  uint32_t width() const { return m_obj->width(); }
  uint32_t height() const { return m_obj->height(); }
  uint32_t depth() const { return m_obj->depth(); }
  uint32_t offset() const { return m_obj->offset(); }
  PyObject* _int_pixel_data() const { return detail::ndToNumpy(m_obj->_int_pixel_data(), m_obj); }
  PyObject* data8() const { return detail::ndToNumpy(m_obj->data8(), m_obj); }
  PyObject* data16() const { return detail::ndToNumpy(m_obj->data16(), m_obj); }
};

class TwoDGaussianV1_Wrapper {
  shared_ptr<const Psana::Camera::TwoDGaussianV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_TwoDGaussian };
  enum { Version = 1 };
  TwoDGaussianV1_Wrapper(const shared_ptr<const Psana::Camera::TwoDGaussianV1>& obj) : m_obj(obj) {}
  uint64_t integral() const { return m_obj->integral(); }
  double xmean() const { return m_obj->xmean(); }
  double ymean() const { return m_obj->ymean(); }
  double major_axis_width() const { return m_obj->major_axis_width(); }
  double minor_axis_width() const { return m_obj->minor_axis_width(); }
  double major_axis_tilt() const { return m_obj->major_axis_tilt(); }
};
} // namespace Camera
} // namespace psddl_python
#endif // PSDDL_PYTHON_CAMERA_DDL_WRAPPER_H
