/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_CONTROL_DDL_WRAPPER_H
#define PSDDL_PYTHON_CONTROL_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/control.ddl.h" // inc_psana

#include <pdsdata/xtc/ClockTime.hh>
namespace psddl_python {
namespace ControlData {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::ControlData::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_ControlConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::ControlData::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t events() const { return m_obj->events(); }
  uint8_t uses_duration() const { return m_obj->uses_duration(); }
  uint8_t uses_events() const { return m_obj->uses_events(); }
  const Pds::ClockTime& duration() const { return m_obj->duration(); }
  uint32_t npvControls() const { return m_obj->npvControls(); }
  uint32_t npvMonitors() const { return m_obj->npvMonitors(); }
  boost::python::list pvControls() const { return detail::ndToList(m_obj->pvControls()); }
  boost::python::list pvMonitors() const { return detail::ndToList(m_obj->pvMonitors()); }
};

class ConfigV2_Wrapper {
  shared_ptr<const Psana::ControlData::ConfigV2> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_ControlConfig };
  enum { Version = 2 };
  ConfigV2_Wrapper(const shared_ptr<const Psana::ControlData::ConfigV2>& obj) : m_obj(obj) {}
  uint32_t events() const { return m_obj->events(); }
  uint8_t uses_duration() const { return m_obj->uses_duration(); }
  uint8_t uses_events() const { return m_obj->uses_events(); }
  const Pds::ClockTime& duration() const { return m_obj->duration(); }
  uint32_t npvControls() const { return m_obj->npvControls(); }
  uint32_t npvMonitors() const { return m_obj->npvMonitors(); }
  uint32_t npvLabels() const { return m_obj->npvLabels(); }
  boost::python::list pvControls() const { return detail::ndToList(m_obj->pvControls()); }
  boost::python::list pvMonitors() const { return detail::ndToList(m_obj->pvMonitors()); }
  boost::python::list pvLabels() const { return detail::ndToList(m_obj->pvLabels()); }
};
} // namespace ControlData
} // namespace psddl_python
#endif // PSDDL_PYTHON_CONTROL_DDL_WRAPPER_H
