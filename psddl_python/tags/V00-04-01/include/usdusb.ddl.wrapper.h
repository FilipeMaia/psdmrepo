/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_USDUSB_DDL_WRAPPER_H
#define PSDDL_PYTHON_USDUSB_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/usdusb.ddl.h" // inc_psana

namespace psddl_python {
namespace UsdUsb {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::UsdUsb::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_UsdUsbConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::UsdUsb::ConfigV1>& obj) : m_obj(obj) {}
  PyObject* counting_mode() const { return detail::ndToNumpy(m_obj->counting_mode(), m_obj); }
  PyObject* quadrature_mode() const { return detail::ndToNumpy(m_obj->quadrature_mode(), m_obj); }
};

class DataV1_Wrapper {
  shared_ptr<const Psana::UsdUsb::DataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_UsdUsbData };
  enum { Version = 1 };
  DataV1_Wrapper(const shared_ptr<const Psana::UsdUsb::DataV1>& obj) : m_obj(obj) {}
  uint8_t digital_in() const { return m_obj->digital_in(); }
  uint32_t timestamp() const { return m_obj->timestamp(); }
  PyObject* analog_in() const { return detail::ndToNumpy(m_obj->analog_in(), m_obj); }
  PyObject* encoder_count() const { return detail::ndToNumpy(m_obj->encoder_count(), m_obj); }
};
} // namespace UsdUsb
} // namespace psddl_python
#endif // PSDDL_PYTHON_USDUSB_DDL_WRAPPER_H
