/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_OCEANOPTICS_DDL_WRAPPER_H
#define PSDDL_PYTHON_OCEANOPTICS_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/oceanoptics.ddl.h" // inc_psana

namespace psddl_python {
namespace OceanOptics {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::OceanOptics::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_OceanOpticsConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::OceanOptics::ConfigV1>& obj) : m_obj(obj) {}
  float exposureTime() const { return m_obj->exposureTime(); }
  PyObject* waveLenCalib() const { return detail::ndToNumpy(m_obj->waveLenCalib(), m_obj); }
  PyObject* nonlinCorrect() const { return detail::ndToNumpy(m_obj->nonlinCorrect(), m_obj); }
  double strayLightConstant() const { return m_obj->strayLightConstant(); }
};
class ConfigV1;

class DataV1_Wrapper {
  shared_ptr<const Psana::OceanOptics::DataV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_OceanOpticsData };
  enum { Version = 1 };
  DataV1_Wrapper(const shared_ptr<const Psana::OceanOptics::DataV1>& obj) : m_obj(obj) {}
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
  uint64_t frameCounter() const { return m_obj->frameCounter(); }
  uint64_t numDelayedFrames() const { return m_obj->numDelayedFrames(); }
  uint64_t numDiscardFrames() const { return m_obj->numDiscardFrames(); }
  const Psana::OceanOptics::timespec64& timeFrameStart() const { return m_obj->timeFrameStart(); }
  const Psana::OceanOptics::timespec64& timeFrameFirstData() const { return m_obj->timeFrameFirstData(); }
  const Psana::OceanOptics::timespec64& timeFrameEnd() const { return m_obj->timeFrameEnd(); }
  int32_t version() const { return m_obj->version(); }
  int8_t numSpectraInData() const { return m_obj->numSpectraInData(); }
  int8_t numSpectraInQueue() const { return m_obj->numSpectraInQueue(); }
  int8_t numSpectraUnused() const { return m_obj->numSpectraUnused(); }
  double durationOfFrame() const { return m_obj->durationOfFrame(); }
  double nonlinerCorrected(uint32_t iPixel) const { return m_obj->nonlinerCorrected(iPixel); }
};
} // namespace OceanOptics
} // namespace psddl_python
#endif // PSDDL_PYTHON_OCEANOPTICS_DDL_WRAPPER_H
