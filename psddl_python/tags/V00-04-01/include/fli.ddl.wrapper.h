/* Do not edit this file, as it is auto-generated */

#ifndef PSDDL_PYTHON_FLI_DDL_WRAPPER_H
#define PSDDL_PYTHON_FLI_DDL_WRAPPER_H 1

#include <vector>
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/Converter.h"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/fli.ddl.h" // inc_psana

namespace psddl_python {
namespace Fli {

using namespace boost::python;
using boost::python::api::object;
using boost::shared_ptr;
using std::vector;

void createWrappers(PyObject* module);

class ConfigV1_Wrapper {
  shared_ptr<const Psana::Fli::ConfigV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_FliConfig };
  enum { Version = 1 };
  ConfigV1_Wrapper(const shared_ptr<const Psana::Fli::ConfigV1>& obj) : m_obj(obj) {}
  uint32_t width() const { return m_obj->width(); }
  uint32_t height() const { return m_obj->height(); }
  uint32_t orgX() const { return m_obj->orgX(); }
  uint32_t orgY() const { return m_obj->orgY(); }
  uint32_t binX() const { return m_obj->binX(); }
  uint32_t binY() const { return m_obj->binY(); }
  float exposureTime() const { return m_obj->exposureTime(); }
  float coolingTemp() const { return m_obj->coolingTemp(); }
  uint8_t gainIndex() const { return m_obj->gainIndex(); }
  uint8_t readoutSpeedIndex() const { return m_obj->readoutSpeedIndex(); }
  uint16_t exposureEventCode() const { return m_obj->exposureEventCode(); }
  uint32_t numDelayShots() const { return m_obj->numDelayShots(); }
  uint32_t frameSize() const { return m_obj->frameSize(); }
  uint32_t numPixelsX() const { return m_obj->numPixelsX(); }
  uint32_t numPixelsY() const { return m_obj->numPixelsY(); }
  uint32_t numPixels() const { return m_obj->numPixels(); }
};
class ConfigV1;

class FrameV1_Wrapper {
  shared_ptr<const Psana::Fli::FrameV1> m_obj;
public:
  enum { TypeId = Pds::TypeId::Id_FliFrame };
  enum { Version = 1 };
  FrameV1_Wrapper(const shared_ptr<const Psana::Fli::FrameV1>& obj) : m_obj(obj) {}
  uint32_t shotIdStart() const { return m_obj->shotIdStart(); }
  float readoutTime() const { return m_obj->readoutTime(); }
  float temperature() const { return m_obj->temperature(); }
  PyObject* data() const { return detail::ndToNumpy(m_obj->data(), m_obj); }
};
} // namespace Fli
} // namespace psddl_python
#endif // PSDDL_PYTHON_FLI_DDL_WRAPPER_H
