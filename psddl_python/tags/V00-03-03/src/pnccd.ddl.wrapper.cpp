/* Do not edit this file, as it is auto-generated */

#include <psddl_python/pnccd.ddl.wrapper.h> // inc_python
#include <cstddef>

namespace psddl_python {
namespace PNCCD {

void createWrappers(PyObject* module) {
  _import_array();
  PyObject* submodule = Py_InitModule3( "psana.PNCCD", 0, "The Python wrapper module for PNCCD types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "PNCCD", submodule);
  scope mod = object(handle<>(borrowed(submodule)));

#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("numLinks", &n::numLinks)\
    .def("payloadSizePerLink", &n::payloadSizePerLink)\

  _CLASS(psddl_python::PNCCD::ConfigV1_Wrapper, "ConfigV1", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV1_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("numLinks", &n::numLinks)\
    .def("payloadSizePerLink", &n::payloadSizePerLink)\
    .def("numChannels", &n::numChannels)\
    .def("numRows", &n::numRows)\
    .def("numSubmoduleChannels", &n::numSubmoduleChannels)\
    .def("numSubmoduleRows", &n::numSubmoduleRows)\
    .def("numSubmodules", &n::numSubmodules)\
    .def("camexMagic", &n::camexMagic)\
    .def("info", &n::info)\
    .def("timingFName", &n::timingFName)\
    .def("info_shape", &n::info_shape)\
    .def("timingFName_shape", &n::timingFName_shape)\

  _CLASS(psddl_python::PNCCD::ConfigV2_Wrapper, "ConfigV2", return_value_policy<return_by_value>());
  std_vector_class_(ConfigV2_Wrapper);
#undef _CLASS
  ADD_GETTER(ConfigV2);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("specialWord", &n::specialWord)\
    .def("frameNumber", &n::frameNumber)\
    .def("timeStampHi", &n::timeStampHi)\
    .def("timeStampLo", &n::timeStampLo)\
    .def("_data", &n::_data)\
    .def("data", &n::data)\

  _CLASS(psddl_python::PNCCD::FrameV1_Wrapper, "FrameV1", return_value_policy<return_by_value>());
  std_vector_class_(FrameV1_Wrapper);
#undef _CLASS
  ADD_GETTER(FrameV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("frame", &n::frame, policy)\
    .def("numLinks", &n::numLinks)\
    .def("frame_shape", &n::frame_shape)\
    .def("frame_list", &n::frame_list)\

  _CLASS(psddl_python::PNCCD::FramesV1_Wrapper, "FramesV1", return_value_policy<return_by_value>());
  std_vector_class_(FramesV1_Wrapper);
#undef _CLASS
  ADD_GETTER(FramesV1);


#define _CLASS(n, NAME, policy) class_<n>(NAME, no_init)\
    .def("specialWord", &n::specialWord)\
    .def("frameNumber", &n::frameNumber)\
    .def("timeStampHi", &n::timeStampHi)\
    .def("timeStampLo", &n::timeStampLo)\
    .def("data", &n::data)\

  _CLASS(psddl_python::PNCCD::FullFrameV1_Wrapper, "FullFrameV1", return_value_policy<return_by_value>());
  std_vector_class_(FullFrameV1_Wrapper);
#undef _CLASS
  ADD_GETTER(FullFrameV1);


} // createWrappers()
} // namespace PNCCD
} // namespace psddl_python
