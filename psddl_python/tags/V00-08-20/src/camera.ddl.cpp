/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/camera.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Camera {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Camera", 0, "The Python wrapper module for Camera types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Camera", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  class_<Psana::Camera::FrameCoord >("FrameCoord", "Class representing the coordinates of pixels inside the camera frame.", no_init)
    .def("column", &Psana::Camera::FrameCoord::column,"Column index (x value).")
    .def("row", &Psana::Camera::FrameCoord::row,"Row index (y value).")
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Camera::FrameCoord> >(-1));

  {
  scope outer = 
  class_<Psana::Camera::FrameFccdConfigV1, boost::shared_ptr<Psana::Camera::FrameFccdConfigV1>, boost::noncopyable >("FrameFccdConfigV1", "This class was never defined/implemented.", no_init)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_FrameFccdConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameFccdConfigV1> >(Pds::TypeId::Id_FrameFccdConfig));

  {
  scope outer = 
  class_<Psana::Camera::FrameFexConfigV1, boost::shared_ptr<Psana::Camera::FrameFexConfigV1>, boost::noncopyable >("FrameFexConfigV1", "Class containing configuration data for online frame feature extraction process.", no_init)
    .def("forwarding", &Psana::Camera::FrameFexConfigV1::forwarding,"frame forwarding policy")
    .def("forward_prescale", &Psana::Camera::FrameFexConfigV1::forward_prescale,"Prescale of events with forwarded frames")
    .def("processing", &Psana::Camera::FrameFexConfigV1::processing,"algorithm to apply to frames to produce processed output")
    .def("roiBegin", &Psana::Camera::FrameFexConfigV1::roiBegin, return_value_policy<copy_const_reference>(),"Coordinate of start of rectangular region of interest (inclusive).")
    .def("roiEnd", &Psana::Camera::FrameFexConfigV1::roiEnd, return_value_policy<copy_const_reference>(),"Coordinate of finish of rectangular region of interest (exclusive).")
    .def("threshold", &Psana::Camera::FrameFexConfigV1::threshold,"Pixel data threshold value to apply in processing.")
    .def("number_of_masked_pixels", &Psana::Camera::FrameFexConfigV1::number_of_masked_pixels,"Count of masked pixels to exclude from processing.")
    .def("masked_pixel_coordinates", &Psana::Camera::FrameFexConfigV1::masked_pixel_coordinates,"Location of masked pixel coordinates.")
  ;

  enum_<Psana::Camera::FrameFexConfigV1::Forwarding>("Forwarding")
    .value("NoFrame",Psana::Camera::FrameFexConfigV1::NoFrame)
    .value("FullFrame",Psana::Camera::FrameFexConfigV1::FullFrame)
    .value("RegionOfInterest",Psana::Camera::FrameFexConfigV1::RegionOfInterest)
  ;

  enum_<Psana::Camera::FrameFexConfigV1::Processing>("Processing")
    .value("NoProcessing",Psana::Camera::FrameFexConfigV1::NoProcessing)
    .value("GssFullFrame",Psana::Camera::FrameFexConfigV1::GssFullFrame)
    .value("GssRegionOfInterest",Psana::Camera::FrameFexConfigV1::GssRegionOfInterest)
    .value("GssThreshold",Psana::Camera::FrameFexConfigV1::GssThreshold)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_FrameFexConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameFexConfigV1> >(Pds::TypeId::Id_FrameFexConfig));

  {
  scope outer = 
  class_<Psana::Camera::FrameV1, boost::shared_ptr<Psana::Camera::FrameV1>, boost::noncopyable >("FrameV1", no_init)
    .def("width", &Psana::Camera::FrameV1::width,"Number of pixels in a row.")
    .def("height", &Psana::Camera::FrameV1::height,"Number of pixels in a column.")
    .def("depth", &Psana::Camera::FrameV1::depth,"Number of bits per pixel.")
    .def("offset", &Psana::Camera::FrameV1::offset,"Fixed offset/pedestal value of pixel data.")
    .def("_int_pixel_data", &Psana::Camera::FrameV1::_int_pixel_data,"Pixel data as array of bytes, method is for internal use only, use data8() or \n            data16() for access to the data.")
    .def("data8", &Psana::Camera::FrameV1::data8,"Returns pixel data array when stored data type is 8-bit (depth() is less than 9).\n                If data type is 16-bit then empty array is returned, use data16() method in this case.")
    .def("data16", &Psana::Camera::FrameV1::data16,"Returns pixel data array when stored data type is 16-bit (depth() is greater than 8).\n                If data type is 8-bit then empty array is returned, use data8() method in this case.")
    .def("depth_bytes", &Psana::Camera::FrameV1::depth_bytes,"Number of bytes per pixel.")
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_Frame);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::FrameV1> >(Pds::TypeId::Id_Frame));

  {
  scope outer = 
  class_<Psana::Camera::TwoDGaussianV1, boost::shared_ptr<Psana::Camera::TwoDGaussianV1>, boost::noncopyable >("TwoDGaussianV1", no_init)
    .def("integral", &Psana::Camera::TwoDGaussianV1::integral)
    .def("xmean", &Psana::Camera::TwoDGaussianV1::xmean)
    .def("ymean", &Psana::Camera::TwoDGaussianV1::ymean)
    .def("major_axis_width", &Psana::Camera::TwoDGaussianV1::major_axis_width)
    .def("minor_axis_width", &Psana::Camera::TwoDGaussianV1::minor_axis_width)
    .def("major_axis_tilt", &Psana::Camera::TwoDGaussianV1::major_axis_tilt)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_TwoDGaussian);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Camera::TwoDGaussianV1> >(Pds::TypeId::Id_TwoDGaussian));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameFexConfigV1"));
    PyObject_SetAttrString(submodule, "FrameFexConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameV1"));
    PyObject_SetAttrString(submodule, "Frame", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "FrameFccdConfigV1"));
    PyObject_SetAttrString(submodule, "FrameFccdConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "TwoDGaussianV1"));
    PyObject_SetAttrString(submodule, "TwoDGaussian", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::Camera::FrameCoord>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 1>();
  detail::register_ndarray_to_numpy_cvt<const uint8_t, 2>();

} // createWrappers()
} // namespace Camera
} // namespace psddl_python
