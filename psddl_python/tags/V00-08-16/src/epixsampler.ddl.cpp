/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/epixsampler.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace EpixSampler {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.EpixSampler", 0, "The Python wrapper module for EpixSampler types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "EpixSampler", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::EpixSampler::ConfigV1, boost::shared_ptr<Psana::EpixSampler::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("version", &Psana::EpixSampler::ConfigV1::version)
    .def("runTrigDelay", &Psana::EpixSampler::ConfigV1::runTrigDelay)
    .def("daqTrigDelay", &Psana::EpixSampler::ConfigV1::daqTrigDelay)
    .def("daqSetting", &Psana::EpixSampler::ConfigV1::daqSetting)
    .def("adcClkHalfT", &Psana::EpixSampler::ConfigV1::adcClkHalfT)
    .def("adcPipelineDelay", &Psana::EpixSampler::ConfigV1::adcPipelineDelay)
    .def("digitalCardId0", &Psana::EpixSampler::ConfigV1::digitalCardId0)
    .def("digitalCardId1", &Psana::EpixSampler::ConfigV1::digitalCardId1)
    .def("analogCardId0", &Psana::EpixSampler::ConfigV1::analogCardId0)
    .def("analogCardId1", &Psana::EpixSampler::ConfigV1::analogCardId1)
    .def("numberOfChannels", &Psana::EpixSampler::ConfigV1::numberOfChannels)
    .def("samplesPerChannel", &Psana::EpixSampler::ConfigV1::samplesPerChannel)
    .def("baseClockFrequency", &Psana::EpixSampler::ConfigV1::baseClockFrequency)
    .def("testPatternEnable", &Psana::EpixSampler::ConfigV1::testPatternEnable)
    .def("sampleInterval_sec", &Psana::EpixSampler::ConfigV1::sampleInterval_sec)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixSamplerConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::EpixSampler::ConfigV1> >(Pds::TypeId::Id_EpixSamplerConfig));

  {
  scope outer = 
  class_<Psana::EpixSampler::ElementV1, boost::shared_ptr<Psana::EpixSampler::ElementV1>, boost::noncopyable >("ElementV1", no_init)
    .def("vc", &Psana::EpixSampler::ElementV1::vc)
    .def("lane", &Psana::EpixSampler::ElementV1::lane)
    .def("acqCount", &Psana::EpixSampler::ElementV1::acqCount)
    .def("frameNumber", &Psana::EpixSampler::ElementV1::frameNumber)
    .def("ticks", &Psana::EpixSampler::ElementV1::ticks)
    .def("fiducials", &Psana::EpixSampler::ElementV1::fiducials)
    .def("frame", &Psana::EpixSampler::ElementV1::frame)
    .def("temperatures", &Psana::EpixSampler::ElementV1::temperatures)
    .def("lastWord", &Psana::EpixSampler::ElementV1::lastWord)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_EpixSamplerElement);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::EpixSampler::ElementV1> >(Pds::TypeId::Id_EpixSamplerElement));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ElementV1"));
    PyObject_SetAttrString(submodule, "Element", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 2>();
  detail::register_ndarray_to_numpy_cvt<const uint16_t, 1>();

} // createWrappers()
} // namespace EpixSampler
} // namespace psddl_python
