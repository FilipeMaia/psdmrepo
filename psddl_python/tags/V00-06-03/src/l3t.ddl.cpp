/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/l3t.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace L3T {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.L3T", 0, "The Python wrapper module for L3T types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "L3T", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::L3T::ConfigV1, boost::shared_ptr<Psana::L3T::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("module_id_len", &Psana::L3T::ConfigV1::module_id_len,"Length of the module identification string")
    .def("desc_len", &Psana::L3T::ConfigV1::desc_len,"Length of the description string")
    .def("module_id", &Psana::L3T::ConfigV1::module_id,"The module identification string")
    .def("desc", &Psana::L3T::ConfigV1::desc,"The description string")
    .def("module_id_shape", &method_shape<Psana::L3T::ConfigV1, &Psana::L3T::ConfigV1::module_id_shape>)
    .def("desc_shape", &method_shape<Psana::L3T::ConfigV1, &Psana::L3T::ConfigV1::desc_shape>)
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_L3TConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::L3T::ConfigV1> >(Pds::TypeId::Id_L3TConfig));

  {
  scope outer = 
  class_<Psana::L3T::DataV1, boost::shared_ptr<Psana::L3T::DataV1>, boost::noncopyable >("DataV1", no_init)
    .def("accept", &Psana::L3T::DataV1::accept,"Module trigger decision")
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_L3TData);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::L3T::DataV1> >(Pds::TypeId::Id_L3TData));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DataV1"));
    PyObject_SetAttrString(submodule, "Data", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }

} // createWrappers()
} // namespace L3T
} // namespace psddl_python
