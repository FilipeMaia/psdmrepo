/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/lusi.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace Lusi {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.Lusi", 0, "The Python wrapper module for Lusi types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "Lusi", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::Lusi::DiodeFexConfigV1 >("DiodeFexConfigV1", no_init)
    .def("base", &Psana::Lusi::DiodeFexConfigV1::base)
    .def("scale", &Psana::Lusi::DiodeFexConfigV1::scale)
  ;

  scope().attr("NRANGES")=3;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Lusi::DiodeFexConfigV1> >(Pds::TypeId::Id_DiodeFexConfig));

  {
  scope outer = 
  class_<Psana::Lusi::DiodeFexConfigV2 >("DiodeFexConfigV2", no_init)
    .def("base", &Psana::Lusi::DiodeFexConfigV2::base)
    .def("scale", &Psana::Lusi::DiodeFexConfigV2::scale)
  ;

  scope().attr("NRANGES")=16;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Lusi::DiodeFexConfigV2> >(Pds::TypeId::Id_DiodeFexConfig));

  class_<Psana::Lusi::DiodeFexV1 >("DiodeFexV1", no_init)
    .def("value", &Psana::Lusi::DiodeFexV1::value)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Lusi::DiodeFexV1> >(Pds::TypeId::Id_DiodeFex));

  {
  scope outer = 
  class_<Psana::Lusi::IpmFexConfigV1, boost::shared_ptr<Psana::Lusi::IpmFexConfigV1>, boost::noncopyable >("IpmFexConfigV1", no_init)
    .def("diode", &Psana::Lusi::IpmFexConfigV1::diode)
    .def("xscale", &Psana::Lusi::IpmFexConfigV1::xscale)
    .def("yscale", &Psana::Lusi::IpmFexConfigV1::yscale)
  ;

  scope().attr("NCHANNELS")=4;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Lusi::IpmFexConfigV1> >(Pds::TypeId::Id_IpmFexConfig));

  {
  scope outer = 
  class_<Psana::Lusi::IpmFexConfigV2, boost::shared_ptr<Psana::Lusi::IpmFexConfigV2>, boost::noncopyable >("IpmFexConfigV2", no_init)
    .def("diode", &Psana::Lusi::IpmFexConfigV2::diode)
    .def("xscale", &Psana::Lusi::IpmFexConfigV2::xscale)
    .def("yscale", &Psana::Lusi::IpmFexConfigV2::yscale)
  ;

  scope().attr("NCHANNELS")=4;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::Lusi::IpmFexConfigV2> >(Pds::TypeId::Id_IpmFexConfig));

  {
  scope outer = 
  class_<Psana::Lusi::IpmFexV1 >("IpmFexV1", no_init)
    .def("channel", &Psana::Lusi::IpmFexV1::channel)
    .def("sum", &Psana::Lusi::IpmFexV1::sum)
    .def("xpos", &Psana::Lusi::IpmFexV1::xpos)
    .def("ypos", &Psana::Lusi::IpmFexV1::ypos)
  ;

  scope().attr("NCHANNELS")=4;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Lusi::IpmFexV1> >(Pds::TypeId::Id_IpmFex));

  class_<Psana::Lusi::PimImageConfigV1 >("PimImageConfigV1", no_init)
    .def("xscale", &Psana::Lusi::PimImageConfigV1::xscale)
    .def("yscale", &Psana::Lusi::PimImageConfigV1::yscale)
  ;
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::Lusi::PimImageConfigV1> >(Pds::TypeId::Id_PimImageConfig));

  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "PimImageConfigV1"));
    PyObject_SetAttrString(submodule, "PimImageConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DiodeFexConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "DiodeFexConfigV2"));
    PyObject_SetAttrString(submodule, "DiodeFexConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "IpmFexV1"));
    PyObject_SetAttrString(submodule, "IpmFex", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(1);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "DiodeFexV1"));
    PyObject_SetAttrString(submodule, "DiodeFex", unvlist);
    Py_CLEAR(unvlist);
  }
  {
    PyObject* unvlist = PyList_New(2);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "IpmFexConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "IpmFexConfigV2"));
    PyObject_SetAttrString(submodule, "IpmFexConfig", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::Lusi::DiodeFexConfigV2>();
  detail::register_ndarray_to_numpy_cvt<const float, 1>();
  detail::register_ndarray_to_list_cvt<const Psana::Lusi::DiodeFexConfigV1>();

} // createWrappers()
} // namespace Lusi
} // namespace psddl_python
