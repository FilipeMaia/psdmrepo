#!@PYTHON@
#--------------------------------------------------------------------------
# Description:
#   Test script for enum/constant access in psddl_python module.  
#   
#------------------------------------------------------------------------


#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import unittest

#-----------------------------
# Imports for other modules --
#-----------------------------
import psana

#-------------------------------
#  Unit test class definition --
#-------------------------------

class psddl_python_enum_const_unit_test ( unittest.TestCase ) :

    def setUp(self) :
    	""" 
    	Method called to prepare the test fixture. This is called immediately 
    	before calling the test method; any exception raised by this method 
    	will be considered an error rather than a test failure.  
    	"""
        pass
    
    def tearDown(self) :
        """
        Method called immediately after the test method has been called and 
        the result recorded. This is called even if the test method raised 
        an exception, so the implementation in subclasses may need to be 
        particularly careful about checking internal state. Any exception raised 
        by this method will be considered an error rather than a test failure. 
        This method will only be called if the setUp() succeeds, regardless 
        of the outcome of the test method. 
        """
        pass

    def test_Timepix_Enum_and_Constants(self):
        self.assertEqual(psana.Timepix.DataV1.Height , 512)
        self.assertEqual(psana.Timepix.DataV1.Width , 512)
        self.assertEqual(psana.Timepix.DataV1.Depth , 14)
        self.assertEqual(psana.Timepix.DataV1.DepthBytes , 2)
        self.assertEqual(psana.Timepix.DataV1.MaxPixelValue , 11810)

        self.assertEqual(psana.Timepix.DataV2.Depth,14)
        self.assertEqual(psana.Timepix.DataV2.MaxPixelValue,11810)

        self.assertEqual(psana.Timepix.ConfigV1.ReadoutSpeed.ReadoutSpeed_Slow,0)
        self.assertEqual(str(psana.Timepix.ConfigV1.ReadoutSpeed.ReadoutSpeed_Slow),'ReadoutSpeed_Slow')
        self.assertEqual(psana.Timepix.ConfigV1.ReadoutSpeed.ReadoutSpeed_Fast,1)
        self.assertEqual(str(psana.Timepix.ConfigV1.ReadoutSpeed.ReadoutSpeed_Fast),'ReadoutSpeed_Fast')
        self.assertEqual(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_ExtPos,0)
        self.assertEqual(str(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_ExtPos),'TriggerMode_ExtPos')
        self.assertEqual(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_ExtNeg,1)
        self.assertEqual(str(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_ExtNeg),'TriggerMode_ExtNeg')
        self.assertEqual(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_Soft,2)
        self.assertEqual(str(psana.Timepix.ConfigV1.TriggerMode.TriggerMode_Soft),'TriggerMode_Soft')
        self.assertEqual(psana.Timepix.ConfigV1.ChipCount,4)
        
        self.assertEqual(psana.Timepix.ConfigV2.ReadoutSpeed.ReadoutSpeed_Slow,0)
        self.assertEqual(str(psana.Timepix.ConfigV2.ReadoutSpeed.ReadoutSpeed_Slow),'ReadoutSpeed_Slow')
        self.assertEqual(psana.Timepix.ConfigV2.ReadoutSpeed.ReadoutSpeed_Fast,1)
        self.assertEqual(str(psana.Timepix.ConfigV2.ReadoutSpeed.ReadoutSpeed_Fast),'ReadoutSpeed_Fast')
        self.assertEqual(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_ExtPos,0)
        self.assertEqual(str(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_ExtPos),'TriggerMode_ExtPos')
        self.assertEqual(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_ExtNeg,1)
        self.assertEqual(str(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_ExtNeg),'TriggerMode_ExtNeg')
        self.assertEqual(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_Soft,2)
        self.assertEqual(str(psana.Timepix.ConfigV2.TriggerMode.TriggerMode_Soft),'TriggerMode_Soft')
        self.assertEqual(psana.Timepix.ConfigV2.ChipCount,4)
        chipCount = psana.Timepix.ConfigV2.ChipCount
        self.assertEqual(psana.Timepix.ConfigV2.PixelThreshMax,chipCount*256*256)

        self.assertEqual(psana.Timepix.ConfigV3.ReadoutSpeed.ReadoutSpeed_Slow,0)
        self.assertEqual(str(psana.Timepix.ConfigV3.ReadoutSpeed.ReadoutSpeed_Slow),'ReadoutSpeed_Slow')
        self.assertEqual(psana.Timepix.ConfigV3.ReadoutSpeed.ReadoutSpeed_Fast,1)
        self.assertEqual(str(psana.Timepix.ConfigV3.ReadoutSpeed.ReadoutSpeed_Fast),'ReadoutSpeed_Fast')
        self.assertEqual(psana.Timepix.ConfigV3.TimepixMode.TimepixMode_Counting,0)
        self.assertEqual(str(psana.Timepix.ConfigV3.TimepixMode.TimepixMode_Counting),'TimepixMode_Counting')
        self.assertEqual(psana.Timepix.ConfigV3.TimepixMode.TimepixMode_TOT,1)
        self.assertEqual(str(psana.Timepix.ConfigV3.TimepixMode.TimepixMode_TOT),'TimepixMode_TOT')
        self.assertEqual(psana.Timepix.ConfigV3.ChipCount,4)
        chipCount = psana.Timepix.ConfigV3.ChipCount
        self.assertEqual(psana.Timepix.ConfigV3.PixelThreshMax,chipCount*256*256)

    def test_Pulnix__Enum_and_Constants(self):
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Depth.Eight_bit,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.Depth.Eight_bit),'Eight_bit')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Depth.Ten_bit,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.Depth.Ten_bit),'Ten_bit')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Binning.x1,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.Binning.x1),'x1')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Binning.x2,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.Binning.x2),'x2')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Binning.x4,2)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.Binning.x4),'x4')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.LookupTable.Gamma,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.LookupTable.Gamma),'Gamma')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.LookupTable.Linear,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV1.LookupTable.Linear),'Linear')
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Row_Pixels,480)
        self.assertEqual(psana.Pulnix.TM6740ConfigV1.Column_Pixels,640)

        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Depth.Eight_bit,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.Depth.Eight_bit),'Eight_bit')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Depth.Ten_bit,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.Depth.Ten_bit),'Ten_bit')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Binning.x1,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.Binning.x1),'x1')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Binning.x2,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.Binning.x2),'x2')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Binning.x4,2)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.Binning.x4),'x4')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.LookupTable.Gamma,0)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.LookupTable.Gamma),'Gamma')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.LookupTable.Linear,1)
        self.assertEqual(str(psana.Pulnix.TM6740ConfigV2.LookupTable.Linear),'Linear')
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Row_Pixels,480)
        self.assertEqual(psana.Pulnix.TM6740ConfigV2.Column_Pixels,640)

    def test_Encoder_Enum_and_Constants(self):
        self.assertEqual(psana.Encoder.ConfigV1.count_mode_type.WRAP_FULL,0)
        self.assertEqual(psana.Encoder.ConfigV1.count_mode_type.LIMIT,1)
        self.assertEqual(psana.Encoder.ConfigV1.count_mode_type.HALT,2)
        self.assertEqual(psana.Encoder.ConfigV1.count_mode_type.WRAP_PRESET,3)
        self.assertEqual(psana.Encoder.ConfigV1.count_mode_type.COUNT_END,4) 

        self.assertEqual(psana.Encoder.ConfigV2.count_mode_type.WRAP_FULL,0)
        self.assertEqual(psana.Encoder.ConfigV2.count_mode_type.LIMIT,1)
        self.assertEqual(psana.Encoder.ConfigV2.count_mode_type.HALT,2)
        self.assertEqual(psana.Encoder.ConfigV2.count_mode_type.WRAP_PRESET,3)
        self.assertEqual(psana.Encoder.ConfigV2.count_mode_type.COUNT_END,4)  

    def test_Control_Enum_and_Constants(self):
        self.assertEqual(psana.ControlData.PVControl.NameSize,32)  
        self.assertEqual(psana.ControlData.PVControl.NoArray,0xFFFFFFFF)  

        self.assertEqual(psana.ControlData.PVLabel.NameSize,32)  
        self.assertEqual(psana.ControlData.PVLabel.ValueSize,64)
    
    def test_Orca_Enum_and_Constants(self):
        self.assertEqual(psana.Orca.ConfigV1.ReadoutMode.x1,0)
        self.assertEqual(str(psana.Orca.ConfigV1.ReadoutMode.x1),'x1')
        self.assertEqual(psana.Orca.ConfigV1.ReadoutMode.x2,1)
        self.assertEqual(str(psana.Orca.ConfigV1.ReadoutMode.x2),'x2')
        self.assertEqual(psana.Orca.ConfigV1.ReadoutMode.x4,2)
        self.assertEqual(str(psana.Orca.ConfigV1.ReadoutMode.x4),'x4')
        self.assertEqual(psana.Orca.ConfigV1.ReadoutMode.Subarray,3)
        self.assertEqual(str(psana.Orca.ConfigV1.ReadoutMode.Subarray),'Subarray')
        self.assertEqual(psana.Orca.ConfigV1.Cooling.Off,0)
        self.assertEqual(str(psana.Orca.ConfigV1.Cooling.Off),'Off')
        self.assertEqual(psana.Orca.ConfigV1.Cooling.On,1)
        self.assertEqual(str(psana.Orca.ConfigV1.Cooling.On),'On')
        self.assertEqual(psana.Orca.ConfigV1.Cooling.Max,2)
        self.assertEqual(str(psana.Orca.ConfigV1.Cooling.Max),'Max')
        self.assertEqual(psana.Orca.ConfigV1.Row_Pixels,2048)
        self.assertEqual(psana.Orca.ConfigV1.Column_Pixels,2048)

    def test_Imp_Enum_and_Constants(self):
        self.assertEqual(psana.Imp.ConfigV1.Registers.Range,0)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Range),'Range')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Cal_range,1)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Cal_range),'Cal_range')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Reset,2)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Reset),'Reset')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Bias_data,3)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Bias_data),'Bias_data')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Cal_data,4)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Cal_data),'Cal_data')
        self.assertEqual(psana.Imp.ConfigV1.Registers.BiasDac_data,5)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.BiasDac_data),'BiasDac_data')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Cal_strobe,6)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Cal_strobe),'Cal_strobe')
        self.assertEqual(psana.Imp.ConfigV1.Registers.NumberOfSamples,7)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.NumberOfSamples),'NumberOfSamples')
        self.assertEqual(psana.Imp.ConfigV1.Registers.TrigDelay,8)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.TrigDelay),'TrigDelay')
        self.assertEqual(psana.Imp.ConfigV1.Registers.Adc_delay,9)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.Adc_delay),'Adc_delay')
        self.assertEqual(psana.Imp.ConfigV1.Registers.NumberOfRegisters,10)
        self.assertEqual(str(psana.Imp.ConfigV1.Registers.NumberOfRegisters),'NumberOfRegisters')

    def test_Quartz_Enum_and_Constants(self):
        self.assertEqual(psana.Quartz.ConfigV1.Depth.Eight_bit,0)
        self.assertEqual(str(psana.Quartz.ConfigV1.Depth.Eight_bit),'Eight_bit')
        self.assertEqual(psana.Quartz.ConfigV1.Depth.Ten_bit,1)
        self.assertEqual(str(psana.Quartz.ConfigV1.Depth.Ten_bit),'Ten_bit')
        self.assertEqual(psana.Quartz.ConfigV1.Binning.x1,0)
        self.assertEqual(str(psana.Quartz.ConfigV1.Binning.x1),'x1')
        self.assertEqual(psana.Quartz.ConfigV1.Binning.x2,1)
        self.assertEqual(str(psana.Quartz.ConfigV1.Binning.x2),'x2')
        self.assertEqual(psana.Quartz.ConfigV1.Binning.x4,2)
        self.assertEqual(str(psana.Quartz.ConfigV1.Binning.x4),'x4')
        self.assertEqual(psana.Quartz.ConfigV1.Mirroring.None,0)
        self.assertEqual(str(psana.Quartz.ConfigV1.Mirroring.None),'None')
        self.assertEqual(psana.Quartz.ConfigV1.Mirroring.HFlip,1)
        self.assertEqual(str(psana.Quartz.ConfigV1.Mirroring.HFlip),'HFlip')
        self.assertEqual(psana.Quartz.ConfigV1.Mirroring.VFlip,2)
        self.assertEqual(str(psana.Quartz.ConfigV1.Mirroring.VFlip),'VFlip')
        self.assertEqual(psana.Quartz.ConfigV1.Mirroring.HVFlip,3)
        self.assertEqual(str(psana.Quartz.ConfigV1.Mirroring.HVFlip),'HVFlip')
        self.assertEqual(psana.Quartz.ConfigV1.LUT_Size,4096)
        self.assertEqual(psana.Quartz.ConfigV1.Row_Pixels,2048)
        self.assertEqual(psana.Quartz.ConfigV1.Column_Pixels,2048)

    def test_CsPad2x2_Enum_and_Constants(self):
        self.assertEqual(psana.CsPad2x2.QuadsPerSensor,1)
        self.assertEqual(psana.CsPad2x2.ASICsPerQuad,4)
        self.assertEqual(psana.CsPad2x2.RowsPerBank,26)
        self.assertEqual(psana.CsPad2x2.FullBanksPerASIC,7)
        self.assertEqual(psana.CsPad2x2.BanksPerASIC,8)
        self.assertEqual(psana.CsPad2x2.ColumnsPerASIC,185)
        self.assertEqual(psana.CsPad2x2.MaxRowsPerASIC,194)
        self.assertEqual(psana.CsPad2x2.PotsPerQuad,80)
        self.assertEqual(psana.CsPad2x2.TwoByTwosPerQuad,1)
        self.assertEqual(psana.CsPad2x2.RunModes.NoRunning,0)
        self.assertEqual(str(psana.CsPad2x2.RunModes.NoRunning),'NoRunning')
        self.assertEqual(psana.CsPad2x2.RunModes.RunButDrop,1)
        self.assertEqual(str(psana.CsPad2x2.RunModes.RunButDrop),'RunButDrop')
        self.assertEqual(psana.CsPad2x2.RunModes.RunAndSendToRCE,2)
        self.assertEqual(str(psana.CsPad2x2.RunModes.RunAndSendToRCE),'RunAndSendToRCE')
        self.assertEqual(psana.CsPad2x2.RunModes.RunAndSendTriggeredByTTL,3)
        self.assertEqual(str(psana.CsPad2x2.RunModes.RunAndSendTriggeredByTTL),'RunAndSendTriggeredByTTL')
        self.assertEqual(psana.CsPad2x2.RunModes.ExternalTriggerSendToRCE,4)
        self.assertEqual(str(psana.CsPad2x2.RunModes.ExternalTriggerSendToRCE),'ExternalTriggerSendToRCE')
        self.assertEqual(psana.CsPad2x2.RunModes.ExternalTriggerDrop,5)
        self.assertEqual(str(psana.CsPad2x2.RunModes.ExternalTriggerDrop),'ExternalTriggerDrop')
        self.assertEqual(psana.CsPad2x2.RunModes.NumberOfRunModes,6)
        self.assertEqual(str(psana.CsPad2x2.RunModes.NumberOfRunModes),'NumberOfRunModes')
        self.assertEqual(psana.CsPad2x2.DataModes.normal,0)
        self.assertEqual(str(psana.CsPad2x2.DataModes.normal),'normal')
        self.assertEqual(psana.CsPad2x2.DataModes.shiftTest,1)
        self.assertEqual(str(psana.CsPad2x2.DataModes.shiftTest),'shiftTest')
        self.assertEqual(psana.CsPad2x2.DataModes.testData,2)
        self.assertEqual(str(psana.CsPad2x2.DataModes.testData),'testData')
        self.assertEqual(psana.CsPad2x2.DataModes.reserved,3)
        self.assertEqual(str(psana.CsPad2x2.DataModes.reserved),'reserved')
        
    def test_Opal1k_Enum_and_Constants(self):
        self.assertEqual(psana.Opal1k.ConfigV1.Depth.Eight_bit,0)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Depth.Eight_bit),'Eight_bit')
        self.assertEqual(psana.Opal1k.ConfigV1.Depth.Ten_bit,1)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Depth.Ten_bit),'Ten_bit')
        self.assertEqual(psana.Opal1k.ConfigV1.Depth.Twelve_bit,2)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Depth.Twelve_bit),'Twelve_bit')
        self.assertEqual(psana.Opal1k.ConfigV1.Binning.x1,0)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Binning.x1),'x1')
        self.assertEqual(psana.Opal1k.ConfigV1.Binning.x2,1)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Binning.x2),'x2')
        self.assertEqual(psana.Opal1k.ConfigV1.Binning.x4,2)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Binning.x4),'x4')
        self.assertEqual(psana.Opal1k.ConfigV1.Binning.x8,3)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Binning.x8),'x8')
        self.assertEqual(psana.Opal1k.ConfigV1.Mirroring.None,0)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Mirroring.None),'None')
        self.assertEqual(psana.Opal1k.ConfigV1.Mirroring.HFlip,1)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Mirroring.HFlip),'HFlip')
        self.assertEqual(psana.Opal1k.ConfigV1.Mirroring.VFlip,2)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Mirroring.VFlip),'VFlip')
        self.assertEqual(psana.Opal1k.ConfigV1.Mirroring.HVFlip,3)
        self.assertEqual(str(psana.Opal1k.ConfigV1.Mirroring.HVFlip),'HVFlip')
        self.assertEqual(psana.Opal1k.ConfigV1.LUT_Size,4096)
        self.assertEqual(psana.Opal1k.ConfigV1.Row_Pixels,1024)
        self.assertEqual(psana.Opal1k.ConfigV1.Column_Pixels,1024)

    def test_CsPad_Enum_and_Constants(self):
        self.assertEqual(psana.CsPad.MaxQuadsPerSensor,4)
        self.assertEqual(psana.CsPad.ASICsPerQuad,16)
        self.assertEqual(psana.CsPad.RowsPerBank,26)
        self.assertEqual(psana.CsPad.FullBanksPerASIC,7)
        self.assertEqual(psana.CsPad.BanksPerASIC,8)
        self.assertEqual(psana.CsPad.ColumnsPerASIC,185)
        self.assertEqual(psana.CsPad.MaxRowsPerASIC,194)
        self.assertEqual(psana.CsPad.PotsPerQuad,80)
        self.assertEqual(psana.CsPad.TwoByTwosPerQuad,4)
        self.assertEqual(psana.CsPad.RunModes.NoRunning,0)
        self.assertEqual(str(psana.CsPad.RunModes.NoRunning),'NoRunning')
        self.assertEqual(psana.CsPad.RunModes.RunButDrop,1)
        self.assertEqual(str(psana.CsPad.RunModes.RunButDrop),'RunButDrop')
        self.assertEqual(psana.CsPad.RunModes.RunAndSendToRCE,2)
        self.assertEqual(str(psana.CsPad.RunModes.RunAndSendToRCE),'RunAndSendToRCE')
        self.assertEqual(psana.CsPad.RunModes.RunAndSendTriggeredByTTL,3)
        self.assertEqual(str(psana.CsPad.RunModes.RunAndSendTriggeredByTTL),'RunAndSendTriggeredByTTL')
        self.assertEqual(psana.CsPad.RunModes.ExternalTriggerSendToRCE,4)
        self.assertEqual(str(psana.CsPad.RunModes.ExternalTriggerSendToRCE),'ExternalTriggerSendToRCE')
        self.assertEqual(psana.CsPad.RunModes.ExternalTriggerDrop,5)
        self.assertEqual(str(psana.CsPad.RunModes.ExternalTriggerDrop),'ExternalTriggerDrop')
        self.assertEqual(psana.CsPad.RunModes.NumberOfRunModes,6)
        self.assertEqual(str(psana.CsPad.RunModes.NumberOfRunModes),'NumberOfRunModes')
        self.assertEqual(psana.CsPad.DataModes.normal,0)
        self.assertEqual(str(psana.CsPad.DataModes.normal),'normal')
        self.assertEqual(psana.CsPad.DataModes.shiftTest,1)
        self.assertEqual(str(psana.CsPad.DataModes.shiftTest),'shiftTest')
        self.assertEqual(psana.CsPad.DataModes.testData,2)
        self.assertEqual(str(psana.CsPad.DataModes.testData),'testData')
        self.assertEqual(psana.CsPad.DataModes.reserved,3)
        self.assertEqual(str(psana.CsPad.DataModes.reserved),'reserved')

    def test_Acqiris_Enum_and_Constants(self):
        self.assertEqual(psana.Acqiris.VertV1.Coupling.GND,0)
        self.assertEqual(str(psana.Acqiris.VertV1.Coupling.GND),'GND')
        self.assertEqual(psana.Acqiris.VertV1.Coupling.DC,1)
        self.assertEqual(str(psana.Acqiris.VertV1.Coupling.DC),'DC')
        self.assertEqual(psana.Acqiris.VertV1.Coupling.AC,2)
        self.assertEqual(str(psana.Acqiris.VertV1.Coupling.AC),'AC')
        self.assertEqual(psana.Acqiris.VertV1.Coupling.DC50ohm,3)
        self.assertEqual(str(psana.Acqiris.VertV1.Coupling.DC50ohm),'DC50ohm')
        self.assertEqual(psana.Acqiris.VertV1.Coupling.AC50ohm,4)
        self.assertEqual(str(psana.Acqiris.VertV1.Coupling.AC50ohm),'AC50ohm')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.None,0)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.None),'None')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.MHz25,1)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.MHz25),'MHz25')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.MHz700,2)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.MHz700),'MHz700')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.MHz200,3)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.MHz200),'MHz200')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.MHz20,4)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.MHz20),'MHz20')
        self.assertEqual(psana.Acqiris.VertV1.Bandwidth.MHz35,5)
        self.assertEqual(str(psana.Acqiris.VertV1.Bandwidth.MHz35),'MHz35')
        self.assertEqual(psana.Acqiris.TrigV1.Source.Internal,1)
        self.assertEqual(str(psana.Acqiris.TrigV1.Source.Internal),'Internal')
        self.assertEqual(psana.Acqiris.TrigV1.Source.External,-1)
        self.assertEqual(str(psana.Acqiris.TrigV1.Source.External),'External')
        self.assertEqual(psana.Acqiris.TrigV1.Coupling.DC,0)
        self.assertEqual(str(psana.Acqiris.TrigV1.Coupling.DC),'DC')
        self.assertEqual(psana.Acqiris.TrigV1.Coupling.AC,1)
        self.assertEqual(str(psana.Acqiris.TrigV1.Coupling.AC),'AC')
        self.assertEqual(psana.Acqiris.TrigV1.Coupling.HFreject,2)
        self.assertEqual(str(psana.Acqiris.TrigV1.Coupling.HFreject),'HFreject')
        self.assertEqual(psana.Acqiris.TrigV1.Coupling.DC50ohm,3)
        self.assertEqual(str(psana.Acqiris.TrigV1.Coupling.DC50ohm),'DC50ohm')
        self.assertEqual(psana.Acqiris.TrigV1.Coupling.AC50ohm,4)
        self.assertEqual(str(psana.Acqiris.TrigV1.Coupling.AC50ohm),'AC50ohm')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.Positive,0)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.Positive),'Positive')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.Negative,1)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.Negative),'Negative')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.OutOfWindow,2)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.OutOfWindow),'OutOfWindow')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.IntoWindow,3)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.IntoWindow),'IntoWindow')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.HFDivide,4)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.HFDivide),'HFDivide')
        self.assertEqual(psana.Acqiris.TrigV1.Slope.SpikeStretcher,5)
        self.assertEqual(str(psana.Acqiris.TrigV1.Slope.SpikeStretcher),'SpikeStretcher')
        self.assertEqual(psana.Acqiris.ConfigV1.MaxChan,20)
        self.assertEqual(psana.Acqiris.DataDescV1Elem.NumberOfBits,10)
        self.assertEqual(psana.Acqiris.DataDescV1Elem.BitShift,6)
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Veto,-2)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Veto),'Veto')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Common,-1)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Common),'Common')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input1,1)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input1),'Input1')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input2,2)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input2),'Input2')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input3,3)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input3),'Input3')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input4,4)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input4),'Input4')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input5,5)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input5),'Input5')
        self.assertEqual(psana.Acqiris.TdcChannel.Channel.Input6,6)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Channel.Input6),'Input6')
        self.assertEqual(psana.Acqiris.TdcChannel.Mode.Active,0)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Mode.Active),'Active')
        self.assertEqual(psana.Acqiris.TdcChannel.Mode.Inactive,1)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Mode.Inactive),'Inactive')
        self.assertEqual(psana.Acqiris.TdcChannel.Slope.Positive,0)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Slope.Positive),'Positive')
        self.assertEqual(psana.Acqiris.TdcChannel.Slope.Negative,1)
        self.assertEqual(str(psana.Acqiris.TdcChannel.Slope.Negative),'Negative')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Channel.IOAux1,1)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Channel.IOAux1),'IOAux1')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Channel.IOAux2,2)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Channel.IOAux2),'IOAux2')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Mode.BankSwitch,1)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Mode.BankSwitch),'BankSwitch')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Mode.Marker,2)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Mode.Marker),'Marker')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Mode.OutputLo,32)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Mode.OutputLo),'OutputLo')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Mode.OutputHi,33)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Mode.OutputHi),'OutputHi')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Termination.ZHigh,0)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Termination.ZHigh),'ZHigh')
        self.assertEqual(psana.Acqiris.TdcAuxIO.Termination.Z50,1)
        self.assertEqual(str(psana.Acqiris.TdcAuxIO.Termination.Z50),'Z50')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Channel.ChVeto,13)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Channel.ChVeto),'ChVeto')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Mode.Veto,1)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Mode.Veto),'Veto')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Mode.SwitchVeto,2)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Mode.SwitchVeto),'SwitchVeto')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Mode.InvertedVeto,3)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Mode.InvertedVeto),'InvertedVeto')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Mode.InvertedSwitchVeto,4)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Mode.InvertedSwitchVeto),'InvertedSwitchVeto')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Termination.ZHigh,0)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Termination.ZHigh),'ZHigh')
        self.assertEqual(psana.Acqiris.TdcVetoIO.Termination.Z50,1)
        self.assertEqual(str(psana.Acqiris.TdcVetoIO.Termination.Z50),'Z50')
        self.assertEqual(psana.Acqiris.TdcConfigV1.NChannels,8)
        self.assertEqual(psana.Acqiris.TdcConfigV1.NAuxIO,2)
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Comm,0)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Comm),'Comm')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan1,1)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan1),'Chan1')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan2,2)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan2),'Chan2')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan3,3)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan3),'Chan3')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan4,4)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan4),'Chan4')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan5,5)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan5),'Chan5')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.Chan6,6)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.Chan6),'Chan6')
        self.assertEqual(psana.Acqiris.TdcDataV1_Item.Source.AuxIO,7)
        self.assertEqual(str(psana.Acqiris.TdcDataV1_Item.Source.AuxIO),'AuxIO')
        self.assertEqual(psana.Acqiris.TdcDataV1Marker.Type.AuxIOSwitch,0)
        self.assertEqual(str(psana.Acqiris.TdcDataV1Marker.Type.AuxIOSwitch),'AuxIOSwitch')
        self.assertEqual(psana.Acqiris.TdcDataV1Marker.Type.EventCntSwitch,1)
        self.assertEqual(str(psana.Acqiris.TdcDataV1Marker.Type.EventCntSwitch),'EventCntSwitch')
        self.assertEqual(psana.Acqiris.TdcDataV1Marker.Type.MemFullSwitch,2)
        self.assertEqual(str(psana.Acqiris.TdcDataV1Marker.Type.MemFullSwitch),'MemFullSwitch')
        self.assertEqual(psana.Acqiris.TdcDataV1Marker.Type.AuxIOMarker,16)
        self.assertEqual(str(psana.Acqiris.TdcDataV1Marker.Type.AuxIOMarker),'AuxIOMarker')

    def test_EvrData_Enum_and_Constants(self):
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r120Hz,0)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r120Hz),'r120Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r60Hz,1)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r60Hz),'r60Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r30Hz,2)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r30Hz),'r30Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r10Hz,3)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r10Hz),'r10Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r5Hz,4)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r5Hz),'r5Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r1Hz,5)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r1Hz),'r1Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.r0_5Hz,6)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.r0_5Hz),'r0_5Hz')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.Single,7)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.Single),'Single')
        self.assertEqual(psana.EvrData.ConfigV2.RateCode.NumberOfRates,8)
        self.assertEqual(str(psana.EvrData.ConfigV2.RateCode.NumberOfRates),'NumberOfRates')
        self.assertEqual(psana.EvrData.ConfigV2.BeamCode.Off,0)
        self.assertEqual(str(psana.EvrData.ConfigV2.BeamCode.Off),'Off')
        self.assertEqual(psana.EvrData.ConfigV2.BeamCode.On,1)
        self.assertEqual(str(psana.EvrData.ConfigV2.BeamCode.On),'On')
        self.assertEqual(psana.EvrData.ConfigV5.MaxPulses,32)
        self.assertEqual(psana.EvrData.ConfigV5.EvrOutputs,10)
        self.assertEqual(psana.EvrData.ConfigV6.MaxPulses,256)
        self.assertEqual(psana.EvrData.ConfigV6.MaxOutputs,256)
        self.assertEqual(psana.EvrData.ConfigV7.MaxPulses,256)
        self.assertEqual(psana.EvrData.ConfigV7.MaxOutputs,256)
        self.assertEqual(psana.EvrData.EventCodeV5.DescSize,16)
        self.assertEqual(psana.EvrData.EventCodeV6.DescSize,16)
        self.assertEqual(psana.EvrData.EventCodeV6.MaxReadoutGroup,7)
        self.assertEqual(psana.EvrData.IOChannel.MaxInfos,8)
        self.assertEqual(psana.EvrData.IOChannel.NameLength,12)
        self.assertEqual(psana.EvrData.OutputMap.Source.Pulse,0)
        self.assertEqual(str(psana.EvrData.OutputMap.Source.Pulse),'Pulse')
        self.assertEqual(psana.EvrData.OutputMap.Source.DBus,1)
        self.assertEqual(str(psana.EvrData.OutputMap.Source.DBus),'DBus')
        self.assertEqual(psana.EvrData.OutputMap.Source.Prescaler,2)
        self.assertEqual(str(psana.EvrData.OutputMap.Source.Prescaler),'Prescaler')
        self.assertEqual(psana.EvrData.OutputMap.Source.Force_High,3)
        self.assertEqual(str(psana.EvrData.OutputMap.Source.Force_High),'Force_High')
        self.assertEqual(psana.EvrData.OutputMap.Source.Force_Low,4)
        self.assertEqual(str(psana.EvrData.OutputMap.Source.Force_Low),'Force_Low')
        self.assertEqual(psana.EvrData.OutputMap.Conn.FrontPanel,0)
        self.assertEqual(str(psana.EvrData.OutputMap.Conn.FrontPanel),'FrontPanel')
        self.assertEqual(psana.EvrData.OutputMap.Conn.UnivIO,1)
        self.assertEqual(str(psana.EvrData.OutputMap.Conn.UnivIO),'UnivIO')
        self.assertEqual(psana.EvrData.OutputMapV2.Source.Pulse,0)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Source.Pulse),'Pulse')
        self.assertEqual(psana.EvrData.OutputMapV2.Source.DBus,1)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Source.DBus),'DBus')
        self.assertEqual(psana.EvrData.OutputMapV2.Source.Prescaler,2)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Source.Prescaler),'Prescaler')
        self.assertEqual(psana.EvrData.OutputMapV2.Source.Force_High,3)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Source.Force_High),'Force_High')
        self.assertEqual(psana.EvrData.OutputMapV2.Source.Force_Low,4)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Source.Force_Low),'Force_Low')
        self.assertEqual(psana.EvrData.OutputMapV2.Conn.FrontPanel,0)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Conn.FrontPanel),'FrontPanel')
        self.assertEqual(psana.EvrData.OutputMapV2.Conn.UnivIO,1)
        self.assertEqual(str(psana.EvrData.OutputMapV2.Conn.UnivIO),'UnivIO')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r120Hz,0)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r120Hz),'r120Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r60Hz,1)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r60Hz),'r60Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r30Hz,2)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r30Hz),'r30Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r10Hz,3)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r10Hz),'r10Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r5Hz,4)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r5Hz),'r5Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r1Hz,5)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r1Hz),'r1Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.r0_5Hz,6)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.r0_5Hz),'r0_5Hz')
        self.assertEqual(psana.EvrData.SequencerConfigV1.Source.Disable,7)
        self.assertEqual(str(psana.EvrData.SequencerConfigV1.Source.Disable),'Disable')

    def test_Gsc16ai_Enum_and_Constants(self):
        self.assertEqual(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Differential,0)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Differential),'InputMode_Differential')
        self.assertEqual(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Zero,1)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Zero),'InputMode_Zero')
        self.assertEqual(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Vref,2)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.InputMode.InputMode_Vref),'InputMode_Vref')
        self.assertEqual(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_10V,0)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_10V),'VoltageRange_10V')
        self.assertEqual(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_5V,1)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_5V),'VoltageRange_5V')
        self.assertEqual(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_2_5V,2)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.VoltageRange.VoltageRange_2_5V),'VoltageRange_2_5V')
        self.assertEqual(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_ExtPos,0)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_ExtPos),'TriggerMode_ExtPos')
        self.assertEqual(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_ExtNeg,1)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_ExtNeg),'TriggerMode_ExtNeg')
        self.assertEqual(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_IntClk,2)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.TriggerMode.TriggerMode_IntClk),'TriggerMode_IntClk')
        self.assertEqual(psana.Gsc16ai.ConfigV1.DataFormat.DataFormat_TwosComplement,0)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.DataFormat.DataFormat_TwosComplement),'DataFormat_TwosComplement')
        self.assertEqual(psana.Gsc16ai.ConfigV1.DataFormat.DataFormat_OffsetBinary,1)
        self.assertEqual(str(psana.Gsc16ai.ConfigV1.DataFormat.DataFormat_OffsetBinary),'DataFormat_OffsetBinary')
        self.assertEqual(psana.Gsc16ai.ConfigV1.LowestChannel,0)
        self.assertEqual(psana.Gsc16ai.ConfigV1.HighestChannel,15)
        self.assertEqual(psana.Gsc16ai.ConfigV1.LowestFps,1)
        self.assertEqual(psana.Gsc16ai.ConfigV1.HighestFps,120)

    def test_FCCD_Enum_and_Constants(self):
        self.assertEqual(psana.FCCD.FccdConfigV1.Depth.Sixteen_bit,16)
        self.assertEqual(str(psana.FCCD.FccdConfigV1.Depth.Sixteen_bit),'Sixteen_bit')
        self.assertEqual(psana.FCCD.FccdConfigV1.Output_Source.Output_FIFO,0)
        self.assertEqual(str(psana.FCCD.FccdConfigV1.Output_Source.Output_FIFO),'Output_FIFO')
        self.assertEqual(psana.FCCD.FccdConfigV1.Output_Source.Output_Pattern4,4)
        self.assertEqual(str(psana.FCCD.FccdConfigV1.Output_Source.Output_Pattern4),'Output_Pattern4')
        self.assertEqual(psana.FCCD.FccdConfigV1.Row_Pixels,500)
        self.assertEqual(psana.FCCD.FccdConfigV1.Column_Pixels,576)
        self.assertEqual(psana.FCCD.FccdConfigV1.Trimmed_Row_Pixels,480)
        self.assertEqual(psana.FCCD.FccdConfigV1.Trimmed_Column_Pixels,480)
        self.assertEqual(psana.FCCD.FccdConfigV2.Depth.Eight_bit,8)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Depth.Eight_bit),'Eight_bit')
        self.assertEqual(psana.FCCD.FccdConfigV2.Depth.Sixteen_bit,16)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Depth.Sixteen_bit),'Sixteen_bit')
        self.assertEqual(psana.FCCD.FccdConfigV2.Output_Source.Output_FIFO,0)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Output_Source.Output_FIFO),'Output_FIFO')
        self.assertEqual(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern1,1)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern1),'Test_Pattern1')
        self.assertEqual(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern2,2)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern2),'Test_Pattern2')
        self.assertEqual(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern3,3)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern3),'Test_Pattern3')
        self.assertEqual(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern4,4)
        self.assertEqual(str(psana.FCCD.FccdConfigV2.Output_Source.Test_Pattern4),'Test_Pattern4')
        self.assertEqual(psana.FCCD.FccdConfigV2.Row_Pixels,500)
        self.assertEqual(psana.FCCD.FccdConfigV2.Column_Pixels,576 * 2)
        self.assertEqual(psana.FCCD.FccdConfigV2.Trimmed_Row_Pixels,480)
        self.assertEqual(psana.FCCD.FccdConfigV2.Trimmed_Column_Pixels,480)

    def test_Ipimb_Enum_and_Constants(self):
        self.assertEqual(psana.Ipimb.ConfigV1.CapacitorValue.c_1pF,0)
        self.assertEqual(psana.Ipimb.ConfigV1.CapacitorValue.c_100pF,1)
        self.assertEqual(psana.Ipimb.ConfigV1.CapacitorValue.c_10nF,2)

        self.assertEqual(str(psana.Ipimb.ConfigV1.CapacitorValue.c_1pF),"c_1pF")
        self.assertEqual(str(psana.Ipimb.ConfigV1.CapacitorValue.c_100pF),"c_100pF")
        self.assertEqual(str(psana.Ipimb.ConfigV1.CapacitorValue.c_10nF),"c_10nF")

        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_1pF, 0)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_4p7pF,1) 
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_24pF, 2)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_120pF, 3)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_620pF, 4)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_3p3nF, 5)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.c_10nF, 6)
        self.assertEqual(psana.Ipimb.ConfigV2.CapacitorValue.expert, 7)

        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_1pF),"c_1pF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_4p7pF),"c_4p7pF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_24pF),"c_24pF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_120pF),"c_120pF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_620pF),"c_620pF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_3p3nF),"c_3p3nF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.c_10nF),"c_10nF")
        self.assertEqual(str(psana.Ipimb.ConfigV2.CapacitorValue.expert),"expert")

    def test_Bld_Enum_and_Constants(self):
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamChargeDamage,0x001)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamChargeDamage),'EbeamChargeDamage')
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamL3EnergyDamage,0x002)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamL3EnergyDamage),"EbeamL3EnergyDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUPosXDamage,0x004)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUPosXDamage),"EbeamLTUPosXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUPosYDamage,0x008)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUPosYDamage),"EbeamLTUPosYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUAngXDamage,0x010)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUAngXDamage),"EbeamLTUAngXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUAngYDamage,0x020)
        self.assertEqual(str(psana.Bld.BldDataEBeamV0.DamageMask.EbeamLTUAngYDamage),"EbeamLTUAngYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamChargeDamage,0x001)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamChargeDamage),"EbeamChargeDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamL3EnergyDamage,0x002)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamL3EnergyDamage),"EbeamL3EnergyDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUPosXDamage,0x004)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUPosXDamage),"EbeamLTUPosXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUPosYDamage,0x008)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUPosYDamage),"EbeamLTUPosYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUAngXDamage,0x010)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUAngXDamage),"EbeamLTUAngXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUAngYDamage,0x020)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamLTUAngYDamage),"EbeamLTUAngYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV1.DamageMask.EbeamPkCurrBC2Damage,0x040)
        self.assertEqual(str(psana.Bld.BldDataEBeamV1.DamageMask.EbeamPkCurrBC2Damage),"EbeamPkCurrBC2Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamChargeDamage,0x001)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamChargeDamage),"EbeamChargeDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamL3EnergyDamage,0x002)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamL3EnergyDamage),"EbeamL3EnergyDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUPosXDamage,0x004)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUPosXDamage),"EbeamLTUPosXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUPosYDamage,0x008)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUPosYDamage),"EbeamLTUPosYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUAngXDamage,0x010)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUAngXDamage),"EbeamLTUAngXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUAngYDamage,0x020)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamLTUAngYDamage),"EbeamLTUAngYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamPkCurrBC2Damage,0x040)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamPkCurrBC2Damage),"EbeamPkCurrBC2Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV2.DamageMask.EbeamEnergyBC2Damage,0x080)
        self.assertEqual(str(psana.Bld.BldDataEBeamV2.DamageMask.EbeamEnergyBC2Damage),"EbeamEnergyBC2Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamChargeDamage,0x001)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamChargeDamage),"EbeamChargeDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamL3EnergyDamage,0x002)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamL3EnergyDamage),"EbeamL3EnergyDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUPosXDamage,0x004)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUPosXDamage),"EbeamLTUPosXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUPosYDamage,0x008)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUPosYDamage),"EbeamLTUPosYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUAngXDamage,0x010)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUAngXDamage),"EbeamLTUAngXDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUAngYDamage,0x020)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamLTUAngYDamage),"EbeamLTUAngYDamage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamPkCurrBC2Damage,0x040)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamPkCurrBC2Damage),"EbeamPkCurrBC2Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamEnergyBC2Damage,0x080)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamEnergyBC2Damage),"EbeamEnergyBC2Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamPkCurrBC1Damage,0x100)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamPkCurrBC1Damage),"EbeamPkCurrBC1Damage")
        self.assertEqual(psana.Bld.BldDataEBeamV3.DamageMask.EbeamEnergyBC1Damage,0x200)
        self.assertEqual(str(psana.Bld.BldDataEBeamV3.DamageMask.EbeamEnergyBC1Damage),"EbeamEnergyBC1Damage")

    def test_Epics_Enum_and_Constants(self):
        self.assertEqual(psana.Epics.iXtcVersion,1)
        self.assertEqual(psana.Epics.iMaxPvNameLength,64)
        self.assertEqual(psana.Epics.MAX_STRING_SIZE,40)
        self.assertEqual(psana.Epics.MAX_UNITS_SIZE,8)
        self.assertEqual(psana.Epics.MAX_ENUM_STRING_SIZE,26)
        self.assertEqual(psana.Epics.MAX_ENUM_STATES,16)

        self.assertEqual(psana.Epics.DbrTypes.DBR_STRING,0)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STRING),"DBR_STRING")
        self.assertEqual(psana.Epics.DbrTypes.DBR_SHORT,1)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_SHORT),"DBR_SHORT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_FLOAT,2)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_FLOAT),"DBR_FLOAT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_ENUM,3)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_ENUM),"DBR_ENUM")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CHAR,4)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CHAR),"DBR_CHAR")
        self.assertEqual(psana.Epics.DbrTypes.DBR_LONG,5)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_LONG),"DBR_LONG")
        self.assertEqual(psana.Epics.DbrTypes.DBR_DOUBLE,6)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_DOUBLE),"DBR_DOUBLE")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_STRING,7)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_STRING),"DBR_STS_STRING")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_SHORT,8)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_SHORT),"DBR_STS_SHORT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_FLOAT,9)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_FLOAT),"DBR_STS_FLOAT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_ENUM,10)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_ENUM),"DBR_STS_ENUM")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_CHAR,11)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_CHAR),"DBR_STS_CHAR")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_LONG,12)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_LONG),"DBR_STS_LONG")
        self.assertEqual(psana.Epics.DbrTypes.DBR_STS_DOUBLE,13)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_STS_DOUBLE),"DBR_STS_DOUBLE")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_STRING,14)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_STRING),"DBR_TIME_STRING")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_INT,15)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_INT),"DBR_TIME_INT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_SHORT,15)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_SHORT),"DBR_TIME_SHORT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_FLOAT,16)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_FLOAT),"DBR_TIME_FLOAT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_ENUM,17)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_ENUM),"DBR_TIME_ENUM")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_CHAR,18)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_CHAR),"DBR_TIME_CHAR")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_LONG,19)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_LONG),"DBR_TIME_LONG")
        self.assertEqual(psana.Epics.DbrTypes.DBR_TIME_DOUBLE,20)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_TIME_DOUBLE),"DBR_TIME_DOUBLE")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_STRING,21)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_STRING),"DBR_GR_STRING")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_SHORT,22)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_SHORT),"DBR_GR_SHORT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_FLOAT,23)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_FLOAT),"DBR_GR_FLOAT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_ENUM,24)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_ENUM),"DBR_GR_ENUM")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_CHAR,25)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_CHAR),"DBR_GR_CHAR")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_LONG,26)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_LONG),"DBR_GR_LONG")
        self.assertEqual(psana.Epics.DbrTypes.DBR_GR_DOUBLE,27)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_GR_DOUBLE),"DBR_GR_DOUBLE")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_STRING,28)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_STRING),"DBR_CTRL_STRING")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_SHORT,29)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_SHORT),"DBR_CTRL_SHORT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_FLOAT,30)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_FLOAT),"DBR_CTRL_FLOAT")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_ENUM,31)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_ENUM),"DBR_CTRL_ENUM")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_CHAR,32)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_CHAR),"DBR_CTRL_CHAR")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_LONG,33)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_LONG),"DBR_CTRL_LONG")
        self.assertEqual(psana.Epics.DbrTypes.DBR_CTRL_DOUBLE,34)
        self.assertEqual(str(psana.Epics.DbrTypes.DBR_CTRL_DOUBLE),"DBR_CTRL_DOUBLE")
       
    def test_Andor_Enum_and_Constants(self):
        self.assertEqual(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_FULL,0)
        self.assertEqual(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_LOW,1)
        self.assertEqual(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_OFF,2)
        self.assertEqual(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_ACQOFF,3)
        self.assertEqual(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_NUM,4)        

        self.assertEqual(str(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_FULL),"ENUM_FAN_FULL")
        self.assertEqual(str(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_LOW),"ENUM_FAN_LOW")
        self.assertEqual(str(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_OFF),"ENUM_FAN_OFF")
        self.assertEqual(str(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_ACQOFF),"ENUM_FAN_ACQOFF")
        self.assertEqual(str(psana.Andor.ConfigV1.EnumFanMode.ENUM_FAN_NUM),"ENUM_FAN_NUM")

    def test_UsdUsb_Enum_and_Constants(self):
        self.assertEqual(psana.UsdUsb.ConfigV1.NCHANNELS,4)
        self.assertEqual(psana.UsdUsb.ConfigV1.Count_Mode.WRAP_FULL,0)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Count_Mode.WRAP_FULL),'WRAP_FULL')
        self.assertEqual(psana.UsdUsb.ConfigV1.Count_Mode.LIMIT,1)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Count_Mode.LIMIT),'LIMIT')
        self.assertEqual(psana.UsdUsb.ConfigV1.Count_Mode.HALT,2)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Count_Mode.HALT),'HALT')
        self.assertEqual(psana.UsdUsb.ConfigV1.Count_Mode.WRAP_PRESET,3)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Count_Mode.WRAP_PRESET),'WRAP_PRESET')
        self.assertEqual(psana.UsdUsb.ConfigV1.Quad_Mode.CLOCK_DIR,0)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Quad_Mode.CLOCK_DIR),'CLOCK_DIR')
        self.assertEqual(psana.UsdUsb.ConfigV1.Quad_Mode.X1,1)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Quad_Mode.X1),'X1')
        self.assertEqual(psana.UsdUsb.ConfigV1.Quad_Mode.X2,2)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Quad_Mode.X2),'X2')
        self.assertEqual(psana.UsdUsb.ConfigV1.Quad_Mode.X4,3)
        self.assertEqual(str(psana.UsdUsb.ConfigV1.Quad_Mode.X4),'X4')
        self.assertEqual(psana.UsdUsb.DataV1.Encoder_Inputs,4)
        self.assertEqual(psana.UsdUsb.DataV1.Analog_Inputs,4)
        self.assertEqual(psana.UsdUsb.DataV1.Digital_Inputs,8)

    def test_Lusi_Enum_and_Constants(self):
        self.assertEqual(psana.Lusi.DiodeFexConfigV1.NRANGES,3)
        self.assertEqual(psana.Lusi.DiodeFexConfigV2.NRANGES,16)
        self.assertEqual(psana.Lusi.IpmFexConfigV1.NCHANNELS,4)
        self.assertEqual(psana.Lusi.IpmFexConfigV2.NCHANNELS,4)
        
#  run unit tests when imported as a main module
#
if __name__ == "__main__":
    unittest.main(argv=[sys.argv[0], '-v'])
