/* Do not edit this file, as it is auto-generated */

#include <boost/python.hpp>
#include <boost/make_shared.hpp>
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/TypeId.hh"
#include "psddl_psana/control.ddl.h" // inc_psana
#include "psddl_python/Converter.h"
#include "psddl_python/DdlWrapper.h"
#include "psddl_python/ConverterMap.h"
#include "psddl_python/ConverterBoostDef.h"
#include "psddl_python/ConverterBoostDefSharedPtr.h"

namespace psddl_python {
namespace ControlData {

using namespace boost::python;
using boost::python::object;
using boost::shared_ptr;
using std::vector;

namespace {
template<typename T, std::vector<int> (T::*MF)() const>
PyObject* method_shape(const T *x) {
  return detail::vintToList((x->*MF)());
}
} // namespace

void createWrappers(PyObject* module) {
  PyObject* submodule = Py_InitModule3( "psana.ControlData", 0, "The Python wrapper module for ControlData types");
  Py_INCREF(submodule);
  PyModule_AddObject(module, "ControlData", submodule);
  scope mod = object(handle<>(borrowed(submodule)));
  {
  scope outer = 
  class_<Psana::ControlData::PVControl >("PVControl", no_init)
    .def("name", &Psana::ControlData::PVControl::name,"Name of the control.")
    .def("index", &Psana::ControlData::PVControl::index,"Index of the control PV (for arrays) or NoArray.")
    .def("value", &Psana::ControlData::PVControl::value,"Value for this control.")
    .def("array", &Psana::ControlData::PVControl::array,"Returns true if the control is an array.")
  ;
  scope().attr("NameSize")=32;
  scope().attr("NoArray")=0xFFFFFFFF;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVControl> >(-1));

  {
  scope outer = 
  class_<Psana::ControlData::PVMonitor >("PVMonitor", no_init)
    .def("name", &Psana::ControlData::PVMonitor::name,"Name of the control.")
    .def("index", &Psana::ControlData::PVMonitor::index,"Index of the control PV (for arrays) or NoArray.")
    .def("loValue", &Psana::ControlData::PVMonitor::loValue,"Lowest value for this monitor.")
    .def("hiValue", &Psana::ControlData::PVMonitor::hiValue,"Highest value for this monitor.")
    .def("array", &Psana::ControlData::PVMonitor::array,"Returns true if the monitor is an array.")
  ;
  scope().attr("NameSize")=32;
  scope().attr("NoArray")=0xFFFFFFFF;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVMonitor> >(-1));

  {
  scope outer = 
  class_<Psana::ControlData::PVLabel >("PVLabel", no_init)
    .def("name", &Psana::ControlData::PVLabel::name,"PV name.")
    .def("value", &Psana::ControlData::PVLabel::value,"Label value.")
  ;
  scope().attr("NameSize")=32;
  scope().attr("ValueSize")=64;
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDef<Psana::ControlData::PVLabel> >(-1));

  {
  scope outer = 
  class_<Psana::ControlData::ConfigV1, boost::shared_ptr<Psana::ControlData::ConfigV1>, boost::noncopyable >("ConfigV1", no_init)
    .def("events", &Psana::ControlData::ConfigV1::events,"Maximum number of events per scan.")
    .def("uses_duration", &Psana::ControlData::ConfigV1::uses_duration,"returns true if the configuration uses duration control.")
    .def("uses_events", &Psana::ControlData::ConfigV1::uses_events,"returns true if the configuration uses events limit.")
    .def("duration", &Psana::ControlData::ConfigV1::duration, return_value_policy<copy_const_reference>(),"Maximum duration of the scan.")
    .def("npvControls", &Psana::ControlData::ConfigV1::npvControls,"Number of PVControl objects in this configuration.")
    .def("npvMonitors", &Psana::ControlData::ConfigV1::npvMonitors,"Number of PVMonitor objects in this configuration.")
    .def("pvControls", &Psana::ControlData::ConfigV1::pvControls,"PVControl configuration objects")
    .def("pvMonitors", &Psana::ControlData::ConfigV1::pvMonitors,"PVMonitor configuration objects")
  ;
  scope().attr("Version")=1;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ControlConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::ControlData::ConfigV1> >(Pds::TypeId::Id_ControlConfig));

  {
  scope outer = 
  class_<Psana::ControlData::ConfigV2, boost::shared_ptr<Psana::ControlData::ConfigV2>, boost::noncopyable >("ConfigV2", no_init)
    .def("events", &Psana::ControlData::ConfigV2::events,"Maximum number of events per scan.")
    .def("uses_duration", &Psana::ControlData::ConfigV2::uses_duration,"returns true if the configuration uses duration control.")
    .def("uses_events", &Psana::ControlData::ConfigV2::uses_events,"returns true if the configuration uses events limit.")
    .def("duration", &Psana::ControlData::ConfigV2::duration, return_value_policy<copy_const_reference>(),"Maximum duration of the scan.")
    .def("npvControls", &Psana::ControlData::ConfigV2::npvControls,"Number of PVControl objects in this configuration.")
    .def("npvMonitors", &Psana::ControlData::ConfigV2::npvMonitors,"Number of PVMonitor objects in this configuration.")
    .def("npvLabels", &Psana::ControlData::ConfigV2::npvLabels,"Number of PVLabel objects in this configuration.")
    .def("pvControls", &Psana::ControlData::ConfigV2::pvControls,"PVControl configuration objects")
    .def("pvMonitors", &Psana::ControlData::ConfigV2::pvMonitors,"PVMonitor configuration objects")
    .def("pvLabels", &Psana::ControlData::ConfigV2::pvLabels,"PVLabel configuration objects")
  ;
  scope().attr("Version")=2;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ControlConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::ControlData::ConfigV2> >(Pds::TypeId::Id_ControlConfig));

  {
  scope outer = 
  class_<Psana::ControlData::ConfigV3, boost::shared_ptr<Psana::ControlData::ConfigV3>, boost::noncopyable >("ConfigV3", no_init)
    .def("events", &Psana::ControlData::ConfigV3::events,"Maximum number of events per scan.")
    .def("uses_l3t_events", &Psana::ControlData::ConfigV3::uses_l3t_events,"returns true if the configuration uses l3trigger events limit.")
    .def("uses_duration", &Psana::ControlData::ConfigV3::uses_duration,"returns true if the configuration uses duration control.")
    .def("uses_events", &Psana::ControlData::ConfigV3::uses_events,"returns true if the configuration uses events limit.")
    .def("duration", &Psana::ControlData::ConfigV3::duration, return_value_policy<copy_const_reference>(),"Maximum duration of the scan.")
    .def("npvControls", &Psana::ControlData::ConfigV3::npvControls,"Number of PVControl objects in this configuration.")
    .def("npvMonitors", &Psana::ControlData::ConfigV3::npvMonitors,"Number of PVMonitor objects in this configuration.")
    .def("npvLabels", &Psana::ControlData::ConfigV3::npvLabels,"Number of PVLabel objects in this configuration.")
    .def("pvControls", &Psana::ControlData::ConfigV3::pvControls,"PVControl configuration objects")
    .def("pvMonitors", &Psana::ControlData::ConfigV3::pvMonitors,"PVMonitor configuration objects")
    .def("pvLabels", &Psana::ControlData::ConfigV3::pvLabels,"PVLabel configuration objects")
  ;
  scope().attr("Version")=3;
  scope().attr("TypeId")=int(Pds::TypeId::Id_ControlConfig);
  }
  ConverterMap::instance().addConverter(boost::make_shared<ConverterBoostDefSharedPtr<Psana::ControlData::ConfigV3> >(Pds::TypeId::Id_ControlConfig));

  {
    PyObject* unvlist = PyList_New(3);
    PyList_SET_ITEM(unvlist, 0, PyObject_GetAttrString(submodule, "ConfigV1"));
    PyList_SET_ITEM(unvlist, 1, PyObject_GetAttrString(submodule, "ConfigV2"));
    PyList_SET_ITEM(unvlist, 2, PyObject_GetAttrString(submodule, "ConfigV3"));
    PyObject_SetAttrString(submodule, "Config", unvlist);
    Py_CLEAR(unvlist);
  }
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVLabel>();
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVMonitor>();
  detail::register_ndarray_to_list_cvt<const Psana::ControlData::PVControl>();

} // createWrappers()
} // namespace ControlData
} // namespace psddl_python
