# do not edit this file. It is generated from the DDL.
# edit the template psana_test/data/template/psana_test.tmpl 
# and regenerate using ddl_psana_test

import psana
from psana import *
from  psana_test.types_to_str import *
import numpy as np

def _Src_to_str(obj, indent, lvl, methodSep):
    return doIndent(indent,lvl) + str(obj)

def Partition_Src_to_str(obj, indent, lvl, methodSep):
    return _Src_to_str(obj, indent, lvl, methodSep)

def Pds_Src_to_str(obj, indent, lvl, methodSep):
    return _Src_to_str(obj, indent, lvl, methodSep)

def Pds_DetInfo_to_str(obj, indent, lvl, methodSep):
    return _Src_to_str(obj, indent, lvl, methodSep)

def ControlData_ClockTime_to_str(obj, indent, lvl, methodSep):
    return Pds_ClockTime_to_str(obj, indent, lvl, methodSep)

def OceanOptics_nonLinearCorrected(obj, indent, lvl):
    data = obj.data()
    nonlinearCorrected = np.zeros(data.shape, np.float64)
    for idx in range(data.shape[0]):
        nonlinearCorrected[idx] = obj.nonlinerCorrected(idx)
    methodStr = doIndent(indent, lvl)
    methodStr += 'nonlinearCorrected: %s' % ndarray_to_str( nonlinearCorrected )
    return methodStr

# functions to dump psana objects to a string                    
def Acqiris_VertV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'fullScale: %s' % double_to_str( obj.fullScale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'offset: %s' % double_to_str( obj.offset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coupling: %s' % uint32_to_str( obj.coupling() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'bandwidth: %s' % uint32_to_str( obj.bandwidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'slope: %s' % double_to_str( obj.slope() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_HorizV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'sampInterval: %s' % double_to_str( obj.sampInterval() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'delayTime: %s' % double_to_str( obj.delayTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrSamples: %s' % uint32_to_str( obj.nbrSamples() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrSegments: %s' % uint32_to_str( obj.nbrSegments() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TrigV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'coupling: %s' % uint32_to_str( obj.coupling() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'input: %s' % uint32_to_str( obj.input() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'slope: %s' % uint32_to_str( obj.slope() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'level: %s' % double_to_str( obj.level() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Acqiris.ConfigV1.TypeId
    assert obj.Version == psana.Acqiris.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrConvertersPerChannel: %s' % uint32_to_str( obj.nbrConvertersPerChannel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channelMask: %s' % uint32_to_str( obj.channelMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrBanks: %s' % uint32_to_str( obj.nbrBanks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrChannels: %s' % uint32_to_str( obj.nbrChannels() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'trig:\n'
    methodStr += Acqiris_TrigV1_to_str(obj.trig(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'horiz:\n'
    methodStr += Acqiris_HorizV1_to_str(obj.horiz(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.vert() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'vert[%d]:\n' % idx
        subMethodStr += Acqiris_VertV1_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TimestampV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pos: %s' % double_to_str( obj.pos() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampLo: %s' % uint32_to_str( obj.timeStampLo() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampHi: %s' % uint32_to_str( obj.timeStampHi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % uint64_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_DataDescV1Elem_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrSamplesInSeg: %s' % uint32_to_str( obj.nbrSamplesInSeg() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'indexFirstPoint: %s' % uint32_to_str( obj.indexFirstPoint() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nbrSegments: %s' % uint32_to_str( obj.nbrSegments() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'waveforms: %s' % ndarray_to_str( obj.waveforms() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.timestamp() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'timestamp[%d]:\n' % idx
        subMethodStr += Acqiris_TimestampV1_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_DataDescV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Acqiris.DataDescV1.TypeId
    assert obj.Version == psana.Acqiris.DataDescV1.Version
    methodStrings = []
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.data_shape()[0]
    for idx in range( numObjs ):
        subObj = obj.data(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'data[%d]:\n' % idx
        methodStr += Acqiris_DataDescV1Elem_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcChannel_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'level: %s' % double_to_str( obj.level() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel:\n'
    methodStr += enum_to_str(obj.channel(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'slope:\n'
    methodStr += enum_to_str(obj.slope(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'mode:\n'
    methodStr += enum_to_str(obj.mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcAuxIO_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel:\n'
    methodStr += enum_to_str(obj.channel(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'mode:\n'
    methodStr += enum_to_str(obj.mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'term:\n'
    methodStr += enum_to_str(obj.term(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcVetoIO_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel:\n'
    methodStr += enum_to_str(obj.channel(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'mode:\n'
    methodStr += enum_to_str(obj.mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'term:\n'
    methodStr += enum_to_str(obj.term(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Acqiris.TdcConfigV1.TypeId
    assert obj.Version == psana.Acqiris.TdcConfigV1.Version
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'veto:\n'
    methodStr += Acqiris_TdcVetoIO_to_str(obj.veto(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.channels() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'channels[%d]:\n' % idx
        subMethodStr += Acqiris_TdcChannel_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.auxio() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'auxio[%d]:\n' % idx
        subMethodStr += Acqiris_TdcAuxIO_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcDataV1_Item_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % uint32_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'bf_val_: %s' % uint32_to_str( obj.bf_val_() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'bf_ofv_: %s' % uint8_to_str( obj.bf_ofv_() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'source:\n'
    methodStr += enum_to_str(obj.source(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcDataV1Common_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nhits: %s' % uint32_to_str( obj.nhits() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'overflow: %s' % uint8_to_str( obj.overflow() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcDataV1Channel_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'overflow: %s' % uint8_to_str( obj.overflow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'time: %s' % double_to_str( obj.time() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcDataV1Marker_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'type:\n'
    methodStr += enum_to_str(obj.type(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Acqiris_TdcDataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Acqiris.TdcDataV1.TypeId
    assert obj.Version == psana.Acqiris.TdcDataV1.Version
    methodStrings = []
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.data() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'data[%d]:\n' % idx
        subMethodStr += Acqiris_TdcDataV1_Item_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Pds_ClockTime_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nanoseconds: %s' % uint32_to_str( obj.nanoseconds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'seconds: %s' % uint32_to_str( obj.seconds() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Alias_SrcAlias_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'aliasName: %s' % str_to_str( obj.aliasName() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'src:\n'
    methodStr += Pds_Src_to_str(obj.src(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Alias_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Alias.ConfigV1.TypeId
    assert obj.Version == psana.Alias.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSrcAlias: %s' % uint32_to_str( obj.numSrcAlias() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.srcAlias() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'srcAlias[%d]:\n' % idx
        subMethodStr += Alias_SrcAlias_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Andor_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Andor.ConfigV1.TypeId
    assert obj.Version == psana.Andor.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baselineClamp: %s' % uint8_to_str( obj.baselineClamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'highCapacity: %s' % uint8_to_str( obj.highCapacity() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint8_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint16_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayShots: %s' % uint32_to_str( obj.numDelayShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'fanMode:\n'
    methodStr += enum_to_str(obj.fanMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Andor_FrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Andor.FrameV1.TypeId
    assert obj.Version == psana.Andor.FrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shotIdStart: %s' % uint32_to_str( obj.shotIdStart() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutTime: %s' % float_to_str( obj.readoutTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % float_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Arraychar_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Arraychar.DataV1.TypeId
    assert obj.Version == psana.Arraychar.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numChars: %s' % uint64_to_str( obj.numChars() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Camera_FrameCoord_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'column: %s' % uint16_to_str( obj.column() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'row: %s' % uint16_to_str( obj.row() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Camera_FrameFccdConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Camera.FrameFccdConfigV1.TypeId
    assert obj.Version == psana.Camera.FrameFccdConfigV1.Version
    methodStrings = []
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Camera_FrameFexConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Camera.FrameFexConfigV1.TypeId
    assert obj.Version == psana.Camera.FrameFexConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'forward_prescale: %s' % uint32_to_str( obj.forward_prescale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'threshold: %s' % uint32_to_str( obj.threshold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_masked_pixels: %s' % uint32_to_str( obj.number_of_masked_pixels() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'forwarding:\n'
    methodStr += enum_to_str(obj.forwarding(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'processing:\n'
    methodStr += enum_to_str(obj.processing(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiBegin:\n'
    methodStr += Camera_FrameCoord_to_str(obj.roiBegin(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiEnd:\n'
    methodStr += Camera_FrameCoord_to_str(obj.roiEnd(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.masked_pixel_coordinates() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'masked_pixel_coordinates[%d]:\n' % idx
        subMethodStr += Camera_FrameCoord_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Camera_FrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Camera.FrameV1.TypeId
    assert obj.Version == psana.Camera.FrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth: %s' % uint32_to_str( obj.depth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'offset: %s' % uint32_to_str( obj.offset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data8: %s' % ndarray_to_str( obj.data8() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data16: %s' % ndarray_to_str( obj.data16() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth_bytes: %s' % uint32_to_str( obj.depth_bytes() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Camera_TwoDGaussianV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Camera.TwoDGaussianV1.TypeId
    assert obj.Version == psana.Camera.TwoDGaussianV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'integral: %s' % uint64_to_str( obj.integral() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'xmean: %s' % double_to_str( obj.xmean() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ymean: %s' % double_to_str( obj.ymean() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'major_axis_width: %s' % double_to_str( obj.major_axis_width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'minor_axis_width: %s' % double_to_str( obj.minor_axis_width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'major_axis_tilt: %s' % double_to_str( obj.major_axis_tilt() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Ipimb_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Ipimb.ConfigV1.TypeId
    assert obj.Version == psana.Ipimb.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerCounter: %s' % uint64_to_str( obj.triggerCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'serialID: %s' % uint64_to_str( obj.serialID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chargeAmpRange: %s' % uint16_to_str( obj.chargeAmpRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationRange: %s' % uint16_to_str( obj.calibrationRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'resetLength: %s' % uint32_to_str( obj.resetLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'resetDelay: %s' % uint32_to_str( obj.resetDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chargeAmpRefVoltage: %s' % float_to_str( obj.chargeAmpRefVoltage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationVoltage: %s' % float_to_str( obj.calibrationVoltage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'diodeBias: %s' % float_to_str( obj.diodeBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'status: %s' % uint16_to_str( obj.status() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'errors: %s' % uint16_to_str( obj.errors() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calStrobeLength: %s' % uint16_to_str( obj.calStrobeLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigDelay: %s' % uint32_to_str( obj.trigDelay() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'capacitorValues'
    try:
       for idx in range( 4 ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( obj.capacitorValues(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.capacitorValues() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( subObj )
       methodStrings.append( methodStr )
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Ipimb_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Ipimb.ConfigV2.TypeId
    assert obj.Version == psana.Ipimb.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerCounter: %s' % uint64_to_str( obj.triggerCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'serialID: %s' % uint64_to_str( obj.serialID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chargeAmpRange: %s' % uint16_to_str( obj.chargeAmpRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationRange: %s' % uint16_to_str( obj.calibrationRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'resetLength: %s' % uint32_to_str( obj.resetLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'resetDelay: %s' % uint32_to_str( obj.resetDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chargeAmpRefVoltage: %s' % float_to_str( obj.chargeAmpRefVoltage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationVoltage: %s' % float_to_str( obj.calibrationVoltage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'diodeBias: %s' % float_to_str( obj.diodeBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'status: %s' % uint16_to_str( obj.status() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'errors: %s' % uint16_to_str( obj.errors() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calStrobeLength: %s' % uint16_to_str( obj.calStrobeLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigDelay: %s' % uint32_to_str( obj.trigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigPsDelay: %s' % uint32_to_str( obj.trigPsDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcDelay: %s' % uint32_to_str( obj.adcDelay() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'capacitorValues'
    try:
       for idx in range( 4 ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( obj.capacitorValues(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.capacitorValues() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( subObj )
       methodStrings.append( methodStr )
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Ipimb_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Ipimb.DataV1.TypeId
    assert obj.Version == psana.Ipimb.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerCounter: %s' % uint64_to_str( obj.triggerCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config0: %s' % uint16_to_str( obj.config0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config1: %s' % uint16_to_str( obj.config1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config2: %s' % uint16_to_str( obj.config2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0: %s' % uint16_to_str( obj.channel0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1: %s' % uint16_to_str( obj.channel1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2: %s' % uint16_to_str( obj.channel2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3: %s' % uint16_to_str( obj.channel3() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'checksum: %s' % uint16_to_str( obj.checksum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0Volts: %s' % float_to_str( obj.channel0Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1Volts: %s' % float_to_str( obj.channel1Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2Volts: %s' % float_to_str( obj.channel2Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3Volts: %s' % float_to_str( obj.channel3Volts() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Ipimb_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Ipimb.DataV2.TypeId
    assert obj.Version == psana.Ipimb.DataV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'config0: %s' % uint16_to_str( obj.config0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config1: %s' % uint16_to_str( obj.config1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config2: %s' % uint16_to_str( obj.config2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0: %s' % uint16_to_str( obj.channel0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1: %s' % uint16_to_str( obj.channel1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2: %s' % uint16_to_str( obj.channel2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3: %s' % uint16_to_str( obj.channel3() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0ps: %s' % uint16_to_str( obj.channel0ps() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1ps: %s' % uint16_to_str( obj.channel1ps() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2ps: %s' % uint16_to_str( obj.channel2ps() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3ps: %s' % uint16_to_str( obj.channel3ps() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'checksum: %s' % uint16_to_str( obj.checksum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0Volts: %s' % float_to_str( obj.channel0Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1Volts: %s' % float_to_str( obj.channel1Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2Volts: %s' % float_to_str( obj.channel2Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3Volts: %s' % float_to_str( obj.channel3Volts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel0psVolts: %s' % float_to_str( obj.channel0psVolts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel1psVolts: %s' % float_to_str( obj.channel1psVolts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel2psVolts: %s' % float_to_str( obj.channel2psVolts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel3psVolts: %s' % float_to_str( obj.channel3psVolts() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerCounter: %s' % uint64_to_str( obj.triggerCounter() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_DiodeFexConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.DiodeFexConfigV1.TypeId
    assert obj.Version == psana.Lusi.DiodeFexConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'base: %s' % ndarray_to_str( obj.base() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scale: %s' % ndarray_to_str( obj.scale() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_DiodeFexConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.DiodeFexConfigV2.TypeId
    assert obj.Version == psana.Lusi.DiodeFexConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'base: %s' % ndarray_to_str( obj.base() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scale: %s' % ndarray_to_str( obj.scale() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_DiodeFexV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.DiodeFexV1.TypeId
    assert obj.Version == psana.Lusi.DiodeFexV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % float_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_IpmFexConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.IpmFexConfigV1.TypeId
    assert obj.Version == psana.Lusi.IpmFexConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'xscale: %s' % float_to_str( obj.xscale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'yscale: %s' % float_to_str( obj.yscale() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.diode() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'diode[%d]:\n' % idx
        subMethodStr += Lusi_DiodeFexConfigV1_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_IpmFexConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.IpmFexConfigV2.TypeId
    assert obj.Version == psana.Lusi.IpmFexConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'xscale: %s' % float_to_str( obj.xscale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'yscale: %s' % float_to_str( obj.yscale() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.diode() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'diode[%d]:\n' % idx
        subMethodStr += Lusi_DiodeFexConfigV2_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_IpmFexV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.IpmFexV1.TypeId
    assert obj.Version == psana.Lusi.IpmFexV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'channel: %s' % ndarray_to_str( obj.channel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sum: %s' % float_to_str( obj.sum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'xpos: %s' % float_to_str( obj.xpos() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ypos: %s' % float_to_str( obj.ypos() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Lusi_PimImageConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Lusi.PimImageConfigV1.TypeId
    assert obj.Version == psana.Lusi.PimImageConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'xscale: %s' % float_to_str( obj.xscale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'yscale: %s' % float_to_str( obj.yscale() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Pulnix_TM6740ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Pulnix.TM6740ConfigV1.TypeId
    assert obj.Version == psana.Pulnix.TM6740ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_a: %s' % uint16_to_str( obj.gain_a() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_b: %s' % uint16_to_str( obj.gain_b() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vref: %s' % uint16_to_str( obj.vref() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'shutter_width: %s' % uint16_to_str( obj.shutter_width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_balance: %s' % uint8_to_str( obj.gain_balance() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution_bits: %s' % uint8_to_str( obj.output_resolution_bits() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution:\n'
    methodStr += enum_to_str(obj.output_resolution(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'horizontal_binning:\n'
    methodStr += enum_to_str(obj.horizontal_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'vertical_binning:\n'
    methodStr += enum_to_str(obj.vertical_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'lookuptable_mode:\n'
    methodStr += enum_to_str(obj.lookuptable_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Pulnix_TM6740ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Pulnix.TM6740ConfigV2.TypeId
    assert obj.Version == psana.Pulnix.TM6740ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_a: %s' % uint16_to_str( obj.gain_a() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_b: %s' % uint16_to_str( obj.gain_b() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vref_a: %s' % uint16_to_str( obj.vref_a() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vref_b: %s' % uint16_to_str( obj.vref_b() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_balance: %s' % uint8_to_str( obj.gain_balance() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution_bits: %s' % uint8_to_str( obj.output_resolution_bits() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution:\n'
    methodStr += enum_to_str(obj.output_resolution(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'horizontal_binning:\n'
    methodStr += enum_to_str(obj.horizontal_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'vertical_binning:\n'
    methodStr += enum_to_str(obj.vertical_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'lookuptable_mode:\n'
    methodStr += enum_to_str(obj.lookuptable_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataFEEGasDetEnergy_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataFEEGasDetEnergy.TypeId
    assert obj.Version == psana.Bld.BldDataFEEGasDetEnergy.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_11_ENRC: %s' % double_to_str( obj.f_11_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_12_ENRC: %s' % double_to_str( obj.f_12_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_21_ENRC: %s' % double_to_str( obj.f_21_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_22_ENRC: %s' % double_to_str( obj.f_22_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataFEEGasDetEnergyV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataFEEGasDetEnergyV1.TypeId
    assert obj.Version == psana.Bld.BldDataFEEGasDetEnergyV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_11_ENRC: %s' % double_to_str( obj.f_11_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_12_ENRC: %s' % double_to_str( obj.f_12_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_21_ENRC: %s' % double_to_str( obj.f_21_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_22_ENRC: %s' % double_to_str( obj.f_22_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_63_ENRC: %s' % double_to_str( obj.f_63_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'f_64_ENRC: %s' % double_to_str( obj.f_64_ENRC() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV0_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV0.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV0.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV1.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV2.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC2: %s' % double_to_str( obj.ebeamEnergyBC2() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV3.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC2: %s' % double_to_str( obj.ebeamEnergyBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC1: %s' % double_to_str( obj.ebeamPkCurrBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC1: %s' % double_to_str( obj.ebeamEnergyBC1() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV4_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV4.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV4.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC2: %s' % double_to_str( obj.ebeamEnergyBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC1: %s' % double_to_str( obj.ebeamPkCurrBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC1: %s' % double_to_str( obj.ebeamEnergyBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosX: %s' % double_to_str( obj.ebeamUndPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosY: %s' % double_to_str( obj.ebeamUndPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngX: %s' % double_to_str( obj.ebeamUndAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngY: %s' % double_to_str( obj.ebeamUndAngY() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV5_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV5.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV5.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC2: %s' % double_to_str( obj.ebeamEnergyBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC1: %s' % double_to_str( obj.ebeamPkCurrBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC1: %s' % double_to_str( obj.ebeamEnergyBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosX: %s' % double_to_str( obj.ebeamUndPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosY: %s' % double_to_str( obj.ebeamUndPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngX: %s' % double_to_str( obj.ebeamUndAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngY: %s' % double_to_str( obj.ebeamUndAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamXTCAVAmpl: %s' % double_to_str( obj.ebeamXTCAVAmpl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamXTCAVPhase: %s' % double_to_str( obj.ebeamXTCAVPhase() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamDumpCharge: %s' % double_to_str( obj.ebeamDumpCharge() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataEBeamV6_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataEBeamV6.TypeId
    assert obj.Version == psana.Bld.BldDataEBeamV6.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'damageMask: %s' % uint32_to_str( obj.damageMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamCharge: %s' % double_to_str( obj.ebeamCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamL3Energy: %s' % double_to_str( obj.ebeamL3Energy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosX: %s' % double_to_str( obj.ebeamLTUPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUPosY: %s' % double_to_str( obj.ebeamLTUPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngX: %s' % double_to_str( obj.ebeamLTUAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTUAngY: %s' % double_to_str( obj.ebeamLTUAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC2: %s' % double_to_str( obj.ebeamPkCurrBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC2: %s' % double_to_str( obj.ebeamEnergyBC2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPkCurrBC1: %s' % double_to_str( obj.ebeamPkCurrBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamEnergyBC1: %s' % double_to_str( obj.ebeamEnergyBC1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosX: %s' % double_to_str( obj.ebeamUndPosX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndPosY: %s' % double_to_str( obj.ebeamUndPosY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngX: %s' % double_to_str( obj.ebeamUndAngX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamUndAngY: %s' % double_to_str( obj.ebeamUndAngY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamXTCAVAmpl: %s' % double_to_str( obj.ebeamXTCAVAmpl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamXTCAVPhase: %s' % double_to_str( obj.ebeamXTCAVPhase() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamDumpCharge: %s' % double_to_str( obj.ebeamDumpCharge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamPhotonEnergy: %s' % double_to_str( obj.ebeamPhotonEnergy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTU250: %s' % double_to_str( obj.ebeamLTU250() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ebeamLTU450: %s' % double_to_str( obj.ebeamLTU450() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataPhaseCavity_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataPhaseCavity.TypeId
    assert obj.Version == psana.Bld.BldDataPhaseCavity.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'fitTime1: %s' % double_to_str( obj.fitTime1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fitTime2: %s' % double_to_str( obj.fitTime2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'charge1: %s' % double_to_str( obj.charge1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'charge2: %s' % double_to_str( obj.charge2() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataIpimbV0_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataIpimbV0.TypeId
    assert obj.Version == psana.Bld.BldDataIpimbV0.Version
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipimbData:\n'
    methodStr += Ipimb_DataV1_to_str(obj.ipimbData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipimbConfig:\n'
    methodStr += Ipimb_ConfigV1_to_str(obj.ipimbConfig(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipmFexData:\n'
    methodStr += Lusi_IpmFexV1_to_str(obj.ipmFexData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataIpimbV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataIpimbV1.TypeId
    assert obj.Version == psana.Bld.BldDataIpimbV1.Version
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipimbData:\n'
    methodStr += Ipimb_DataV2_to_str(obj.ipimbData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipimbConfig:\n'
    methodStr += Ipimb_ConfigV2_to_str(obj.ipimbConfig(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'ipmFexData:\n'
    methodStr += Lusi_IpmFexV1_to_str(obj.ipmFexData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataPimV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataPimV1.TypeId
    assert obj.Version == psana.Bld.BldDataPimV1.Version
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'camConfig:\n'
    methodStr += Pulnix_TM6740ConfigV2_to_str(obj.camConfig(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'pimConfig:\n'
    methodStr += Lusi_PimImageConfigV1_to_str(obj.pimConfig(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame:\n'
    methodStr += Camera_FrameV1_to_str(obj.frame(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataGMDV0_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataGMDV0.TypeId
    assert obj.Version == psana.Bld.BldDataGMDV0.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'gasType: %s' % str_to_str( obj.gasType() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pressure: %s' % double_to_str( obj.pressure() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % double_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'current: %s' % double_to_str( obj.current() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hvMeshElectron: %s' % double_to_str( obj.hvMeshElectron() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hvMeshIon: %s' % double_to_str( obj.hvMeshIon() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hvMultIon: %s' % double_to_str( obj.hvMultIon() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chargeQ: %s' % double_to_str( obj.chargeQ() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'photonEnergy: %s' % double_to_str( obj.photonEnergy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'multPulseIntensity: %s' % double_to_str( obj.multPulseIntensity() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'keithleyPulseIntensity: %s' % double_to_str( obj.keithleyPulseIntensity() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulseEnergy: %s' % double_to_str( obj.pulseEnergy() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulseEnergyFEE: %s' % double_to_str( obj.pulseEnergyFEE() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'transmission: %s' % double_to_str( obj.transmission() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'transmissionFEE: %s' % double_to_str( obj.transmissionFEE() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataGMDV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataGMDV1.TypeId
    assert obj.Version == psana.Bld.BldDataGMDV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'milliJoulesPerPulse: %s' % double_to_str( obj.milliJoulesPerPulse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'milliJoulesAverage: %s' % double_to_str( obj.milliJoulesAverage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'correctedSumPerPulse: %s' % double_to_str( obj.correctedSumPerPulse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'bgValuePerSample: %s' % double_to_str( obj.bgValuePerSample() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'relativeEnergyPerPulse: %s' % double_to_str( obj.relativeEnergyPerPulse() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataGMDV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataGMDV2.TypeId
    assert obj.Version == psana.Bld.BldDataGMDV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'milliJoulesPerPulse: %s' % double_to_str( obj.milliJoulesPerPulse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'milliJoulesAverage: %s' % double_to_str( obj.milliJoulesAverage() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sumAllPeaksFiltBkgd: %s' % double_to_str( obj.sumAllPeaksFiltBkgd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rawAvgBkgd: %s' % double_to_str( obj.rawAvgBkgd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'relativeEnergyPerPulse: %s' % double_to_str( obj.relativeEnergyPerPulse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sumAllPeaksRawBkgd: %s' % double_to_str( obj.sumAllPeaksRawBkgd() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataAcqADCV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataAcqADCV1.TypeId
    assert obj.Version == psana.Bld.BldDataAcqADCV1.Version
    methodStrings = []
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'config:\n'
    methodStr += Acqiris_ConfigV1_to_str(obj.config(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'data:\n'
    methodStr += Acqiris_DataDescV1_to_str(obj.data(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataSpectrometerV0_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataSpectrometerV0.TypeId
    assert obj.Version == psana.Bld.BldDataSpectrometerV0.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'hproj: %s' % ndarray_to_str( obj.hproj() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vproj: %s' % ndarray_to_str( obj.vproj() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Bld_BldDataSpectrometerV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Bld.BldDataSpectrometerV1.TypeId
    assert obj.Version == psana.Bld.BldDataSpectrometerV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hproj_y1: %s' % uint32_to_str( obj.hproj_y1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hproj_y2: %s' % uint32_to_str( obj.hproj_y2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'comRaw: %s' % double_to_str( obj.comRaw() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baseline: %s' % double_to_str( obj.baseline() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'com: %s' % double_to_str( obj.com() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'integral: %s' % double_to_str( obj.integral() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nPeaks: %s' % uint32_to_str( obj.nPeaks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hproj: %s' % ndarray_to_str( obj.hproj() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'peakPos: %s' % ndarray_to_str( obj.peakPos() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'peakHeight: %s' % ndarray_to_str( obj.peakHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FWHM: %s' % ndarray_to_str( obj.FWHM() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_PVControl_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'name: %s' % str_to_str( obj.name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'index: %s' % uint32_to_str( obj.index() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % double_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'array: %s' % uint8_to_str( obj.array() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_PVMonitor_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'name: %s' % str_to_str( obj.name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'index: %s' % uint32_to_str( obj.index() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'loValue: %s' % double_to_str( obj.loValue() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hiValue: %s' % double_to_str( obj.hiValue() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'array: %s' % uint8_to_str( obj.array() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_PVLabel_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'name: %s' % str_to_str( obj.name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % str_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.ControlData.ConfigV1.TypeId
    assert obj.Version == psana.ControlData.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvControls: %s' % uint32_to_str( obj.npvControls() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvMonitors: %s' % uint32_to_str( obj.npvMonitors() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'events: %s' % uint32_to_str( obj.events() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_duration: %s' % uint8_to_str( obj.uses_duration() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_events: %s' % uint8_to_str( obj.uses_events() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'duration:\n'
    methodStr += Pds_ClockTime_to_str(obj.duration(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvControls() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvControls[%d]:\n' % idx
        subMethodStr += ControlData_PVControl_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvMonitors() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvMonitors[%d]:\n' % idx
        subMethodStr += ControlData_PVMonitor_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.ControlData.ConfigV2.TypeId
    assert obj.Version == psana.ControlData.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvControls: %s' % uint32_to_str( obj.npvControls() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvMonitors: %s' % uint32_to_str( obj.npvMonitors() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvLabels: %s' % uint32_to_str( obj.npvLabels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'events: %s' % uint32_to_str( obj.events() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_duration: %s' % uint8_to_str( obj.uses_duration() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_events: %s' % uint8_to_str( obj.uses_events() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'duration:\n'
    methodStr += Pds_ClockTime_to_str(obj.duration(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvControls() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvControls[%d]:\n' % idx
        subMethodStr += ControlData_PVControl_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvMonitors() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvMonitors[%d]:\n' % idx
        subMethodStr += ControlData_PVMonitor_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvLabels() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvLabels[%d]:\n' % idx
        subMethodStr += ControlData_PVLabel_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def ControlData_ConfigV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.ControlData.ConfigV3.TypeId
    assert obj.Version == psana.ControlData.ConfigV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvControls: %s' % uint32_to_str( obj.npvControls() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvMonitors: %s' % uint32_to_str( obj.npvMonitors() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npvLabels: %s' % uint32_to_str( obj.npvLabels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'events: %s' % uint32_to_str( obj.events() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_l3t_events: %s' % uint8_to_str( obj.uses_l3t_events() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_duration: %s' % uint8_to_str( obj.uses_duration() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'uses_events: %s' % uint8_to_str( obj.uses_events() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'duration:\n'
    methodStr += Pds_ClockTime_to_str(obj.duration(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvControls() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvControls[%d]:\n' % idx
        subMethodStr += ControlData_PVControl_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvMonitors() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvMonitors[%d]:\n' % idx
        subMethodStr += ControlData_PVMonitor_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pvLabels() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pvLabels[%d]:\n' % idx
        subMethodStr += ControlData_PVLabel_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_CsPadDigitalPotsCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pots: %s' % ndarray_to_str( obj.pots() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_CsPadReadOnlyCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftTest: %s' % uint32_to_str( obj.shiftTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ProtectionSystemThreshold_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcThreshold: %s' % uint32_to_str( obj.adcThreshold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelCountThreshold: %s' % uint32_to_str( obj.pixelCountThreshold() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_CsPadGainMapCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainMap: %s' % ndarray_to_str( obj.gainMap() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV1QuadReg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftSelect: %s' % ndarray_to_str( obj.shiftSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'edgeSelect: %s' % ndarray_to_str( obj.edgeSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkSet: %s' % uint32_to_str( obj.readClkSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkHold: %s' % uint32_to_str( obj.readClkHold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataMode: %s' % uint32_to_str( obj.dataMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prstSel: %s' % uint32_to_str( obj.prstSel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqDelay: %s' % uint32_to_str( obj.acqDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intTime: %s' % uint32_to_str( obj.intTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digDelay: %s' % uint32_to_str( obj.digDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampIdle: %s' % uint32_to_str( obj.ampIdle() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'injTotal: %s' % uint32_to_str( obj.injTotal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rowColShiftPer: %s' % uint32_to_str( obj.rowColShiftPer() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ro:\n'
    methodStr += CsPad_CsPadReadOnlyCfg_to_str(obj.ro(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dp:\n'
    methodStr += CsPad_CsPadDigitalPotsCfg_to_str(obj.dp(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'gm:\n'
    methodStr += CsPad_CsPadGainMapCfg_to_str(obj.gm(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV2QuadReg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftSelect: %s' % ndarray_to_str( obj.shiftSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'edgeSelect: %s' % ndarray_to_str( obj.edgeSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkSet: %s' % uint32_to_str( obj.readClkSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkHold: %s' % uint32_to_str( obj.readClkHold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataMode: %s' % uint32_to_str( obj.dataMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prstSel: %s' % uint32_to_str( obj.prstSel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqDelay: %s' % uint32_to_str( obj.acqDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intTime: %s' % uint32_to_str( obj.intTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digDelay: %s' % uint32_to_str( obj.digDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampIdle: %s' % uint32_to_str( obj.ampIdle() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'injTotal: %s' % uint32_to_str( obj.injTotal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rowColShiftPer: %s' % uint32_to_str( obj.rowColShiftPer() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampReset: %s' % uint32_to_str( obj.ampReset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digCount: %s' % uint32_to_str( obj.digCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digPeriod: %s' % uint32_to_str( obj.digPeriod() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ro:\n'
    methodStr += CsPad_CsPadReadOnlyCfg_to_str(obj.ro(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dp:\n'
    methodStr += CsPad_CsPadDigitalPotsCfg_to_str(obj.dp(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'gm:\n'
    methodStr += CsPad_CsPadGainMapCfg_to_str(obj.gm(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV3QuadReg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftSelect: %s' % ndarray_to_str( obj.shiftSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'edgeSelect: %s' % ndarray_to_str( obj.edgeSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkSet: %s' % uint32_to_str( obj.readClkSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkHold: %s' % uint32_to_str( obj.readClkHold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataMode: %s' % uint32_to_str( obj.dataMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prstSel: %s' % uint32_to_str( obj.prstSel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqDelay: %s' % uint32_to_str( obj.acqDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intTime: %s' % uint32_to_str( obj.intTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digDelay: %s' % uint32_to_str( obj.digDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampIdle: %s' % uint32_to_str( obj.ampIdle() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'injTotal: %s' % uint32_to_str( obj.injTotal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rowColShiftPer: %s' % uint32_to_str( obj.rowColShiftPer() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampReset: %s' % uint32_to_str( obj.ampReset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digCount: %s' % uint32_to_str( obj.digCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digPeriod: %s' % uint32_to_str( obj.digPeriod() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'biasTuning: %s' % uint32_to_str( obj.biasTuning() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pdpmndnmBalance: %s' % uint32_to_str( obj.pdpmndnmBalance() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ro:\n'
    methodStr += CsPad_CsPadReadOnlyCfg_to_str(obj.ro(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dp:\n'
    methodStr += CsPad_CsPadDigitalPotsCfg_to_str(obj.dp(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'gm:\n'
    methodStr += CsPad_CsPadGainMapCfg_to_str(obj.gm(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.ConfigV1.TypeId
    assert obj.Version == psana.CsPad.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runDelay: %s' % uint32_to_str( obj.runDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask0: %s' % uint32_to_str( obj.badAsicMask0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask1: %s' % uint32_to_str( obj.badAsicMask1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadMask: %s' % uint32_to_str( obj.quadMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numQuads: %s' % uint32_to_str( obj.numQuads() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSect: %s' % uint32_to_str( obj.numSect() )
    methodStrings.append(methodStr)                                 
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = 4
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ConfigV1QuadReg_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.ConfigV2.TypeId
    assert obj.Version == psana.CsPad.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runDelay: %s' % uint32_to_str( obj.runDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask0: %s' % uint32_to_str( obj.badAsicMask0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask1: %s' % uint32_to_str( obj.badAsicMask1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadMask: %s' % uint32_to_str( obj.quadMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMasks: %s' % uint32_to_str( obj.roiMasks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numQuads: %s' % uint32_to_str( obj.numQuads() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSect: %s' % uint32_to_str( obj.numSect() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.roiMask(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.roiMask() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.numAsicsStored(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.numAsicsStored() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = 4
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ConfigV1QuadReg_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.ConfigV3.TypeId
    assert obj.Version == psana.CsPad.ConfigV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runDelay: %s' % uint32_to_str( obj.runDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionEnable: %s' % uint32_to_str( obj.protectionEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask0: %s' % uint32_to_str( obj.badAsicMask0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask1: %s' % uint32_to_str( obj.badAsicMask1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadMask: %s' % uint32_to_str( obj.quadMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMasks: %s' % uint32_to_str( obj.roiMasks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numQuads: %s' % uint32_to_str( obj.numQuads() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSect: %s' % uint32_to_str( obj.numSect() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.roiMask(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.roiMask() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.numAsicsStored(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.numAsicsStored() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = 4
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ConfigV1QuadReg_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.protectionThresholds() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'protectionThresholds[%d]:\n' % idx
        subMethodStr += CsPad_ProtectionSystemThreshold_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV4_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.ConfigV4.TypeId
    assert obj.Version == psana.CsPad.ConfigV4.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runDelay: %s' % uint32_to_str( obj.runDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionEnable: %s' % uint32_to_str( obj.protectionEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask0: %s' % uint32_to_str( obj.badAsicMask0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask1: %s' % uint32_to_str( obj.badAsicMask1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadMask: %s' % uint32_to_str( obj.quadMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMasks: %s' % uint32_to_str( obj.roiMasks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numQuads: %s' % uint32_to_str( obj.numQuads() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSect: %s' % uint32_to_str( obj.numSect() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.roiMask(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.roiMask() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.numAsicsStored(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.numAsicsStored() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = 4
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ConfigV2QuadReg_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.protectionThresholds() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'protectionThresholds[%d]:\n' % idx
        subMethodStr += CsPad_ProtectionSystemThreshold_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ConfigV5_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.ConfigV5.TypeId
    assert obj.Version == psana.CsPad.ConfigV5.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runDelay: %s' % uint32_to_str( obj.runDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionEnable: %s' % uint32_to_str( obj.protectionEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'internalTriggerDelay: %s' % uint32_to_str( obj.internalTriggerDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask0: %s' % uint32_to_str( obj.badAsicMask0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask1: %s' % uint32_to_str( obj.badAsicMask1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadMask: %s' % uint32_to_str( obj.quadMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMasks: %s' % uint32_to_str( obj.roiMasks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numQuads: %s' % uint32_to_str( obj.numQuads() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSect: %s' % uint32_to_str( obj.numSect() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.roiMask(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.roiMask() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored'
    try:
       for idx in range( obj.numQuads() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( obj.numAsicsStored(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.numAsicsStored() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % uint32_to_str( subObj )
       methodStrings.append( methodStr )
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = 4
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ConfigV3QuadReg_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.protectionThresholds() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'protectionThresholds[%d]:\n' % idx
        subMethodStr += CsPad_ProtectionSystemThreshold_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ElementV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_count: %s' % uint32_to_str( obj.seq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_temp: %s' % ndarray_to_str( obj.sb_temp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame_type: %s' % uint32_to_str( obj.frame_type() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'virtual_channel: %s' % uint32_to_str( obj.virtual_channel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint32_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tid: %s' % uint32_to_str( obj.tid() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acq_count: %s' % uint32_to_str( obj.acq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'op_code: %s' % uint32_to_str( obj.op_code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quad: %s' % uint32_to_str( obj.quad() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sectionMask: %s' % uint32_to_str( obj.sectionMask() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.DataV1.TypeId
    assert obj.Version == psana.CsPad.DataV1.Version
    methodStrings = []
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.quads_shape()[0]
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ElementV1_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_ElementV2_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_count: %s' % uint32_to_str( obj.seq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_temp: %s' % ndarray_to_str( obj.sb_temp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame_type: %s' % uint32_to_str( obj.frame_type() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'virtual_channel: %s' % uint32_to_str( obj.virtual_channel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint32_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tid: %s' % uint32_to_str( obj.tid() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acq_count: %s' % uint32_to_str( obj.acq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'op_code: %s' % uint32_to_str( obj.op_code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quad: %s' % uint32_to_str( obj.quad() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sectionMask: %s' % uint32_to_str( obj.sectionMask() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad.DataV2.TypeId
    assert obj.Version == psana.CsPad.DataV2.Version
    methodStrings = []
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.quads_shape()[0]
    for idx in range( numObjs ):
        subObj = obj.quads(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'quads[%d]:\n' % idx
        methodStr += CsPad_ElementV2_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_CsPad2x2DigitalPotsCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pots: %s' % ndarray_to_str( obj.pots() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_CsPad2x2ReadOnlyCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftTest: %s' % uint32_to_str( obj.shiftTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ProtectionSystemThreshold_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcThreshold: %s' % uint32_to_str( obj.adcThreshold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelCountThreshold: %s' % uint32_to_str( obj.pixelCountThreshold() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_CsPad2x2GainMapCfg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainMap: %s' % ndarray_to_str( obj.gainMap() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ConfigV1QuadReg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftSelect: %s' % uint32_to_str( obj.shiftSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'edgeSelect: %s' % uint32_to_str( obj.edgeSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkSet: %s' % uint32_to_str( obj.readClkSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkHold: %s' % uint32_to_str( obj.readClkHold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataMode: %s' % uint32_to_str( obj.dataMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prstSel: %s' % uint32_to_str( obj.prstSel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqDelay: %s' % uint32_to_str( obj.acqDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intTime: %s' % uint32_to_str( obj.intTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digDelay: %s' % uint32_to_str( obj.digDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampIdle: %s' % uint32_to_str( obj.ampIdle() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'injTotal: %s' % uint32_to_str( obj.injTotal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rowColShiftPer: %s' % uint32_to_str( obj.rowColShiftPer() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampReset: %s' % uint32_to_str( obj.ampReset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digCount: %s' % uint32_to_str( obj.digCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digPeriod: %s' % uint32_to_str( obj.digPeriod() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PeltierEnable: %s' % uint32_to_str( obj.PeltierEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kpConstant: %s' % uint32_to_str( obj.kpConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kiConstant: %s' % uint32_to_str( obj.kiConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kdConstant: %s' % uint32_to_str( obj.kdConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'humidThold: %s' % uint32_to_str( obj.humidThold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'setPoint: %s' % uint32_to_str( obj.setPoint() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ro:\n'
    methodStr += CsPad2x2_CsPad2x2ReadOnlyCfg_to_str(obj.ro(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dp:\n'
    methodStr += CsPad2x2_CsPad2x2DigitalPotsCfg_to_str(obj.dp(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'gm:\n'
    methodStr += CsPad2x2_CsPad2x2GainMapCfg_to_str(obj.gm(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad2x2.ConfigV1.TypeId
    assert obj.Version == psana.CsPad2x2.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionEnable: %s' % uint32_to_str( obj.protectionEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask: %s' % uint32_to_str( obj.badAsicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask: %s' % uint32_to_str( obj.roiMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored: %s' % uint32_to_str( obj.numAsicsStored() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionThreshold:\n'
    methodStr += CsPad2x2_ProtectionSystemThreshold_to_str(obj.protectionThreshold(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'quad:\n'
    methodStr += CsPad2x2_ConfigV1QuadReg_to_str(obj.quad(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ConfigV2QuadReg_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shiftSelect: %s' % uint32_to_str( obj.shiftSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'edgeSelect: %s' % uint32_to_str( obj.edgeSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkSet: %s' % uint32_to_str( obj.readClkSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readClkHold: %s' % uint32_to_str( obj.readClkHold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataMode: %s' % uint32_to_str( obj.dataMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prstSel: %s' % uint32_to_str( obj.prstSel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqDelay: %s' % uint32_to_str( obj.acqDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intTime: %s' % uint32_to_str( obj.intTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digDelay: %s' % uint32_to_str( obj.digDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampIdle: %s' % uint32_to_str( obj.ampIdle() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'injTotal: %s' % uint32_to_str( obj.injTotal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rowColShiftPer: %s' % uint32_to_str( obj.rowColShiftPer() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ampReset: %s' % uint32_to_str( obj.ampReset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digCount: %s' % uint32_to_str( obj.digCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digPeriod: %s' % uint32_to_str( obj.digPeriod() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PeltierEnable: %s' % uint32_to_str( obj.PeltierEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kpConstant: %s' % uint32_to_str( obj.kpConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kiConstant: %s' % uint32_to_str( obj.kiConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kdConstant: %s' % uint32_to_str( obj.kdConstant() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'humidThold: %s' % uint32_to_str( obj.humidThold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'setPoint: %s' % uint32_to_str( obj.setPoint() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'biasTuning: %s' % uint32_to_str( obj.biasTuning() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pdpmndnmBalance: %s' % uint32_to_str( obj.pdpmndnmBalance() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'ro:\n'
    methodStr += CsPad2x2_CsPad2x2ReadOnlyCfg_to_str(obj.ro(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dp:\n'
    methodStr += CsPad2x2_CsPad2x2DigitalPotsCfg_to_str(obj.dp(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'gm:\n'
    methodStr += CsPad2x2_CsPad2x2GainMapCfg_to_str(obj.gm(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad2x2.ConfigV2.TypeId
    assert obj.Version == psana.CsPad2x2.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'concentratorVersion: %s' % uint32_to_str( obj.concentratorVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionEnable: %s' % uint32_to_str( obj.protectionEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'inactiveRunMode: %s' % uint32_to_str( obj.inactiveRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'activeRunMode: %s' % uint32_to_str( obj.activeRunMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runTriggerDelay: %s' % uint32_to_str( obj.runTriggerDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tdi: %s' % uint32_to_str( obj.tdi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSize: %s' % uint32_to_str( obj.payloadSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'badAsicMask: %s' % uint32_to_str( obj.badAsicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'roiMask: %s' % uint32_to_str( obj.roiMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsRead: %s' % uint32_to_str( obj.numAsicsRead() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numAsicsStored: %s' % uint32_to_str( obj.numAsicsStored() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'protectionThreshold:\n'
    methodStr += CsPad2x2_ProtectionSystemThreshold_to_str(obj.protectionThreshold(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'quad:\n'
    methodStr += CsPad2x2_ConfigV2QuadReg_to_str(obj.quad(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def CsPad2x2_ElementV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.CsPad2x2.ElementV1.TypeId
    assert obj.Version == psana.CsPad2x2.ElementV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_count: %s' % uint32_to_str( obj.seq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_temp: %s' % ndarray_to_str( obj.sb_temp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame_type: %s' % uint32_to_str( obj.frame_type() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'virtual_channel: %s' % uint32_to_str( obj.virtual_channel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint32_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tid: %s' % uint32_to_str( obj.tid() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acq_count: %s' % uint32_to_str( obj.acq_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'op_code: %s' % uint32_to_str( obj.op_code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'quad: %s' % uint32_to_str( obj.quad() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Encoder_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Encoder.ConfigV1.TypeId
    assert obj.Version == psana.Encoder.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'chan_num: %s' % uint32_to_str( obj.chan_num() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'input_num: %s' % uint32_to_str( obj.input_num() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'input_rising: %s' % uint32_to_str( obj.input_rising() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks_per_sec: %s' % uint32_to_str( obj.ticks_per_sec() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'count_mode:\n'
    methodStr += enum_to_str(obj.count_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadrature_mode:\n'
    methodStr += enum_to_str(obj.quadrature_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Encoder_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Encoder.ConfigV2.TypeId
    assert obj.Version == psana.Encoder.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'chan_mask: %s' % uint32_to_str( obj.chan_mask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'input_num: %s' % uint32_to_str( obj.input_num() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'input_rising: %s' % uint32_to_str( obj.input_rising() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks_per_sec: %s' % uint32_to_str( obj.ticks_per_sec() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'count_mode:\n'
    methodStr += enum_to_str(obj.count_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadrature_mode:\n'
    methodStr += enum_to_str(obj.quadrature_mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Encoder_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Encoder.DataV1.TypeId
    assert obj.Version == psana.Encoder.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % uint32_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'encoder_count: %s' % uint32_to_str( obj.encoder_count() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % int32_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Encoder_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Encoder.DataV2.TypeId
    assert obj.Version == psana.Encoder.DataV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % uint32_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'encoder_count: %s' % ndarray_to_str( obj.encoder_count() )
    methodStrings.append(methodStr)                                 
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'value'
    try:
       for idx in range( 3 ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % int32_to_str( obj.value(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.value() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % int32_to_str( subObj )
       methodStrings.append( methodStr )
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def GenericPgp_CDimension_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'rows: %s' % uint32_to_str( obj.rows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'columns: %s' % uint32_to_str( obj.columns() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def GenericPgp_CRegister_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'address: %s' % uint32_to_str( obj.address() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'offset: %s' % uint32_to_str( obj.offset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'mask: %s' % uint32_to_str( obj.mask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'datasize: %s' % uint32_to_str( obj.datasize() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'action:\n'
    methodStr += enum_to_str(obj.action(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def GenericPgp_CStream_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pgp_channel: %s' % uint32_to_str( obj.pgp_channel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data_type: %s' % uint32_to_str( obj.data_type() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config_type: %s' % uint32_to_str( obj.config_type() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'config_offset: %s' % uint32_to_str( obj.config_offset() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def GenericPgp_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.GenericPgp.ConfigV1.TypeId
    assert obj.Version == psana.GenericPgp.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'id: %s' % uint32_to_str( obj.id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_registers: %s' % uint32_to_str( obj.number_of_registers() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_sequences: %s' % uint32_to_str( obj.number_of_sequences() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_streams: %s' % uint32_to_str( obj.number_of_streams() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payload_size: %s' % uint32_to_str( obj.payload_size() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixel_settings: %s' % ndarray_to_str( obj.pixel_settings() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sequence_length: %s' % ndarray_to_str( obj.sequence_length() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payload: %s' % ndarray_to_str( obj.payload() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRows: %s' % uint32_to_str( obj.numberOfRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfColumns: %s' % uint32_to_str( obj.numberOfColumns() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastRowExclusions: %s' % uint32_to_str( obj.lastRowExclusions() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsics: %s' % uint32_to_str( obj.numberOfAsics() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame_dim:\n'
    methodStr += GenericPgp_CDimension_to_str(obj.frame_dim(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'aux_dim:\n'
    methodStr += GenericPgp_CDimension_to_str(obj.aux_dim(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'env_dim:\n'
    methodStr += GenericPgp_CDimension_to_str(obj.env_dim(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.sequence() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'sequence[%d]:\n' % idx
        subMethodStr += GenericPgp_CRegister_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.stream() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'stream[%d]:\n' % idx
        subMethodStr += GenericPgp_CStream_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_AsicConfigV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'monostPulser: %s' % uint8_to_str( obj.monostPulser() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyTest: %s' % uint8_to_str( obj.dummyTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyMask: %s' % uint8_to_str( obj.dummyMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulser: %s' % uint16_to_str( obj.pulser() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pbit: %s' % uint8_to_str( obj.pbit() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'atest: %s' % uint8_to_str( obj.atest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'test: %s' % uint8_to_str( obj.test() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sabTest: %s' % uint8_to_str( obj.sabTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hrTest: %s' % uint8_to_str( obj.hrTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digMon1: %s' % uint8_to_str( obj.digMon1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digMon2: %s' % uint8_to_str( obj.digMon2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserDac: %s' % uint8_to_str( obj.pulserDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Dm1En: %s' % uint8_to_str( obj.Dm1En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Dm2En: %s' % uint8_to_str( obj.Dm2En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'slvdSBit: %s' % uint8_to_str( obj.slvdSBit() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'VRefDac: %s' % uint8_to_str( obj.VRefDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsTComp: %s' % uint8_to_str( obj.TpsTComp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsMux: %s' % uint8_to_str( obj.TpsMux() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RoMonost: %s' % uint8_to_str( obj.RoMonost() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsGr: %s' % uint8_to_str( obj.TpsGr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dGr: %s' % uint8_to_str( obj.S2dGr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PpOcbS2d: %s' % uint8_to_str( obj.PpOcbS2d() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Ocb: %s' % uint8_to_str( obj.Ocb() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Monost: %s' % uint8_to_str( obj.Monost() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FastppEnable: %s' % uint8_to_str( obj.FastppEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Preamp: %s' % uint8_to_str( obj.Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PixelCb: %s' % uint8_to_str( obj.PixelCb() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dTComp: %s' % uint8_to_str( obj.S2dTComp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FilterDac: %s' % uint8_to_str( obj.FilterDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TC: %s' % uint8_to_str( obj.TC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2d: %s' % uint8_to_str( obj.S2d() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dDacBias: %s' % uint8_to_str( obj.S2dDacBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsTcDac: %s' % uint8_to_str( obj.TpsTcDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsDac: %s' % uint8_to_str( obj.TpsDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dTcDac: %s' % uint8_to_str( obj.S2dTcDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dDac: %s' % uint8_to_str( obj.S2dDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TestBe: %s' % uint8_to_str( obj.TestBe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'IsEn: %s' % uint8_to_str( obj.IsEn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'DelExec: %s' % uint8_to_str( obj.DelExec() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'DelCckReg: %s' % uint8_to_str( obj.DelCckReg() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStartAddr: %s' % uint16_to_str( obj.RowStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStopAddr: %s' % uint16_to_str( obj.RowStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColStartAddr: %s' % uint8_to_str( obj.ColStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColStopAddr: %s' % uint8_to_str( obj.ColStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chipID: %s' % uint16_to_str( obj.chipID() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Epix.ConfigV1.TypeId
    assert obj.Version == psana.Epix.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runTrigDelay: %s' % uint32_to_str( obj.runTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'daqTrigDelay: %s' % uint32_to_str( obj.daqTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dacSetting: %s' % uint32_to_str( obj.dacSetting() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqToAsicR0Delay: %s' % uint32_to_str( obj.acqToAsicR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ToAsicAcq: %s' % uint32_to_str( obj.asicR0ToAsicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqWidth: %s' % uint32_to_str( obj.asicAcqWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqLToPPmatL: %s' % uint32_to_str( obj.asicAcqLToPPmatL() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClkHalfT: %s' % uint32_to_str( obj.asicRoClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcReadsPerPixel: %s' % uint32_to_str( obj.adcReadsPerPixel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcClkHalfT: %s' % uint32_to_str( obj.adcClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Width: %s' % uint32_to_str( obj.asicR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcPipelineDelay: %s' % uint32_to_str( obj.adcPipelineDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Width: %s' % uint32_to_str( obj.prepulseR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Delay: %s' % uint32_to_str( obj.prepulseR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId0: %s' % uint32_to_str( obj.digitalCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId1: %s' % uint32_to_str( obj.digitalCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId0: %s' % uint32_to_str( obj.analogCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId1: %s' % uint32_to_str( obj.analogCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastRowExclusions: %s' % uint32_to_str( obj.lastRowExclusions() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerRow: %s' % uint32_to_str( obj.numberOfAsicsPerRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerColumn: %s' % uint32_to_str( obj.numberOfAsicsPerColumn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRowsPerAsic: %s' % uint32_to_str( obj.numberOfRowsPerAsic() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfPixelsPerAsicRow: %s' % uint32_to_str( obj.numberOfPixelsPerAsicRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baseClockFrequency: %s' % uint32_to_str( obj.baseClockFrequency() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPixelTestArray: %s' % ndarray_to_str( obj.asicPixelTestArray() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPixelMaskArray: %s' % ndarray_to_str( obj.asicPixelMaskArray() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGR: %s' % uint8_to_str( obj.asicGR() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcq: %s' % uint8_to_str( obj.asicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0: %s' % uint8_to_str( obj.asicR0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmat: %s' % uint8_to_str( obj.asicPpmat() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbe: %s' % uint8_to_str( obj.asicPpbe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClk: %s' % uint8_to_str( obj.asicRoClk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGRControl: %s' % uint8_to_str( obj.asicGRControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqControl: %s' % uint8_to_str( obj.asicAcqControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Control: %s' % uint8_to_str( obj.asicR0Control() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmatControl: %s' % uint8_to_str( obj.asicPpmatControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbeControl: %s' % uint8_to_str( obj.asicPpbeControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ClkControl: %s' % uint8_to_str( obj.asicR0ClkControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0En: %s' % uint8_to_str( obj.prepulseR0En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcStreamMode: %s' % uint32_to_str( obj.adcStreamMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPatternEnable: %s' % uint8_to_str( obj.testPatternEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRows: %s' % uint32_to_str( obj.numberOfRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfColumns: %s' % uint32_to_str( obj.numberOfColumns() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsics: %s' % uint32_to_str( obj.numberOfAsics() )
    methodStrings.append(methodStr)                                 
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.numberOfAsicsPerRow()*obj.numberOfAsicsPerColumn()
    for idx in range( numObjs ):
        subObj = obj.asics(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'asics[%d]:\n' % idx
        methodStr += Epix_AsicConfigV1_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_Asic10kConfigV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'CompTH_DAC: %s' % uint8_to_str( obj.CompTH_DAC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'CompEn_0: %s' % uint8_to_str( obj.CompEn_0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PulserSync: %s' % uint8_to_str( obj.PulserSync() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyTest: %s' % uint8_to_str( obj.dummyTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyMask: %s' % uint8_to_str( obj.dummyMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyG: %s' % uint8_to_str( obj.dummyG() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyGA: %s' % uint8_to_str( obj.dummyGA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyUpper12bits: %s' % uint16_to_str( obj.dummyUpper12bits() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulser: %s' % uint16_to_str( obj.pulser() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pbit: %s' % uint8_to_str( obj.pbit() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'atest: %s' % uint8_to_str( obj.atest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'test: %s' % uint8_to_str( obj.test() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sabTest: %s' % uint8_to_str( obj.sabTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'hrTest: %s' % uint8_to_str( obj.hrTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserR: %s' % uint8_to_str( obj.pulserR() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digMon1: %s' % uint8_to_str( obj.digMon1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digMon2: %s' % uint8_to_str( obj.digMon2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserDac: %s' % uint8_to_str( obj.pulserDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'monostPulser: %s' % uint8_to_str( obj.monostPulser() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'CompEn_1: %s' % uint8_to_str( obj.CompEn_1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'CompEn_2: %s' % uint8_to_str( obj.CompEn_2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Dm1En: %s' % uint8_to_str( obj.Dm1En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Dm2En: %s' % uint8_to_str( obj.Dm2En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'emph_bd: %s' % uint8_to_str( obj.emph_bd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'emph_bc: %s' % uint8_to_str( obj.emph_bc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'VRefDac: %s' % uint8_to_str( obj.VRefDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vrefLow: %s' % uint8_to_str( obj.vrefLow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsTComp: %s' % uint8_to_str( obj.TpsTComp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsMux: %s' % uint8_to_str( obj.TpsMux() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RoMonost: %s' % uint8_to_str( obj.RoMonost() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsGr: %s' % uint8_to_str( obj.TpsGr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dGr: %s' % uint8_to_str( obj.S2dGr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PpOcbS2d: %s' % uint8_to_str( obj.PpOcbS2d() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Ocb: %s' % uint8_to_str( obj.Ocb() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Monost: %s' % uint8_to_str( obj.Monost() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FastppEnable: %s' % uint8_to_str( obj.FastppEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Preamp: %s' % uint8_to_str( obj.Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'PixelCb: %s' % uint8_to_str( obj.PixelCb() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'Vld1_b: %s' % uint8_to_str( obj.Vld1_b() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dTComp: %s' % uint8_to_str( obj.S2dTComp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FilterDac: %s' % uint8_to_str( obj.FilterDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testVDTransmitter: %s' % uint8_to_str( obj.testVDTransmitter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TC: %s' % uint8_to_str( obj.TC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2d: %s' % uint8_to_str( obj.S2d() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dDacBias: %s' % uint8_to_str( obj.S2dDacBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsTcDac: %s' % uint8_to_str( obj.TpsTcDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TpsDac: %s' % uint8_to_str( obj.TpsDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dTcDac: %s' % uint8_to_str( obj.S2dTcDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'S2dDac: %s' % uint8_to_str( obj.S2dDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'TestBe: %s' % uint8_to_str( obj.TestBe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'IsEn: %s' % uint8_to_str( obj.IsEn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'DelExec: %s' % uint8_to_str( obj.DelExec() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'DelCckReg: %s' % uint8_to_str( obj.DelCckReg() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RO_rst_en: %s' % uint8_to_str( obj.RO_rst_en() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'slvdSBit: %s' % uint8_to_str( obj.slvdSBit() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'FELmode: %s' % uint8_to_str( obj.FELmode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'CompEnOn: %s' % uint8_to_str( obj.CompEnOn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStartAddr: %s' % uint16_to_str( obj.RowStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStopAddr: %s' % uint16_to_str( obj.RowStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColStartAddr: %s' % uint8_to_str( obj.ColStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColStopAddr: %s' % uint8_to_str( obj.ColStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chipID: %s' % uint16_to_str( obj.chipID() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_Config10KV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Epix.Config10KV1.TypeId
    assert obj.Version == psana.Epix.Config10KV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runTrigDelay: %s' % uint32_to_str( obj.runTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'daqTrigDelay: %s' % uint32_to_str( obj.daqTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dacSetting: %s' % uint32_to_str( obj.dacSetting() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'DoutPipelineDelay: %s' % uint32_to_str( obj.DoutPipelineDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqToAsicR0Delay: %s' % uint32_to_str( obj.acqToAsicR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ToAsicAcq: %s' % uint32_to_str( obj.asicR0ToAsicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqWidth: %s' % uint32_to_str( obj.asicAcqWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqLToPPmatL: %s' % uint32_to_str( obj.asicAcqLToPPmatL() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClkHalfT: %s' % uint32_to_str( obj.asicRoClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcReadsPerPixel: %s' % uint32_to_str( obj.adcReadsPerPixel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcClkHalfT: %s' % uint32_to_str( obj.adcClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Width: %s' % uint32_to_str( obj.asicR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcPipelineDelay: %s' % uint32_to_str( obj.adcPipelineDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Width: %s' % uint32_to_str( obj.prepulseR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Delay: %s' % uint32_to_str( obj.prepulseR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId0: %s' % uint32_to_str( obj.digitalCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId1: %s' % uint32_to_str( obj.digitalCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId0: %s' % uint32_to_str( obj.analogCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId1: %s' % uint32_to_str( obj.analogCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastRowExclusions: %s' % uint32_to_str( obj.lastRowExclusions() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerRow: %s' % uint32_to_str( obj.numberOfAsicsPerRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerColumn: %s' % uint32_to_str( obj.numberOfAsicsPerColumn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRowsPerAsic: %s' % uint32_to_str( obj.numberOfRowsPerAsic() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfPixelsPerAsicRow: %s' % uint32_to_str( obj.numberOfPixelsPerAsicRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baseClockFrequency: %s' % uint32_to_str( obj.baseClockFrequency() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPixelConfigArray: %s' % ndarray_to_str( obj.asicPixelConfigArray() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGR: %s' % uint8_to_str( obj.asicGR() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcq: %s' % uint8_to_str( obj.asicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0: %s' % uint8_to_str( obj.asicR0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmat: %s' % uint8_to_str( obj.asicPpmat() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbe: %s' % uint8_to_str( obj.asicPpbe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClk: %s' % uint8_to_str( obj.asicRoClk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGRControl: %s' % uint8_to_str( obj.asicGRControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqControl: %s' % uint8_to_str( obj.asicAcqControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Control: %s' % uint8_to_str( obj.asicR0Control() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmatControl: %s' % uint8_to_str( obj.asicPpmatControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbeControl: %s' % uint8_to_str( obj.asicPpbeControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ClkControl: %s' % uint8_to_str( obj.asicR0ClkControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0En: %s' % uint8_to_str( obj.prepulseR0En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcStreamMode: %s' % uint32_to_str( obj.adcStreamMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPatternEnable: %s' % uint8_to_str( obj.testPatternEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncMode: %s' % uint8_to_str( obj.SyncMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'R0Mode: %s' % uint8_to_str( obj.R0Mode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncWidth: %s' % uint16_to_str( obj.SyncWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncDelay: %s' % uint16_to_str( obj.SyncDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeEnable: %s' % uint8_to_str( obj.scopeEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigEdge: %s' % uint8_to_str( obj.scopeTrigEdge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigChan: %s' % uint8_to_str( obj.scopeTrigChan() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeArmMode: %s' % uint8_to_str( obj.scopeArmMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeADCThreshold: %s' % uint16_to_str( obj.scopeADCThreshold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigHoldoff: %s' % uint16_to_str( obj.scopeTrigHoldoff() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigOffset: %s' % uint16_to_str( obj.scopeTrigOffset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTraceLength: %s' % uint16_to_str( obj.scopeTraceLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeADCsameplesToSkip: %s' % uint16_to_str( obj.scopeADCsameplesToSkip() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeChanAwaveformSelect: %s' % uint8_to_str( obj.scopeChanAwaveformSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeChanBwaveformSelect: %s' % uint8_to_str( obj.scopeChanBwaveformSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRows: %s' % uint32_to_str( obj.numberOfRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfColumns: %s' % uint32_to_str( obj.numberOfColumns() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsics: %s' % uint32_to_str( obj.numberOfAsics() )
    methodStrings.append(methodStr)                                 
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.numberOfAsicsPerRow()*obj.numberOfAsicsPerColumn()
    for idx in range( numObjs ):
        subObj = obj.asics(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'asics[%d]:\n' % idx
        methodStr += Epix_Asic10kConfigV1_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_Asic100aConfigV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserVsPixelOnDelay: %s' % uint8_to_str( obj.pulserVsPixelOnDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserSync: %s' % uint8_to_str( obj.pulserSync() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyTest: %s' % uint8_to_str( obj.dummyTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dummyMask: %s' % uint8_to_str( obj.dummyMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPulserLevel: %s' % uint16_to_str( obj.testPulserLevel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserCounterDirection: %s' % uint8_to_str( obj.pulserCounterDirection() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'automaticTestModeEnable: %s' % uint8_to_str( obj.automaticTestModeEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testMode: %s' % uint8_to_str( obj.testMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testModeWithDarkFrame: %s' % uint8_to_str( obj.testModeWithDarkFrame() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'highResolutionModeTest: %s' % uint8_to_str( obj.highResolutionModeTest() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulserReset: %s' % uint8_to_str( obj.pulserReset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalMonitorMux1: %s' % uint8_to_str( obj.digitalMonitorMux1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalMonitorMux2: %s' % uint8_to_str( obj.digitalMonitorMux2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPulserCurrent: %s' % uint8_to_str( obj.testPulserCurrent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPointSystemOutputDynamicRange: %s' % uint8_to_str( obj.testPointSystemOutputDynamicRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalMonitor1Enable: %s' % uint8_to_str( obj.digitalMonitor1Enable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalMonitor2Enable: %s' % uint8_to_str( obj.digitalMonitor2Enable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'LVDS_ImpedenceMatchingEnable: %s' % uint8_to_str( obj.LVDS_ImpedenceMatchingEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'VRefBaselineDac: %s' % uint8_to_str( obj.VRefBaselineDac() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'extraRowsLowReferenceValue: %s' % uint8_to_str( obj.extraRowsLowReferenceValue() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPointSystemTemperatureCompensationEnable: %s' % uint8_to_str( obj.testPointSystemTemperatureCompensationEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPointSytemInputSelect: %s' % uint8_to_str( obj.testPointSytemInputSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'programmableReadoutDelay: %s' % uint8_to_str( obj.programmableReadoutDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverOutputDynamicRange0: %s' % uint8_to_str( obj.outputDriverOutputDynamicRange0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverOutputDynamicRange1: %s' % uint8_to_str( obj.outputDriverOutputDynamicRange1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'balconyEnable: %s' % uint8_to_str( obj.balconyEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'balconyDriverCurrent: %s' % uint8_to_str( obj.balconyDriverCurrent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fastPowerPulsingSpeed: %s' % uint8_to_str( obj.fastPowerPulsingSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fastPowerPulsingEnable: %s' % uint8_to_str( obj.fastPowerPulsingEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'preamplifierCurrent: %s' % uint8_to_str( obj.preamplifierCurrent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelOutputBufferCurrent: %s' % uint8_to_str( obj.pixelOutputBufferCurrent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelBufferAndPreamplifierDrivingCapabilities: %s' % uint8_to_str( obj.pixelBufferAndPreamplifierDrivingCapabilities() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverTemperatureCompensationEnable: %s' % uint8_to_str( obj.outputDriverTemperatureCompensationEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelFilterLevel: %s' % uint8_to_str( obj.pixelFilterLevel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'bandGapReferenceTemperatureCompensationBits: %s' % uint8_to_str( obj.bandGapReferenceTemperatureCompensationBits() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverDrivingCapabilitiesAndStability: %s' % uint8_to_str( obj.outputDriverDrivingCapabilitiesAndStability() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverDacReferenceBias: %s' % uint8_to_str( obj.outputDriverDacReferenceBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPointSystemTemperatureCompensationGain: %s' % uint8_to_str( obj.testPointSystemTemperatureCompensationGain() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPointSystemInputCommonMode: %s' % uint8_to_str( obj.testPointSystemInputCommonMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverTemperatureCompensationGain0: %s' % uint8_to_str( obj.outputDriverTemperatureCompensationGain0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverInputCommonMode0: %s' % uint8_to_str( obj.outputDriverInputCommonMode0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testBackEnd: %s' % uint8_to_str( obj.testBackEnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'interleavedReadOutEnable: %s' % uint8_to_str( obj.interleavedReadOutEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'EXEC_DelayEnable: %s' % uint8_to_str( obj.EXEC_DelayEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'CCK_RegDelayEnable: %s' % uint8_to_str( obj.CCK_RegDelayEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'syncPinEnable: %s' % uint8_to_str( obj.syncPinEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStartAddr: %s' % uint16_to_str( obj.RowStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'RowStopAddr: %s' % uint16_to_str( obj.RowStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColumnStartAddr: %s' % uint8_to_str( obj.ColumnStartAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ColumnStopAddr: %s' % uint8_to_str( obj.ColumnStopAddr() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chipID: %s' % uint16_to_str( obj.chipID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverOutputDynamicRange2: %s' % uint8_to_str( obj.outputDriverOutputDynamicRange2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverOutputDynamicRange3: %s' % uint8_to_str( obj.outputDriverOutputDynamicRange3() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverTemperatureCompensationGain1: %s' % uint8_to_str( obj.outputDriverTemperatureCompensationGain1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverInputCommonMode1: %s' % uint8_to_str( obj.outputDriverInputCommonMode1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverTemperatureCompensationGain2: %s' % uint8_to_str( obj.outputDriverTemperatureCompensationGain2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverInputCommonMode2: %s' % uint8_to_str( obj.outputDriverInputCommonMode2() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverTemperatureCompensationGain3: %s' % uint8_to_str( obj.outputDriverTemperatureCompensationGain3() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputDriverInputCommonMode3: %s' % uint8_to_str( obj.outputDriverInputCommonMode3() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_Config100aV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Epix.Config100aV1.TypeId
    assert obj.Version == psana.Epix.Config100aV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runTrigDelay: %s' % uint32_to_str( obj.runTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'daqTrigDelay: %s' % uint32_to_str( obj.daqTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dacSetting: %s' % uint32_to_str( obj.dacSetting() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqToAsicR0Delay: %s' % uint32_to_str( obj.acqToAsicR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ToAsicAcq: %s' % uint32_to_str( obj.asicR0ToAsicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqWidth: %s' % uint32_to_str( obj.asicAcqWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqLToPPmatL: %s' % uint32_to_str( obj.asicAcqLToPPmatL() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPPmatToReadout: %s' % uint32_to_str( obj.asicPPmatToReadout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClkHalfT: %s' % uint32_to_str( obj.asicRoClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcReadsPerPixel: %s' % uint32_to_str( obj.adcReadsPerPixel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcClkHalfT: %s' % uint32_to_str( obj.adcClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Width: %s' % uint32_to_str( obj.asicR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcPipelineDelay: %s' % uint32_to_str( obj.adcPipelineDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Width: %s' % uint32_to_str( obj.prepulseR0Width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0Delay: %s' % uint32_to_str( obj.prepulseR0Delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId0: %s' % uint32_to_str( obj.digitalCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId1: %s' % uint32_to_str( obj.digitalCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId0: %s' % uint32_to_str( obj.analogCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId1: %s' % uint32_to_str( obj.analogCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerRow: %s' % uint32_to_str( obj.numberOfAsicsPerRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsicsPerColumn: %s' % uint32_to_str( obj.numberOfAsicsPerColumn() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRowsPerAsic: %s' % uint32_to_str( obj.numberOfRowsPerAsic() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfReadableRowsPerAsic: %s' % uint32_to_str( obj.numberOfReadableRowsPerAsic() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfPixelsPerAsicRow: %s' % uint32_to_str( obj.numberOfPixelsPerAsicRow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationRowCountPerASIC: %s' % uint32_to_str( obj.calibrationRowCountPerASIC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'environmentalRowCountPerASIC: %s' % uint32_to_str( obj.environmentalRowCountPerASIC() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baseClockFrequency: %s' % uint32_to_str( obj.baseClockFrequency() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicMask: %s' % uint32_to_str( obj.asicMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPixelConfigArray: %s' % ndarray_to_str( obj.asicPixelConfigArray() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibPixelConfigArray: %s' % ndarray_to_str( obj.calibPixelConfigArray() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGR: %s' % uint8_to_str( obj.asicGR() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcq: %s' % uint8_to_str( obj.asicAcq() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0: %s' % uint8_to_str( obj.asicR0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmat: %s' % uint8_to_str( obj.asicPpmat() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbe: %s' % uint8_to_str( obj.asicPpbe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicRoClk: %s' % uint8_to_str( obj.asicRoClk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicGRControl: %s' % uint8_to_str( obj.asicGRControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicAcqControl: %s' % uint8_to_str( obj.asicAcqControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0Control: %s' % uint8_to_str( obj.asicR0Control() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpmatControl: %s' % uint8_to_str( obj.asicPpmatControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicPpbeControl: %s' % uint8_to_str( obj.asicPpbeControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'asicR0ClkControl: %s' % uint8_to_str( obj.asicR0ClkControl() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prepulseR0En: %s' % uint8_to_str( obj.prepulseR0En() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcStreamMode: %s' % uint32_to_str( obj.adcStreamMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPatternEnable: %s' % uint8_to_str( obj.testPatternEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncMode: %s' % uint8_to_str( obj.SyncMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'R0Mode: %s' % uint8_to_str( obj.R0Mode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncWidth: %s' % uint16_to_str( obj.SyncWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'SyncDelay: %s' % uint16_to_str( obj.SyncDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeEnable: %s' % uint8_to_str( obj.scopeEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigEdge: %s' % uint8_to_str( obj.scopeTrigEdge() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigChan: %s' % uint8_to_str( obj.scopeTrigChan() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeArmMode: %s' % uint8_to_str( obj.scopeArmMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeADCThreshold: %s' % uint16_to_str( obj.scopeADCThreshold() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigHoldoff: %s' % uint16_to_str( obj.scopeTrigHoldoff() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTrigOffset: %s' % uint16_to_str( obj.scopeTrigOffset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeTraceLength: %s' % uint16_to_str( obj.scopeTraceLength() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeADCsameplesToSkip: %s' % uint16_to_str( obj.scopeADCsameplesToSkip() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeChanAwaveformSelect: %s' % uint8_to_str( obj.scopeChanAwaveformSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'scopeChanBwaveformSelect: %s' % uint8_to_str( obj.scopeChanBwaveformSelect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfRows: %s' % uint32_to_str( obj.numberOfRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfReadableRows: %s' % uint32_to_str( obj.numberOfReadableRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfColumns: %s' % uint32_to_str( obj.numberOfColumns() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfCalibrationRows: %s' % uint32_to_str( obj.numberOfCalibrationRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfEnvironmentalRows: %s' % uint32_to_str( obj.numberOfEnvironmentalRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfAsics: %s' % uint32_to_str( obj.numberOfAsics() )
    methodStrings.append(methodStr)                                 
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.numberOfAsicsPerRow()*obj.numberOfAsicsPerColumn()
    for idx in range( numObjs ):
        subObj = obj.asics(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'asics[%d]:\n' % idx
        methodStr += Epix_Asic100aConfigV1_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_ElementV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Epix.ElementV1.TypeId
    assert obj.Version == psana.Epix.ElementV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame: %s' % ndarray_to_str( obj.frame() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'excludedRows: %s' % ndarray_to_str( obj.excludedRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperatures: %s' % ndarray_to_str( obj.temperatures() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastWord: %s' % uint32_to_str( obj.lastWord() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vc: %s' % uint8_to_str( obj.vc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint8_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqCount: %s' % uint16_to_str( obj.acqCount() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Epix_ElementV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Epix.ElementV2.TypeId
    assert obj.Version == psana.Epix.ElementV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame: %s' % ndarray_to_str( obj.frame() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calibrationRows: %s' % ndarray_to_str( obj.calibrationRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'environmentalRows: %s' % ndarray_to_str( obj.environmentalRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperatures: %s' % ndarray_to_str( obj.temperatures() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastWord: %s' % uint32_to_str( obj.lastWord() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vc: %s' % uint8_to_str( obj.vc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint8_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqCount: %s' % uint16_to_str( obj.acqCount() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EpixSampler_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EpixSampler.ConfigV1.TypeId
    assert obj.Version == psana.EpixSampler.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'version: %s' % uint32_to_str( obj.version() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'runTrigDelay: %s' % uint32_to_str( obj.runTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'daqTrigDelay: %s' % uint32_to_str( obj.daqTrigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'daqSetting: %s' % uint32_to_str( obj.daqSetting() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcClkHalfT: %s' % uint32_to_str( obj.adcClkHalfT() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcPipelineDelay: %s' % uint32_to_str( obj.adcPipelineDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId0: %s' % uint32_to_str( obj.digitalCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'digitalCardId1: %s' % uint32_to_str( obj.digitalCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId0: %s' % uint32_to_str( obj.analogCardId0() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analogCardId1: %s' % uint32_to_str( obj.analogCardId1() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfChannels: %s' % uint32_to_str( obj.numberOfChannels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'samplesPerChannel: %s' % uint32_to_str( obj.samplesPerChannel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'baseClockFrequency: %s' % uint32_to_str( obj.baseClockFrequency() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPatternEnable: %s' % uint8_to_str( obj.testPatternEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sampleInterval_sec: %s' % double_to_str( obj.sampleInterval_sec() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EpixSampler_ElementV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EpixSampler.ElementV1.TypeId
    assert obj.Version == psana.EpixSampler.ElementV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ticks: %s' % uint32_to_str( obj.ticks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fiducials: %s' % uint32_to_str( obj.fiducials() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frame: %s' % ndarray_to_str( obj.frame() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperatures: %s' % ndarray_to_str( obj.temperatures() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastWord: %s' % uint32_to_str( obj.lastWord() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vc: %s' % uint8_to_str( obj.vc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint8_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'acqCount: %s' % uint16_to_str( obj.acqCount() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_PulseConfig_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulse: %s' % uint32_to_str( obj.pulse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prescale: %s' % uint32_to_str( obj.prescale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'delay: %s' % uint32_to_str( obj.delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'polarity: %s' % uint8_to_str( obj.polarity() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'map_set_enable: %s' % uint8_to_str( obj.map_set_enable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'map_reset_enable: %s' % uint8_to_str( obj.map_reset_enable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'map_trigger_enable: %s' % uint8_to_str( obj.map_trigger_enable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigger: %s' % int16_to_str( obj.trigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'set: %s' % int16_to_str( obj.set() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'clear: %s' % int16_to_str( obj.clear() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_PulseConfigV3_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'pulseId: %s' % uint16_to_str( obj.pulseId() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'polarity: %s' % uint16_to_str( obj.polarity() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'prescale: %s' % uint32_to_str( obj.prescale() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'delay: %s' % uint32_to_str( obj.delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_EventCodeV3_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'code: %s' % uint16_to_str( obj.code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTrigger: %s' % uint32_to_str( obj.maskTrigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskSet: %s' % uint32_to_str( obj.maskSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskClear: %s' % uint32_to_str( obj.maskClear() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isReadout: %s' % uint8_to_str( obj.isReadout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isTerminator: %s' % uint8_to_str( obj.isTerminator() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_EventCodeV4_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'code: %s' % uint16_to_str( obj.code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportDelay: %s' % uint32_to_str( obj.reportDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportWidth: %s' % uint32_to_str( obj.reportWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTrigger: %s' % uint32_to_str( obj.maskTrigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskSet: %s' % uint32_to_str( obj.maskSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskClear: %s' % uint32_to_str( obj.maskClear() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isReadout: %s' % uint8_to_str( obj.isReadout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isTerminator: %s' % uint8_to_str( obj.isTerminator() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_EventCodeV5_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'code: %s' % uint16_to_str( obj.code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportDelay: %s' % uint32_to_str( obj.reportDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportWidth: %s' % uint32_to_str( obj.reportWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTrigger: %s' % uint32_to_str( obj.maskTrigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskSet: %s' % uint32_to_str( obj.maskSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskClear: %s' % uint32_to_str( obj.maskClear() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'desc: %s' % str_to_str( obj.desc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isReadout: %s' % uint8_to_str( obj.isReadout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isCommand: %s' % uint8_to_str( obj.isCommand() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isLatch: %s' % uint8_to_str( obj.isLatch() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'releaseCode: %s' % uint32_to_str( obj.releaseCode() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_EventCodeV6_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'code: %s' % uint16_to_str( obj.code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportDelay: %s' % uint32_to_str( obj.reportDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reportWidth: %s' % uint32_to_str( obj.reportWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTrigger: %s' % uint32_to_str( obj.maskTrigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskSet: %s' % uint32_to_str( obj.maskSet() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskClear: %s' % uint32_to_str( obj.maskClear() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'desc: %s' % str_to_str( obj.desc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutGroup: %s' % uint16_to_str( obj.readoutGroup() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isReadout: %s' % uint8_to_str( obj.isReadout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isCommand: %s' % uint8_to_str( obj.isCommand() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'isLatch: %s' % uint8_to_str( obj.isLatch() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'releaseCode: %s' % uint32_to_str( obj.releaseCode() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_SrcEventCode_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'code: %s' % uint16_to_str( obj.code() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'period: %s' % uint32_to_str( obj.period() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTriggerP: %s' % uint32_to_str( obj.maskTriggerP() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskTriggerR: %s' % uint32_to_str( obj.maskTriggerR() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'desc: %s' % str_to_str( obj.desc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutGroup: %s' % uint16_to_str( obj.readoutGroup() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_OutputMap_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % uint32_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'source_id: %s' % uint8_to_str( obj.source_id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'conn_id: %s' % uint8_to_str( obj.conn_id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'map: %s' % uint32_to_str( obj.map() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'source:\n'
    methodStr += enum_to_str(obj.source(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'conn:\n'
    methodStr += enum_to_str(obj.conn(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_OutputMapV2_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'value: %s' % uint32_to_str( obj.value() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'source_id: %s' % uint8_to_str( obj.source_id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'conn_id: %s' % uint8_to_str( obj.conn_id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'module: %s' % uint8_to_str( obj.module() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'map: %s' % uint32_to_str( obj.map() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'source:\n'
    methodStr += enum_to_str(obj.source(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'conn:\n'
    methodStr += enum_to_str(obj.conn(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV1.TypeId
    assert obj.Version == psana.EvrData.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfig_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMap_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV2.TypeId
    assert obj.Version == psana.EvrData.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'opcode: %s' % uint32_to_str( obj.opcode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'beam:\n'
    methodStr += enum_to_str(obj.beam(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'rate:\n'
    methodStr += enum_to_str(obj.rate(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfig_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMap_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV3.TypeId
    assert obj.Version == psana.EvrData.ConfigV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_EventCodeV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMap_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV4_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV4.TypeId
    assert obj.Version == psana.EvrData.ConfigV4.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_EventCodeV4_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMap_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_SequencerEntry_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'delay: %s' % uint32_to_str( obj.delay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventcode: %s' % uint32_to_str( obj.eventcode() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_SequencerConfigV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'length: %s' % uint32_to_str( obj.length() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'cycles: %s' % uint32_to_str( obj.cycles() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'sync_source:\n'
    methodStr += enum_to_str(obj.sync_source(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'beam_source:\n'
    methodStr += enum_to_str(obj.beam_source(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.entries() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'entries[%d]:\n' % idx
        subMethodStr += EvrData_SequencerEntry_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV5_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV5.TypeId
    assert obj.Version == psana.EvrData.ConfigV5.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_config:\n'
    methodStr += EvrData_SequencerConfigV1_to_str(obj.seq_config(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_EventCodeV5_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMap_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV6_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV6.TypeId
    assert obj.Version == psana.EvrData.ConfigV6.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_config:\n'
    methodStr += EvrData_SequencerConfigV1_to_str(obj.seq_config(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_EventCodeV5_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMapV2_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_ConfigV7_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.ConfigV7.TypeId
    assert obj.Version == psana.EvrData.ConfigV7.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'seq_config:\n'
    methodStr += EvrData_SequencerConfigV1_to_str(obj.seq_config(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_EventCodeV6_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMapV2_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_SrcConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.SrcConfigV1.TypeId
    assert obj.Version == psana.EvrData.SrcConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'neventcodes: %s' % uint32_to_str( obj.neventcodes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'npulses: %s' % uint32_to_str( obj.npulses() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'noutputs: %s' % uint32_to_str( obj.noutputs() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.eventcodes() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'eventcodes[%d]:\n' % idx
        subMethodStr += EvrData_SrcEventCode_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.pulses() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'pulses[%d]:\n' % idx
        subMethodStr += EvrData_PulseConfigV3_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.output_maps() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'output_maps[%d]:\n' % idx
        subMethodStr += EvrData_OutputMapV2_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_FIFOEvent_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestampHigh: %s' % uint32_to_str( obj.timestampHigh() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestampLow: %s' % uint32_to_str( obj.timestampLow() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'eventCode: %s' % uint32_to_str( obj.eventCode() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_DataV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.DataV3.TypeId
    assert obj.Version == psana.EvrData.DataV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numFifoEvents: %s' % uint32_to_str( obj.numFifoEvents() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.fifoEvents() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'fifoEvents[%d]:\n' % idx
        subMethodStr += EvrData_FIFOEvent_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_IOChannel_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'name: %s' % str_to_str( obj.name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ninfo: %s' % uint32_to_str( obj.ninfo() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.infos() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'infos[%d]:\n' % idx
        subMethodStr += Pds_DetInfo_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_IOConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.IOConfigV1.TypeId
    assert obj.Version == psana.EvrData.IOConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nchannels: %s' % uint16_to_str( obj.nchannels() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'conn:\n'
    methodStr += enum_to_str(obj.conn(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.channels() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'channels[%d]:\n' % idx
        subMethodStr += EvrData_IOChannel_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_IOChannelV2_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'name: %s' % str_to_str( obj.name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ninfo: %s' % uint32_to_str( obj.ninfo() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'output:\n'
    methodStr += EvrData_OutputMapV2_to_str(obj.output(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.infos() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'infos[%d]:\n' % idx
        subMethodStr += Pds_DetInfo_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def EvrData_IOConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.EvrData.IOConfigV2.TypeId
    assert obj.Version == psana.EvrData.IOConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'nchannels: %s' % uint32_to_str( obj.nchannels() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.channels() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'channels[%d]:\n' % idx
        subMethodStr += EvrData_IOChannelV2_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def FCCD_FccdConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.FCCD.FccdConfigV1.TypeId
    assert obj.Version == psana.FCCD.FccdConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputMode: %s' % uint16_to_str( obj.outputMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trimmedWidth: %s' % uint32_to_str( obj.trimmedWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trimmedHeight: %s' % uint32_to_str( obj.trimmedHeight() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def FCCD_FccdConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.FCCD.FccdConfigV2.TypeId
    assert obj.Version == psana.FCCD.FccdConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'outputMode: %s' % uint16_to_str( obj.outputMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ccdEnable: %s' % uint8_to_str( obj.ccdEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'focusMode: %s' % uint8_to_str( obj.focusMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % uint32_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dacVoltages: %s' % ndarray_to_str( obj.dacVoltages() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'waveforms: %s' % ndarray_to_str( obj.waveforms() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trimmedWidth: %s' % uint32_to_str( obj.trimmedWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trimmedHeight: %s' % uint32_to_str( obj.trimmedHeight() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Fli_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Fli.ConfigV1.TypeId
    assert obj.Version == psana.Fli.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint8_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint8_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayShots: %s' % uint32_to_str( obj.numDelayShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Fli_FrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Fli.FrameV1.TypeId
    assert obj.Version == psana.Fli.FrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shotIdStart: %s' % uint32_to_str( obj.shotIdStart() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutTime: %s' % float_to_str( obj.readoutTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % float_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Gsc16ai_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Gsc16ai.ConfigV1.TypeId
    assert obj.Version == psana.Gsc16ai.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'firstChan: %s' % uint16_to_str( obj.firstChan() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lastChan: %s' % uint16_to_str( obj.lastChan() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'fps: %s' % uint16_to_str( obj.fps() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'autocalibEnable: %s' % uint8_to_str( obj.autocalibEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeTagEnable: %s' % uint8_to_str( obj.timeTagEnable() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numChannels: %s' % uint16_to_str( obj.numChannels() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'voltageRange:\n'
    methodStr += enum_to_str(obj.voltageRange(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'inputMode:\n'
    methodStr += enum_to_str(obj.inputMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerMode:\n'
    methodStr += enum_to_str(obj.triggerMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'dataFormat:\n'
    methodStr += enum_to_str(obj.dataFormat(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Gsc16ai_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Gsc16ai.DataV1.TypeId
    assert obj.Version == psana.Gsc16ai.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % ndarray_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'channelValue: %s' % ndarray_to_str( obj.channelValue() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Imp_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Imp.ConfigV1.TypeId
    assert obj.Version == psana.Imp.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'range: %s' % uint32_to_str( obj.range() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calRange: %s' % uint32_to_str( obj.calRange() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'reset: %s' % uint32_to_str( obj.reset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'biasData: %s' % uint32_to_str( obj.biasData() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calData: %s' % uint32_to_str( obj.calData() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'biasDacData: %s' % uint32_to_str( obj.biasDacData() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calStrobe: %s' % uint32_to_str( obj.calStrobe() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numberOfSamples: %s' % uint32_to_str( obj.numberOfSamples() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigDelay: %s' % uint32_to_str( obj.trigDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'adcDelay: %s' % uint32_to_str( obj.adcDelay() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Imp_Sample_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'channels: %s' % ndarray_to_str( obj.channels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Imp_LaneStatus_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'linkErrCount: %s' % uint8_to_str( obj.linkErrCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'linkDownCount: %s' % uint8_to_str( obj.linkDownCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'cellErrCount: %s' % uint8_to_str( obj.cellErrCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rxCount: %s' % uint8_to_str( obj.rxCount() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'locLinked: %s' % uint8_to_str( obj.locLinked() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'remLinked: %s' % uint8_to_str( obj.remLinked() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'zeros: %s' % uint16_to_str( obj.zeros() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'powersOkay: %s' % uint8_to_str( obj.powersOkay() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Imp_ElementV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Imp.ElementV1.TypeId
    assert obj.Version == psana.Imp.ElementV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'range: %s' % uint32_to_str( obj.range() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vc: %s' % uint8_to_str( obj.vc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lane: %s' % uint8_to_str( obj.lane() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'laneStatus:\n'
    methodStr += Imp_LaneStatus_to_str(obj.laneStatus(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.samples() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'samples[%d]:\n' % idx
        subMethodStr += Imp_Sample_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def L3T_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.L3T.ConfigV1.TypeId
    assert obj.Version == psana.L3T.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'module_id_len: %s' % uint32_to_str( obj.module_id_len() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'desc_len: %s' % uint32_to_str( obj.desc_len() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'module_id: %s' % str_to_str( obj.module_id() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'desc: %s' % str_to_str( obj.desc() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def L3T_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.L3T.DataV1.TypeId
    assert obj.Version == psana.L3T.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'accept: %s' % uint32_to_str( obj.accept() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def L3T_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.L3T.DataV2.TypeId
    assert obj.Version == psana.L3T.DataV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'accept: %s' % uint32_to_str( obj.accept() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'result:\n'
    methodStr += enum_to_str(obj.result(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'bias:\n'
    methodStr += enum_to_str(obj.bias(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def OceanOptics_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.OceanOptics.ConfigV1.TypeId
    assert obj.Version == psana.OceanOptics.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'waveLenCalib: %s' % ndarray_to_str( obj.waveLenCalib() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nonlinCorrect: %s' % ndarray_to_str( obj.nonlinCorrect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'strayLightConstant: %s' % double_to_str( obj.strayLightConstant() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def OceanOptics_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.OceanOptics.ConfigV2.TypeId
    assert obj.Version == psana.OceanOptics.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'deviceType: %s' % int32_to_str( obj.deviceType() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'waveLenCalib: %s' % ndarray_to_str( obj.waveLenCalib() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nonlinCorrect: %s' % ndarray_to_str( obj.nonlinCorrect() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'strayLightConstant: %s' % double_to_str( obj.strayLightConstant() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def OceanOptics_timespec64_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'tv_sec: %s' % uint64_to_str( obj.tv_sec() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'tv_nsec: %s' % uint64_to_str( obj.tv_nsec() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def OceanOptics_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.OceanOptics.DataV1.TypeId
    assert obj.Version == psana.OceanOptics.DataV1.Version
    methodStrings = []
    methodStrings.append(OceanOptics_nonLinearCorrected(obj, indent, lvl))
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameCounter: %s' % uint64_to_str( obj.frameCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayedFrames: %s' % uint64_to_str( obj.numDelayedFrames() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDiscardFrames: %s' % uint64_to_str( obj.numDiscardFrames() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraInData: %s' % int8_to_str( obj.numSpectraInData() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraInQueue: %s' % int8_to_str( obj.numSpectraInQueue() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraUnused: %s' % int8_to_str( obj.numSpectraUnused() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'durationOfFrame: %s' % double_to_str( obj.durationOfFrame() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameStart:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameStart(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameFirstData:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameFirstData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameEnd:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameEnd(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def OceanOptics_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.OceanOptics.DataV2.TypeId
    assert obj.Version == psana.OceanOptics.DataV2.Version
    methodStrings = []
    methodStrings.append(OceanOptics_nonLinearCorrected(obj, indent, lvl))
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameCounter: %s' % uint64_to_str( obj.frameCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayedFrames: %s' % uint64_to_str( obj.numDelayedFrames() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDiscardFrames: %s' % uint64_to_str( obj.numDiscardFrames() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraInData: %s' % int8_to_str( obj.numSpectraInData() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraInQueue: %s' % int8_to_str( obj.numSpectraInQueue() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSpectraUnused: %s' % int8_to_str( obj.numSpectraUnused() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'durationOfFrame: %s' % double_to_str( obj.durationOfFrame() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameStart:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameStart(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameFirstData:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameFirstData(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeFrameEnd:\n'
    methodStr += OceanOptics_timespec64_to_str(obj.timeFrameEnd(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Opal1k_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Opal1k.ConfigV1.TypeId
    assert obj.Version == psana.Opal1k.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_defect_pixels: %s' % uint32_to_str( obj.number_of_defect_pixels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_lookup_table: %s' % ndarray_to_str( obj.output_lookup_table() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'black_level: %s' % uint16_to_str( obj.black_level() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_percent: %s' % uint16_to_str( obj.gain_percent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vertical_remapping: %s' % uint8_to_str( obj.vertical_remapping() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_lookup_table_enabled: %s' % uint8_to_str( obj.output_lookup_table_enabled() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'defect_pixel_correction_enabled: %s' % uint8_to_str( obj.defect_pixel_correction_enabled() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_offset: %s' % uint16_to_str( obj.output_offset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution_bits: %s' % uint32_to_str( obj.output_resolution_bits() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution:\n'
    methodStr += enum_to_str(obj.output_resolution(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'vertical_binning:\n'
    methodStr += enum_to_str(obj.vertical_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_mirroring:\n'
    methodStr += enum_to_str(obj.output_mirroring(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.defect_pixel_coordinates() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'defect_pixel_coordinates[%d]:\n' % idx
        subMethodStr += Camera_FrameCoord_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Orca_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Orca.ConfigV1.TypeId
    assert obj.Version == psana.Orca.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'rows: %s' % uint32_to_str( obj.rows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'defect_pixel_correction_enabled: %s' % uint8_to_str( obj.defect_pixel_correction_enabled() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'mode:\n'
    methodStr += enum_to_str(obj.mode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'cooling:\n'
    methodStr += enum_to_str(obj.cooling(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Partition_Source_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'group: %s' % uint32_to_str( obj.group() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'src:\n'
    methodStr += Pds_Src_to_str(obj.src(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Partition_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Partition.ConfigV1.TypeId
    assert obj.Version == psana.Partition.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'bldMask: %s' % uint64_to_str( obj.bldMask() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSources: %s' % uint32_to_str( obj.numSources() )
    methodStrings.append(methodStr)                                 
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.sources() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'sources[%d]:\n' % idx
        subMethodStr += Partition_Source_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Pimax_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Pimax.ConfigV1.TypeId
    assert obj.Version == psana.Pimax.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeed: %s' % float_to_str( obj.readoutSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint16_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'intensifierGain: %s' % uint16_to_str( obj.intensifierGain() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gateDelay: %s' % double_to_str( obj.gateDelay() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gateWidth: %s' % double_to_str( obj.gateWidth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskedHeight: %s' % uint32_to_str( obj.maskedHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kineticHeight: %s' % uint32_to_str( obj.kineticHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vsSpeed: %s' % float_to_str( obj.vsSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'infoReportInterval: %s' % int16_to_str( obj.infoReportInterval() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numIntegrationShots: %s' % uint32_to_str( obj.numIntegrationShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Pimax_FrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Pimax.FrameV1.TypeId
    assert obj.Version == psana.Pimax.FrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shotIdStart: %s' % uint32_to_str( obj.shotIdStart() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutTime: %s' % float_to_str( obj.readoutTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % float_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def PNCCD_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.PNCCD.ConfigV1.TypeId
    assert obj.Version == psana.PNCCD.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numLinks: %s' % uint32_to_str( obj.numLinks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSizePerLink: %s' % uint32_to_str( obj.payloadSizePerLink() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def PNCCD_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.PNCCD.ConfigV2.TypeId
    assert obj.Version == psana.PNCCD.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numLinks: %s' % uint32_to_str( obj.numLinks() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'payloadSizePerLink: %s' % uint32_to_str( obj.payloadSizePerLink() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numChannels: %s' % uint32_to_str( obj.numChannels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numRows: %s' % uint32_to_str( obj.numRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSubmoduleChannels: %s' % uint32_to_str( obj.numSubmoduleChannels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSubmoduleRows: %s' % uint32_to_str( obj.numSubmoduleRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numSubmodules: %s' % uint32_to_str( obj.numSubmodules() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'camexMagic: %s' % uint32_to_str( obj.camexMagic() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'info: %s' % str_to_str( obj.info() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timingFName: %s' % str_to_str( obj.timingFName() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def PNCCD_FrameV1_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'specialWord: %s' % uint32_to_str( obj.specialWord() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampHi: %s' % uint32_to_str( obj.timeStampHi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampLo: %s' % uint32_to_str( obj.timeStampLo() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def PNCCD_FullFrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.PNCCD.FullFrameV1.TypeId
    assert obj.Version == psana.PNCCD.FullFrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'specialWord: %s' % uint32_to_str( obj.specialWord() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameNumber: %s' % uint32_to_str( obj.frameNumber() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampHi: %s' % uint32_to_str( obj.timeStampHi() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timeStampLo: %s' % uint32_to_str( obj.timeStampLo() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def PNCCD_FramesV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.PNCCD.FramesV1.TypeId
    assert obj.Version == psana.PNCCD.FramesV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'numLinks: %s' % uint32_to_str( obj.numLinks() )
    methodStrings.append(methodStr)                                 
    # idx_list_multi_line_methods
    methodStr = ''
    numObjs = obj.frame_shape()[0]
    for idx in range( numObjs ):
        subObj = obj.frame(idx)
        methodStr += doIndent(indent, lvl)
        methodStr += 'frame[%d]:\n' % idx
        methodStr += PNCCD_FrameV1_to_str(subObj, indent, lvl+1, methodSep)
        if idx+1 < numObjs:
            methodStr += '\n'
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.ConfigV1.TypeId
    assert obj.Version == psana.Princeton.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint32_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutEventCode: %s' % uint16_to_str( obj.readoutEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'delayMode: %s' % uint16_to_str( obj.delayMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.ConfigV2.TypeId
    assert obj.Version == psana.Princeton.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint16_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint16_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutEventCode: %s' % uint16_to_str( obj.readoutEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'delayMode: %s' % uint16_to_str( obj.delayMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_ConfigV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.ConfigV3.TypeId
    assert obj.Version == psana.Princeton.ConfigV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint8_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint8_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayShots: %s' % uint32_to_str( obj.numDelayShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_ConfigV4_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.ConfigV4.TypeId
    assert obj.Version == psana.Princeton.ConfigV4.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskedHeight: %s' % uint32_to_str( obj.maskedHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kineticHeight: %s' % uint32_to_str( obj.kineticHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vsSpeed: %s' % float_to_str( obj.vsSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint8_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint8_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayShots: %s' % uint32_to_str( obj.numDelayShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_ConfigV5_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.ConfigV5.TypeId
    assert obj.Version == psana.Princeton.ConfigV5.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgX: %s' % uint32_to_str( obj.orgX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'orgY: %s' % uint32_to_str( obj.orgY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binX: %s' % uint32_to_str( obj.binX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binY: %s' % uint32_to_str( obj.binY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureTime: %s' % float_to_str( obj.exposureTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'coolingTemp: %s' % float_to_str( obj.coolingTemp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gainIndex: %s' % uint16_to_str( obj.gainIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeedIndex: %s' % uint16_to_str( obj.readoutSpeedIndex() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'maskedHeight: %s' % uint32_to_str( obj.maskedHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'kineticHeight: %s' % uint32_to_str( obj.kineticHeight() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'vsSpeed: %s' % float_to_str( obj.vsSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'infoReportInterval: %s' % int16_to_str( obj.infoReportInterval() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposureEventCode: %s' % uint16_to_str( obj.exposureEventCode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numDelayShots: %s' % uint32_to_str( obj.numDelayShots() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameSize: %s' % uint32_to_str( obj.frameSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsX: %s' % uint32_to_str( obj.numPixelsX() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixelsY: %s' % uint32_to_str( obj.numPixelsY() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'numPixels: %s' % uint32_to_str( obj.numPixels() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_FrameV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.FrameV1.TypeId
    assert obj.Version == psana.Princeton.FrameV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shotIdStart: %s' % uint32_to_str( obj.shotIdStart() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutTime: %s' % float_to_str( obj.readoutTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_FrameV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.FrameV2.TypeId
    assert obj.Version == psana.Princeton.FrameV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shotIdStart: %s' % uint32_to_str( obj.shotIdStart() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutTime: %s' % float_to_str( obj.readoutTime() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % float_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Princeton_InfoV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Princeton.InfoV1.TypeId
    assert obj.Version == psana.Princeton.InfoV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'temperature: %s' % float_to_str( obj.temperature() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Quartz_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Quartz.ConfigV1.TypeId
    assert obj.Version == psana.Quartz.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_defect_pixels: %s' % uint32_to_str( obj.number_of_defect_pixels() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_lookup_table: %s' % ndarray_to_str( obj.output_lookup_table() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'black_level: %s' % uint16_to_str( obj.black_level() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'gain_percent: %s' % uint16_to_str( obj.gain_percent() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_lookup_table_enabled: %s' % uint8_to_str( obj.output_lookup_table_enabled() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'defect_pixel_correction_enabled: %s' % uint8_to_str( obj.defect_pixel_correction_enabled() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_offset: %s' % uint16_to_str( obj.output_offset() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution_bits: %s' % uint32_to_str( obj.output_resolution_bits() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_resolution:\n'
    methodStr += enum_to_str(obj.output_resolution(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'horizontal_binning:\n'
    methodStr += enum_to_str(obj.horizontal_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'vertical_binning:\n'
    methodStr += enum_to_str(obj.vertical_binning(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'output_mirroring:\n'
    methodStr += enum_to_str(obj.output_mirroring(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.defect_pixel_coordinates() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'defect_pixel_coordinates[%d]:\n' % idx
        subMethodStr += Camera_FrameCoord_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Rayonix_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Rayonix.ConfigV1.TypeId
    assert obj.Version == psana.Rayonix.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'binning_f: %s' % uint8_to_str( obj.binning_f() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binning_s: %s' % uint8_to_str( obj.binning_s() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposure: %s' % uint32_to_str( obj.exposure() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigger: %s' % uint32_to_str( obj.trigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rawMode: %s' % uint16_to_str( obj.rawMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'darkFlag: %s' % uint16_to_str( obj.darkFlag() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'deviceID: %s' % str_to_str( obj.deviceID() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutMode:\n'
    methodStr += enum_to_str(obj.readoutMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Rayonix_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Rayonix.ConfigV2.TypeId
    assert obj.Version == psana.Rayonix.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'binning_f: %s' % uint8_to_str( obj.binning_f() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'binning_s: %s' % uint8_to_str( obj.binning_s() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'testPattern: %s' % int16_to_str( obj.testPattern() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'exposure: %s' % uint32_to_str( obj.exposure() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'trigger: %s' % uint32_to_str( obj.trigger() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'rawMode: %s' % uint16_to_str( obj.rawMode() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'darkFlag: %s' % uint16_to_str( obj.darkFlag() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'deviceID: %s' % str_to_str( obj.deviceID() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutMode:\n'
    methodStr += enum_to_str(obj.readoutMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Timepix_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Timepix.ConfigV1.TypeId
    assert obj.Version == psana.Timepix.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'shutterTimeout: %s' % int32_to_str( obj.shutterTimeout() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ikrum: %s' % int32_to_str( obj.dac0Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Disc: %s' % int32_to_str( obj.dac0Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Preamp: %s' % int32_to_str( obj.dac0Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogA: %s' % int32_to_str( obj.dac0BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogB: %s' % int32_to_str( obj.dac0BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Hist: %s' % int32_to_str( obj.dac0Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlFine: %s' % int32_to_str( obj.dac0ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlCourse: %s' % int32_to_str( obj.dac0ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Vcas: %s' % int32_to_str( obj.dac0Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Fbk: %s' % int32_to_str( obj.dac0Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Gnd: %s' % int32_to_str( obj.dac0Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ths: %s' % int32_to_str( obj.dac0Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BiasLvds: %s' % int32_to_str( obj.dac0BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0RefLvds: %s' % int32_to_str( obj.dac0RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ikrum: %s' % int32_to_str( obj.dac1Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Disc: %s' % int32_to_str( obj.dac1Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Preamp: %s' % int32_to_str( obj.dac1Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogA: %s' % int32_to_str( obj.dac1BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogB: %s' % int32_to_str( obj.dac1BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Hist: %s' % int32_to_str( obj.dac1Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlFine: %s' % int32_to_str( obj.dac1ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlCourse: %s' % int32_to_str( obj.dac1ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Vcas: %s' % int32_to_str( obj.dac1Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Fbk: %s' % int32_to_str( obj.dac1Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Gnd: %s' % int32_to_str( obj.dac1Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ths: %s' % int32_to_str( obj.dac1Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BiasLvds: %s' % int32_to_str( obj.dac1BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1RefLvds: %s' % int32_to_str( obj.dac1RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ikrum: %s' % int32_to_str( obj.dac2Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Disc: %s' % int32_to_str( obj.dac2Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Preamp: %s' % int32_to_str( obj.dac2Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogA: %s' % int32_to_str( obj.dac2BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogB: %s' % int32_to_str( obj.dac2BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Hist: %s' % int32_to_str( obj.dac2Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlFine: %s' % int32_to_str( obj.dac2ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlCourse: %s' % int32_to_str( obj.dac2ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Vcas: %s' % int32_to_str( obj.dac2Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Fbk: %s' % int32_to_str( obj.dac2Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Gnd: %s' % int32_to_str( obj.dac2Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ths: %s' % int32_to_str( obj.dac2Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BiasLvds: %s' % int32_to_str( obj.dac2BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2RefLvds: %s' % int32_to_str( obj.dac2RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ikrum: %s' % int32_to_str( obj.dac3Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Disc: %s' % int32_to_str( obj.dac3Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Preamp: %s' % int32_to_str( obj.dac3Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogA: %s' % int32_to_str( obj.dac3BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogB: %s' % int32_to_str( obj.dac3BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Hist: %s' % int32_to_str( obj.dac3Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlFine: %s' % int32_to_str( obj.dac3ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlCourse: %s' % int32_to_str( obj.dac3ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Vcas: %s' % int32_to_str( obj.dac3Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Fbk: %s' % int32_to_str( obj.dac3Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Gnd: %s' % int32_to_str( obj.dac3Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ths: %s' % int32_to_str( obj.dac3Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BiasLvds: %s' % int32_to_str( obj.dac3BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3RefLvds: %s' % int32_to_str( obj.dac3RefLvds() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeed:\n'
    methodStr += enum_to_str(obj.readoutSpeed(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerMode:\n'
    methodStr += enum_to_str(obj.triggerMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Timepix_ConfigV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Timepix.ConfigV2.TypeId
    assert obj.Version == psana.Timepix.ConfigV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timepixSpeed: %s' % int32_to_str( obj.timepixSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ikrum: %s' % int32_to_str( obj.dac0Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Disc: %s' % int32_to_str( obj.dac0Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Preamp: %s' % int32_to_str( obj.dac0Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogA: %s' % int32_to_str( obj.dac0BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogB: %s' % int32_to_str( obj.dac0BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Hist: %s' % int32_to_str( obj.dac0Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlFine: %s' % int32_to_str( obj.dac0ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlCourse: %s' % int32_to_str( obj.dac0ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Vcas: %s' % int32_to_str( obj.dac0Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Fbk: %s' % int32_to_str( obj.dac0Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Gnd: %s' % int32_to_str( obj.dac0Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ths: %s' % int32_to_str( obj.dac0Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BiasLvds: %s' % int32_to_str( obj.dac0BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0RefLvds: %s' % int32_to_str( obj.dac0RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ikrum: %s' % int32_to_str( obj.dac1Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Disc: %s' % int32_to_str( obj.dac1Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Preamp: %s' % int32_to_str( obj.dac1Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogA: %s' % int32_to_str( obj.dac1BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogB: %s' % int32_to_str( obj.dac1BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Hist: %s' % int32_to_str( obj.dac1Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlFine: %s' % int32_to_str( obj.dac1ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlCourse: %s' % int32_to_str( obj.dac1ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Vcas: %s' % int32_to_str( obj.dac1Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Fbk: %s' % int32_to_str( obj.dac1Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Gnd: %s' % int32_to_str( obj.dac1Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ths: %s' % int32_to_str( obj.dac1Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BiasLvds: %s' % int32_to_str( obj.dac1BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1RefLvds: %s' % int32_to_str( obj.dac1RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ikrum: %s' % int32_to_str( obj.dac2Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Disc: %s' % int32_to_str( obj.dac2Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Preamp: %s' % int32_to_str( obj.dac2Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogA: %s' % int32_to_str( obj.dac2BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogB: %s' % int32_to_str( obj.dac2BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Hist: %s' % int32_to_str( obj.dac2Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlFine: %s' % int32_to_str( obj.dac2ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlCourse: %s' % int32_to_str( obj.dac2ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Vcas: %s' % int32_to_str( obj.dac2Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Fbk: %s' % int32_to_str( obj.dac2Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Gnd: %s' % int32_to_str( obj.dac2Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ths: %s' % int32_to_str( obj.dac2Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BiasLvds: %s' % int32_to_str( obj.dac2BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2RefLvds: %s' % int32_to_str( obj.dac2RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ikrum: %s' % int32_to_str( obj.dac3Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Disc: %s' % int32_to_str( obj.dac3Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Preamp: %s' % int32_to_str( obj.dac3Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogA: %s' % int32_to_str( obj.dac3BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogB: %s' % int32_to_str( obj.dac3BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Hist: %s' % int32_to_str( obj.dac3Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlFine: %s' % int32_to_str( obj.dac3ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlCourse: %s' % int32_to_str( obj.dac3ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Vcas: %s' % int32_to_str( obj.dac3Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Fbk: %s' % int32_to_str( obj.dac3Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Gnd: %s' % int32_to_str( obj.dac3Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ths: %s' % int32_to_str( obj.dac3Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BiasLvds: %s' % int32_to_str( obj.dac3BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3RefLvds: %s' % int32_to_str( obj.dac3RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'driverVersion: %s' % int32_to_str( obj.driverVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'firmwareVersion: %s' % uint32_to_str( obj.firmwareVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelThreshSize: %s' % uint32_to_str( obj.pixelThreshSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelThresh: %s' % ndarray_to_str( obj.pixelThresh() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip0Name: %s' % str_to_str( obj.chip0Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip1Name: %s' % str_to_str( obj.chip1Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip2Name: %s' % str_to_str( obj.chip2Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip3Name: %s' % str_to_str( obj.chip3Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip0ID: %s' % int32_to_str( obj.chip0ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip1ID: %s' % int32_to_str( obj.chip1ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip2ID: %s' % int32_to_str( obj.chip2ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip3ID: %s' % int32_to_str( obj.chip3ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chipCount: %s' % int32_to_str( obj.chipCount() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeed:\n'
    methodStr += enum_to_str(obj.readoutSpeed(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'triggerMode:\n'
    methodStr += enum_to_str(obj.triggerMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Timepix_ConfigV3_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Timepix.ConfigV3.TypeId
    assert obj.Version == psana.Timepix.ConfigV3.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timepixSpeed: %s' % int32_to_str( obj.timepixSpeed() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ikrum: %s' % int32_to_str( obj.dac0Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Disc: %s' % int32_to_str( obj.dac0Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Preamp: %s' % int32_to_str( obj.dac0Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogA: %s' % int32_to_str( obj.dac0BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BufAnalogB: %s' % int32_to_str( obj.dac0BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Hist: %s' % int32_to_str( obj.dac0Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlFine: %s' % int32_to_str( obj.dac0ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0ThlCourse: %s' % int32_to_str( obj.dac0ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Vcas: %s' % int32_to_str( obj.dac0Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Fbk: %s' % int32_to_str( obj.dac0Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Gnd: %s' % int32_to_str( obj.dac0Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0Ths: %s' % int32_to_str( obj.dac0Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0BiasLvds: %s' % int32_to_str( obj.dac0BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac0RefLvds: %s' % int32_to_str( obj.dac0RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ikrum: %s' % int32_to_str( obj.dac1Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Disc: %s' % int32_to_str( obj.dac1Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Preamp: %s' % int32_to_str( obj.dac1Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogA: %s' % int32_to_str( obj.dac1BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BufAnalogB: %s' % int32_to_str( obj.dac1BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Hist: %s' % int32_to_str( obj.dac1Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlFine: %s' % int32_to_str( obj.dac1ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1ThlCourse: %s' % int32_to_str( obj.dac1ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Vcas: %s' % int32_to_str( obj.dac1Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Fbk: %s' % int32_to_str( obj.dac1Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Gnd: %s' % int32_to_str( obj.dac1Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1Ths: %s' % int32_to_str( obj.dac1Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1BiasLvds: %s' % int32_to_str( obj.dac1BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac1RefLvds: %s' % int32_to_str( obj.dac1RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ikrum: %s' % int32_to_str( obj.dac2Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Disc: %s' % int32_to_str( obj.dac2Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Preamp: %s' % int32_to_str( obj.dac2Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogA: %s' % int32_to_str( obj.dac2BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BufAnalogB: %s' % int32_to_str( obj.dac2BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Hist: %s' % int32_to_str( obj.dac2Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlFine: %s' % int32_to_str( obj.dac2ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2ThlCourse: %s' % int32_to_str( obj.dac2ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Vcas: %s' % int32_to_str( obj.dac2Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Fbk: %s' % int32_to_str( obj.dac2Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Gnd: %s' % int32_to_str( obj.dac2Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2Ths: %s' % int32_to_str( obj.dac2Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2BiasLvds: %s' % int32_to_str( obj.dac2BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac2RefLvds: %s' % int32_to_str( obj.dac2RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ikrum: %s' % int32_to_str( obj.dac3Ikrum() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Disc: %s' % int32_to_str( obj.dac3Disc() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Preamp: %s' % int32_to_str( obj.dac3Preamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogA: %s' % int32_to_str( obj.dac3BufAnalogA() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BufAnalogB: %s' % int32_to_str( obj.dac3BufAnalogB() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Hist: %s' % int32_to_str( obj.dac3Hist() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlFine: %s' % int32_to_str( obj.dac3ThlFine() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3ThlCourse: %s' % int32_to_str( obj.dac3ThlCourse() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Vcas: %s' % int32_to_str( obj.dac3Vcas() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Fbk: %s' % int32_to_str( obj.dac3Fbk() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Gnd: %s' % int32_to_str( obj.dac3Gnd() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3Ths: %s' % int32_to_str( obj.dac3Ths() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3BiasLvds: %s' % int32_to_str( obj.dac3BiasLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dac3RefLvds: %s' % int32_to_str( obj.dac3RefLvds() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'dacBias: %s' % int8_to_str( obj.dacBias() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'flags: %s' % int8_to_str( obj.flags() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'driverVersion: %s' % int32_to_str( obj.driverVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'firmwareVersion: %s' % uint32_to_str( obj.firmwareVersion() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelThreshSize: %s' % uint32_to_str( obj.pixelThreshSize() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'pixelThresh: %s' % ndarray_to_str( obj.pixelThresh() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip0Name: %s' % str_to_str( obj.chip0Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip1Name: %s' % str_to_str( obj.chip1Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip2Name: %s' % str_to_str( obj.chip2Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip3Name: %s' % str_to_str( obj.chip3Name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip0ID: %s' % int32_to_str( obj.chip0ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip1ID: %s' % int32_to_str( obj.chip1ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip2ID: %s' % int32_to_str( obj.chip2ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chip3ID: %s' % int32_to_str( obj.chip3ID() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'chipCount: %s' % int32_to_str( obj.chipCount() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'readoutSpeed:\n'
    methodStr += enum_to_str(obj.readoutSpeed(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'timepixMode:\n'
    methodStr += enum_to_str(obj.timepixMode(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Timepix_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Timepix.DataV1.TypeId
    assert obj.Version == psana.Timepix.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % uint32_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameCounter: %s' % uint16_to_str( obj.frameCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lostRows: %s' % uint16_to_str( obj.lostRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint32_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint32_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth: %s' % uint32_to_str( obj.depth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth_bytes: %s' % uint32_to_str( obj.depth_bytes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data_size: %s' % uint32_to_str( obj.data_size() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def Timepix_DataV2_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.Timepix.DataV2.TypeId
    assert obj.Version == psana.Timepix.DataV2.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'width: %s' % uint16_to_str( obj.width() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'height: %s' % uint16_to_str( obj.height() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % uint32_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'frameCounter: %s' % uint16_to_str( obj.frameCounter() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'lostRows: %s' % uint16_to_str( obj.lostRows() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data: %s' % ndarray_to_str( obj.data() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth: %s' % uint32_to_str( obj.depth() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'depth_bytes: %s' % uint32_to_str( obj.depth_bytes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'data_size: %s' % uint32_to_str( obj.data_size() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def TimeTool_EventLogic_to_str(obj, indent, lvl, methodSep):
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'event_code: %s' % uint8_to_str( obj.event_code() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'logic_op:\n'
    methodStr += enum_to_str(obj.logic_op(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def TimeTool_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.TimeTool.ConfigV1.TypeId
    assert obj.Version == psana.TimeTool.ConfigV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_beam_event_codes: %s' % uint16_to_str( obj.number_of_beam_event_codes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_laser_event_codes: %s' % uint16_to_str( obj.number_of_laser_event_codes() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'signal_cut: %s' % uint32_to_str( obj.signal_cut() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_convergence: %s' % double_to_str( obj.sb_convergence() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ref_convergence: %s' % double_to_str( obj.ref_convergence() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'weights: %s' % ndarray_to_str( obj.weights() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calib_poly: %s' % ndarray_to_str( obj.calib_poly() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'base_name: %s' % str_to_str( obj.base_name() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'write_image: %s' % uint8_to_str( obj.write_image() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'write_projections: %s' % uint8_to_str( obj.write_projections() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'subtract_sideband: %s' % uint8_to_str( obj.subtract_sideband() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'number_of_weights: %s' % uint16_to_str( obj.number_of_weights() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'calib_poly_dim: %s' % uint8_to_str( obj.calib_poly_dim() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'base_name_length: %s' % uint8_to_str( obj.base_name_length() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'signal_projection_size: %s' % uint32_to_str( obj.signal_projection_size() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'sideband_projection_size: %s' % uint32_to_str( obj.sideband_projection_size() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'sig_roi_lo:\n'
    methodStr += Camera_FrameCoord_to_str(obj.sig_roi_lo(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'sig_roi_hi:\n'
    methodStr += Camera_FrameCoord_to_str(obj.sig_roi_hi(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_roi_lo:\n'
    methodStr += Camera_FrameCoord_to_str(obj.sb_roi_lo(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'sb_roi_hi:\n'
    methodStr += Camera_FrameCoord_to_str(obj.sb_roi_hi(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStr = doIndent(indent, lvl)
    methodStr += 'project_axis:\n'
    methodStr += enum_to_str(obj.project_axis(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    # list_multi_line_methods
    subMethodStrs = []
    for idx, subObj in enumerate( obj.beam_logic() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'beam_logic[%d]:\n' % idx
        subMethodStr += TimeTool_EventLogic_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    subMethodStrs = []
    for idx, subObj in enumerate( obj.laser_logic() ):
        subMethodStr = doIndent(indent, lvl)
        subMethodStr += 'laser_logic[%d]:\n' % idx
        subMethodStr += TimeTool_EventLogic_to_str(subObj, indent, lvl+1, methodSep)
        subMethodStrs.append(subMethodStr)
    methodStr = '\n'.join(subMethodStrs)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def TimeTool_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.TimeTool.DataV1.TypeId
    assert obj.Version == psana.TimeTool.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'amplitude: %s' % double_to_str( obj.amplitude() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'position_pixel: %s' % double_to_str( obj.position_pixel() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'position_time: %s' % double_to_str( obj.position_time() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'position_fwhm: %s' % double_to_str( obj.position_fwhm() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'ref_amplitude: %s' % double_to_str( obj.ref_amplitude() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'nxt_amplitude: %s' % double_to_str( obj.nxt_amplitude() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'projected_signal: %s' % ndarray_to_str( obj.projected_signal() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'projected_sideband: %s' % ndarray_to_str( obj.projected_sideband() )
    methodStrings.append(methodStr)                                 
    # multi_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'event_type:\n'
    methodStr += enum_to_str(obj.event_type(), indent, lvl+1, methodSep)
    methodStrings.append(methodStr)
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def UsdUsb_ConfigV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.UsdUsb.ConfigV1.TypeId
    assert obj.Version == psana.UsdUsb.ConfigV1.Version
    methodStrings = []
    # idx_list_one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'counting_mode'
    try:
       for idx in range( 4 ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( obj.counting_mode(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.counting_mode() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( subObj )
       methodStrings.append( methodStr )
    methodStr = doIndent(indent, lvl)
    methodStr += 'quadrature_mode'
    try:
       for idx in range( 4 ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( obj.quadrature_mode(idx) )
       methodStrings.append( methodStr )
    except:
       for idx, subObj in enumerate( obj.quadrature_mode() ):
            methodStr += ' [%d]' % idx
            methodStr += '=%s' % enum_to_str( subObj )
       methodStrings.append( methodStr )
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)

def UsdUsb_DataV1_to_str(obj, indent, lvl, methodSep):
    assert obj.TypeId == psana.UsdUsb.DataV1.TypeId
    assert obj.Version == psana.UsdUsb.DataV1.Version
    methodStrings = []
    # one_line_methods
    methodStr = doIndent(indent, lvl)
    methodStr += 'digital_in: %s' % uint8_to_str( obj.digital_in() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'timestamp: %s' % uint32_to_str( obj.timestamp() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'status: %s' % ndarray_to_str( obj.status() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'analog_in: %s' % ndarray_to_str( obj.analog_in() )
    methodStrings.append(methodStr)                                 
    methodStr = doIndent(indent, lvl)
    methodStr += 'encoder_count: %s' % ndarray_to_str( obj.encoder_count() )
    methodStrings.append(methodStr)                                 
    methodStrings = [meth for meth in methodStrings if len(meth)>0]
    return methodSep.join(methodStrings)


# dispatch table
objFunctionTable = {
    (psana.Acqiris.ConfigV1.TypeId,1) : Acqiris_ConfigV1_to_str,
    (psana.Acqiris.DataDescV1.TypeId,1) : Acqiris_DataDescV1_to_str,
    (psana.Acqiris.TdcConfigV1.TypeId,1) : Acqiris_TdcConfigV1_to_str,
    (psana.Acqiris.TdcDataV1.TypeId,1) : Acqiris_TdcDataV1_to_str,
    (psana.Alias.ConfigV1.TypeId,1) : Alias_ConfigV1_to_str,
    (psana.Andor.ConfigV1.TypeId,1) : Andor_ConfigV1_to_str,
    (psana.Andor.FrameV1.TypeId,1) : Andor_FrameV1_to_str,
    (psana.Arraychar.DataV1.TypeId,1) : Arraychar_DataV1_to_str,
    (psana.Bld.BldDataAcqADCV1.TypeId,1) : Bld_BldDataAcqADCV1_to_str,
    (psana.Bld.BldDataEBeamV0.TypeId,0) : Bld_BldDataEBeamV0_to_str,
    (psana.Bld.BldDataEBeamV1.TypeId,1) : Bld_BldDataEBeamV1_to_str,
    (psana.Bld.BldDataEBeamV2.TypeId,2) : Bld_BldDataEBeamV2_to_str,
    (psana.Bld.BldDataEBeamV3.TypeId,3) : Bld_BldDataEBeamV3_to_str,
    (psana.Bld.BldDataEBeamV4.TypeId,4) : Bld_BldDataEBeamV4_to_str,
    (psana.Bld.BldDataEBeamV5.TypeId,5) : Bld_BldDataEBeamV5_to_str,
    (psana.Bld.BldDataEBeamV6.TypeId,6) : Bld_BldDataEBeamV6_to_str,
    (psana.Bld.BldDataFEEGasDetEnergy.TypeId,0) : Bld_BldDataFEEGasDetEnergy_to_str,
    (psana.Bld.BldDataFEEGasDetEnergyV1.TypeId,1) : Bld_BldDataFEEGasDetEnergyV1_to_str,
    (psana.Bld.BldDataGMDV0.TypeId,0) : Bld_BldDataGMDV0_to_str,
    (psana.Bld.BldDataGMDV1.TypeId,1) : Bld_BldDataGMDV1_to_str,
    (psana.Bld.BldDataGMDV2.TypeId,2) : Bld_BldDataGMDV2_to_str,
    (psana.Bld.BldDataIpimbV0.TypeId,0) : Bld_BldDataIpimbV0_to_str,
    (psana.Bld.BldDataIpimbV1.TypeId,1) : Bld_BldDataIpimbV1_to_str,
    (psana.Bld.BldDataPhaseCavity.TypeId,0) : Bld_BldDataPhaseCavity_to_str,
    (psana.Bld.BldDataPimV1.TypeId,1) : Bld_BldDataPimV1_to_str,
    (psana.Bld.BldDataSpectrometerV0.TypeId,0) : Bld_BldDataSpectrometerV0_to_str,
    (psana.Bld.BldDataSpectrometerV1.TypeId,1) : Bld_BldDataSpectrometerV1_to_str,
    (psana.Camera.FrameFccdConfigV1.TypeId,1) : Camera_FrameFccdConfigV1_to_str,
    (psana.Camera.FrameFexConfigV1.TypeId,1) : Camera_FrameFexConfigV1_to_str,
    (psana.Camera.FrameV1.TypeId,1) : Camera_FrameV1_to_str,
    (psana.Camera.TwoDGaussianV1.TypeId,1) : Camera_TwoDGaussianV1_to_str,
    (psana.ControlData.ConfigV1.TypeId,1) : ControlData_ConfigV1_to_str,
    (psana.ControlData.ConfigV2.TypeId,2) : ControlData_ConfigV2_to_str,
    (psana.ControlData.ConfigV3.TypeId,3) : ControlData_ConfigV3_to_str,
    (psana.CsPad.ConfigV1.TypeId,1) : CsPad_ConfigV1_to_str,
    (psana.CsPad.ConfigV2.TypeId,2) : CsPad_ConfigV2_to_str,
    (psana.CsPad.ConfigV3.TypeId,3) : CsPad_ConfigV3_to_str,
    (psana.CsPad.ConfigV4.TypeId,4) : CsPad_ConfigV4_to_str,
    (psana.CsPad.ConfigV5.TypeId,5) : CsPad_ConfigV5_to_str,
    (psana.CsPad.DataV1.TypeId,1) : CsPad_DataV1_to_str,
    (psana.CsPad.DataV2.TypeId,2) : CsPad_DataV2_to_str,
    (psana.CsPad2x2.ConfigV1.TypeId,1) : CsPad2x2_ConfigV1_to_str,
    (psana.CsPad2x2.ConfigV2.TypeId,2) : CsPad2x2_ConfigV2_to_str,
    (psana.CsPad2x2.ElementV1.TypeId,1) : CsPad2x2_ElementV1_to_str,
    (psana.Encoder.ConfigV1.TypeId,1) : Encoder_ConfigV1_to_str,
    (psana.Encoder.ConfigV2.TypeId,2) : Encoder_ConfigV2_to_str,
    (psana.Encoder.DataV1.TypeId,1) : Encoder_DataV1_to_str,
    (psana.Encoder.DataV2.TypeId,2) : Encoder_DataV2_to_str,
    (psana.Epix.Config100aV1.TypeId,1) : Epix_Config100aV1_to_str,
    (psana.Epix.Config10KV1.TypeId,1) : Epix_Config10KV1_to_str,
    (psana.Epix.ConfigV1.TypeId,1) : Epix_ConfigV1_to_str,
    (psana.Epix.ElementV1.TypeId,1) : Epix_ElementV1_to_str,
    (psana.Epix.ElementV2.TypeId,2) : Epix_ElementV2_to_str,
    (psana.EpixSampler.ConfigV1.TypeId,1) : EpixSampler_ConfigV1_to_str,
    (psana.EpixSampler.ElementV1.TypeId,1) : EpixSampler_ElementV1_to_str,
    (psana.EvrData.ConfigV1.TypeId,1) : EvrData_ConfigV1_to_str,
    (psana.EvrData.ConfigV2.TypeId,2) : EvrData_ConfigV2_to_str,
    (psana.EvrData.ConfigV3.TypeId,3) : EvrData_ConfigV3_to_str,
    (psana.EvrData.ConfigV4.TypeId,4) : EvrData_ConfigV4_to_str,
    (psana.EvrData.ConfigV5.TypeId,5) : EvrData_ConfigV5_to_str,
    (psana.EvrData.ConfigV6.TypeId,6) : EvrData_ConfigV6_to_str,
    (psana.EvrData.ConfigV7.TypeId,7) : EvrData_ConfigV7_to_str,
    (psana.EvrData.DataV3.TypeId,3) : EvrData_DataV3_to_str,
    (psana.EvrData.IOConfigV1.TypeId,1) : EvrData_IOConfigV1_to_str,
    (psana.EvrData.IOConfigV2.TypeId,2) : EvrData_IOConfigV2_to_str,
    (psana.EvrData.SrcConfigV1.TypeId,1) : EvrData_SrcConfigV1_to_str,
    (psana.FCCD.FccdConfigV1.TypeId,1) : FCCD_FccdConfigV1_to_str,
    (psana.FCCD.FccdConfigV2.TypeId,2) : FCCD_FccdConfigV2_to_str,
    (psana.Fli.ConfigV1.TypeId,1) : Fli_ConfigV1_to_str,
    (psana.Fli.FrameV1.TypeId,1) : Fli_FrameV1_to_str,
    (psana.GenericPgp.ConfigV1.TypeId,1) : GenericPgp_ConfigV1_to_str,
    (psana.Gsc16ai.ConfigV1.TypeId,1) : Gsc16ai_ConfigV1_to_str,
    (psana.Gsc16ai.DataV1.TypeId,1) : Gsc16ai_DataV1_to_str,
    (psana.Imp.ConfigV1.TypeId,1) : Imp_ConfigV1_to_str,
    (psana.Imp.ElementV1.TypeId,1) : Imp_ElementV1_to_str,
    (psana.Ipimb.ConfigV1.TypeId,1) : Ipimb_ConfigV1_to_str,
    (psana.Ipimb.ConfigV2.TypeId,2) : Ipimb_ConfigV2_to_str,
    (psana.Ipimb.DataV1.TypeId,1) : Ipimb_DataV1_to_str,
    (psana.Ipimb.DataV2.TypeId,2) : Ipimb_DataV2_to_str,
    (psana.L3T.ConfigV1.TypeId,1) : L3T_ConfigV1_to_str,
    (psana.L3T.DataV1.TypeId,1) : L3T_DataV1_to_str,
    (psana.L3T.DataV2.TypeId,2) : L3T_DataV2_to_str,
    (psana.Lusi.DiodeFexConfigV1.TypeId,1) : Lusi_DiodeFexConfigV1_to_str,
    (psana.Lusi.DiodeFexConfigV2.TypeId,2) : Lusi_DiodeFexConfigV2_to_str,
    (psana.Lusi.DiodeFexV1.TypeId,1) : Lusi_DiodeFexV1_to_str,
    (psana.Lusi.IpmFexConfigV1.TypeId,1) : Lusi_IpmFexConfigV1_to_str,
    (psana.Lusi.IpmFexConfigV2.TypeId,2) : Lusi_IpmFexConfigV2_to_str,
    (psana.Lusi.IpmFexV1.TypeId,1) : Lusi_IpmFexV1_to_str,
    (psana.Lusi.PimImageConfigV1.TypeId,1) : Lusi_PimImageConfigV1_to_str,
    (psana.OceanOptics.ConfigV1.TypeId,1) : OceanOptics_ConfigV1_to_str,
    (psana.OceanOptics.ConfigV2.TypeId,2) : OceanOptics_ConfigV2_to_str,
    (psana.OceanOptics.DataV1.TypeId,1) : OceanOptics_DataV1_to_str,
    (psana.OceanOptics.DataV2.TypeId,2) : OceanOptics_DataV2_to_str,
    (psana.Opal1k.ConfigV1.TypeId,1) : Opal1k_ConfigV1_to_str,
    (psana.Orca.ConfigV1.TypeId,1) : Orca_ConfigV1_to_str,
    (psana.PNCCD.ConfigV1.TypeId,1) : PNCCD_ConfigV1_to_str,
    (psana.PNCCD.ConfigV2.TypeId,2) : PNCCD_ConfigV2_to_str,
    (psana.PNCCD.FramesV1.TypeId,1) : PNCCD_FramesV1_to_str,
    (psana.Partition.ConfigV1.TypeId,1) : Partition_ConfigV1_to_str,
    (psana.Pimax.ConfigV1.TypeId,1) : Pimax_ConfigV1_to_str,
    (psana.Pimax.FrameV1.TypeId,1) : Pimax_FrameV1_to_str,
    (psana.Princeton.ConfigV1.TypeId,1) : Princeton_ConfigV1_to_str,
    (psana.Princeton.ConfigV2.TypeId,2) : Princeton_ConfigV2_to_str,
    (psana.Princeton.ConfigV3.TypeId,3) : Princeton_ConfigV3_to_str,
    (psana.Princeton.ConfigV4.TypeId,4) : Princeton_ConfigV4_to_str,
    (psana.Princeton.ConfigV5.TypeId,5) : Princeton_ConfigV5_to_str,
    (psana.Princeton.FrameV1.TypeId,1) : Princeton_FrameV1_to_str,
    (psana.Princeton.FrameV2.TypeId,2) : Princeton_FrameV2_to_str,
    (psana.Princeton.InfoV1.TypeId,1) : Princeton_InfoV1_to_str,
    (psana.Pulnix.TM6740ConfigV1.TypeId,1) : Pulnix_TM6740ConfigV1_to_str,
    (psana.Pulnix.TM6740ConfigV2.TypeId,2) : Pulnix_TM6740ConfigV2_to_str,
    (psana.Quartz.ConfigV1.TypeId,1) : Quartz_ConfigV1_to_str,
    (psana.Rayonix.ConfigV1.TypeId,1) : Rayonix_ConfigV1_to_str,
    (psana.Rayonix.ConfigV2.TypeId,2) : Rayonix_ConfigV2_to_str,
    (psana.TimeTool.ConfigV1.TypeId,1) : TimeTool_ConfigV1_to_str,
    (psana.TimeTool.DataV1.TypeId,1) : TimeTool_DataV1_to_str,
    (psana.Timepix.ConfigV1.TypeId,1) : Timepix_ConfigV1_to_str,
    (psana.Timepix.ConfigV2.TypeId,2) : Timepix_ConfigV2_to_str,
    (psana.Timepix.ConfigV3.TypeId,3) : Timepix_ConfigV3_to_str,
    (psana.Timepix.DataV1.TypeId,1) : Timepix_DataV1_to_str,
    (psana.Timepix.DataV2.TypeId,2) : Timepix_DataV2_to_str,
    (psana.UsdUsb.ConfigV1.TypeId,1) : UsdUsb_ConfigV1_to_str,
    (psana.UsdUsb.DataV1.TypeId,1) : UsdUsb_DataV1_to_str,
} # end dispatch table


#########################################
# The primary high level function that users can call to dump a psana object to a string
def obj2str(obj, indent=0, lvl=0, methodsep='\n'):
    if hasattr(obj,'TypeId'):
        if obj.TypeId is not None:
            if obj.TypeId == 54:
                return doIndent(indent,lvl) + 'epicsConfig not dumped'
            if obj.TypeId == 11 and type(obj) == psana.PNCCD.FullFrameV1:
                return doIndent(indent,lvl) + 'PNCCD.FullFramesV1 not dumped'
        if hasattr(obj,'Version'):
            if obj.Version is not None:
              fnKey = (obj.TypeId, obj.Version)
              dump_function = objFunctionTable.get(fnKey,None)
              assert dump_function is not None, "obj2str - no dump function found for obj=%r typeid/version=%s" % (obj,fnKey,)
              return dump_function(obj, indent, lvl, methodsep)
    # check for an ndarray that we know how to convert
    if isinstance(obj,np.ndarray):
        fnCvt = getTypeFn(obj.dtype)
        if fnCvt is not None:
            return ndarray_to_str(obj, indent, lvl)
    # default to Python str
    return str(obj)
