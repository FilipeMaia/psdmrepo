#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script pyxtcreader...
#
#------------------------------------------------------------------------

"""Scanner for XTC files, reads everything and dumps the content of XTCs.

This software was developed for the LUSI project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@version $Id$ 

@author Andrei Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision$"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os
import logging
from optparse import OptionParser

#-----------------------------
# Imports for other modules --
#-----------------------------
from pypdsdata import io
from pypdsdata.xtc import *

#---------------------
# Local definitions --
#---------------------

def _scan( xtc, offset=1, verbose=0 ) :
    
    pfx = "  "*offset
    level = xtc.src.level()
    print "%s%s level: payloadSize=%d damage=%#x src=%s" % \
            ( pfx, level, xtc.sizeofPayload(), xtc.damage.value(), xtc.src ),
    print "contains=%s" % xtc.contains

    if xtc.sizeofPayload() < 0 :
        return
    
    # some kind of damage may break even 'contains'
    if xtc.damage.hasDamage(Damage.Value.IncompleteContribution) :
        return
    
    if xtc.contains.id() == TypeId.Type.Id_Xtc :
        for x in xtc :
            _scan( x, offset+1, verbose )
    else :
        if verbose > 0:
            try:
                data = xtc.payload()
                print "%s  Payload: %s" % ( pfx, data )
            except:
                pass

#---------------------------------
#  Application class definition --
#---------------------------------

def main( argv ) :

    parser = OptionParser(usage="%prog [options] xtc-files ...")
    parser.set_defaults(verbose=0, l1_offset=0)
    parser.add_option('-v', "--verbose", action='count')
    parser.add_option('-l', "--l1-offset", type='float')

    (options, args) = parser.parse_args()
    verbose = options.verbose
    
    if not args :
        parser.error("at least one file name required")

    logging.basicConfig(level=logging.INFO)

    # read datagrams one by one
    xtciter = io.XtcMergeIterator( args, options.l1_offset )
    for dg in xtciter :

        if verbose > 1 :
            print "file: %s, pos: %d, run: %s" % (xtciter.fileName(), xtciter.fpos(), xtciter.fileName().run()) 

        seq = dg.seq
        clock = seq.clock()
        stamp = seq.stamp()
        xtc = dg.xtc
        
        l3t = ""
        trimmed = ""
        if seq.service() == TransitionId.L1Accept:
            l3t = "l3t=%s, " % str(dg.env.l3t_result()).split('.')[-1]
            if dg.env.trimmed() : trimmed = "trimmed, "

        # print datagram info
        print "%s transition: damage=%#x, type=%d, %s%stime=%u.%09u, ticks=%u, fiducials=%u, control=%u, vector=%d, payloadSize=%d" \
            % ( seq.service(), xtc.damage.value(), seq.type(), l3t, trimmed, clock.seconds(), clock.nanoseconds(),
                stamp.ticks(), stamp.fiducials(), stamp.control(), stamp.vector(), xtc.sizeofPayload() )

        # recursively dump Xtc info
        _scan ( xtc, verbose=verbose )
        
        
#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    try:
        sys.exit( main(sys.argv) )
    except IOError, ex:
        # Filter out broken pipe from redirection
        if ex.errno != 32 : raise
