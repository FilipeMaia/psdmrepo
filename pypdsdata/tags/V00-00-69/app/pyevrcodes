#!@PYTHON@
#--------------------------------------------------------------------------
# File and Version Information:
#  $Id$
#
# Description:
#  Script pyxtcreader...
#
#------------------------------------------------------------------------

"""Scanner for XTC files, reads everything and dumps the content of XTCs.

This software was developed for the LUSI project.  If you use all or 
part of it, please give an appropriate acknowledgement.

@see RelatedModule

@version $Id$ 

@author Andrei Salnikov
"""

#------------------------------
#  Module's version from CVS --
#------------------------------
__version__ = "$Revision$"
# $Source$

#--------------------------------
#  Imports of standard modules --
#--------------------------------
import sys
import os
import logging
from optparse import OptionParser

#-----------------------------
# Imports for other modules --
#-----------------------------
from pypdsdata import io
from pypdsdata.xtc import *

#---------------------
# Local definitions --
#---------------------

_event = 0
_no_140 = 0

def _scan( xtc, verbose=0 ) :
    
    # some kind of damage may break even 'contains'
    if xtc.damage.hasDamage(Damage.Value.IncompleteContribution) :
        return
    
    if xtc.contains.id() == TypeId.Type.Id_Xtc :
        for x in xtc :
            _scan( x, verbose )
    elif xtc.contains.id() == TypeId.Type.Id_EvrData:
        evr = xtc.payload()
        out = "%d:" % _event
        for i in range(evr.numFifoEvents()):
            ev = evr.fifoEvent(i)
            if ev.EventCode == 140 and _no_140 : continue
            out += " %d" % ev.EventCode
        print out

#---------------------------------
#  Application class definition --
#---------------------------------

def main( argv ) :

    global _event
    global _no_140

    parser = OptionParser(usage="%prog [options] xtc-files ...")
    parser.set_defaults(verbose=0, no_140=False, all_datagrams=False)
    parser.add_option('-v', "--verbose", action='count',)
    parser.add_option('-a', "--all-datagrams", action='store_true', 
                      help="Count all datagrams, not just L1Accept")
    parser.add_option('-r', "--no-140", action='store_true', 
                      help="Do not print regular code (code 140)")

    (options, args) = parser.parse_args()
    verbose = options.verbose
    _no_140 = options.no_140
    
    if not args :
        parser.error("at least one file name required")

    logging.basicConfig(level=logging.INFO)

    # read datagrams one by one
    xtciter = io.XtcMergeIterator( args )
    for dg in xtciter :

        if verbose > 1 :
            print "file: %s, pos: %d, run: %s" % (xtciter.fileName(), xtciter.fpos(), xtciter.run()) 

        seq = dg.seq
        clock = seq.clock()
        stamp = seq.stamp()
        xtc = dg.xtc

        if options.all_datagrams or seq.service() == TransitionId.L1Accept :
            # recursively scan Xtc
            _scan ( xtc, verbose=verbose )
            
            _event += 1
        
        
#
#  run application when imported as a main module
#
if __name__ == "__main__" :
    try:
        sys.exit( main(sys.argv) )
    except IOError, ex:
        # Filter out broken pipe from redirection
        if ex.errno != 32 : raise
